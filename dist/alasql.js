//
// alasql.js
// Alasql - JavaScript SQL database
// Date: 29.11.2014
// Version: 0.0.27
// (Ã±) 2014, Andrey Gershun
//

/*
The MIT License (MIT)

Copyright (c) 2014 Andrey Gershun (agershun@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

//  UMD header
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.alasql = factory();
    }
}(this, function () {

// Main function
alasql = function(sql, params, cb, scope) {
	return alasql.exec(sql, params, cb, scope);
};

alasql.version = "0.0.29";



/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,9],$V1=[2,9],$V2=[1,107],$V3=[1,108],$V4=[1,27],$V5=[1,80],$V6=[1,85],$V7=[1,87],$V8=[1,86],$V9=[1,77],$Va=[1,78],$Vb=[1,99],$Vc=[1,97],$Vd=[1,98],$Ve=[1,100],$Vf=[1,101],$Vg=[1,102],$Vh=[1,103],$Vi=[1,104],$Vj=[1,105],$Vk=[1,106],$Vl=[1,88],$Vm=[1,89],$Vn=[1,90],$Vo=[1,91],$Vp=[1,95],$Vq=[1,92],$Vr=[1,93],$Vs=[1,94],$Vt=[1,96],$Vu=[1,84],$Vv=[1,83],$Vw=[1,53],$Vx=[1,58],$Vy=[1,43],$Vz=[1,45],$VA=[1,42],$VB=[1,44],$VC=[1,40],$VD=[1,46],$VE=[1,41],$VF=[1,52],$VG=[1,48],$VH=[1,59],$VI=[1,60],$VJ=[1,62],$VK=[1,61],$VL=[1,54],$VM=[1,56],$VN=[1,57],$VO=[1,50],$VP=[1,51],$VQ=[1,49],$VR=[8,9,77,83,106,107,117,118,119,120,126],$VS=[1,148],$VT=[1,145],$VU=[1,146],$VV=[1,147],$VW=[1,149],$VX=[1,150],$VY=[1,151],$VZ=[1,152],$V_=[1,153],$V$=[1,154],$V01=[1,155],$V11=[1,156],$V21=[1,157],$V31=[1,158],$V41=[1,159],$V51=[1,160],$V61=[1,161],$V71=[1,163],$V81=[1,164],$V91=[1,166],$Va1=[1,165],$Vb1=[1,167],$Vc1=[1,168],$Vd1=[1,172],$Ve1=[1,178],$Vf1=[1,179],$Vg1=[1,180],$Vh1=[4,5,82,130,133,142,144,147,148,150,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,179,197],$Vi1=[2,59],$Vj1=[1,196],$Vk1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,133,163,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200],$Vl1=[1,200],$Vm1=[4,5,62,65,66,72,82,130,133,142,144,147,148,150,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,179,197],$Vn1=[2,154],$Vo1=[1,207],$Vp1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,133,163,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,211,223,238,241,250,285,287],$Vq1=[2,197],$Vr1=[1,218],$Vs1=[4,5,8,9,65,67,74,77,81,82,83,84,86,89,93,94,95,96,97,98,99,100,101,102,104,106,107,116,117,118,119,120,123,124,126,130,133,163,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,204,209,211,222,223,224,238,239,241,243,246,247,250,251,254,255,256,257,259,263,269,285,287],$Vt1=[4,5],$Vu1=[2,294],$Vv1=[1,228],$Vw1=[2,333],$Vx1=[1,237],$Vy1=[8,9,83,106,107,117,118,119,120,126],$Vz1=[2,81],$VA1=[1,258],$VB1=[66,201,202],$VC1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,133,163,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,285,287],$VD1=[1,298],$VE1=[1,297],$VF1=[1,296],$VG1=[81,287],$VH1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,163,172,174,175,176,177,178,179,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200],$VI1=[2,209],$VJ1=[1,326],$VK1=[172,174,176],$VL1=[1,330],$VM1=[1,331],$VN1=[8,9,82,84],$VO1=[8,9,83,107,117,118,119,120,126],$VP1=[1,362],$VQ1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,133,163,172,174,175,176,177,178,179,180,181,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200],$VR1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,163,172,174,175,176,183,184,185,186,187,188,189,190,191,192,195,196,199,200],$VS1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,163,172,174,175,176,196,199,200],$VT1=[81,285],$VU1=[8,9,74,77,83,106,107,117,118,119,120,126],$VV1=[1,395],$VW1=[8,9,74,77,81,83,106,107,117,118,119,120,126],$VX1=[1,404],$VY1=[4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,102,104,106,107,116,117,118,119,120,123,124,126,130,133,163,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,211,223,238,241,250],$VZ1=[81,83],$V_1=[2,153],$V$1=[8,9,81,83,197,211,223,238,241,250],$V02=[1,434],$V12=[1,435],$V22=[8,9,83,117,118,119,120,126],$V32=[8,9,81,83,106,107,117,118,119,120,126],$V42=[2,97],$V52=[1,449],$V62=[1,450],$V72=[1,451],$V82=[1,453],$V92=[1,452],$Va2=[1,454],$Vb2=[1,455],$Vc2=[1,456],$Vd2=[1,457],$Ve2=[8,9,81,83,89,93,94,95,96,97,98,99,100,101,106,107,117,118,119,120,126],$Vf2=[8,9,81,106],$Vg2=[8,9,81,83,89,93,94,95,96,97,98,99,100,101,106,107,117,118,119,120,126,187],$Vh2=[2,80],$Vi2=[2,346],$Vj2=[1,510],$Vk2=[1,519],$Vl2=[1,520],$Vm2=[8,9,81],$Vn2=[1,524],$Vo2=[8,9,83,117,118,119,126],$Vp2=[8,9,83,89,93,94,95,96,97,98,99,100,101,106,107,117,118,119,120,126],$Vq2=[1,557],$Vr2=[8,9,83,117,118,119],$Vs2=[1,582],$Vt2=[1,583],$Vu2=[1,584],$Vv2=[8,9,81,83],$Vw2=[1,606],$Vx2=[1,605],$Vy2=[1,603],$Vz2=[1,601],$VA2=[1,602],$VB2=[1,604],$VC2=[1,613],$VD2=[1,614],$VE2=[1,615],$VF2=[1,616],$VG2=[65,238,239,241,243],$VH2=[2,305],$VI2=[1,621],$VJ2=[8,9,83],$VK2=[1,635],$VL2=[8,9,81,83,116,117,118,119,120,126],$VM2=[8,9,83,89,93,94,95,96,97,98,99,100,101,102,104,106,107,117,118,119,120,126],$VN2=[8,9,211,222,223,224],$VO2=[8,9,81,83,117,118,119,126];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"main":6,"Statements":7,"EOF":8,"SEMICOLON":9,"Statement":10,"ExplainStatement":11,"EXPLAIN":12,"QUERY":13,"PLAN":14,"AlterTable":15,"AttachDatabase":16,"CreateDatabase":17,"CreateIndex":18,"CreateTable":19,"CreateView":20,"Delete":21,"DropDatabase":22,"DropIndex":23,"DropTable":24,"DropView":25,"Insert":26,"RenameTable":27,"Select":28,"ShowCreateTable":29,"ShowColumns":30,"ShowDatabases":31,"ShowIndex":32,"ShowTables":33,"BeginTransaction":34,"CommitTransaction":35,"RollbackTransaction":36,"EndTransaction":37,"UseDatabase":38,"Update":39,"Help":40,"ExpressionStatement":41,"Source":42,"Assert":43,"SetVariable":44,"DeclareCursor":45,"OpenCursor":46,"FetchCursor":47,"CloseCursor":48,"WithSelectClause":49,"WITH":50,"WithTables":51,"RECURSIVE":52,"SelectClause":53,"IntoClause":54,"FromClause":55,"WhereClause":56,"GroupClause":57,"OrderClause":58,"LimitClause":59,"UnionClause":60,"SelectModifier":61,"DISTINCT":62,"TopClause":63,"ResultColumns":64,"UNIQUE":65,"ALL":66,"SELECT":67,"VALUE":68,"ROW":69,"COLUMN":70,"MATRIX":71,"TOP":72,"NumValue":73,"INTO":74,"Table":75,"FuncValue":76,"FROM":77,"FromTablesList":78,"FromTable":79,"JoinTablesList":80,"COMMA":81,"LPAR":82,"RPAR":83,"AS":84,"ParamValue":85,"DOT":86,"JoinTable":87,"JoinMode":88,"JOIN":89,"JoinTableAs":90,"OnClause":91,"JoinModeMode":92,"NATURAL":93,"INNER":94,"LEFT":95,"OUTER":96,"RIGHT":97,"FULL":98,"SEMI":99,"ANTI":100,"CROSS":101,"ON":102,"Expression":103,"USING":104,"ColumnsList":105,"WHERE":106,"GROUP":107,"BY":108,"GroupExpressionsList":109,"HavingClause":110,"GroupExpression":111,"GROUPING":112,"SETS":113,"ROLLUP":114,"CUBE":115,"HAVING":116,"UNION":117,"EXCEPT":118,"INTERSECT":119,"ORDER":120,"OrderExpressionsList":121,"OrderExpression":122,"DIRECTION":123,"COLLATE":124,"NOCASE":125,"LIMIT":126,"OffsetClause":127,"OFFSET":128,"ResultColumn":129,"NUMBER":130,"StringValue":131,"Star":132,"STAR":133,"Column":134,"AggrValue":135,"Op":136,"LogicValue":137,"NullValue":138,"ExistsValue":139,"CaseValue":140,"CastClause":141,"AT":142,"Json":143,"ATLBRA":144,"JsonArray":145,"NewClause":146,"NEW":147,"CAST":148,"ColumnType":149,"CONVERT":150,"PrimitiveValue":151,"Aggregator":152,"SUM":153,"COUNT":154,"MIN":155,"MAX":156,"AVG":157,"FIRST":158,"LAST":159,"ExprList":160,"TRUE":161,"FALSE":162,"STRING":163,"NULL":164,"EXISTS":165,"DOLLAR":166,"COLON":167,"QUESTION":168,"CASE":169,"WhensList":170,"ElseClause":171,"END":172,"When":173,"WHEN":174,"THEN":175,"ELSE":176,"LIKE":177,"PLUS":178,"MINUS":179,"SLASH":180,"PERCENT":181,"ARROW":182,"GT":183,"GE":184,"LT":185,"LE":186,"EQ":187,"EQEQ":188,"EQEQEQ":189,"NE":190,"NEEQEQ":191,"NEEQEQEQ":192,"CondOp":193,"AllSome":194,"AND":195,"OR":196,"NOT":197,"IN":198,"BETWEEN":199,"NOT_BETWEEN":200,"SOME":201,"ANY":202,"UPDATE":203,"SET":204,"SetColumnsList":205,"SetColumn":206,"DELETE":207,"INSERT":208,"VALUES":209,"ValuesListsList":210,"DEFAULT":211,"ValuesList":212,"Value":213,"DateValue":214,"CREATE":215,"TABLE":216,"IfNotExists":217,"CreateTableDefClause":218,"CreateTableOptionsClause":219,"CreateTableOptions":220,"CreateTableOption":221,"ENGINE":222,"AUTO_INCREMENT":223,"CHARSET":224,"TemporaryClause":225,"TEMPORARY":226,"TEMP":227,"IF":228,"ColumnDefsList":229,"ConstraintsList":230,"Constraint":231,"ConstraintName":232,"PrimaryKey":233,"ForeignKey":234,"UniqueKey":235,"IndexKey":236,"CONSTRAINT":237,"PRIMARY":238,"KEY":239,"ColsList":240,"FOREIGN":241,"REFERENCES":242,"INDEX":243,"ColumnDef":244,"ColumnConstraintsClause":245,"ColumnConstraints":246,"ENUM":247,"ColumnConstraintsList":248,"ColumnConstraint":249,"IDENTITY":250,"DROP":251,"IfExists":252,"ALTER":253,"RENAME":254,"TO":255,"ADD":256,"MODIFY":257,"ATTACH":258,"DATABASE":259,"AsClause":260,"USE":261,"SHOW":262,"DATABASES":263,"TABLES":264,"COLUMNS":265,"VIEW":266,"View":267,"DECLARE":268,"CURSOR":269,"FOR":270,"OPEN":271,"CLOSE":272,"FETCH":273,"FetchDirection":274,"NEXT":275,"PRIOR":276,"ABSOLUTE":277,"RELATIVE":278,"HELP":279,"SOURCE":280,"ASSERT":281,"JsonObject":282,"LCUR":283,"JsonPropertiesList":284,"RCUR":285,"JsonElementsList":286,"RBRA":287,"JsonProperty":288,"AUTOCOMMIT":289,"OnOff":290,"OFF":291,"COMMIT":292,"TRANSACTION":293,"ROLLBACK":294,"BEGIN":295,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",8:"EOF",9:"SEMICOLON",12:"EXPLAIN",13:"QUERY",14:"PLAN",37:"EndTransaction",50:"WITH",52:"RECURSIVE",62:"DISTINCT",65:"UNIQUE",66:"ALL",67:"SELECT",68:"VALUE",69:"ROW",70:"COLUMN",71:"MATRIX",72:"TOP",74:"INTO",77:"FROM",81:"COMMA",82:"LPAR",83:"RPAR",84:"AS",86:"DOT",89:"JOIN",93:"NATURAL",94:"INNER",95:"LEFT",96:"OUTER",97:"RIGHT",98:"FULL",99:"SEMI",100:"ANTI",101:"CROSS",102:"ON",104:"USING",106:"WHERE",107:"GROUP",108:"BY",112:"GROUPING",113:"SETS",114:"ROLLUP",115:"CUBE",116:"HAVING",117:"UNION",118:"EXCEPT",119:"INTERSECT",120:"ORDER",123:"DIRECTION",124:"COLLATE",125:"NOCASE",126:"LIMIT",128:"OFFSET",130:"NUMBER",133:"STAR",142:"AT",144:"ATLBRA",147:"NEW",148:"CAST",150:"CONVERT",153:"SUM",154:"COUNT",155:"MIN",156:"MAX",157:"AVG",158:"FIRST",159:"LAST",161:"TRUE",162:"FALSE",163:"STRING",164:"NULL",165:"EXISTS",166:"DOLLAR",167:"COLON",168:"QUESTION",169:"CASE",172:"END",174:"WHEN",175:"THEN",176:"ELSE",177:"LIKE",178:"PLUS",179:"MINUS",180:"SLASH",181:"PERCENT",182:"ARROW",183:"GT",184:"GE",185:"LT",186:"LE",187:"EQ",188:"EQEQ",189:"EQEQEQ",190:"NE",191:"NEEQEQ",192:"NEEQEQEQ",195:"AND",196:"OR",197:"NOT",198:"IN",199:"BETWEEN",200:"NOT_BETWEEN",201:"SOME",202:"ANY",203:"UPDATE",204:"SET",207:"DELETE",208:"INSERT",209:"VALUES",211:"DEFAULT",214:"DateValue",215:"CREATE",216:"TABLE",222:"ENGINE",223:"AUTO_INCREMENT",224:"CHARSET",226:"TEMPORARY",227:"TEMP",228:"IF",237:"CONSTRAINT",238:"PRIMARY",239:"KEY",241:"FOREIGN",242:"REFERENCES",243:"INDEX",246:"ColumnConstraints",247:"ENUM",250:"IDENTITY",251:"DROP",253:"ALTER",254:"RENAME",255:"TO",256:"ADD",257:"MODIFY",258:"ATTACH",259:"DATABASE",261:"USE",262:"SHOW",263:"DATABASES",264:"TABLES",265:"COLUMNS",266:"VIEW",268:"DECLARE",269:"CURSOR",270:"FOR",271:"OPEN",272:"CLOSE",273:"FETCH",275:"NEXT",276:"PRIOR",277:"ABSOLUTE",278:"RELATIVE",279:"HELP",280:"SOURCE",281:"ASSERT",283:"LCUR",285:"RCUR",287:"RBRA",289:"AUTOCOMMIT",291:"OFF",292:"COMMIT",293:"TRANSACTION",294:"ROLLBACK",295:"BEGIN"},
productions_: [0,[3,1],[3,1],[6,2],[7,3],[7,1],[7,1],[11,2],[11,4],[10,0],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[49,3],[49,4],[49,1],[51,0],[28,8],[53,4],[53,4],[53,4],[53,3],[61,1],[61,2],[61,2],[61,2],[61,2],[63,2],[63,0],[54,0],[54,2],[54,2],[55,2],[55,3],[55,0],[78,1],[78,3],[79,4],[79,5],[79,3],[79,2],[79,3],[79,1],[79,2],[79,3],[79,1],[79,1],[79,2],[79,3],[75,3],[75,1],[80,2],[80,1],[87,4],[90,1],[90,2],[90,3],[90,2],[90,3],[90,4],[90,5],[90,1],[90,2],[90,3],[88,1],[88,2],[92,0],[92,1],[92,1],[92,2],[92,1],[92,2],[92,1],[92,2],[92,1],[92,1],[92,1],[91,2],[91,2],[91,0],[56,0],[56,2],[57,0],[57,4],[109,1],[109,3],[111,5],[111,4],[111,4],[111,1],[110,0],[110,2],[60,0],[60,2],[60,3],[60,2],[60,2],[58,0],[58,3],[121,1],[121,3],[122,1],[122,2],[122,3],[122,4],[59,0],[59,3],[127,0],[127,2],[64,3],[64,1],[129,3],[129,2],[129,3],[129,2],[129,3],[129,2],[129,1],[132,5],[132,3],[132,1],[134,5],[134,3],[134,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,2],[103,2],[103,1],[146,2],[146,2],[141,6],[141,6],[141,8],[151,1],[151,1],[151,1],[151,1],[151,1],[151,1],[135,4],[152,1],[152,1],[152,1],[152,1],[152,1],[152,1],[152,1],[76,4],[76,3],[160,1],[160,3],[73,1],[137,1],[137,1],[131,1],[138,1],[139,4],[85,2],[85,2],[85,1],[140,5],[140,4],[170,2],[170,1],[173,4],[171,2],[171,0],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,5],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,3],[136,6],[136,6],[136,3],[136,3],[136,2],[136,2],[136,3],[136,5],[136,6],[136,5],[136,6],[136,3],[136,3],[193,1],[193,1],[193,1],[193,1],[193,1],[193,1],[194,1],[194,1],[194,1],[39,6],[39,4],[205,1],[205,3],[206,3],[21,5],[21,3],[26,5],[26,5],[26,8],[26,4],[26,7],[210,3],[210,2],[210,1],[210,5],[210,4],[210,3],[212,1],[212,3],[213,1],[213,1],[213,1],[213,1],[213,1],[213,1],[105,1],[105,3],[19,8],[19,4],[19,6],[219,0],[219,1],[220,2],[220,1],[221,1],[221,3],[221,3],[221,3],[225,0],[225,1],[225,1],[217,0],[217,3],[218,3],[218,1],[218,2],[230,1],[230,3],[231,2],[231,2],[231,2],[231,2],[232,0],[232,2],[233,5],[234,10],[235,1],[236,5],[236,5],[240,1],[240,3],[229,1],[229,3],[244,3],[244,2],[149,6],[149,4],[149,1],[149,4],[245,0],[245,1],[248,2],[248,1],[249,2],[249,7],[249,1],[249,6],[249,2],[249,2],[24,4],[252,0],[252,2],[15,6],[15,6],[15,6],[15,8],[15,6],[27,5],[16,4],[16,6],[17,4],[17,6],[17,9],[260,0],[260,2],[38,3],[38,2],[22,4],[22,5],[18,8],[18,9],[23,3],[31,2],[31,4],[31,3],[31,5],[33,2],[33,4],[33,4],[33,6],[30,4],[30,6],[32,4],[32,6],[29,4],[29,6],[20,5],[20,8],[25,3],[267,1],[267,3],[45,5],[46,2],[48,2],[47,4],[274,1],[274,1],[274,1],[274,1],[274,2],[274,2],[40,2],[40,1],[41,1],[42,2],[43,2],[43,4],[143,3],[143,1],[143,1],[143,1],[143,1],[143,1],[143,2],[143,2],[282,3],[282,4],[282,2],[145,2],[145,3],[145,1],[284,3],[284,1],[288,3],[288,3],[288,3],[286,3],[286,1],[44,3],[290,1],[290,1],[35,1],[35,2],[36,1],[36,2],[34,1],[34,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			if (yy.casesensitive) this.$ = $$[$0];
			else this.$ = $$[$0].toLowerCase();
		
break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 4:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 5: case 6: case 66: case 83: case 115: case 130: case 141: case 192: case 206: case 254: case 265: case 266: case 270: case 278: case 312: case 410:
 this.$ = [$$[$0]]; 
break;
case 7:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 8:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 9: case 59: case 65: case 110: case 111: case 113: case 121: case 123: case 128: case 136: case 138: case 291: case 294: case 333:
 this.$ = null; 
break;
case 44: case 45: case 73: case 120: case 148: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 170: case 176: case 177: case 178: case 179: case 180: case 181: case 208: case 243: case 244: case 245: case 246: case 247: case 248: case 306: case 323: case 325: case 394: case 395: case 396: case 397: case 405:
 this.$ = $$[$0]; 
break;
case 46:
 this.$ = $$[$0];
break;
case 48:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 49:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]); yy.extend(this.$, $$[$0-1]); 
break;
case 50:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 51:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 52:
 this.$ = new yy.Select({ columns:$$[$0] }); yy,extend(this.$, $$[$0-2]);yy.extend(this.$, $$[$0-1]); 
break;
case 53:
 this.$ = null
break;
case 54:
 this.$ = {modifier:'VALUE'}
break;
case 55:
 this.$ = {modifier:'ROW'}
break;
case 56:
 this.$ = {modifier:'COLUMN'}
break;
case 57:
 this.$ = {modifier:'MATRIX'}
break;
case 58:
 this.$ = {top: $$[$0]}; 
break;
case 60: case 322:
this.$ = null
break;
case 61: case 62:
this.$ = {into: $$[$0]} 
break;
case 63:
 this.$ = { from: $$[$0] }; 
break;
case 64:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 67: case 116: case 255: case 313:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 68:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 69:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 70:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 71:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 72:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 74: case 78:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 75: case 79:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 76: case 77:
 this.$ = $$[$0]; $$[$0].as = 'default'; 
break;
case 80:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 81:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 82:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 84:
 this.$ = new yy.Join($$[$0-3]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 85:
 this.$ = {table: $$[$0]}; 
break;
case 86:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 87:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 88:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 89:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 90:
 this.$ = {select: $$[$0-3], as: $$[$0]} ; 
break;
case 91:
 this.$ = {select: $$[$0-4], as: $$[$0] } ; 
break;
case 92:
 this.$ = {func:$$[$0], as:'default'}; 
break;
case 93:
 this.$ = {func:$$[$0-1], as: $$[$0]}; 
break;
case 94:
 this.$ = {func:$$[$0-2], as: $$[$0]}; 
break;
case 95:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 96:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 97: case 98:
 this.$ = "INNER"; 
break;
case 99: case 100:
 this.$ = "LEFT"; 
break;
case 101: case 102:
 this.$ = "RIGHT"; 
break;
case 103: case 104:
 this.$ = "OUTER"; 
break;
case 105:
 this.$ = "SEMI"; 
break;
case 106:
 this.$ = "ANTI"; 
break;
case 107:
 this.$ = "CROSS"; 
break;
case 108:
 this.$ = {on: $$[$0]}; 
break;
case 109:
 this.$ = {using: $$[$0]}; 
break;
case 112:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 114:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 117:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 118:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 119:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 122:
 this.$ = {having:$$[$0]}
break;
case 124:
 this.$ = {union: $$[$0]} ; 
break;
case 125:
 this.$ = {unionall: $$[$0]} ; 
break;
case 126:
 this.$ = {except: $$[$0]} ; 
break;
case 127:
 this.$ = {intersect: $$[$0]} ; 
break;
case 129:
 this.$ = {order:$$[$0]}
break;
case 131:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 132:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 133:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 134:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 135:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 137:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 139:
 this.$ = {offset:$$[$0]}
break;
case 140: case 300: case 315: case 409:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 142: case 144: case 146:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 143: case 145: case 147:
 $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];
break;
case 149:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 150:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 151:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 152:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 153:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 154:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 168: case 169:
 this.$ = new yy.Json({value:$$[$0]}); 
break;
case 171:
 this.$ = new yy.FuncValue({funcid:$$[$0], newid:true}); 
break;
case 172:
 this.$ = $$[$0]; yy.extend(this.$,{newid:true}); 
break;
case 173:
 this.$ = new yy.Cast({expression:$$[$0-3]}) ; yy.extend(this.$,$$[$0-1]) ; 
break;
case 174:
 this.$ = new yy.Cast({expression:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; 
break;
case 175:
 this.$ = new yy.Cast({expression:$$[$0-3], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-5]) ; 
break;
case 182:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 183:
 this.$ = "SUM"; 
break;
case 184:
 this.$ = "COUNT"; 
break;
case 185:
 this.$ = "MIN"; 
break;
case 186:
 this.$ = "MAX"; 
break;
case 187:
 this.$ = "AVG"; 
break;
case 188:
 this.$ = "FIRST"; 
break;
case 189:
 this.$ = "LAST"; 
break;
case 190:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 191:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 193:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 194:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 195:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 196:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 197:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")}); 
break;
case 198:
 this.$ = new yy.NullValue({value:null}); 
break;
case 199:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 200: case 201:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 202:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 203:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 204:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 205:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 207:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 209:
this.$ = null; 
break;
case 210:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 211:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 212:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 213:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 214:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 215:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 216: case 217: case 219:
 this.$ = new yy.Op({left:$$[$0-2], op:'->' , right:$$[$0]}); 
break;
case 218:
 this.$ = new yy.Op({left:$$[$0-4], op:'->' , right:$$[$0-1]}); 
break;
case 220:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 221:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 222:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 223:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 224:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 225:
 this.$ = new yy.Op({left:$$[$0-2], op:'==' , right:$$[$0]}); 
break;
case 226:
 this.$ = new yy.Op({left:$$[$0-2], op:'===' , right:$$[$0]}); 
break;
case 227:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 228:
 this.$ = new yy.Op({left:$$[$0-2], op:'!==' , right:$$[$0]}); 
break;
case 229:
 this.$ = new yy.Op({left:$$[$0-2], op:'!===' , right:$$[$0]}); 
break;
case 230:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 231:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 232:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 233:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 234:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 235:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 236:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 237:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 238:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 239:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 240:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 241:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 242:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 249:
 this.$ = 'ALL'; 
break;
case 250:
 this.$ = 'SOME'; 
break;
case 251:
 this.$ = 'ANY'; 
break;
case 252:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 253:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 256:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 257:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 258:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 259:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 260:
 this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; 
break;
case 261:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 262:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 263:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 264:
 this.$ = [$$[$0-1]]; 
break;
case 267:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 268:
this.$ = $$[$0-3]; $$[$0-3].push($$[$0])
break;
case 269: case 271: case 279:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 280:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			//yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
		
break;
case 281:
 
			this.$ = new yy.CreateTable({table:new yy.Table({tableid:$$[$0]})}); 
		
break;
case 282:
 
			this.$ = new yy.CreateTable({table:new yy.Table({tableid:$$[$0], databaseid:$$[$0-2]})}); 
		
break;
case 292: case 293:
 this.$ = {temporary:true}; 
break;
case 295:
 this.$ = {ifnotexists: true}; 
break;
case 296:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 297:
 this.$ = {columns: $$[$0]}; 
break;
case 298:
 this.$ = {as: $$[$0]} 
break;
case 299: case 314:
 this.$ = [$$[$0]];
break;
case 301: case 302: case 303: case 304:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 305:
 this.$ = null 
break;
case 307:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 308:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-6], fktableid: $$[$0-3], fkcolumns: $$[$0-1]}; 
break;
case 316:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 317:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 318:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 319:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 320:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 321:
 this.$ = {dbtypeid: 'ENUM', enumvalues: $$[$0-1]} 
break;
case 324:
 yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];
break;
case 326:
this.$ = {primarykey:true};
break;
case 327:
this.$ = {foreignkey:{tableid:$$[$0-3], columnid: $$[$0-1]}};
break;
case 328:
this.$ = {auto_increment:true};
break;
case 329:
 this.$ = {identity: [$$[$0-3],$$[$0-1]]} 
break;
case 330:
this.$ = {default:$$[$0]};
break;
case 331:
this.$ = {notnull:true};
break;
case 332:
 this.$ = new yy.DropTable({table:$$[$0]}); yy.extend(this.$, $$[$0-1]); 
break;
case 334:
 this.$ = {ifexists: true};
break;
case 335:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
case 336:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 337:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 338:
 this.$ = new yy.AlterTable({table:$$[$0-5], renamecolumn: $$[$0-2], to: $$[$0]});
break;
case 339:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});
break;
case 340:
 this.$ = new yy.AlterTable({table:$$[$0-2], renameto: $$[$0]});
break;
case 341:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0], engineid:$$[$0-2] });
break;
case 342:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0-2], engineid:$$[$0-4], as:$$[$0] });
break;
case 343:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0] }); yy.extend(this.$,$$[$0]); 
break;
case 344:
 this.$ = new yy.CreateDatabase({engineid:$$[$0-4], databaseid:$$[$0-1], as:$$[$0] }); yy.extend(this.$,$$[$0-2]); 
break;
case 345:
 this.$ = new yy.CreateDatabase({engineid:$$[$0-7], databaseid:$$[$0-4], args:$$[$0-2], as:$$[$0] }); yy.extend(this.$,$$[$0-5]); 
break;
case 346:
this.$ = null;
break;
case 347: case 390: case 398: case 401:
 this.$ = $$[$0-1]; 
break;
case 348: case 349:
 this.$ = new yy.UseDatabase({databaseid: $$[$0] });
break;
case 350:
 this.$ = new yy.DropDatabase({databaseid: $$[$0] }); yy.extend(this.$,$$[$0-1]); 
break;
case 351:
 this.$ = new yy.DropDatabase({databaseid: $$[$0], engineid:$$[$0-3] }); yy.extend(this.$,$$[$0-1]); 
break;
case 352:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})
break;
case 353:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})
break;
case 354:
 this.$ = new yy.DropIndex({indexid:$$[$0]});
break;
case 355:
 this.$ = new yy.ShowDatabases();
break;
case 356:
 this.$ = new yy.ShowDatabases({like:$$[$0]});
break;
case 357:
 this.$ = new yy.ShowDatabases({engineid:$$[$0-1]});
break;
case 358:
 this.$ = new yy.ShowDatabases({engineid:$$[$0-3], like:$$[$0]});
break;
case 359:
 this.$ = new yy.ShowTables();
break;
case 360:
 this.$ = new yy.ShowTables({like:$$[$0]});
break;
case 361:
 this.$ = new yy.ShowTables({databaseid: $$[$0]});
break;
case 362:
 this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});
break;
case 363:
 this.$ = new yy.ShowColumns({table: $$[$0]});
break;
case 364:
 this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});
break;
case 365:
 this.$ = new yy.ShowIndex({table: $$[$0]});
break;
case 366:
 this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});
break;
case 367:
 this.$ = new yy.ShowCreateTable({table: $$[$0]});
break;
case 368:
 this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});
break;
case 369:
 this.$ = new yy.CreateView({view:$$[$0-2], select: $$[$0]}); 
break;
case 370:
 this.$ = new yy.CreateView({view:$$[$0-5], columns: $$[$0-3], select: $$[$0-3]}); 
break;
case 371:
 this.$ = new yy.DropView({view:$$[$0-1]}); 
break;
case 372:
 this.$ = new yy.View({viewid: $$[$0]}); 
break;
case 373:
 this.$ = new yy.View({databaseid:$$[$0-2], viewid: $$[$0]}); 
break;
case 374:
 this.$ = new yy.DeclareCursor({cursorid:$$[$0-3], select:$$[$0]}); 
break;
case 375:
 this.$ = new yy.OpenCursor({cursorid:$$[$0]}); 
break;
case 376:
 this.$ = new yy.CloseCursor({cursorid:$$[$0]}); 
break;
case 377:
 this.$ = new yy.FetchCursor({cursorid:$$[$0]}); yy.extend(this.$,$$[$0-2]); 
break;
case 378:
 this.$ = {direction: 'NEXT'}; 
break;
case 379:
 this.$ = {direction: 'PRIOR'}; 
break;
case 380:
 this.$ = {direction: 'FIRST'}; 
break;
case 381:
 this.$ = {direction: 'LAST'}; 
break;
case 382:
 this.$ = {direction: 'ABSOLUTE', num:$$[$0]}; 
break;
case 383:
 this.$ = {direction: 'RELATIVE', num:$$[$0]}; 
break;
case 384:
 this.$ = new yy.Help({subject:$$[$0].value.toUpperCase()} ) ; 
break;
case 385:
 this.$ = new yy.Help() ; 
break;
case 386:
 this.$ = new yy.ExpressionStatement({expression:$$[$0]}); 
break;
case 387:
 this.$ = new yy.Source({url:$$[$0].value}); 
break;
case 388:
 this.$ = new yy.Assert({value:$$[$0]}); 
break;
case 389:
 this.$ = new yy.Assert({value:$$[$0-2], message:$$[$0]}); 
break;
case 391:
 this.$ = $$[$0].value; 
break;
case 392:
 this.$ = +$$[$0].value; 
break;
case 393:
 this.$ = (!!$$[$0].value); 
break;
case 399: case 402:
 this.$ = $$[$0-2]; 
break;
case 400:
 this.$ = {}; 
break;
case 403:
 this.$ = []; 
break;
case 404:
 yy.extend($$[$0-2],$$[$0]); this.$ = $$[$0-2]; 
break;
case 406:
 this.$ = {}; this.$[$$[$0-2].substr(1,$$[$0-2].length-2)] = $$[$0]; 
break;
case 407: case 408:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 411:
 this.$ = new yy.SetVariable({autocommit:$$[$0]});
break;
case 412:
 this.$ = true; 
break;
case 413:
 this.$ = false; 
break;
case 414: case 415:
 this.$ = new yy.Commit(); 
break;
case 416: case 417:
 this.$ = new yy.Rollback(); 
break;
case 418: case 419:
 this.$ = new yy.Begin(); 
break;
}
},
table: [o($V0,$V1,{6:1,7:2,10:3,11:4,15:5,16:6,17:7,18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:26,38:28,39:29,40:30,41:31,42:32,43:33,44:34,45:35,46:36,47:37,48:38,53:47,103:55,61:63,135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,4:$V2,5:$V3,12:[1,39],37:$V4,67:$V5,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv,203:$Vw,204:$Vx,207:$Vy,208:$Vz,215:$VA,251:$VB,253:$VC,254:$VD,258:$VE,261:$VF,262:$VG,268:$VH,271:$VI,272:$VJ,273:$VK,279:$VL,280:$VM,281:$VN,292:$VO,294:$VP,295:$VQ}),{1:[3]},{8:[1,109],9:[1,110]},o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),o($V0,[2,34]),o($V0,[2,35]),o($V0,[2,36]),o($V0,[2,37]),o($V0,[2,38]),o($V0,[2,39]),o($V0,[2,40]),o($V0,[2,41]),o($V0,[2,42]),o($V0,[2,43]),o($V0,$V1,{15:5,16:6,17:7,18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:26,38:28,39:29,40:30,41:31,42:32,43:33,44:34,45:35,46:36,47:37,48:38,53:47,103:55,61:63,135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,10:111,4:$V2,5:$V3,13:[1,112],37:$V4,67:$V5,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv,203:$Vw,204:$Vx,207:$Vy,208:$Vz,215:$VA,251:$VB,253:$VC,254:$VD,258:$VE,261:$VF,262:$VG,268:$VH,271:$VI,272:$VJ,273:$VK,279:$VL,280:$VM,281:$VN,292:$VO,294:$VP,295:$VQ}),{216:[1,113]},{3:114,4:$V2,5:$V3},{3:116,4:$V2,5:$V3,65:[1,118],216:[1,119],243:[1,117],259:[1,115],266:[1,120]},{77:[1,121]},{3:123,4:$V2,5:$V3,216:[1,125],243:[1,124],259:[1,122],266:[1,126]},{74:[1,127]},{216:[1,128]},o($VR,[2,60],{54:129,74:[1,130]}),{3:134,4:$V2,5:$V3,215:[1,131],243:[1,135],263:[1,133],264:[1,136],265:[1,132]},o($V0,[2,418],{293:[1,137]}),o($V0,[2,414],{293:[1,138]}),o($V0,[2,416],{293:[1,139]}),{3:141,4:$V2,5:$V3,259:[1,140]},{3:143,4:$V2,5:$V3,75:142},o($V0,[2,385],{131:144,163:$Vn}),o($V0,[2,386],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),{131:169,163:$Vn},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:170,144:$Vf1,161:$Vl,162:$Vm,163:[1,171],166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},{289:[1,181]},{3:182,4:$V2,5:$V3},{3:183,4:$V2,5:$V3},{158:[1,187],159:[1,188],274:184,275:[1,185],276:[1,186],277:[1,189],278:[1,190]},{3:191,4:$V2,5:$V3},o($Vh1,$Vi1,{63:195,62:[1,192],65:[1,193],66:[1,194],72:$Vj1}),o($Vk1,[2,155]),o($Vk1,[2,156]),o($Vk1,[2,157]),o($Vk1,[2,158]),o($Vk1,[2,159]),o($Vk1,[2,160]),o($Vk1,[2,161]),o($Vk1,[2,162]),o($Vk1,[2,163]),o($Vk1,[2,164]),o($Vk1,[2,165]),o($Vk1,[2,166]),o($Vk1,[2,167]),{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:197,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:201,144:$Vf1,145:198,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1,286:199,287:$Vl1},o($Vk1,[2,170]),o($Vm1,[2,53],{68:[1,202],69:[1,203],70:[1,204],71:[1,205]}),{82:[1,206]},o($Vk1,$Vn1,{82:$Vo1,86:[1,208]}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:209,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:210,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:211,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($Vk1,[2,151]),o([4,5,8,9,74,77,81,82,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,128,130,133,142,144,147,148,150,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,211,222,223,224,238,241,250,285,287],[2,194]),o($Vp1,[2,195]),o($Vp1,[2,196]),o($Vp1,$Vq1),o([4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,133,163,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200,211,223,238,241,250],[2,198]),{3:212,4:$V2,5:$V3},{3:213,4:$V2,5:$V3},o($Vp1,[2,202]),{82:[1,214]},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:215,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,170:216,173:217,174:$Vr1,179:$Vu,197:$Vv},{82:[1,219]},{82:[1,220]},{3:221,4:$V2,5:$V3,76:222},{82:[2,183]},{82:[2,184]},{82:[2,185]},{82:[2,186]},{82:[2,187]},{82:[2,188]},{82:[2,189]},o($Vs1,[2,1]),o($Vs1,[2,2]),{1:[2,3]},o($V0,$V1,{15:5,16:6,17:7,18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:26,38:28,39:29,40:30,41:31,42:32,43:33,44:34,45:35,46:36,47:37,48:38,53:47,103:55,61:63,135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,10:223,4:$V2,5:$V3,37:$V4,67:$V5,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv,203:$Vw,204:$Vx,207:$Vy,208:$Vz,215:$VA,251:$VB,253:$VC,254:$VD,258:$VE,261:$VF,262:$VG,268:$VH,271:$VI,272:$VJ,273:$VK,279:$VL,280:$VM,281:$VN,292:$VO,294:$VP,295:$VQ}),o($V0,[2,7]),{14:[1,224]},{3:143,4:$V2,5:$V3,75:225},{259:[1,226]},o($Vt1,$Vu1,{217:227,228:$Vv1}),{259:[1,229]},{3:230,4:$V2,5:$V3},{243:[1,231]},o($Vt1,$Vu1,{217:232,228:$Vv1}),{3:234,4:$V2,5:$V3,267:233},{3:143,4:$V2,5:$V3,75:235},o($Vt1,$Vw1,{252:236,228:$Vx1}),{259:[1,238]},{3:239,4:$V2,5:$V3},o($Vt1,$Vw1,{252:240,228:$Vx1}),{3:234,4:$V2,5:$V3,267:241},{3:143,4:$V2,5:$V3,75:242},{3:143,4:$V2,5:$V3,75:243},o($Vy1,[2,65],{55:244,77:[1,245]}),{3:248,4:$V2,5:$V3,75:246,76:247},{216:[1,249]},{77:[1,250]},o($V0,[2,355],{177:[1,251]}),{263:[1,252]},{77:[1,253]},o($V0,[2,359],{77:[1,255],177:[1,254]}),o($V0,[2,419]),o($V0,[2,415]),o($V0,[2,417]),{3:256,4:$V2,5:$V3},o($V0,[2,349]),{204:[1,257]},o([8,9,67,77,82,106,204,209,211,251,254,255,256,257],$Vz1,{86:$VA1}),o($V0,[2,384]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:259,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:260,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:261,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:262,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:263,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:264,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:265,4:$V2,5:$V3,73:266,76:268,82:[1,267],130:$V7},o($VB1,[2,243],{135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,103:269,4:$V2,5:$V3,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv}),o($VB1,[2,244],{135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,103:270,4:$V2,5:$V3,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv}),o($VB1,[2,245],{135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,103:271,4:$V2,5:$V3,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv}),o($VB1,[2,246],{135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,103:272,4:$V2,5:$V3,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv}),o($VB1,[2,247],{135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,103:273,4:$V2,5:$V3,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:274,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:275,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($VB1,[2,248],{135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,103:276,4:$V2,5:$V3,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:277,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:278,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{66:[1,280],194:279,201:[1,281],202:[1,282]},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:283,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:284,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{82:[1,285]},{198:[1,286]},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:287,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:288,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($V0,[2,387]),o($V0,[2,388]),o($V0,$Vq1,{81:[1,289]}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:290,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($VC1,[2,391]),o($VC1,[2,392]),o($VC1,[2,393]),o($VC1,[2,394]),o($VC1,[2,395]),{282:291,283:$Vg1},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:201,144:$Vf1,145:292,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1,286:199,287:$Vl1},{4:$VD1,130:$VE1,163:$VF1,284:293,285:[1,294],288:295},{102:[1,300],290:299,291:[1,301]},{269:[1,302]},o($V0,[2,375]),{77:[1,303]},{77:[2,378]},{77:[2,379]},{77:[2,380]},{77:[2,381]},{73:304,130:$V7},{73:305,130:$V7},o($V0,[2,376]),o($Vh1,$Vi1,{63:306,72:$Vj1}),o($Vh1,$Vi1,{63:307,72:$Vj1}),o($Vh1,$Vi1,{63:308,72:$Vj1}),{3:82,4:$V2,5:$V3,64:309,73:69,76:65,82:$V6,85:73,103:311,129:310,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{73:312,130:$V7},o($Vk1,[2,168]),o($Vk1,[2,169]),{81:[1,314],287:[1,313]},o($VC1,[2,403]),o($VG1,[2,410]),o($Vm1,[2,54]),o($Vm1,[2,55]),o($Vm1,[2,56]),o($Vm1,[2,57]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:315,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,83:[1,317],85:73,103:318,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,160:316,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:319,4:$V2,5:$V3,133:[1,320]},o([4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,163,172,174,175,176,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200],[2,234],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY}),o($VH1,[2,235],{193:162,133:$VS,180:$VW,181:$VX,182:$VY}),{83:[1,321],133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},o($Vp1,[2,200]),o($Vp1,[2,201]),{28:322,53:47,61:63,67:$V5},{133:$VS,170:323,173:217,174:$Vr1,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},{171:324,172:$VI1,173:325,174:$Vr1,176:$VJ1},o($VK1,[2,206]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:327,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:328,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{4:$VL1,149:329,247:$VM1},o($Vk1,[2,171],{82:$Vo1}),o($Vk1,[2,172]),o($V0,[2,4]),o($V0,$V1,{15:5,16:6,17:7,18:8,19:9,20:10,21:11,22:12,23:13,24:14,25:15,26:16,27:17,28:18,29:19,30:20,31:21,32:22,33:23,34:24,35:25,36:26,38:28,39:29,40:30,41:31,42:32,43:33,44:34,45:35,46:36,47:37,48:38,53:47,103:55,61:63,135:64,76:65,136:66,134:67,132:68,73:69,137:70,131:71,138:72,85:73,139:74,140:75,141:76,146:79,152:81,3:82,10:332,4:$V2,5:$V3,37:$V4,67:$V5,82:$V6,130:$V7,133:$V8,142:$V9,144:$Va,147:$Vb,148:$Vc,150:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv,203:$Vw,204:$Vx,207:$Vy,208:$Vz,215:$VA,251:$VB,253:$VC,254:$VD,258:$VE,261:$VF,262:$VG,268:$VH,271:$VI,272:$VJ,273:$VK,279:$VL,280:$VM,281:$VN,292:$VO,294:$VP,295:$VQ}),{251:[1,336],254:[1,333],256:[1,334],257:[1,335]},{3:337,4:$V2,5:$V3},{3:338,4:$V2,5:$V3},{197:[1,339]},o($Vt1,$Vu1,{217:340,228:$Vv1}),{102:[1,341]},{3:342,4:$V2,5:$V3},{3:344,4:$V2,5:$V3,75:343},{82:[1,346],84:[1,345]},o($VN1,[2,372],{86:[1,347]}),o($V0,[2,258],{106:[1,348]}),{3:349,4:$V2,5:$V3},{165:[1,350]},o($Vt1,$Vw1,{252:351,228:$Vx1}),o($V0,[2,354]),{3:143,4:$V2,5:$V3,75:352},o($V0,[2,371]),{28:356,53:47,61:63,67:$V5,82:[1,355],209:[1,353],211:[1,354]},{255:[1,357]},o($VO1,[2,111],{56:358,106:[1,359]}),{3:248,4:$V2,5:$V3,75:363,76:365,78:360,79:361,82:$VP1,85:364,166:$Vq,167:$Vr,168:$Vs},o($VR,[2,61]),o($VR,[2,62]),o([4,5,8,9,77,81,83,84,89,93,94,95,96,97,98,99,100,101,102,104,106,107,117,118,119,120,126],$Vz1,{82:$Vo1,86:$VA1}),{3:143,4:$V2,5:$V3,75:366},{3:143,4:$V2,5:$V3,75:367},{131:368,163:$Vn},o($V0,[2,357],{177:[1,369]}),{3:143,4:$V2,5:$V3,75:370},{131:371,163:$Vn},{3:372,4:$V2,5:$V3},o($V0,[2,348]),{3:376,4:$V2,5:$V3,134:375,205:373,206:374},{3:377,4:$V2,5:$V3},o([4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,163,172,174,175,176,177,183,184,185,186,187,188,189,190,191,192,195,196,197,198,199,200],[2,210],{193:162,133:$VS,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY}),o($VH1,[2,211],{193:162,133:$VS,180:$VW,181:$VX,182:$VY}),o($VH1,[2,212],{193:162,133:$VS,180:$VW,181:$VX,182:$VY}),o($VQ1,[2,213],{193:162,182:$VY}),o($VQ1,[2,214],{193:162,182:$VY}),o($VQ1,[2,215],{193:162,182:$VY}),o($Vk1,[2,216],{82:$Vo1}),o($Vk1,[2,217]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:378,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($Vk1,[2,219]),o($VR1,[2,220],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,221],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,222],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,223],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,224],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,225],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,226],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,227],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,228],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),o($VR1,[2,229],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,197:$V91,198:$Va1}),{82:[1,379]},{82:[2,249]},{82:[2,250]},{82:[2,251]},o([4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,163,172,174,175,176,195,196,199,200],[2,232],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,197:$V91,198:$Va1}),o([4,5,8,9,74,77,81,83,84,89,93,94,95,96,97,98,99,100,101,106,107,116,117,118,119,120,123,124,126,130,163,172,174,175,176,196],[2,233],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),{3:82,4:$V2,5:$V3,28:380,53:47,61:63,67:$V5,73:69,76:65,82:$V6,85:73,103:318,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,160:381,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{82:[1,382]},o($VS1,[2,241],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,197:$V91,198:$Va1}),o($VS1,[2,242],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,197:$V91,198:$Va1}),{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:383,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},{83:[1,384],133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},o($VC1,[2,396]),o($VC1,[2,397]),{81:[1,386],285:[1,385]},o($VC1,[2,400]),o($VT1,[2,405]),{167:[1,387]},{167:[1,388]},{167:[1,389]},o($V0,[2,411]),o($V0,[2,412]),o($V0,[2,413]),{270:[1,390]},{3:391,4:$V2,5:$V3},{77:[2,382]},{77:[2,383]},{3:82,4:$V2,5:$V3,64:392,73:69,76:65,82:$V6,85:73,103:311,129:310,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,64:393,73:69,76:65,82:$V6,85:73,103:311,129:310,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,64:394,73:69,76:65,82:$V6,85:73,103:311,129:310,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($VU1,[2,52],{81:$VV1}),o($VW1,[2,141]),o($VW1,[2,148],{193:162,3:397,131:399,4:$V2,5:$V3,84:[1,396],130:[1,398],133:$VS,163:$Vn,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($Vh1,[2,58]),o($VC1,[2,401]),{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:401,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1,287:[1,400]},{83:[1,402],133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},{81:$VX1,83:[1,403]},o($VY1,[2,191]),o($VZ1,[2,192],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($Vk1,$V_1,{86:[1,405]}),o($Vk1,[2,150]),o($Vk1,[2,236]),{83:[1,406]},{171:407,172:$VI1,173:325,174:$Vr1,176:$VJ1},{172:[1,408]},o($VK1,[2,205]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:409,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{133:$VS,175:[1,410],177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},{84:[1,411],133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},{81:[1,412]},o($V$1,[2,320],{82:[1,413]}),{82:[1,414]},o($V0,[2,8]),{70:[1,416],255:[1,415]},{70:[1,417]},{70:[1,418]},{70:[1,419]},o($V0,[2,341],{84:[1,420]}),o($V0,[2,343]),{165:[1,421]},{3:422,4:$V2,5:$V3},{3:143,4:$V2,5:$V3,75:423},{102:[1,424]},{82:[1,425]},o($V0,[2,281],{82:$Vz1,86:[1,426]}),{28:427,53:47,61:63,67:$V5},{3:429,4:$V2,5:$V3,240:428},{3:430,4:$V2,5:$V3},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:431,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($V0,[2,350]),o($Vt1,[2,334]),{3:432,4:$V2,5:$V3},o($V0,[2,332]),{82:$V02,85:436,142:$V12,166:$Vq,167:$Vr,168:$Vs,210:433},{209:[1,437]},{3:376,4:$V2,5:$V3,105:438,134:439},o($V0,[2,262]),{3:440,4:$V2,5:$V3},o($V22,[2,113],{57:441,107:[1,442]}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:443,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($Vy1,[2,63],{81:[1,444]}),o($V32,[2,66],{80:445,87:446,88:447,92:448,89:$V42,93:$V52,94:$V62,95:$V72,96:$V82,97:$V92,98:$Va2,99:$Vb2,100:$Vc2,101:$Vd2}),{28:458,53:47,61:63,67:$V5},o($Ve2,[2,73],{3:459,4:$V2,5:$V3,84:[1,460]}),o($Ve2,[2,76],{3:461,4:$V2,5:$V3,84:[1,462]}),o($Ve2,[2,77],{3:463,4:$V2,5:$V3,84:[1,464]}),o($V0,[2,367],{77:[1,465]}),o($V0,[2,363],{77:[1,466]}),o($V0,[2,356]),{131:467,163:$Vn},o($V0,[2,365],{77:[1,468]}),o($V0,[2,360]),o($V0,[2,361],{177:[1,469]}),o($V0,[2,253],{81:[1,471],106:[1,470]}),o($Vf2,[2,254]),{187:[1,472]},o($Vg2,$Vn1,{86:[1,473]}),o([4,5,8,9,67,77,81,82,83,84,89,93,94,95,96,97,98,99,100,101,102,104,106,107,117,118,119,120,126,204,209,211,251,254,255,256,257],$Vh2),{83:[1,474],133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},{3:82,4:$V2,5:$V3,28:475,53:47,61:63,67:$V5,73:69,76:65,82:$V6,85:73,103:318,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,160:476,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{83:[1,477]},{81:$VX1,83:[1,478]},{3:82,4:$V2,5:$V3,28:479,53:47,61:63,67:$V5,73:69,76:65,82:$V6,85:73,103:318,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,160:480,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($V0,[2,389]),o($VC1,[2,390]),o($VC1,[2,398]),{4:$VD1,130:$VE1,163:$VF1,285:[1,481],288:482},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:483,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:484,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:485,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},{28:486,53:47,61:63,67:$V5},o($V0,[2,377]),o($VU1,[2,49],{81:$VV1}),o($VU1,[2,50],{81:$VV1}),o($VU1,[2,51],{81:$VV1}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:311,129:487,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:488,4:$V2,5:$V3,130:[1,489],131:490,163:$Vn},o($VW1,[2,143]),o($VW1,[2,145]),o($VW1,[2,147]),o($VC1,[2,402]),o($VG1,[2,409]),o($Vk1,[2,182]),o($VY1,[2,190]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:491,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:492,4:$V2,5:$V3,133:[1,493]},o($Vk1,[2,199]),{172:[1,494]},o($Vk1,[2,204]),{133:$VS,172:[2,208],177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:495,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{4:$VL1,149:496,247:$VM1},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:497,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{130:[1,498]},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:500,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv,212:499},{3:501,4:$V2,5:$V3},{3:502,4:$V2,5:$V3},{3:504,4:$V2,5:$V3,244:503},{3:504,4:$V2,5:$V3,244:505},{3:506,4:$V2,5:$V3},{3:507,4:$V2,5:$V3},o($Vt1,[2,295]),o($V0,$Vi2,{260:508,82:[1,509],84:$Vj2}),{82:[1,511]},{3:143,4:$V2,5:$V3,75:512},{3:504,4:$V2,5:$V3,84:[1,515],218:513,229:514,244:516},{3:517,4:$V2,5:$V3},o($V0,[2,369]),{81:$Vk2,83:[1,518]},o($VZ1,[2,312]),o($VN1,[2,373]),o($V0,[2,257],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($V0,[2,351]),o($V0,[2,259],{81:$Vl2}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:500,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv,212:521},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:522,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},o($Vm2,[2,266]),o($V0,[2,260]),{81:$Vn2,83:[1,523]},o($Ve2,[2,278]),o($V0,[2,340]),o($Vo2,[2,128],{58:525,120:[1,526]}),{108:[1,527]},o($VO1,[2,112],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),{3:248,4:$V2,5:$V3,75:363,76:365,79:528,82:$VP1,85:364,166:$Vq,167:$Vr,168:$Vs},o($Vy1,[2,64],{88:447,92:448,87:529,89:$V42,93:$V52,94:$V62,95:$V72,96:$V82,97:$V92,98:$Va2,99:$Vb2,100:$Vc2,101:$Vd2}),o($Vp2,[2,83]),{89:[1,530]},{89:[2,95]},{89:$V42,92:531,94:$V62,95:$V72,96:$V82,97:$V92,98:$Va2,99:$Vb2,100:$Vc2,101:$Vd2},{89:[2,98]},{89:[2,99],96:[1,532]},{89:[2,101],96:[1,533]},{89:[2,103]},{96:[1,534]},{89:[2,105]},{89:[2,106]},{89:[2,107]},{83:[1,535]},o($Ve2,[2,71]),{3:536,4:$V2,5:$V3},o($Ve2,[2,74]),{3:537,4:$V2,5:$V3},o($Ve2,[2,78]),{3:538,4:$V2,5:$V3},{3:539,4:$V2,5:$V3},{3:540,4:$V2,5:$V3},o($V0,[2,358]),{3:541,4:$V2,5:$V3},{131:542,163:$Vn},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:543,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:376,4:$V2,5:$V3,134:375,206:544},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:545,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:546,4:$V2,5:$V3},o($Vk1,[2,218]),{83:[1,547]},{81:$VX1,83:[1,548]},o($Vk1,[2,237]),o($Vk1,[2,239]),{83:[1,549]},{81:$VX1,83:[1,550]},o($VC1,[2,399]),o($VT1,[2,404]),o($VT1,[2,406]),o($VT1,[2,407]),o($VT1,[2,408]),o($V0,[2,374]),o($VW1,[2,140]),o($VW1,[2,142]),o($VW1,[2,144]),o($VW1,[2,146]),o($VZ1,[2,193],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($Vk1,[2,152]),o($Vk1,[2,149]),o($Vk1,[2,203]),o($VK1,[2,207],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),{83:[1,551]},{81:[1,553],83:[1,552],133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,193:162,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1},{81:[1,554],83:[1,555]},{81:$Vq2,83:[1,556]},o($VZ1,[2,270],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($V0,[2,335]),{255:[1,558]},o($V0,[2,336]),{4:$VL1,149:559,246:[1,560],247:$VM1},o($V0,[2,337]),o($V0,[2,339]),o($V0,[2,342]),o($V0,[2,344]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:318,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,160:561,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:562,4:$V2,5:$V3},{3:429,4:$V2,5:$V3,240:563},{82:[1,564]},{83:[1,565]},{81:[1,566],83:[2,297]},{28:567,53:47,61:63,67:$V5},o($VZ1,[2,314]),o($V0,[2,282],{82:$Vh2}),{84:[1,568]},{3:569,4:$V2,5:$V3},{82:[1,570],85:572,142:[1,571],166:$Vq,167:$Vr,168:$Vs},{81:$Vq2,83:[1,573]},o($Vm2,[2,265]),{28:575,53:47,61:63,67:$V5,209:[1,574]},{3:376,4:$V2,5:$V3,134:576},o($Vr2,[2,136],{59:577,126:[1,578]}),{108:[1,579]},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:585,109:580,111:581,112:$Vs2,114:$Vt2,115:$Vu2,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($V32,[2,67]),o($Vp2,[2,82]),{3:248,4:$V2,5:$V3,75:587,76:590,82:[1,589],85:588,90:586,166:$Vq,167:$Vr,168:$Vs},{89:[2,96]},{89:[2,100]},{89:[2,102]},{89:[2,104]},o($Ve2,[2,70],{3:591,4:$V2,5:$V3,84:[1,592]}),o($Ve2,[2,72]),o($Ve2,[2,75]),o($Ve2,[2,79]),o($V0,[2,368]),o($V0,[2,364]),o($V0,[2,366]),o($V0,[2,362]),o($V0,[2,252],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($Vf2,[2,255]),o($Vf2,[2,256],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($Vg2,$V_1,{86:[1,593]}),o($Vk1,[2,230]),o($Vk1,[2,231]),o($Vk1,[2,238]),o($Vk1,[2,240]),o($Vk1,[2,173]),o($Vk1,[2,174]),{130:[1,594]},{130:[1,595]},o($V$1,[2,319]),o($V$1,[2,321]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:596,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:597,4:$V2,5:$V3},o($Vv2,[2,322],{245:598,248:599,249:600,197:$Vw2,211:$Vx2,223:$Vy2,238:$Vz2,241:$VA2,250:$VB2}),o($Vv2,[2,317]),{81:$VX1,83:[1,607]},o($V0,[2,347]),{81:$Vk2,83:[1,608]},{3:429,4:$V2,5:$V3,240:609},o($V0,[2,283],{219:610,220:611,221:612,211:$VC2,222:$VD2,223:$VE2,224:$VF2}),o($VG2,$VH2,{3:504,230:617,244:618,231:619,232:620,4:$V2,5:$V3,237:$VI2}),{83:[2,298]},{28:622,53:47,61:63,67:$V5},o($VZ1,[2,313]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:500,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv,212:623},{73:174,82:$Vd1,85:176,130:$V7,131:173,137:175,142:$Ve1,143:624,144:$Vf1,161:$Vl,162:$Vm,163:$Vn,166:$Vq,167:$Vr,168:$Vs,282:177,283:$Vg1},o($Vm2,[2,269]),o($Vm2,[2,264]),{82:$V02,85:436,142:$V12,166:$Vq,167:$Vr,168:$Vs,210:625},o($V0,[2,263]),o($Ve2,[2,279]),o($VJ2,[2,123],{60:626,117:[1,627],118:[1,628],119:[1,629]}),{73:630,130:$V7},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:633,121:631,122:632,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($V22,[2,121],{110:634,81:$VK2,116:[1,636]}),o($VL2,[2,115]),{113:[1,637]},{82:[1,638]},{82:[1,639]},o($VL2,[2,120],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($Vp2,[2,110],{91:640,102:[1,641],104:[1,642]}),o($VM2,[2,85],{3:643,4:$V2,5:$V3,84:[1,644]}),{3:645,4:$V2,5:$V3,84:[1,646]},{28:647,53:47,61:63,67:$V5},o($VM2,[2,92],{3:648,4:$V2,5:$V3,84:[1,649]}),o($Ve2,[2,68]),{3:650,4:$V2,5:$V3},{3:492,4:$V2,5:$V3},{83:[1,651]},{83:[1,652]},o($VZ1,[2,271],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($V0,[2,338]),o($Vv2,[2,316]),o($Vv2,[2,323],{249:653,197:$Vw2,211:$Vx2,223:$Vy2,238:$Vz2,241:$VA2,250:$VB2}),o($V$1,[2,325]),{239:[1,654]},{239:[1,655]},o($V$1,[2,328]),{82:[1,656]},{3:664,4:$V2,5:$V3,73:658,76:663,85:662,130:$V7,131:659,137:660,138:661,151:657,161:$Vl,162:$Vm,163:$Vn,164:$Vo,166:$Vq,167:$Vr,168:$Vs},{164:[1,665]},o($V0,$Vi2,{260:666,84:$Vj2}),o($V0,[2,352]),{81:$Vk2,83:[1,667]},o($V0,[2,280]),o($V0,[2,284],{221:668,211:$VC2,222:$VD2,223:$VE2,224:$VF2}),o($VN2,[2,286]),o($VN2,[2,287]),{187:[1,669]},{187:[1,670]},{187:[1,671]},{81:[1,672],83:[2,296]},o($VZ1,[2,315]),o($VZ1,[2,299]),{65:[1,679],233:673,234:674,235:675,236:676,238:[1,677],239:[1,681],241:[1,678],243:[1,680]},{3:682,4:$V2,5:$V3},o($V0,[2,370]),{81:$Vq2,83:[1,683]},o($Vm2,[2,268]),o($V0,[2,261],{81:$Vl2}),o($VJ2,[2,48]),{28:684,53:47,61:63,66:[1,685],67:$V5},{28:686,53:47,61:63,67:$V5},{28:687,53:47,61:63,67:$V5},o($Vr2,[2,138],{127:688,128:[1,689]}),o($Vo2,[2,129],{81:[1,690]}),o($VO2,[2,130]),o($VO2,[2,132],{193:162,123:[1,691],124:[1,692],133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($V22,[2,114]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:585,111:693,112:$Vs2,114:$Vt2,115:$Vu2,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:694,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{82:[1,695]},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:585,109:696,111:581,112:$Vs2,114:$Vt2,115:$Vu2,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:585,109:697,111:581,112:$Vs2,114:$Vt2,115:$Vu2,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($Vp2,[2,84]),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:698,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{3:376,4:$V2,5:$V3,105:699,134:439},o($VM2,[2,86]),{3:700,4:$V2,5:$V3},o($VM2,[2,88]),{3:701,4:$V2,5:$V3},{83:[1,702]},o($VM2,[2,93]),{3:703,4:$V2,5:$V3},o($Ve2,[2,69]),o($Vk1,[2,175]),o($V$1,[2,318]),o($V$1,[2,324]),o($V$1,[2,326]),{242:[1,704]},{73:705,130:$V7},o($V$1,[2,330]),o($V$1,[2,176]),o($V$1,[2,177]),o($V$1,[2,178]),o($V$1,[2,179]),o($V$1,[2,180]),o($V$1,[2,181]),{82:$Vo1},o($V$1,[2,331]),o($V0,[2,345]),o($V0,[2,353]),o($VN2,[2,285]),{3:706,4:$V2,5:$V3},{73:707,130:$V7},{3:708,4:$V2,5:$V3},o($VG2,$VH2,{232:620,231:709,237:$VI2}),o($VZ1,[2,301]),o($VZ1,[2,302]),o($VZ1,[2,303]),o($VZ1,[2,304]),{239:[1,710]},{239:[1,711]},o($VZ1,[2,309]),{3:712,4:$V2,5:$V3},{3:713,4:$V2,5:$V3},o($VG2,[2,306]),o($Vm2,[2,267]),o($VJ2,[2,124]),{28:714,53:47,61:63,67:$V5},o($VJ2,[2,126]),o($VJ2,[2,127]),o($Vr2,[2,137]),{73:715,130:$V7},{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:633,122:716,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},o($VO2,[2,133]),{125:[1,717]},o($VL2,[2,116]),o($V22,[2,122],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),{3:82,4:$V2,5:$V3,73:69,76:65,82:$V6,85:73,103:585,109:718,111:581,112:$Vs2,114:$Vt2,115:$Vu2,130:$V7,131:71,132:68,133:$V8,134:67,135:64,136:66,137:70,138:72,139:74,140:75,141:76,142:$V9,144:$Va,146:79,147:$Vb,148:$Vc,150:$Vd,152:81,153:$Ve,154:$Vf,155:$Vg,156:$Vh,157:$Vi,158:$Vj,159:$Vk,161:$Vl,162:$Vm,163:$Vn,164:$Vo,165:$Vp,166:$Vq,167:$Vr,168:$Vs,169:$Vt,179:$Vu,197:$Vv},{81:$VK2,83:[1,719]},{81:$VK2,83:[1,720]},o($Vp2,[2,108],{193:162,133:$VS,177:$VT,178:$VU,179:$VV,180:$VW,181:$VX,182:$VY,183:$VZ,184:$V_,185:$V$,186:$V01,187:$V11,188:$V21,189:$V31,190:$V41,191:$V51,192:$V61,195:$V71,196:$V81,197:$V91,198:$Va1,199:$Vb1,200:$Vc1}),o($Vp2,[2,109],{81:$Vn2}),o($VM2,[2,87]),o($VM2,[2,89]),{3:721,4:$V2,5:$V3,84:[1,722]},o($VM2,[2,94]),{3:723,4:$V2,5:$V3},{81:[1,724]},o($VN2,[2,288]),o($VN2,[2,289]),o($VN2,[2,290]),o($VZ1,[2,300]),{82:[1,725]},{82:[1,726]},{82:[1,727]},{82:[1,728]},o($VJ2,[2,125]),o($Vr2,[2,139]),o($VO2,[2,131]),o($VO2,[2,134],{123:[1,729]}),{81:$VK2,83:[1,730]},o($VL2,[2,118]),o($VL2,[2,119]),o($VM2,[2,90]),{3:731,4:$V2,5:$V3},{82:[1,732]},{73:733,130:$V7},{3:429,4:$V2,5:$V3,240:734},{3:429,4:$V2,5:$V3,240:735},{3:376,4:$V2,5:$V3,105:736,134:439},{3:376,4:$V2,5:$V3,105:737,134:439},o($VO2,[2,135]),o($VL2,[2,117]),o($VM2,[2,91]),{3:738,4:$V2,5:$V3},{83:[1,739]},{81:$Vk2,83:[1,740]},{81:$Vk2,83:[1,741]},{81:$Vn2,83:[1,742]},{81:$Vn2,83:[1,743]},{83:[1,744]},o($V$1,[2,329]),o($VZ1,[2,307]),{242:[1,745]},o($VZ1,[2,310]),o($VZ1,[2,311]),o($V$1,[2,327]),{3:746,4:$V2,5:$V3},{82:[1,747]},{3:429,4:$V2,5:$V3,240:748},{81:$Vk2,83:[1,749]},o($VZ1,[2,308])],
defaultActions: {100:[2,183],101:[2,184],102:[2,185],103:[2,186],104:[2,187],105:[2,188],106:[2,189],109:[2,3],185:[2,378],186:[2,379],187:[2,380],188:[2,381],280:[2,249],281:[2,250],282:[2,251],304:[2,382],305:[2,383],448:[2,95],450:[2,98],453:[2,103],455:[2,105],456:[2,106],457:[2,107],531:[2,96],532:[2,100],533:[2,102],534:[2,104],567:[2,298]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 144
break;
case 1:return 5
break;
case 2:return 5
break;
case 3:return 163
break;
case 4:return 163
break;
case 5:return /* skip comments */
break;
case 6:return /* return 'COMMENT' */
break;
case 7:/* skip whitespace */
break;
case 8:return 196
break;
case 9:return 195
break;
case 10:return 277
break;
case 11:return 256
break;
case 12:return 66
break;
case 13:return 253
break;
case 14:return 195
break;
case 15:return 100
break;
case 16:return 202
break;
case 17:return 84
break;
case 18:return 281
break;
case 19:return 123
break;
case 20:return 258
break;
case 21:return 223
break;
case 22:return 289;
break;
case 23:return 157
break;
case 24:return 295
break;
case 25:return 199
break;
case 26:return 200
break;
case 27:return 108
break;
case 28:return 169
break;
case 29:return 148
break;
case 30:return 224
break;
case 31:return 272
break;
case 32:return 124
break;
case 33:return "COLUMN"
break;
case 34:return "COLUMNS"
break;
case 35:return "COMMIT"
break;
case 36:return "CONSTRAINT"
break;
case 37:return "CONVERT"
break;
case 38:return "COUNT"
break;
case 39:return 215
break;
case 40:return "CROSS"
break;
case 41:return 115
break;
case 42:return "CURSOR"
break;
case 43:return 259
break;
case 44:return 263
break;
case 45:return 268
break;
case 46:return 211
break;
case 47:return 207
break;
case 48:return 123
break;
case 49:return 62
break;
case 50:return 251
break;
case 51:return 172
break;
case 52:return 222
break;
case 53:return 247
break;
case 54:return 176
break;
case 55:return 118
break;
case 56:return 165
break;
case 57:return 12
break;
case 58:return 162
break;
case 59:return 273
break;
case 60:return 158
break;
case 61:return 241
break;
case 62:return 77
break;
case 63:return 107
break;
case 64:return 112
break;
case 65:return 116
break;
case 66:return 279
break;
case 67:return 228
break;
case 68:return 250
break;
case 69:return 198
break;
case 70:return 243
break;
case 71:return 94
break;
case 72:return 208
break;
case 73:return 119
break;
case 74:return 74
break;
case 75:return 89
break;
case 76:return 239
break;
case 77:return 159
break;
case 78:return 95
break;
case 79:return 177
break;
case 80:return 126
break;
case 81:return 280
break;
case 82:return 71	
break;
case 83:return "MAX"
break;
case 84:return "MIN"
break;
case 85:return "EXCEPT"
break;
case 86:return "MODIFY"
break;
case 87:return 93
break;
case 88:return 275
break;
case 89:return 147
break;
case 90:return 125
break;
case 91:return 197
break;
case 92:return 164
break;
case 93:return 291
break;
case 94:return 102
break;
case 95:return 128
break;
case 96:return 271
break;
case 97:return 196
break;
case 98:return 120
break;
case 99:return 96
break;
case 100:return 14
break;
case 101:return 238
break;
case 102:return 276
break;
case 103:return 13
break;
case 104:return 242
break;
case 105:return 278
break;
case 106:return 254
break;
case 107:return 97
break;
case 108:return 294
break;
case 109:return 114
break;
case 110:return 69
break;
case 111:return 259
break;
case 112:return 263
break;
case 113:return 67
break;
case 114:return 99
break;
case 115:return 204
break;
case 116:return 113
break;
case 117:return 262
break;
case 118:return 201
break;
case 119:return "SUM"
break;
case 120:return 216
break;
case 121:return 264
break;
case 122:return 175
break;
case 123:return 255
break;
case 124:return 72
break;
case 125:return 'TRAN'
break;
case 126:return 293
break;
case 127:return 161
break;
case 128:return 117
break;
case 129:return 65
break;
case 130:return 203
break;
case 131:return 261
break;
case 132:return 104
break;
case 133:return 68
break;
case 134:return 209
break;
case 135:return 266
break;
case 136:return 174
break;
case 137:return 106
break;
case 138:return 130
break;
case 139:return 182
break;
case 140:return 178
break;
case 141:return 179
break;
case 142:return 133
break;
case 143:return 180
break;
case 144:return 181
break;
case 145:return 192
break;
case 146:return 189
break;
case 147:return 191
break;
case 148:return 188
break;
case 149:return 184
break;
case 150:return 183
break;
case 151:return 186
break;
case 152:return 190
break;
case 153:return 185
break;
case 154:return 187
break;
case 155:return 190
break;
case 156:return 82
break;
case 157:return 83
break;
case 158:return 142
break;
case 159:return 283
break;
case 160:return 285
break;
case 161:return 287
break;
case 162:return 86
break;
case 163:return 81
break;
case 164:return 167
break;
case 165:return 9
break;
case 166:return 166
break;
case 167:return 168
break;
case 168:return 4
break;
case 169:return 8
break;
case 170:return 'INVALID'
break;
}
},
rules: [/^(?:@\[)/i,/^(?:\[([^\]])*?\])/i,/^(?:`([^\]])*?`)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:\/\*(.*?)\*\/)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:ABSOLUTE\b)/i,/^(?:ADD\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASSERT\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:AUTO_INCREMENT\b)/i,/^(?:AUTOCOMMIT\b)/i,/^(?:AVG\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHARSET\b)/i,/^(?:CLOSE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:COMMIT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONVERT\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:CURSOR\b)/i,/^(?:DATABASE\b)/i,/^(?:DATABASES\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ENGINE\b)/i,/^(?:ENUM\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FETCH\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:HELP\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:SOURCE\b)/i,/^(?:MATRIX\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MINUS\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NEXT\b)/i,/^(?:NEW\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:OFF\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OPEN\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIOR\b)/i,/^(?:QUERY\b)/i,/^(?:REFERENCES\b)/i,/^(?:RELATIVE\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROLLUP\b)/i,/^(?:ROW\b)/i,/^(?:SCHEMA\b)/i,/^(?:SCHEMAS\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHOW\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLES\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRAN\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUE\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:->)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:!===)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:@)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

//
// 12prettyflag.js - prettify
//

alasql.prettyflag = false;

alasql.pretty = function(sql, flag) {
	var pf = alasql.prettyflag;
	alasql.prettyflag = !flag;
	var s = alasql.parse(sql).toString();
	alasql.prettyflag = pf;
	return s;
};

function K(s){
	if(alasql.prettyflag) {
		return '<b style="color:blue">'+s.toUpperCase()+'</b>'; 
	} else {
		return s;
	}
};

function P(s){
	if(alasql.prettyflag) {
		return '<span style="color:green">'+s+'</span>'; 
	} else {
		return s;
	}
};

function L(s){
	if(alasql.prettyflag) {
		return '<span style="color:red">'+s+'</span>'; 
	} else {
		return s;
	}
};

function N(s){
	if(alasql.prettyflag) {
		return '<span style="color:green">'+s+'</span>'; 
	} else {
		return s;
	}
};

function S(s){
	if(alasql.prettyflag) {
		return '<span style="color:green">'+s+'</span>'; 
	} else {
		return s;
	}
};

function NL(){
	if(alasql.prettyflag) {
		return '<br/>'; 
	} else {
		return '\n';
	}	
};

function ID(){
	if(alasql.prettyflag) {
		return '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'; 
	} else {
		return '    ';
	}	
};



/*
//
// Utilities for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// 
var utils = alasql.utils = {};

// Stub for non-ecisting WHERE clause 
// so is faster then if(whenrfn) whenfn()
function returnTrue () {return true};
function returnUndefined() {};

var escapeq = utils.escapeq = function(s) {
    return s.replace(/\'/g,'\\\'');
}

var doubleq = utils.doubleq = function(s) {
    return s.replace(/(\'\')/g,'\\\'');
}

var doubleqq = utils.doubleqq = function(s) {
    return s.replace(/\'/g,"\'");
}


// For LOAD
var loadFile = utils.loadFile = function(path, success, error) {
    if(typeof exports == 'object') {
        // For Node.js
        var fs = require('fs');
        var data = fs.readFileSync(path);
        success(data.toString());
    } else {
        // For browser
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function()
        {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    if (success)
                        success(xhr.responseText);
                } else {
                    if (error)
                        error(xhr);
                }
            }
        };
        xhr.open("GET", path, false); // Async
        xhr.send();
    }
}


// Fast hash function
var hash = utils.hash = function hash(str){
    var h = 0;
    if (str.length == 0) return h;
    for (var i = 0; i < str.length; i++) {
        h = ((h<<5)-h)+str.charCodeAt(i);
        h = h & h; 
   	}
    return h;
};

// Union arrays
var arrayUnion = utils.arrayUnion = function (a,b) {
    var r = b.slice(0);
    a.forEach(function(i) { if (r.indexOf(i) < 0) r.push(i); });
    return r;
};

// Array Difference
var arrayDiff = utils.arrayDiff  = function (a,b) {
    return a.filter(function(i) {return b.indexOf(i) < 0;});
};

// Arrays deep intersect (with records)
var arrayIntersect = utils.arrayIntersept  = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
            found = found || (ai==bi);
        });

        if(found) {
            r.push(ai); 
        }
    });
    return r;
};


// Arrays deep union (with records)
var arrayUnionDeep = utils.arrayUnionDeep = function (a,b) {
    var r = b.slice(0);
    a.forEach(function(ai) {
        var found = false;
        
        r.forEach(function(ri){
//            found = found || equalDeep(ai, ri, true);
            found = found || deepEqual(ai, ri);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

// Arrays deep union (with records)
var arrayExceptDeep = utils.arrayExceptDeep = function (a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
//            found = found || equalDeep(ai, bi, true);
            found = found || deepEqual(ai, bi);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

// Arrays deep intersect (with records)
var arrayIntersectDeep = utils.arrayInterseptDeep  = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
//            found = found || equalDeep(ai, bi, true);
            found = found || deepEqual(ai, bi, true);
        });

        if(found) {
            r.push(ai); 
        }
    });
    return r;
};

// Deep clone obects
var cloneDeep = utils.cloneDeep = function cloneDeep(obj) {
    if(obj == null || typeof(obj) != 'object')
        return obj;

    var temp = obj.constructor(); // changed

    for(var key in obj) {
        if(obj.hasOwnProperty(key)) {
            temp[key] = cloneDeep(obj[key]);
        }
    }
    return temp;
}

// Check equality of objects
var equalDeep = utils.equalDeep = function equalDeep (x, y, deep) {
    if (deep) {
        if (x == y) return true;

        var p;
        for (p in y) {
            if (typeof (x[p]) == 'undefined') { return false; }
        }

        for (p in y) {
            if (y[p]) {
                switch (typeof (y[p])) {
                    case 'object':
                        if (!equalDeep(y[p],x[p])) { return false; } break;
                    case 'function':
                        if (typeof (x[p]) == 'undefined' ||
                  (p != 'equals' && y[p].toString() != x[p].toString()))
                            return false;
                        break;
                    default:
                        if (y[p] != x[p]) { return false; }
                }
            } else {
                if (x[p])
                    return false;
            }
        }

        for (p in x) {
            if (typeof (y[p]) == 'undefined') { return false; }
        }

        return true;
    }
    return x == y;
};

var deepEqual = utils.deepEqual = function (x, y) {
  if ((typeof x == "object" && x != null) && (typeof y == "object" && y != null)) {
    if (Object.keys(x).length != Object.keys(y).length)
      return false;

    for (var prop in x) {
      if (y.hasOwnProperty(prop))
      {  
        if (! deepEqual(x[prop], y[prop]))
          return false;
      }
      else
        return false;
    }

    return true;
  }
  else if (x !== y)
    return false;
  else
    return true;
}


// Extend object
var extend = utils.extend = function extend (a,b){
    if(typeof a == 'undefined') a = {};
    for(key in b) {
        if(b.hasOwnProperty(key)) {
            a[key] = b[key]
        }
    }
    return a;
};;

// Flat array by first row
var flatArray = utils.flatArray = function(a) {
    if(!a || a.length == 0) return [];
    var key = Object.keys(a[0])[0];
    if(typeof key == 'undefined') return [];
    return a.map(function(ai) {return ai[key]});
};

// Convert array of objects to array of arrays
var arrayOfArrays = utils.arrayOfArrays = function (a) {
    return a.map(function(aa){
        var ar = [];
        for(var key in aa) ar.push(aa[key]);
        return ar;
    });
};



/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/


// Initial parameters
alasql.parser = parser;
alasql.parse = parser.parse.bind(parser); // Shortcut

// Database Engines
alasql.engines = {};

// Databases
alasql.databases = {};
alasql.databasenum = 0; // Current database

// Deafult options
alasql.options = {};
alasql.options.valueof = false; // Use valueof in orderfn
alasql.options.dropifnotexists = false; // DROP database in any case
alasql.options.datetimeformat = 'sql'; // How to handle DATE and DATETIME types
								// Another value is 'javascript'
alasql.options.casesensitive = true; // Table and column names are case sensitive and converted to lower-case
alasql.options.logtarget = 'output'; // target for log. Values: 'console', 'output', 'id' of html tag
alasql.options.logprompt = true; // Print SQL at log

// AUTOCOMMIT ON | OFF
alasql.autocommit = true;

alasql.prompthistory = [];

alasql.from = {}; // FROM functions
alasql.into = {}; // INTO functions

alasql.fn = {};

// Cache
alasql.MAXSQLCACHESIZE = 10000;
alasql.DEFAULTDATABASEID = 'alasql';

alasql.use = function (databaseid) {
	if(!databaseid) databaseid = alasql.DEFAULTDATABASEID;
	if(alasql.useid == databaseid) return;
	alasql.useid = databaseid;
	var db = alasql.databases[alasql.useid];
	alasql.tables = db.tables;
//	alasql.fn = db.fn;
	db.resetSqlCache();
};

// Run one statement
alasql.exec = function (sql, params, cb) {
	return alasql.dexec(alasql.useid, sql, params, cb);
}

alasql.dexec = function (databaseid, sql, params, cb) {
	var db = alasql.databases[databaseid];
//	if(db.databaseid != databaseid) console.trace('got!');
//	console.log(3,db.databaseid,databaseid);
	var hh = hash(sql);
	var statement = db.sqlCache[hh];
	if(statement && db.dbversion == statement.dbversion) {
		return statement(params, cb);
	}

	// Create AST
	var ast = alasql.parse(sql);
	if(!ast.statements) return;
	if(ast.statements.length == 0) return 0;
	else if(ast.statements.length == 1) {
		if(ast.statements[0].compile) {
			var statement = ast.statements[0].compile(databaseid);
			if(!statement) return;
			statement.sql = sql;
			statement.dbversion = db.dbversion;
			
			// Secure sqlCache size
			if (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {
				db.resetSqlCache();
			}
			db.sqlCacheSize++;
			db.sqlCache[hh] = statement;
			var res = alasql.res = statement(params, cb);
			return res;
		} else {
//			console.log(ast.statements[0]);
			var res = alasql.res = ast.statements[0].execute(databaseid, params, cb);		
			return res;
		}
	} else {
		// Multiple statements
		return alasql.drun(databaseid, ast, params, cb);
	}
};

// Run multiple statements and return array of results
alasql.drun = function (databaseid, ast, params, cb) {
	var useid = alasql.useid;
	if(useid != databaseid) alasql.use(databaseid);
	var res = [];
	for (var i=0, ilen=ast.statements.length; i<ilen; i++) {
		if(ast.statements[i]) {
//			if(alasql.options.logstatements) console.log(ast.statements[i].toString());
			if(ast.statements[i].compile) { 
				var statement = ast.statements[i].compile(alasql.useid);
				res.push(alasql.res = statement(params));
			} else {
				res.push(alasql.res = ast.statements[i].execute(alasql.useid, params));
			}		
		}
	};
	if(useid != databaseid) alasql.use(useid);
	if(cb) cb(res);
	alasql.res = res;
	return res;
};

// Compiler
alasql.compile = function(sql, kind, databaseid) {
	if(!kind) kind = 'collection';
	if(!databaseid) databaseid = alasql.useid;
	var ast = alasql.parse(sql);
	if(ast.statements.length == 1) {
		var statementfn = ast.statements[0].compile(databaseid);
		
		if(kind == 'value') {
			return function(params,cb) {
				var res = statementfn(params);
				var key = Object.keys(res[0])[0];
				if(cb) cb(res[0][key]);
				return res[0][key];
			};
		} else  if(kind == 'single') {
			return function(params,cb) {
				var res = statementfn(params);
				if(cb) cb(res[0]);
				return res[0];
			}
		} else  if(kind == 'row') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				var a = [];
				for(var key in res[0]) {
					a.push(res[0][key]);
				};
				if(cb) cb(a);
				return a;
			}
		} else  if(kind == 'column') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				var ar = [];
				var key = Object.keys(res)[0];
				for(var i=0, ilen=res.length; i<ilen; i++){
					ar.push(res[i][key]);
				}
				if(cb) cb(ar);
				return ar;
			}
		} else if(kind == 'array') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				res = flatArray(res);
				if(cb) cb(res);
				return res;
			};
		} else if(kind == 'matrix') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				res = arrayOfArrays(res);
				if(cb) cb(res);
				return res;
			};				
		} else if(kind == 'collection') {
			return statementfn;
		} else {
			return statementfn;
		}

	} else {
		throw new Error('Number of statments in SQL is not equal to 1');
	}
}

// // Default methods to exec SQL statements
// alasql.run = alasql.exec = function (sql, params, cb) {
// 	return this.currentDatabase.exec(sql, params, cb);
// };

// Promised version of exec
// alasql.aexec = function (sql, params) {
// 	var self = this;
// 	return new Promise(function(resolve, reject){
// 		self.exec(sql,params,resolve);
// 	});
// };


// MSSQL-Like aliases
alasql.query = function (sql, params, cb) {
	var res = this.exec(sql, params);
	if(cb) cb(res);
	return res;	
};

alasql.queryArray = function (sql, params, cb) {
	var res = flatArray(this.exec(sql, params));
	if(cb) cb(res);
	return res;
};

alasql.querySingle = function (sql, params, cb) {
	var res = this.exec(sql, params)[0];
	if(cb) cb(res);
	return res;
};

alasql.queryRow = function (sql, params, cb) {
	var res = this.querySingle(sql, params);
	var a = [];
	for(var key in res) {
		a.push(res[key]);
	};
	if(cb) cb(a);
	return a;
};

alasql.queryValue = function (sql, params, cb) {
	var res = this.exec(sql, params)[0];
	var val = res[Object.keys(res)[0]];
	if(cb) cb(val);
	return val;
	// TODO Refactor to query.columns
};

alasql.queryArrayOfArrays = function (sql, params, cb) {
	var res = this.exec(sql, params);
	var keys = Object.keys(res[0]);
	var klen = keys.length;
	var aa = [];
	for(var i=0, ilen=res.length;i<ilen;i++) {
		var r = res[i];
		var a = [];
		for(var k=0; k<klen;k++){
			a.push(r[keys[k]]);
		}
		aa.push(a);
	}

	if(cb) cb(aa);
	return aa;
};

/*alasql.queryColumn = function (sql, params, cb) {
	var res = this.exec(sql, params);
	var keys = Object.keys(res[0]);
	var klen = keys.length;
	var aa = [];
	for(var i=0, ilen=res.length;i<ilen;i++) {
		var r = res[i];
		var a = [];
		for(var k=0; k<klen;k++){
			a.push(r[keys[k]]);
		}
		aa.push(a);
	}

	if(cb) cb(aa);
	return aa;
};
*/
alasql.value = alasql.queryValue;
alasql.single = alasql.querySingle;
alasql.row = alasql.queryRow;
alasql.column = alasql.queryArray;
alasql.array = alasql.queryArray;
alasql.matrix = alasql.queryArrayOfArrays;



/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Main Database class
var Database = alasql.Database = function (databaseid) {
	var self = this;
	if(self === alasql) {
		if(databaseid) {
			self = alasql.databases[databaseid];
			if(!self) {
				throw new Error('Database "'+databaseid+'" not found');
			}
		} else {
			// Create new database (or get alasql?)
			self = alasql.databases.alasql;
//			self = new Database(databaseid); // to call without new
		}
	}
	if(!databaseid) {
		databaseid = "db"+(alasql.databasenum++); // Random name
	};
	self.databaseid = databaseid;
	alasql.databases[databaseid] = self;
	self.tables = {};
	self.views = {};

	self.indices = {};
//	self.fn = {};
	self.resetSqlCache();
	self.dbversion = 0;
	return self;
};

// Start database

Database.prototype.resetSqlCache = function () {
	this.sqlCache = {}; // Cache for compiled SQL statements
	this.sqlCacheSize = 0;	
}



// // Main SQL function
Database.prototype.exec = function(sql, params, cb) {
	return alasql.dexec(this.databaseid, sql, params, cb);
};

// 	// Compile
// 	var statement = this.compile(sql);
// 	// Run
// 	if(statement) {
// 		var data = statement(params, cb);
// 		return data;
// 	}
// 	return;
// };

// // Async version of exec
Database.prototype.aexec = function(sql, params) {
	var self = this;
	return new Promise(function(resolve, reject){
		alasql.dexec(this.databaseid,sql,params,resolve);
	});
};


// Aliases like MS SQL
Database.prototype.query = Database.prototype.exec;
Database.prototype.run = Database.prototype.exec;
Database.prototype.queryArray = function(sql, params, cb) {
	return flatArray(this.exec(sql, params, cb));
}

Database.prototype.queryArrayOfArrays = function(sql, params, cb) {
	return arrayOfArrays(this.exec(sql, params, cb));
}

Database.prototype.querySingle = function(sql, params, cb) {
	return this.exec(sql, params, cb)[0];
}
Database.prototype.queryValue = function(sql, params, cb) {
	var res = this.querySingle(sql, params, cb);
	return res[Object.keys(res)[0]];
}

Database.prototype.value  = Database.prototype.queryValue;
Database.prototype.row    = Database.prototype.querySingle;
Database.prototype.array  = Database.prototype.queryArray;
Database.prototype.matrix = Database.prototype.queryArrayOfArrays;


// Compile statements
Database.prototype.compile = function(sql, kind) {
	return alasql.compile(sql, kind, databaseid);
};
// 	var self = this;
// 	var hh = hash(sql);

// 	// Check cache with hash of SQL statement
// 	var statement = this.sqlcache[hh];
// 	if(!statement) {

// 		// If not fount, then compile it
// 		var ast = alasql.parse(sql);
// 		// Save to cache

// 		statement = this.sqlcache[hh]= ast.compile(self);

// 		// Memory leak prevention 
// 		this.sqlcachesize++;
// 		if(this.sqlcachesize > alasql.MAXSQLCACHESIZE) {
// 			this.resetSqlCache();
// 		}
// 	};
// 	return statement;
// }

// SQL.js compatibility method
Database.prototype.prepare = Database.prototype.compile;


// Added for compatibility with WebSQL





/*
//
// Transactio class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

Database.prototype.transaction = function(cb) {
	var tx = new alasql.Transaction(this.databaseid);
	var res = cb(tx);
	return res;
};

// Transaction class (for WebSQL compatibility)
var Transaction = alasql.Transaction = function (databaseid) {
	this.transactionid = Date.now();
	this.databaseid = databaseid;
	this.commited = false; 
	this.dbversion = alasql.databases[databaseid].dbversion;
//	this.bank = cloneDeep(alasql.databases[databaseid]);
	this.bank = JSON.stringify(alasql.databases[databaseid]);
	// TODO CLone Tables with insertfns
//	console.log(this);
	return this;
};

// Main class 


// Commit
Transaction.prototype.commit = function() {
	this.commited = true;
	alasql.databases[this.databaseid].dbversion = Date.now();
	delete this.bank;
};

// Rollback
Transaction.prototype.rollback = function() {
	if(!this.commited) {
		alasql.databases[this.databaseid] = JSON.parse(this.bank);
		// alasql.databases[this.databaseid].tables = this.bank;
		// alasql.databases[this.databaseid].dbversion = this.dbversion;
		delete this.bank;
	} else {
		throw new Error('Transaction already commited');
	}
};

// Transactions stub
Transaction.prototype.exec = Transaction.prototype.executeSQL = function(sql, params, cb) {
//	console.log(this.databaseid);
	return alasql.dexec(this.databaseid,sql,params,cb);
};


Transaction.prototype.query = Database.prototype.exec;
Transaction.prototype.run = Database.prototype.exec;
Transaction.prototype.queryArray = function(sql, params, cb) {
	return flatArray(this.exec(sql, params, cb));
}

Transaction.prototype.queryArrayOfArrays = function(sql, params, cb) {
	return arrayOfArrays(this.exec(sql, params, cb));
}

Transaction.prototype.querySingle = function(sql, params, cb) {
	return this.exec(sql, params, cb)[0];
}
Transaction.prototype.queryValue = function(sql, params, cb) {
	var res = this.querySingle(sql, params, cb);
	return res[Object.keys(res)[0]];
}



/*
//
// Persistence Store for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Store to Storage
alasql.store = function(databaseid, transactionid) {
	var obj = {
		tables: alasql.databases[databaseid].tables
	};
	var key = databaseid;
	if(transactionid) key += "."+transactionid;
	localStorage[key] = JSON.stringify(obj);
};

// Restore from localStorage
alasql.restore = function(databaseid, transactionid) {
	var key = databaseid;
	if(transactionid) key += "."+transactionid;

	var res = localStorage[key];
	if(res) {
		var obj = JSON.parse(localStorage[key]);
		var db = new alasql.Database(databaseid);
		db.databaseid = databaseid;
		db.tables = obj.tables;
		return db;
	} else {
		return null;
	}

};

// Clear all database records with transactions
alasql.wipe = function (databaseid, transactionid) {
	var key = databaseid;
	if(transactionid) {
		key += "."+transactionid;
		localStorage.removeItem(key);
	} else {
		for(var key in localStorage) {
			if(key.substr(0,databaseid.length+1) == databaseid+".") {
				localStorage.removeItem(key);
			};
		};
		localStorage.removeItem(databaseid);
	}
};

/*
//
// Table class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var Table = alasql.Table = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	this.data = [];

	this.inddefs = {};
	this.indices = {};

	this.uniqs = {};
	this.uniqdefs = {};	

	extend(this,params);
};


// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;

Table.prototype.indexColumns = function() {
	var self = this;
	self.xcolumns = {};
	self.columns.forEach(function(col){
		self.xcolumns[col.columnid] = col;
	});	
}




/*
//
// View class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var View = alasql.View = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	this.query = [];

	extend(this,params);
};

// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;




/*
//
// Query class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var Query = alasql.Query = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	extend(this,params);
};

// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;




/*
//
// Parser helper for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

var yy = parser.yy = {};

// Utility
yy.extend = extend;
// Option for case sensitive
yy.casesensitive = alasql.options.casesensitive; 

// Base class for all yy classes
var Base = yy.Base = function (params) { return yy.extend(this, params); };

Base.prototype.toString = function() {}
Base.prototype.toType = function() {}
Base.prototype.toJavaScript = function() {}

//var BaseClause = yy,BaseClause = function (params) { return yy.extend(this, params); };
Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {}

//var BaseStatement = yy,BaseStatement = function (params) { return yy.extend(this, params); };
Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {}




/*
//
// Statements class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Statements container
yy.Statements = function(params) { return yy.extend(this, params); };

yy.Statements.prototype.toString = function () {
	return this.statements.map(function(st){return st.toString()}).join(';'+NL());
};

// Compile array of statements into single statement
yy.Statements.prototype.compile = function(db) {
	var statements = this.statements.map(function(st){
		return st.compile(db)
	});
	if(statements.length == 1) {
		return statements[0];	
	} else {
		return function(params, cb){
			var res = statements.map(function(st){ return st(params); });
			if(cb) cb(res);
			return res;
		}
	}
};


// Main query procedure
function queryfn(query,oldscope) {
	var ms;
//	console.log(query);

	// Run all subqueries before main statement
	if(query.queriesfn) {
		query.queriesdata = query.queriesfn.map(function(q,idx){
			if(query.explain) ms = Date.now();
			var res = flatArray(q(query.params));
			query.explaination.push({explid: query.explid++, description:'Query '+idx,ms:Date.now()-ms});
			return res;
		});
//		console.log(query.queriesdata[0]);
	}

	var scope;
	if(!oldscope) scope = {};
	else scope = cloneDeep(oldscope);
	query.scope = scope;

	// First - refresh data sources
	query.sources.forEach(function(source){
//		source.data = query.database.tables[source.tableid].data;
		source.data = source.datafn(query, query.params); 
//		console.log(source, source.data);
		if(typeof source.data == 'function') {
			source.getfn = source.data;
			source.dontcache = source.getfn.dontcache;

//			var prevsource = query.sources[h-1];
			if(source.joinmode == 'OUTER' || source.joinmode == 'RIGHT' || source.joinmode == 'ANTI') {
				source.dontcache = false;
			}
			source.data = {};
		}
//
// Ugly hack to use in query.wherefn and source.srcwherefns functions
// constructions like this.queriesdata['test'].
// I can elimite it with source.srcwherefn.bind(this)()
// but it may be slow.
// 
		source.queriesdata = query.queriesdata;  
	});

	// Preindexation of data sources
//	if(!oldscope) {
		preIndex(query);
//	}

	// query.sources.forEach(function(source) {
	// 		console.log(source.data);
	// });

	// Prepare variables
	query.data = [];
	query.xgroups = {};
	query.groups = [];

	// Level of Joins
	var h = 0;

	// Start walking over data
	doJoin(query, scope, h);

	// If groupping, then filter groups with HAVING function
	if(query.groupfn) {
		if(query.havingfn) query.groups = query.groups.filter(query.havingfn)
		query.data = query.groups;
	};

	// Remove distinct values	
	doDistinct(query);	

	// Reduce to limit and offset
	doLimit(query);

	// UNION / UNION ALL
	if(query.unionallfn) {
		query.data = query.data.concat(query.unionallfn(query.params));
	} else if(query.unionfn) {
		query.data = arrayUnionDeep(query.data, query.unionfn(query.params));
	} else if(query.exceptfn) {
		query.data = arrayExceptDeep(query.data, query.exceptfn(query.params));
	} else if(query.intersectfn) {
		query.data = arrayIntersectDeep(query.data, query.intersectfn(query.params));
	};

	// Ordering
	if(query.orderfn) {
		if(query.explain) var ms = Date.now();
		query.data = query.data.sort(query.orderfn);
		if(query.explain) { 
			query.explaination.push({explid: query.explid++, description:'QUERY BY',ms:Date.now()-ms});
		}
	};

//	console.log(query.intoallfns);

	if(query.explain) {
		return query.explaination;
	} else if(query.intoallfn) {
		return query.intoallfn();	
	} else if(query.intofn) {
		for(var i=0,ilen=query.data.length;i<ilen;i++){
			query.intofn(query.data[i],i);
		}
//		console.log(query.intofn);
		return query.data.length;
	} else {
		return query.data;
	}

	// That's all
};

// Limiting
function doLimit (query) {
//	console.log(query.limit, query.offset)
	if(query.limit) {
		var offset = 0;
		if(query.offset) offset = ((query.offset|0)-1)||0;
		var limit = (query.limit|0) + offset;
		query.data = query.data.slice(offset,limit);
	}
}

// Distinct
function doDistinct (query) {
	if(query.distinct) {
		var uniq = {};
		// TODO: Speedup, because Object.keys is slow
		for(var i=0,ilen=query.data.length;i<ilen;i++) {
			var uix = Object.keys(query.data[i]).map(function(k){return query.data[i][k]}).join('`');
			uniq[uix] = query.data[i];
		};
		query.data = [];
		for(var key in uniq) query.data.push(uniq[key]);
	}
};


// Optimization: preliminary indexation of joins
preIndex = function(query) {
//	console.log(query);
	// Loop over all sources
	for(var k=0, klen = query.sources.length;k<klen;k++) {
		var source = query.sources[k];
		// If there is indexation rule
//console.log('preIndex', source);

		if(k > 0 && source.optimization == 'ix' && source.onleftfn && source.onrightfn) {
			// If there is no table.indices - create it
			if(query.database.tables[source.tableid]) {
				if(!query.database.tables[source.tableid].indices) query.database.tables[source.tableid].indices = {};
					// Check if index already exists
				var ixx = query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)];
				if( !query.database.tables[source.tableid].dirty && ixx) {
					source.ix = ixx; 
				}
			};

			if(!source.ix) {
				source.ix = {};
				// Walking over source data
				var scope = {};
				var i = 0;
				var ilen = source.data.length;
				var dataw;
//				while(source.getfn i<ilen) {

				while((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {
					if(source.getfn && !source.dontcache) source.data[i] = dataw;
//					scope[tableid] = dataw;

//				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					// Prepare scope for indexation
					scope[source.alias || source.tableid] = dataw;

					// Check if it apply to where function 
					if(source.srcwherefn(scope, query.params, alasql)) {
						// Create index entry for each address
						var addr = source.onrightfn(scope, query.params, alasql);
						var group = source.ix [addr]; 
						if(!group) {
							group = source.ix [addr] = []; 
						}
						group.push(dataw);
					}
					i++;
				}
				if(query.database.tables[source.tableid]){
					// Save index to original table				
					query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)] = source.ix;
				};
			}
			// Optimization for WHERE column = expression
		} else if (source.wxleftfns) {
			// Check if index exists
			var ixx = query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')];
			if( !query.database.tables[source.tableid].dirty && ixx) {
				// Use old index if exists
				source.ix = ixx;
				// Reduce data (apply filter)
				source.data = source.ix[source.wxrightfn(null, query.params, alasql)]; 
			} else {
				// Create new index
				source.ix = {};
				// Prepare scope
				var scope = {};
				// Walking on each source line
				var i = 0;
				var ilen = source.data.length;
				var dataw;
//				while(source.getfn i<ilen) {

				while((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {
					if(source.getfn && !source.dontcache) source.data[i] = dataw;
//				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					scope[source.alias || source.tableid] = source.data[i];
					// Create index entry
					var addr = source.wxleftfn(scope, query.params, alasql);
					var group = source.ix [addr]; 
					if(!group) {
						group = source.ix [addr] = []; 
					}
					group.push(source.data[i]);
					i++;
				}
//					query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`'+source.onwherefns)] = source.ix;
				query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')] = source.ix;
			}
			// Apply where filter to reduces rows
			if(source.srcwherefns) {
				if(source.data) {
					var scope = {};
					source.data = source.data.filter(function(r) {
						scope[source.alias] = r;
						return source.srcwherefn(scope, query.params, alasql);
					});
				} else {
					source.data = [];
				}
			}		

		// If there is no any optimization than apply srcwhere filter
		} else if(source.srcwherefns && !source.dontcache) {
			if(source.data) {
				var scope = {};
				// TODO!!!!! Data as Function

				source.data = source.data.filter(function(r) {
					scope[source.alias] = r;
					return source.srcwherefn(scope, query.params, alasql);
				});

				var scope = {};
				var i = 0;
				var ilen = source.data.length;
				var dataw;
				var res = [];
//				while(source.getfn i<ilen) {

				while((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {
					if(source.getfn && !source.dontcache) source.data[i] = dataw;
					scope[source.alias] = dataw;
					if(source.srcwherefn(scope, query.params, alasql)) res.push(dataw);
					i++;
				}
				source.data = res;

			} else {
				source.data = [];
			};
		}			
		// Change this to another place (this is a wrong)
		if(query.database.tables[source.tableid]) {
			//query.database.tables[source.tableid].dirty = false;
		} else {
			// this is a subquery?
		}
	}
}



//
// Join all lines over sources 
//

function doJoin (query, scope, h) {
//	console.log(query.sources.length);
	// Check, if this is a last join?
	if(h>=query.sources.length) {
//console.log(query.wherefns);
		// Then apply where and select
		if(query.wherefn(scope,query.params, alasql)) {
			var res = query.selectfn(scope, query.params, alasql);
//			console.log("last",scope);
			// If there is a GROUP BY then pipe to groupping function
			if(query.groupfn) {
				query.groupfn(res, query.params, alasql)
			} else {
				query.data.push(res);
			}	
		}
	} else {

// STEP 1

		var source = query.sources[h];
		var nextsource = query.sources[h+1];

//		if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "RIGHT"
//			|| source.joinmode == "OUTER" || source.joinmode == "SEMI") {
		if(true) {//source.joinmode != "ANTI") {

			// if(nextsource && nextsource.joinmode == "RIGHT") {
			// 	if(!nextsource.rightdata) {
			// 		console.log("ok");
			// 		nextsource.rightdata = new Array(nextsource.data.length);
			// 		console.log(nextsource.data.length, nextsource.rightdata);
			// 	}
			// }

			var tableid = source.alias || source.tableid; 
			var pass = false; // For LEFT JOIN
			var data = source.data;
			var opt = false;

			// Reduce data for looping if there is optimization hint
			if(!source.getfn || (source.getfn && !source.dontcache)) {
				if(source.joinmode != "RIGHT" && source.joinmode != "OUTER" && source.joinmode != "ANTI" && source.optimization == 'ix') {
					data = source.ix[ source.onleftfn(scope, query.params, alasql) ] || [];
					opt = true;
	//				console.log(source.onleftfn(scope, query.params, alasql));
//					console.log(opt, data, data.length);
				}
			}
			// Main cycle
			var i = 0;
			var ilen=data.length;
			var dataw;
//			console.log(h,opt,source.data,i,source.dontcache);
			while((dataw = data[i]) || (!opt && (source.getfn && (dataw = source.getfn(i)))) || (i<ilen) ) {
				if(!opt && source.getfn && !source.dontcache) data[i] = dataw;
//console.log(h, i, dataw);
				scope[tableid] = dataw;
				// Reduce with ON and USING clause
				if(!source.onleftfn || (source.onleftfn(scope, query.params, alasql) == source.onrightfn(scope, query.params, alasql))) {
					// For all non-standard JOINs like a-b=0
					if(source.onmiddlefn(scope, query.params, alasql)) {
						// Recursively call new join
//						if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "OUTER" || source.joinmode == "RIGHT" ) {
						if(source.joinmode != "SEMI" && source.joinmode != "ANTI") { 
//							console.log(scope);
							doJoin(query, scope, h+1);
						}

						// if(source.data[i].f = 200) debugger;

//						if(source.joinmode == "RIGHT" || source.joinmode == "ANTI" || source.joinmode == "OUTER") {
						if(source.joinmode != "LEFT" && source.joinmode != "INNER") {
							dataw._rightjoin = true;
						}

						// for LEFT JOIN
						pass = true;
					}
				};
				i++;
			};


			// Additional join for LEFT JOINS
			if((source.joinmode == 'LEFT' || source.joinmode == 'OUTER' || source.joinmode == 'SEMI' ) && !pass) {
			// Clear the scope after the loop
				scope[tableid] = {};
				doJoin(query,scope,h+1);
			}	


		}

// STEP 2

		if(h+1 < query.sources.length) {

			if(nextsource.joinmode == "OUTER" || nextsource.joinmode == "RIGHT" 
				|| nextsource.joinmode == "ANTI") {


				scope[source.alias] = {};
			
				var j = 0;
				var jlen = nextsource.data.length;
				var dataw;
				while((dataw = nextsource.data[j]) || (nextsource.getfn && (dataw = nextsource.getfn(j))) || (j<jlen)) {
					if(nextsource.getfn && !nextsource.dontcache) nextsource.data[j] = dataw;

					if(!dataw._rightjoin) {
						scope[nextsource.alias] = dataw;
						doJoin(query, scope, h+2);
					} else {
						//dataw._rightjoin = undefined;	
						delete dataw._rightjoin;					
					}
					j++;
				}
//				console.table(nextsource.data);
//				debugger;	

			};
		};


		scope[tableid] = undefined;

/*
		if(h+1 < query.sources.length) {
			var nextsource = query.sources[h+1];

			if(nextsource.joinmode == "OUTER" || nextsource.joinmode == "RIGHT" 
				|| nextsource.joinmode == "ANTI") {


				console.log(h,query.sources.length);
				// Swap


//				swapSources(query,h);

//				console.log(query.sources);
				//debugger;
//				var source = query.sources[h];

//				var tableid = source.alias || source.tableid; 
//				var data = source.data;

				// Reduce data for looping if there is optimization hint
//				if(source.optimization == 'ix') {
//					data = source.ix[ source.onleftfn(scope, query.params, alasql) ] || [];
//				}

				// Main cycle
				var pass = false;
//				console.log(tableid, data.length);
				for(var i=0, ilen=nextsource.data.length; i<ilen; i++) {
					scope[nextsource.tableid] = nextsource.data[i];
					// Reduce with ON and USING clause
					if(!source.onleftfn || (source.onleftfn(scope, query.params, alasql) == source.onrightfn(scope, query.params, alasql))) {
						// For all non-standard JOINs like a-b=0
						if(source.onmiddlefn(scope, query.params, alasql)) {
							// Recursively call new join
//							if(source.joinmode == "OUTER") {
								doJoin(query, scope, h+2);
//							}
							// for LEFT JOIN
							pass = true;
						}
					};
					if(!pass) {
					// Clear the scope after the loop
//						scope[tableid] = {};
						console.log(scope);
						doJoin(query,scope,h+2);
					}	
				};

				// Additional join for LEFT JOINS
					scope[query.sources[h+1].tableid] = {};
					console.log(scope);

				scope[tableid] = undefined;

				// SWAP BACK
				swapSources(query,h);

			}
		}

*/
	}

};

function swapSources(query, h) {
	var source = query.sources[h];
	var nextsource = query.sources[h+1];

	var onleftfn = source.onleftfn;
	var onleftfns = source.onleftfns;
	var onrightfn = source.onrightfn;
	var onrightfns = source.onrightfns;
	var optimization = source.optimization;

	source.onleftfn = nextsource.onrightfn;
	source.onleftfns = nextsource.onrightfns;
	source.onrightfn = nextsource.onleftfn;
	source.onrightfns = nextsource.onleftfns;
	source.optimization = nextsource.optimization;

	nextsource.onleftfn = onleftfn;
	nextsource.onleftfns = onleftfns;
	nextsource.onrightfn = onrightfn;
	nextsource.onrightfns = onrightfns;
	nextsource.optimization = optimization;

	query.sources[h] = nextsource;
	query.sources[h+1] = source;
}



/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

//
// Main part of SELECT procedure
//

yy.Select = function (params) { return yy.extend(this, params); }
yy.Select.prototype.toString = function() {
	var s = '';
	if(this.explain) s+= K('EXPLAIN')+' ';
	s += K('SELECT')+' ';
	if(this.modifier) s += K(this.modifier)+' ';
	if(this.top) s += K('TOP')+' '+N(this.top.value)+' ';
	s += this.columns.map(function(col){
		var s = col.toString();
//		console.log(col);
		if(typeof col.as != "undefined") s += ' '+K('AS')+' '+L(col.as);
		return s;
	}).join(', ');

	if(this.from) {
		s += NL()+ID()+K('FROM')+' '+this.from.map(function(f){
//			console.log(f);
			var ss = f.toString();
			if(f.as) ss += ' '+K('AS')+' '+f.as;
			return ss;
		}).join(',');
	};

	if(this.joins) {
		s += this.joins.map(function(jn){
			var ss = NL()+ID();
			if(jn.joinmode) ss += K(jn.joinmode)+' ';
			ss += K('JOIN')+' ';
			ss += jn.table.toString();
			if(jn.using) ss += ' '+K('USING')+' '+jn.using.toString();
			if(jn.on) ss += ' '+K('ON')+' '+jn.on.toString();
			return ss;
 		});
	}

	if(this.where) s += NL()+ID()+K('WHERE')+' '+this.where.toString();
	if(this.group) s += NL()+ID()+K('GROUP BY')+' '+this.group.toString();
	if(this.having) s += NL()+ID()+K('HAVING')+' '+this.having.toString();
	if(this.order) s += NL()+ID()+K('ORDER BY')+' '+this.order.toString();
	if(this.limit) s += NL()+ID()+K('LIMIT')+' '+this.limit.value;
	if(this.offset) s += NL()+ID()+K('OFFSET')+' '+this.offset.value;
	if(this.union) s += NL()+K('UNION')+NL()+this.union.toString();
	if(this.unionall) s += NL()+K('UNION ALL')+NL()+this.unionall.toString();
	if(this.except) s += NL()+K('EXCEPT')+NL()+this.except.toString();
	if(this.intersect) s += NL()+K('INTERSECT')+NL()+this.intersect.toString();
	return s;
};

// Compile SELECT statement
yy.Select.prototype.compile = function(databaseid) {
	var db = alasql.databases[databaseid];
	// Create variable for query
	var query = new Query();

	query.explain = this.explain; // Explain
	query.explaination = [];
	query.explid = 1;

	query.modifier = this.modifier;
	
	query.database = db;
	// 0. Precompile whereexists
	this.compileWhereExists(query);

	// 0. Precompile queries for IN, NOT IN, ANY and ALL operators
	this.compileQueries(query);
	
	query.defcols = this.compileDefCols(query, databaseid);

	// 1. Compile FROM clause
	query.fromfn = this.compileFrom(query);
	// 2. Compile JOIN clauses
	if(this.joins) this.compileJoins(query);
	// 3. Compile SELECT clause
	query.selectfn = this.compileSelect(query);
	// 5. Optimize WHERE and JOINS
	if(this.where) this.compileWhereJoins(query);

	// 4. Compile WHERE clause
	query.wherefn = this.compileWhere(query);


	// 6. Compile GROUP BY
	if(this.group) query.groupfn = this.compileGroup(query);
	// 7. Compile DISTINCT, LIMIT and OFFSET
	query.distinct = this.distinct;

	if(this.top) {
		query.limit = this.top.value;
	} else if(this.limit) {
		query.limit = this.limit.value;
		if(this.offset) {
			query.offset = this.offset.value;
		}
	}
	// 8. Compile ORDER BY clause
	if(this.order) query.orderfn = this.compileOrder(query);

	// 9. Compile ordering function for UNION and UNIONALL
	if(this.union) {
		query.unionfn = this.union.compile(databaseid);
		if(this.union.order) {
			query.orderfn = this.union.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.unionall) {
		query.unionallfn = this.unionall.compile(databaseid);
		if(this.unionall.order) {
			query.orderfn = this.unionall.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.except) {
		query.exceptfn = this.except.compile(databaseid);
		if(this.except.order) {
			query.orderfn = this.except.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.intersect) {
		query.intersectfn = this.intersect.compile(databaseid);
		if(this.intersect.order) {
			query.intersectfn = this.intersect.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	};

	// SELECT INTO
//	console.log(this.into);
	if(this.into) {
		if(this.into instanceof yy.Table) {
			if(alasql.autocommit && alasql.databases[this.into.databaseid||databaseid].engineid) {
				query.intoallfns = 'return alasql.engines["'+alasql.databases[this.into.databaseid||databaseid].engineid+'"]'+
					'.intoTable("'+(this.into.databaseid||databaseid)+'","'+this.into.tableid+'",this.data);';
			} else {
				query.intofns = 
				'alasql.databases[\''+(this.into.databaseid||databaseid)+'\'].tables'+
				'[\''+this.into.tableid+'\'].data.push(r);';
			}
		} else if (this.into instanceof yy.FuncValue) {
			query.intofns = 'alasql.into[\''+this.into.funcid+'\'](';
			var ss = ['r','i'];
			if(this.into.args && this.into.args.length>0 ) 	
				this.into.args.forEach(function(arg){
					ss.push(arg.toJavaScript());
				});
			query.intofns += ss.join(',')+')';	

		} else if (this.into instanceof yy.ParamValue) {
			query.intofns = 'params[\''+this.into.param+"\'](r)";	
		};
//		console.log(query.intofns);
		if(query.intofns) {
			query.intofn = new Function("r,i",query.intofns); 
		};

		if(query.intoallfns) {
			query.intoallfn = new Function(query.intoallfns); 
		}

	}
//console.log(query);

	// Now, compile all togeather into one function with query object in scope
	var statement = function(params, cb, oldscope) {
		query.params = params;
		var res = queryfn(query,oldscope); 
		
		if(query.modifier == 'VALUE') {
			var key = Object.keys(res[0])[0];
			res = res[0][key];
		} if(query.modifier == 'ROW') {
			var a = [];
			for(var key in res[0]) {
				a.push(res[0][key]);
			};
			res = a;
		} if(query.modifier == 'COLUMN') {
			var ar = [];
			if(res.length > 0) {
				var key = Object.keys(res[0])[0];
				for(var i=0, ilen=res.length; i<ilen; i++){
					ar.push(res[i][key]);
				}
			};
			res = ar;
		} if(query.modifier == 'MATRIX') {
			res = arrayOfArrays(res);
		}

		if(cb) cb(res); 
		return res;
	};

//	statement.dbversion = ;
//	console.log(statement.query);
	return statement;
};

yy.Select.prototype.exec = function(databaseid) {
	throw new Error('Select statement should be precompiled');

};



/*
//
// EXISTS and other subqueries functions  functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExistsValue = function(params) { return yy.extend(this, params); }
yy.ExistsValue.prototype.toString = function() {
	return 'EXISTS('+this.value.toString()+')';
};

yy.ExistsValue.prototype.toType = function() {
	return 'boolean';
};

yy.ExistsValue.prototype.toJavaScript = function() {
//	return 'ww=this.existsfn['+this.existsidx+'](params,null,p).length,console.log(ww),ww';
	return 'this.existsfn['+this.existsidx+'](params,null,p).length';
};

yy.Select.prototype.compileWhereExists = function(query) {
	if(!this.exists) return;
	query.existsfn = this.exists.map(function(ex) {
		return ex.compile(query.database.databaseid);
	});
};

yy.Select.prototype.compileQueries = function(query) {
	if(!this.queries) return;
	query.queriesfn = this.queries.map(function(q) {
		return q.compile(query.database.databaseid);
	});
};

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT Compile functions


// Compile JOIN caluese
yy.Select.prototype.compileJoins = function(query) {
//	console.log(this);
//	debugger;
	var self = this;




	this.joins.forEach(function(jn){

		// Test CROSS-JOIN
		if(jn.joinmode == "CROSS") {
			if(jn.using || jn.on) {
				throw new Error('CROSS JOIN cannot have USING or ON clauses');
			} else {
				jn.joinmode == "INNER";
			}
		}


		var source;
		var tq;
		if(jn.table) {
			tq = jn.table;
			source = {
				alias: jn.as||tq.tableid,
				databaseid: tq.databaseid || query.database.databaseid,
				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '',	// for optimization
				srcwherefn: returnTrue
			};
			//

//			console.log(source.databaseid, source.tableid);
			if(!alasql.databases[source.databaseid].tables[source.tableid]) {
				throw new Error('Table \''+source.tableid+
				'\' is not exists in database \''+source.databaseid)+'\'';
			};
			// source.data = query.database.tables[source.tableid].data;
			if(alasql.autocommit && alasql.databases[source.databaseid].engineid) {
//				console.log(997,alasql.databases[source.databaseid].engineid);
				source.datafn = function(query,params) {
					return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
						source.databaseid, tableid);
				}				
			} else {
				source.datafn = function(query,params) {
					return alasql.databases[source.databaseid].tables[source.tableid].data;
				}
			};

		} else if(jn.select) {
			source = {
				alias: jn.as,
//				databaseid: jn.databaseid || query.database.databaseid,
//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '',	// for optimization
				srcwherefn: returnTrue
			};
			source.subquery = tq.compile(query.database.databaseid);
			source.datafn = function(query, params) {
				return source.subquery(query.params);
			}				
		} else if(jn.param) {
			source = {
				alias: jn.as,
//				databaseid: jn.databaseid || query.database.databaseid,
//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '',	// for optimization
				srcwherefn: returnTrue
			};
			// source.data = ;
			var jnparam = jn.param.param;
//			console.log(jn, jnparam);
			source.datafn = new Function('query,params',
				"return alasql.prepareFromData(params['"+jnparam+"']);");
		}



		// Test NATURAL-JOIN
		if(jn.natural) {
			if(jn.using || jn.on) {
				throw new Error('NATURAL JOIN cannot have USING or ON clauses');
			} else {
//				source.joinmode == "INNER";
				if(query.sources.length > 0) {
					var prevSource = query.sources[query.sources.length-1];
					var prevTable = alasql.databases[prevSource.databaseid].tables[prevSource.tableid];
					var table = alasql.databases[source.databaseid].tables[source.tableid];

					if(prevTable && table) {
						var c1 = prevTable.columns.map(function(col){return col.columnid});
						var c2 = table.columns.map(function(col){return col.columnid});
						jn.using = arrayIntersect(c1,c2);
//						console.log(jn.using);
					} else {
						throw new Error('In this version of Alasql NATURAL JOIN '+
							'works for tables with predefined columns only');
					};
				}
			}
		}






		var alias = jn.as || tq.tableid;
		if(tq) {
			query.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid};
		}

		if(jn.using) {
			var prevSource = query.sources[query.sources.length-1];
//			console.log(query.sources[0],prevSource,source);
			source.onleftfns = jn.using.map(function(colid){
				return "p['"+(prevSource.alias||prevSource.tableid)+"']['"+colid+"']";
			}).join('+"`"+');
			source.onleftfn = new Function('p,params,alasql','return '+source.onleftfns);
			source.onrightfns = jn.using.map(function(colid){
				return "p['"+(source.alias||source.tableid)+"']['"+colid+"']";
			}).join('+"`"+');
			source.onrightfn = new Function('p,params,alasql','return '+source.onrightfns);
			source.optimization = 'ix';
		} else if(jn.on) {
//console.log(jn.on);
			if(jn.on instanceof yy.Op && jn.on.op == '=' && !jn.on.allsome) {
//				console.log('ix optimization', jn.on.toJavaScript('p',query.defaultTableid) );
				source.optimization = 'ix';
			// 	source.onleftfns = jn.on.left.toJavaScript('p',query.defaultTableid);
			// 	source.onleftfn = new Function('p', 'return '+source.onleftfns);
			// 	source.onrightfns = jn.on.right.toJavaScript('p',query.defaultTableid);
			// 	source.onrightfn = new Function('p', 'return '+source.onrightfns);

				var lefts = '';
				var rights = '';
				var middles = '';
				var middlef = false;
				// Test right and left sides
				var ls = jn.on.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = jn.on.right.toJavaScript('p',query.defaultTableid,query.defcols);

				if((ls.indexOf("p['"+alias+"']")>-1) && !(rs.indexOf("p['"+alias+"']")>-1)){
					if((ls.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { rights = ls; } 
						else { middlef = true };

				} else 	if(!(ls.indexOf("p['"+alias+"']")>-1) && (rs.indexOf("p['"+alias+"']")>-1)){
					if((rs.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { lefts = ls; } 
						else { middlef = true };
				} else {
					middlef = true;
				}

//				console.log(alias, 1,lefts, rights, middlef);

				if((rs.indexOf("p['"+alias+"']")>-1) && !(ls.indexOf("p['"+alias+"']")>-1)){
					if((rs.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { rights = rs; } 
						else { middlef = true };
				} else if(!(rs.indexOf("p['"+alias+"']")>-1) && (ls.indexOf("p['"+alias+"']")>-1)){
					if((ls.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { lefts = rs; } 
						else { middlef = true };
				} else {
					middlef = true;
				}

//				console.log(alias, 2,lefts, rights, middlef);

				if(middlef) {
//					middles = jn.on.toJavaScript('p',query.defaultTableid);
//				} else {
					rights = '';
					lefts = '';
					middles = jn.on.toJavaScript('p',query.defaultTableid,query.defcols);
					source.optimization = 'no';
					// What to here?
				} 

				source.onleftfns = lefts;
				source.onrightfns = rights;
				source.onmiddlefns = middles || 'true';
//			console.log(source.onleftfns, '-',source.onrightfns, '-',source.onmiddlefns);

				source.onleftfn = new Function('p,params,alasql', 'return '+source.onleftfns);
				source.onrightfn = new Function('p,params,alasql', 'return '+source.onrightfns);
				source.onmiddlefn = new Function('p,params,alasql', 'return '+source.onmiddlefns);

//			} else if(jn.on instanceof yy.Op && jn.on.op == 'AND') {
//				console.log('join on and ',jn);

			} else {
//				console.log('no optimization');
				source.optimization = 'no';
//				source.onleftfn = returnTrue;
//				source.onleftfns = "true";
				source.onmiddlefns = jn.on.toJavaScript('p',query.defaultTableid,query.defcols);
				source.onmiddlefn = new Function('p,params,alasql','return '+jn.on.toJavaScript('p',query.defaultTableid,query.defcols));
			};
//			console.log(source.onleftfns, source.onrightfns, source.onmiddlefns);

			// Optimization function
		};

//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
//console.log(source, jn);
		// TODO SubQueries
/*		if(source.joinmode == 'RIGHT') {
			var prevSource = query.sources.pop();
			if(prevSource.joinmode == 'INNER') {
				prevSource.joinmode = 'LEFT';
				var onleftfn = prevSource.onleftfn;
				var onleftfns = prevSource.onleftfns;
				var onrightfn = prevSource.onrightfn;
				var onrightfns = prevSource.onrightfns;
				var optimization = prevSource.optimization;

				prevSource.onleftfn = source.onrightfn;
				prevSource.onleftfns = source.onrightfns;
				prevSource.onrightfn = source.onleftfn;
				prevSource.onrightfns = source.onleftfns;
				prevSource.optimization = source.optimization;

				source.onleftfn = onleftfn;
				source.onleftfns = onleftfns;
				source.onrightfn = onrightfn;
				source.onrightfns = onrightfns;
				source.optimization = optimization;

				source.joinmode = 'INNER';
				query.sources.push(source);
				query.sources.push(prevSource);
			} else {
				throw new Error('Do not know how to process this SQL');
			}
		} else {
			query.sources.push(source);
		}
*/	
		query.sources.push(source);
	});
//	console.log('sources',query.sources);
}


// Compile group of statements
yy.Select.prototype.compileGroup = function(query) {
	var self = this;

	var allgroup = decartes(this.group);

	//console.log(allgroup);
	// Prepare groups
	//var allgroup = [['a'], ['a','b'], ['a', 'b', 'c']];

	// Union all arrays to get a maximum
	var allgroups = [];
	allgroup.forEach(function(a){
		allgroups = arrayUnion(allgroups, a);
	});

	// Create negative array

	var s = '';

	allgroup.forEach(function(agroup) {


		// Start of group function
		s += 'var g=this.xgroups[';

	//	var gcols = this.group.map(function(col){return col.columnid}); // Group fields with r
		// Array with group columns from record
		var rg = agroup.map(function(columnid){
			// Check, if aggregator exists but GROUP BY is not exists
			if(columnid == '') return '1'; // Create fictive groupping column for fictive GROUP BY
			else return "r['"+columnid+"']";
		});

		if(rg.length == 0) rg = ["''"];

	//	console.log('rg',rg);

		s += rg.join('+"`"+');
		s += '];if(!g) {this.groups.push(g=this.xgroups[';
		s += rg.join('+"`"+');
		s += '] = {';
	//	s += ']=r';

		s += agroup.map(function(columnid){
			if(columnid == '') return '';
			else return "'"+columnid+"':r['"+columnid+"'],";
		}).join('');


		var neggroup = arrayDiff(allgroups,agroup);

		s += neggroup.map(function(columnid){
			return "'"+columnid+"':null,";
		}).join('');


		s += self.columns.map(function(col){
			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM'
					|| col.aggregatorid == 'MIN'
					|| col.aggregatorid == 'MAX'
					|| col.aggregatorid == 'FIRST'
					|| col.aggregatorid == 'LAST'
					|| col.aggregatorid == 'AVG'
//				) { return '\''+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJavaScript(); 	
				) { return '\''+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') { return '\''+col.as+'\':1,'; }
//				else if(col.aggregatorid == 'MIN') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
//				else if(col.aggregatorid == 'MAX') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
				return '';
			} else return '';
		}).join('');





		// columnid:r.columnid
	//	var srg = [];//rg.map(function(fn){ return (fn+':'+fn); });

	//	var srg = this.group.map(function(col){
	//		if(col == '') return '';
	//		else return col.columnid+':'+col.toJavaScript('r','');
	//	});

	// Initializw aggregators

	/*
		this.columns.forEach(function(col){
	//		console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';


			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM') { srg.push("'"+col.as+'\':0'); }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') {srg.push( "'"+col.as+'\':0'); }
				else if(col.aggregatorid == 'MIN') { srg.push( "'"+col.as+'\':Infinity'); }
				else if(col.aggregatorid == 'MAX') { srg.push( "'"+col.as+'\':-Infinity'); }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
			};

		});

	*/

	/*****************/

	//	s += srg.join(',');

		// var ss = [];
		// gff.forEach(function(fn){
		// 	ss.push(fn+':rec.'+fn);
		// });
		// s += ss.join(',');
	//	s += '});};';

		s += '});} else {';
	//	console.log(s, this.columns);



	// var neggroup = arrayDiff(allgroups,agroup);

	// console.log(agroup,neggroup);

	// s += neggroup.map(function(columnid){
	// 	return "g['"+columnid+"']=null;";
	// }).join('');

	// console.log(s);


	//console.log(query.selectfn);
		s += self.columns.map(function(col){
			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM') { return 'g[\''+col.as+'\']+=r[\''+col.as+'\'];'; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') { return 'g[\''+col.as+'\']++;'; }
				else if(col.aggregatorid == 'MIN') { return 'g[\''+col.as+'\']=Math.min(g[\''+col.as+'\'],r[\''+col.as+'\']);'; }
				else if(col.aggregatorid == 'MAX') { return 'g[\''+col.as+'\']=Math.max(g[\''+col.as+'\'],r[\''+col.as+'\']);'; }
				else if(col.aggregatorid == 'FIRST') { return ''; }
				else if(col.aggregatorid == 'LAST') { return 'g[\''+col.as+'\']=r[\''+col.as+'\'];'; }
				else if(col.aggregatorid == 'AVG') { return ''; }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
				return '';
			} else return '';
		}).join('');


	//	s += selectFields.map(function(f){
	//			console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';
	//			if (f.field instanceof SQLParser.nodes.FunctionValue 
	//				&& (f.field.name.toUpperCase() == 'SUM' || f.field.name.toUpperCase() == 'COUNT')) {
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+='+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+=rec.'+f.name.value+';'; //f.field.arguments[0].toJavaScript(); 	
	//			};
	//			return '';
	//		}).join('');

		//s += '	group.amt += rec.emplid;';
		//s += 'group.count++;';

		s += '}';
	//	console.log(s, this.group);

	});

//	console.log(s);
	return new Function('r,params',s);

}

yy.Select.prototype.compileFrom = function(query) {
	var self = this;
	query.sources = [];
//	var tableid = this.from[0].tableid;
//	var as = '';
//	if(self.from[0].as) as = this.from[0].as;
//console.log(this);
	query.aliases = {};
	if(!self.from) return;

	self.from.forEach(function(tq){
		var alias = tq.as || tq.tableid;
//		console.log(alias);
		if(tq instanceof yy.Table) {
//			console.log(tq, tq.databaseid, query);
			query.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid, type:'table'};
		} else if(tq instanceof yy.Select) {
			query.aliases[alias] = {type:'subquery'};
		} else if(tq instanceof yy.ParamValue) {
			query.aliases[alias] = {type:'paramvalue'};
		} else if(tq instanceof yy.FuncValue) {
			query.aliases[alias] = {type:'paramvalue'};
		} else {
			throw new Error('Wrong table at FROM');
		}

		var source = {
			alias: alias,
			databaseid: tq.databaseid || query.database.databaseid,
			tableid: tq.tableid,
			joinmode: 'INNER',
			onmiddlefn: returnTrue,			
			srcwherefns: '',	// for optimization
			srcwherefn: returnTrue			
		};

		if(tq instanceof yy.Table) {
//				console.log(997,alasql.databases[source.databaseid].engineid);
			if(alasql.autocommit && alasql.databases[source.databaseid].engineid) {
//				console.log(997,alasql.databases[source.databaseid].engineid);
				source.datafn = function(query,params) {
					return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
						source.databaseid, source.tableid);
				}				
			} else {
				source.datafn = function(query,params) {
				// if(!query) console.log('query');
				// if(!query.database) console.log('query');
				// if(!query.database.tables) console.log('query');
				// if(!source.tableid) console.log('query');
				// if(!query.database.tables[source.tableid]) console.log(query);
				// if(!query.database.tables[source.tableid].data) console.log('query');

					return alasql.databases[source.databaseid].tables[source.tableid].data;
//				return alasql.databases[source.databaseid].tables[source.tableid].data;
				};
			}
		} else if(tq instanceof yy.Select) {
			source.subquery = tq.compile(query.database.databaseid);
			source.datafn = function(query, params) {
				return source.subquery(query.params);
			}						
		} else if(tq instanceof yy.ParamValue) {
			source.datafn = new Function('query,params',
				"return alasql.prepareFromData(params['"+tq.param+"']);");
		} else if(tq instanceof yy.FuncValue) {
			var s = "return alasql.from['"+tq.funcid+"'](";
			if(tq.args && tq.args.length>0) {
				s += tq.args.map(function(arg){
					return arg.toJavaScript();
				}).join(',');
			}
			s += ');';
			source.datafn = new Function('query,params',s);

		} else {
			throw new Error('Wrong table at FROM');
		}
//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
		query.sources.push(source);

	});
	// TODO Add joins
	query.defaultTableid = query.sources[0].alias;
//console.log(query.defaultTableid);
};

alasql.prepareFromData = function(data) {
	var res = data;
	if(typeof data == "string") {
		res = data.split(/\r?\n/);
		for(var i=0, ilen=res.length; i<ilen;i++) {
			res[i] = [res[i]];
		}
	} else if(typeof data == 'object' && !(data instanceof Array)) {
//	} else if(typeof data == 'object' && !(typeof data.length == 'undefined')) {
		res = [];
		for(var key in data) {
			if(data.hasOwnProperty(key)) res.push([key,data[key]]);
		};
//		console.log(res);
	};
//	console.log(typeof data);
	return res;
};

// yy.Select.prototype.compileSources = function(query) {
// 	return sources;
// };

function compileSelectStar (query,alias) {
	// console.log(query.aliases[alias]);
//	console.log(query,alias);
	// console.log(query.aliases[alias].tableid);
//	console.log(alias);
	var s = '', sp = '', ss=[];
//	if(!alias) {
//		sp += 'for(var k1 in p) var w=p[k1];for(var k2 in w){r[k2]=w[k2]};';
//	} else 	{
		if(query.aliases[alias].tableid) {
			var columns = alasql.databases[query.aliases[alias].databaseid].tables[query.aliases[alias].tableid].columns;
		};
		// Check if this is a Table or other

		if(columns && columns.length > 0) {
			columns.forEach(function(tcol){
				ss.push('\''+tcol.columnid+'\':p[\''+alias+'\'][\''+tcol.columnid+'\']');

	//		console.log('ok',s);

				var coldef = {
					columnid:tcol.columnid, 
					dbtypeid:tcol.dbtypeid, 
					dbsize:tcol.dbsize, 
					dbprecision:tcol.dbprecision,
					dbenum: tcol.dbenum
				};
				query.columns.push(coldef);
				query.xcolumns[coldef.columnid]=coldef;

			});
//console.log(999,columns);			
		} else {
			// if column not exists, then copy all
			sp += 'var w=p["'+alias+'"];for(var k in w){r[k]=w[k]};';
//console.log(777, sp);
			query.dirtyColumns = true;
		}
//	}
//console.log({s:ss.join(','),sp:sp});
	return {s:ss.join(','),sp:sp};
}


yy.Select.prototype.compileSelect = function(query) {
	var self = this;
	query.columns = [];
	query.xcolumns = {};
	query.dirtyColumns = false;
	var s = 'var r={';
	var sp = '';
	var ss = [];
	this.columns.forEach(function(col){
		if(col instanceof yy.Column) {
			if(col.columnid == '*') {
				if(col.tableid) {
					//Copy all
					var ret = compileSelectStar(query, col.tableid);
					if(ret.s)  ss = ss.concat(ret.s);
					sp += ret.sp;

				} else {
//					console.log('aliases', query.aliases);
					for(var alias in query.aliases) {
						var ret = compileSelectStar(query, alias); //query.aliases[alias].tableid);
						if(ret.s) ss = ss.concat(ret.s);
						sp += ret.sp;
					}
					// TODO Remove these lines
					// In case of no information 
					// sp += 'for(var k1 in p){var w=p[k1];'+
					// 			'for(k2 in w) {r[k2]=w[k2]}}'
				}
			} else {
				// If field, otherwise - expression
				var tbid = col.tableid;
//				console.log(query.sources);
				var dbid = col.databaseid || query.sources[0].databaseid || query.database.databaseid;
				if(!tbid) tbid = query.defcols[col.columnid];
				if(!tbid) tbid = query.defaultTableid;
				ss.push(escapeq(col.as || col.columnid)+':p[\''+(tbid)+'\'][\''+col.columnid+'\']');

				if(query.aliases[tbid] && query.aliases[tbid].type == 'table') {

					if(!alasql.databases[dbid].tables[query.aliases[tbid].tableid]) {
//						console.log(query.database,tbid,query.aliases[tbid].tableid);
						throw new Error('Table \''+(tbid)+'\' does not exists in database');
					}
					var columns = alasql.databases[dbid].tables[query.aliases[tbid].tableid].columns;					
					var xcolumns = alasql.databases[dbid].tables[query.aliases[tbid].tableid].xcolumns;
//console.log(xcolumns, col,123);
//					console.log(0);
					if(xcolumns && columns.length > 0) {
//						console.log(1);
						var tcol = xcolumns[col.columnid];
						var coldef = {
							columnid:col.as || col.columnid, 
							dbtypeid:tcol.dbtypeid, 
							dbsize:tcol.dbsize, 
							dbpecision:tcol.dbprecision,
							dbenum: tcol.dbenum
						};
//						console.log(2);
						query.columns.push(coldef);
						query.xcolumns[coldef.columnid]=coldef;
					} else {
						query.dirtyColumns = true;
					}
				} else {
					// This is a subquery? 
					// throw new Error('There is now such table \''+col.tableid+'\'');
				};

			}
		} else if(col instanceof yy.AggrValue) {
			if(!self.group) {
//				self.group=[new yy.Column({columnid:'q',as:'q'	})];
				self.group = [''];
			}
			if(!col.as) col.as = escapeq(col.toString());
			if (col.aggregatorid == 'SUM' || col.aggregatorid == 'MAX' ||  col.aggregatorid == 'MIN' ||
				col.aggregatorid == 'FIRST' || col.aggregatorid == 'LAST' ||  col.aggregatorid == 'AVG'
				) {
				ss.push("'"+escapeq(col.as)+'\':'+col.expression.toJavaScript("p",query.defaultTableid,query.defcols))	
			} else if (col.aggregatorid == 'COUNT') {
				ss.push("'"+escapeq(col.as)+"':1");
				// Nothing
			} 
//			else if (col.aggregatorid == 'MAX') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			} else if (col.aggregatorid == 'MIN') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			}
		} else {
			ss.push('\''+escapeq(col.as || col.columnid || col.toString())+'\':'+col.toJavaScript("p",query.defaultTableid,query.defcols));
//			ss.push('\''+escapeq(col.toString())+'\':'+col.toJavaScript("p",query.defaultTableid));
			//if(col instanceof yy.Expression) {
		}
	});
	s += ss.join(',')+'};'+sp;
//console.log(s);
	query.selectfns = s;
	return new Function('p,params,alasql',s+'return r');
};

yy.Select.prototype.compileWhere = function(query) {
	if(this.where) {
		s = this.where.toJavaScript('p',query.defaultTableid,query.defcols);
		query.wherefns = s;
//		console.log(s);
		return new Function('p,params,alasql','return '+s);
	} else return function(){return true};
};

yy.Select.prototype.compileWhereJoins = function(query) {
//	console.log(this.where);
	optimizeWhereJoin(query, this.where.expression);

	//for sources compile wherefs
	query.sources.forEach(function(source) {
		if(source.srcwherefns) {
			source.srcwherefn = new Function('p,params,alasql','return '+source.srcwherefns);
		};
		if(source.wxleftfns) {
			source.wxleftfn = new Function('p,params,alasql','return '+source.wxleftfns);
		};
		if(source.wxrightfns) {
			source.wxrightfn = new Function('p,params,alasql','return '+source.wxrightfns);
		};
//		console.log(source.alias, source.wherefns)
//		console.log(source);
	});
};

function optimizeWhereJoin (query, ast) {
	if(!ast) return false;
	var s = ast.toJavaScript('p',query.defaultTableid,query.defcols);
	var fsrc = [];
	query.sources.forEach(function(source,idx) {
		// Optimization allowed only for tables only
		if(source.tableid) {
			// This is a good place to remove all unnecessary optimizations
			if(s.indexOf('p[\''+source.alias+'\']')>-1) fsrc.push(source);
		};
	});
//	console.log(ast);
//	console.log(s);
//	console.log(fsrc.length);
	if(fsrc.length == 0) {
//		console.log('no optimization, can remove this part of ast');
		return;
	} else if (fsrc.length == 1) {

		if(!(s.match(/p\[\'.*?\'\]/g)||[])
			.every(function(s){ 
						return s == "p['"+fsrc[0].alias+"']"})) { 
			return; 
			// This is means, that we have column from parent query
			// So we return without optimization
		} 

		var src = fsrc[0]; // optmiization source
		src.srcwherefns = src.srcwherefns ? src.srcwherefns+'&&'+s : s;

		if((ast instanceof yy.Op) && (ast.op == '=' && !ast.allsome)) {
			if(ast.left instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = ast.right.toJavaScript('p',query.defaultTableid,query.defcols);
				if(rs.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = ls; 
					fsrc[0].wxrightfns = rs; 
				} 
			} if(ast.right instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = ast.right.toJavaScript('p',query.defaultTableid,query.defcols);
				if(ls.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = rs; 
					fsrc[0].wxrightfns = ls; 
				} 
			}
		}
		ast.reduced = true;  // To do not duplicate wherefn and srcwherefn
		return;
	} else {
		if(ast.op = 'AND') {
			optimizeWhereJoin(query,ast.left);
			optimizeWhereJoin(query,ast.right);
		} 
	}

};


yy.Select.prototype.compileOrder = function (query) {
	if(this.order) {
		var s = '';
		var sk = '';
		this.order.forEach(function(ord){
			var columnid = ord.expression.columnid; 
			
			// Date conversion
			var dg = ''; 
			if(query.xcolumns[columnid]) {
				var dbtypeid = query.xcolumns[columnid].dbtypeid;
				if( dbtypeid == 'DATE' || dbtypeid == 'DATETIME') dg = '.valueOf()';
				// TODO Add other types mapping
			} else {
				if(alasql.options.valueof) dg = '.valueOf()'; // TODO Check
			}
			
			// COLLATE NOCASE
			if(ord.nocase) columnid += '.toUpperCase()';

			// TODO Add date comparision
			s += 'if(a[\''+columnid+"']"+dg+(ord.direction == 'ASC'?'>':'<')+'b[\''+columnid+"']"+dg+')return 1;';
			s += 'if(a[\''+columnid+"']"+dg+'==b[\''+columnid+"']"+dg+'){';
			sk += '}';
		});
		s += 'return 0;';
		s += sk+'return -1';
		query.orderfns = s;

		return new Function('a,b',s);
	};
};



/*
//
// ROLLUP(), CUBE(), GROUPING SETS() for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Calculate ROLLUP() combination

var rollup = function (a) {
	var rr = [];
	var mask = 0;
	var glen = a.length;
	for(var g=0;g<glen+1;g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(mask&(1<<i)) ss.push(a[i]);
		}
		rr.push(ss);
		mask = (mask<<1)+1; 
	};
	return rr;
};

// Calculate CUBE()
var cube = function (a) {
	var rr = [];
	var glen = a.length;
	for(var g=0;g<(1<<glen);g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(g&(1<<i)) //ss.push(a[i]);
				//ss = cartes(ss,decartes(a[i]));
				ss = ss.concat(decartes(a[i]));
				//
		}
		rr.push(ss);
	}
	return rr;
}

// GROUPING SETS()
var groupingsets = function(a) {
	return a.reduce(function(acc,d){
		acc = acc.concat(decartes(d));
		return acc;
	}, []);
}

// Cartesian production
var cartes = function(a1,a2){
	var rrr =[];
	for(var i1=0;i1<a1.length;i1++) {
		for(var i2=0;i2<a2.length;i2++) {
			rrr.push(a1[i1].concat(a2[i2]));
		}
	};
	return rrr;
}

// Prepare function
function decartes(gv) {
//	console.log(gv);
	if(gv instanceof Array) {
		var res = [[]];
		for(var t=0; t<gv.length; t++) {
			if(gv[t] instanceof yy.Column) {
		 		res = res.map(function(r){return r.concat(gv[t].columnid)}); 	
			} else if(gv[t] instanceof yy.GroupExpression) {
				if(gv[t].type == 'ROLLUP') res = cartes(res,rollup(gv[t].group));
				else if(gv[t].type == 'CUBE') res = cartes(res,cube(gv[t].group));
				else if(gv[t].type == 'GROUPING SETS') res = cartes(res,groupingsets(gv[t].group));
			} else {
//				res = res.concat(gv[t]);
			};

			// switch(gv[t].t) {
			// 	case 'plain': 
			// 		res = res.map(function(r){return r.concat(gv[t].p)}); 

			// 	break; 
			// 	case 'rollup': res = cartes(res,rollup(gv[t].p)); break; 
			// 	case 'cube': res = cartes(res,cube(gv[t].p)); break; 
			// 	case 'groupingsets': res = cartes(res,groupingsets(gv[t].p)); break; 
			// 	default: res = res.concat(gv[t]);
			// }
		}
		return res;
	} else {
		if(gv instanceof yy.Column) return [gv.columnid];

		// switch(gv.t) {
		// 	case 'plain': return gv.p; break;
		// 	case 'rollup': return rollup(gv.p); break; 
		// 	case 'cube': return cube(gv.p); break; 
		// 	case 'groupingsets':  return groupingsets(gv.p); break; 
		// 	default: return [gv];//return decartes(gv.p);
		// }
		// return gv;
	}
}


/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Select.prototype.compileDefCols = function(query, databaseid) {
//	console.log('defcols');
	var defcols = {};
	if(this.from) {
		this.from.forEach(function(fr){
			if(fr instanceof yy.Table) {
				var alias = fr.as || fr.tableid;
//				console.log(alasql.databases[fr.databaseid || databaseid]);
//				console.log(alasql.databases[fr.databaseid || databaseid].tables, fr.tableid);
//console.log(alasql.databases[fr.databaseid || databaseid].tables, fr.tableid);
//console.log(alasql.databases);
				var table = alasql.databases[fr.databaseid || databaseid].tables[fr.tableid];
//console.log(table);
				if(table.columns) {
					table.columns.forEach(function(col){
						if(defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if(fr instanceof yy.Select) {

			} else if(fr instanceof yy.ParamValue) {

			} else if(fr instanceof yy.FuncValue) {

			} else {
				throw new Error('Unknown type of FROM clause');
			};
		});
	};

	if(this.joins) {
		this.joins.forEach(function(jn){
//			console.log(jn);
			if(jn.table) {
				var alias = jn.table.tableid;
				if(jn.as) alias = jn.as;
				var alias = jn.as || jn.table.tableid;
				var table = alasql.databases[jn.table.databaseid || databaseid].tables[jn.table.tableid];
//				console.log(jn.table.tableid, jn.table.databaseid);
				if(table.columns) {
					table.columns.forEach(function(col){
						if(defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if(jn.select) {

			} else if(jn.param) {

			} else if(jn.func) {

			} else {
				throw new Error('Unknown type of FROM clause');
			};
		});
	};
	// for(var k in defcols) {
	// 	if(defcols[k] == '-') defcols[k] = undefined;
	// }
//	console.log(defcols);
	return defcols;
}

/*
//
// UNION for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT UNION statement

yy.Union = function (params) { return yy.extend(this, params); }
yy.Union.prototype.toString = function () {
	return "UNION";
};

yy.Union.prototype.compile = function (tableid) {
	return null;
};

/*
//
// Expressions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExpressionStatement = function(params) { return yy.extend(this, params); };
yy.ExpressionStatement.prototype.toString = function() {
	return this.expression.toString();
};

yy.ExpressionStatement.prototype.execute = function (databaseid, params) {
	if(this.expression) {
//		console.log(this.expression);
//		console.log(this.expression.toJavaScript('','', null));
		var expr =  new Function("params",'return '+this.expression.toJavaScript('','', null));
		return expr(params);
	}
}

yy.Expression = function(params) { return yy.extend(this, params); };
yy.Expression.prototype.toString = function() {
	return this.expression.toString();
};
yy.Expression.prototype.toJavaScript = function(context, tableid, defcols) {
//	console.log('Expression',this);
	if(this.expression.reduced) return 'true';
	return this.expression.toJavaScript(context, tableid, defcols);
};
yy.Expression.prototype.compile = function(context, tableid, defcols){
//	console.log('Expression',this);
	if(this.reduced) return returnTrue();
	return new Function('p','return '+this.toJavaScript(context, tableid, defcols));
};




yy.Literal = function (params) { return yy.extend(this, params); }
yy.Literal.prototype.toString = function() {
	var s = this.value;
	if(this.value1) s = this.value1+'.'+s; 
//	else s = tableid+'.'+s;
	return L(s);
}


yy.Join = function (params) { return yy.extend(this, params); }
yy.Join.prototype.toString = function() {
	var s = NL()+ID();
	if(this.joinmode) s += K(this.joinmode)+' ';
	s += K('JOIN')+this.table.toString();
	return s;
}

//yy.Join.prototype.toJavaScript = function(context, tableid) {
//	return 'JOIN'+this.table.toString();
//}


yy.Table = function (params) { return yy.extend(this, params); }
yy.Table.prototype.toString = function() {
	var s = this.tableid;
//	if(this.joinmode)
	if(this.databaseid) s = this.databaseid+'.'+s;
	return L(s);
};


yy.View = function (params) { return yy.extend(this, params); }
yy.View.prototype.toString = function() {
	var s = this.viewid;
//	if(this.joinmode)
	if(this.databaseid) s = this.databaseid+'.'+s;
	return L(s);
};


yy.Op = function (params) { return yy.extend(this, params); }
yy.Op.prototype.toString = function() {
	if(this.op == 'IN' || this.op == 'NOT IN') {
		return this.left.toString()+" "+P(this.op)+" ("+this.right.toString()+")";
	}
	if(this.allsome) {
		return this.left.toString()+" "+P(this.op)+" "+this.allsome+' ('+this.right.toString()+')';
	}
	return this.left.toString()+" "+P(this.op)+" "+(this.allsome?this.allsome+' ':'')+this.right.toString();
};

yy.Op.prototype.toType = function(tableid) {
	if(['-','*','/','%'].indexOf(this.op) >-1) return 'number';
	if(this.op == '+') {
		if(this.left.toType(tableid) == 'string' || this.right.toType(tableid) == 'string') return 'string';
		if(this.left.toType(tableid) == 'number' || this.right.toType(tableid) == 'number') return 'number';
	};
	if(['AND','OR','NOT','=','==','===', '!=','!==','!===','>','>=','<','<=', 'IN', 'NOT IN', 'LIKE'].indexOf(this.op) >-1 ) return 'boolean';
	if(this.op == 'BETWEEN' || this.op == 'NOT BETWEEN') return 'boolean';
	if(this.allsome) return 'boolean';
	if(!this.op) return this.left.toType();

	return 'unknown';
};

yy.Op.prototype.toJavaScript = function(context,tableid,defcols) {
//	console.log(this);
	var op = this.op;
	if(this.op == '=') op = '===';
	else if(this.op == '<>') op = '!=';
	else if(this.op == 'OR') op = '||';

	if(this.op == '->') {
//		console.log(this.right, typeof this.right);
		if(typeof this.right == "string") {
			return this.left.toJavaScript(context,tableid, defcols)+'["'+this.right+'"]';
		} else if(typeof this.right == "number") {
			return this.left.toJavaScript(context,tableid, defcols)+'['+this.right+']';
		} else if(this.right instanceof yy.FuncValue) {
			ss = [];
			if(!this.right.args || this.right.args.length == 0) {
			} else {
				var ss = this.right.args.map(function(arg){
					return arg.toJavaScript(context,tableid, defcols);
				});
			}
			return this.left.toJavaScript(context,tableid, defcols)+'[\''+this.right.funcid+'\']('+
				ss.join(',')+')'; 
		} else {
			return this.left.toJavaScript(context,tableid, defcols)+'['+this.right.toJavaScript(context,tableid, defcols)+']';
		}
	}


	if(this.op == '==') {
		return 'alasql.utils.deepEqual('+this.left.toJavaScript(context,tableid, defcols)+","+this.right.toJavaScript(context,tableid, defcols)+')';
	}
	if(this.op == '===') {
		return "(("+this.left.toJavaScript(context,tableid, defcols)+").valueOf()===("+this.right.toJavaScript(context,tableid, defcols)+'.valueOf()))';
	}

	if(this.op == '!===') {
		return "!(("+this.left.toJavaScript(context,tableid, defcols)+").valueOf()===("+this.right.toJavaScript(context,tableid, defcols)+'.valueOf()))';
	}


	if(this.op == '!==') {
		return '(!alasql.utils.deepEqual('+this.left.toJavaScript(context,tableid, defcols)+","+this.right.toJavaScript(context,tableid, defcols)+'))';
	}

	if(this.op == 'LIKE') {
		var s = "("+this.left.toJavaScript(context,tableid, defcols)+")"+
		".match(new RegExp('^'+("+this.right.toJavaScript(context,tableid, defcols)+").replace(/\\\%/g,'.*')+'$','g'))"
//		console.log(s);
		return s;
	};

	if(this.op == 'BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '(('+this.right.left.toJavaScript(context,tableid, defcols)+'<='+this.left.toJavaScript(context,tableid, defcols)+')&&'+
			'('+this.left.toJavaScript(context,tableid, defcols)+'<='+this.right.right.toJavaScript(context,tableid, defcols)+'))';		
		} else {
			throw new Error('Wrong BETWEEM operator without AND part');
		}
	};

	if(this.op == 'NOT BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '!(('+this.right.left.toJavaScript(context,tableid, defcols)+'<='+this.left.toJavaScript(context,tableid, defcols)+')&&'+
			'('+this.left.toJavaScript(context,tableid, defcols)+'<='+this.right.right.toJavaScript(context,tableid, defcols)+'))';		
		} else {
			throw new Error('Wrong NOT BETWEEM operator without AND part');
		}
	};

	if(this.op == 'IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')>-1)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')>-1)';
			return s;
		} else {
			throw new Error('Wrong IN operator without SELECT part');
		}
	};


	if(this.op == 'NOT IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')<0)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')<0)';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}
	};

	if(this.allsome == 'ALL') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.queriesdata['+this.queriesidx+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

	if(this.allsome == 'SOME' || this.allsome == 'ANY') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.queriesdata['+this.queriesidx+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

// Special case for AND optimization (if reduced)
	if(this.op == 'AND') {
		if(this.left.reduced) {
			if(this.right.reduced) {
				return 'true';
			} else {
				return this.right.toJavaScript(context,tableid, defcols);
			}
		} else if(this.right.reduced) {
			return this.left.toJavaScript(context,tableid, defcols);
		}			

		// Otherwise process as regular operation (see below)
		op = '&&';

	}


	// Change names
//	console.log(this);
	return '('+this.left.toJavaScript(context,tableid, defcols)+op+this.right.toJavaScript(context,tableid, defcols)+')';
};




yy.NumValue = function (params) { return yy.extend(this, params); }
yy.NumValue.prototype.toString = function() {
	return N(this.value.toString());
};

yy.NumValue.prototype.toType = function() {
	return 'number';
};

yy.NumValue.prototype.toJavaScript = function() {
	return ""+this.value;
}


yy.StringValue = function (params) { return yy.extend(this, params); }
yy.StringValue.prototype.toString = function() {
	return "'"+S(this.value.toString())+"'";
}

yy.StringValue.prototype.toType = function() {
	return 'string';
}

yy.StringValue.prototype.toJavaScript = function() {
//	console.log("'"+doubleqq(this.value)+"'");
//	return "'"+doubleqq(this.value)+"'";
	return "'"+escapeq(this.value)+"'";

}


yy.LogicValue = function (params) { return yy.extend(this, params); }
yy.LogicValue.prototype.toString = function() {
	return this.value?'TRUE':'FALSE';
}

yy.LogicValue.prototype.toType = function() {
	return 'boolean';
}

yy.LogicValue.prototype.toJavaScript = function() {
	return this.value?'true':'false';
}

yy.NullValue = function (params) { return yy.extend(this, params); }
yy.NullValue.prototype.toString = function() {
	return 'NULL';
}
yy.NullValue.prototype.toJavaScript = function() {
	return 'null';
}

yy.ParamValue = function (params) { return yy.extend(this, params); }
yy.ParamValue.prototype.toString = function() {
	return '$'+this.param;
}
yy.ParamValue.prototype.toJavaScript = function() {
	if(typeof this.param == "string") return "params[\'"+this.param+"\']";
	else return "params["+this.param+"]";
}



yy.UniOp = function (params) { return yy.extend(this, params); }
yy.UniOp.prototype.toString = function() {
	if(this.op == '-') return this.op+this.right.toString();
	if(this.op == 'NOT') return this.op+'('+this.right.toString()+')';
	else if(this.op == null) return '('+this.right.toString()+')';
};

yy.UniOp.prototype.toType = function(tableid) {
	if(this.op == '-') return 'number';
	if(this.op == 'NOT') return 'boolean';
};

yy.UniOp.prototype.toJavaScript = function(context, tableid, defcols) {
	if(this.op == '-') return "-"+this.right.toJavaScript(context, tableid, defcols);
	if(this.op == 'NOT') return '!('+this.right.toJavaScript(context, tableid, defcols)+')';
	else if(this.op == null) return '('+this.right.toJavaScript(context, tableid, defcols)+')';
};



// yy.Star = function (params) { return yy.extend(this, params); }
// yy.Star.prototype.toString = function() {
// 	var s = this.fieldid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// 		if(this.databaseid) {
// 			s = this.databaseid+'.'+s;
// 		}
// 	}
// 	if(this.alias) s += ' AS '+this.alias;
// 	return s;
// }

yy.Column = function(params) { return yy.extend(this, params); }
yy.Column.prototype.toString = function() {
	var s;
	if(this.columnid == +this.columnid) {
		s = '['+this.columnid+']';
	} else {
		s = this.columnid;
	}
	if(this.tableid) {
		if(+this.columnid == this.columnid) {
			s = this.tableid+s;
		} else {
			s = this.tableid+'.'+s;
		}
		if(this.databaseid) {
			s = this.databaseid+'.'+s;
		}
	}
//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

yy.Column.prototype.toJavaScript = function(context, tableid, defcols) {
//	var s = this.value;
// 	var s = this.columnid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// //		if(this.databaseid) {
// //			s = this.databaseid+'.'+s;
// //		}
// 	} else {
// 		s = tableid+'.'+s;
// 	}
//console.log('yy.Column',this, tableid);
	var s = '';
	if(!this.tableid && tableid == '' && !defcols) {
		s = context+'[\''+this.columnid+'\']';
	} else {
		if(this.tableid) {
			s = context+'[\''+(this.tableid) + '\'][\''+this.columnid+'\']';			
		} else if(defcols) {
			var tbid = defcols[this.columnid];
			if(tbid == '-') {
				throw new Error('Cannot resolve column "'+this.columnid+'" because it exists in two source tables');
			} else if(tbid) {
				s = context+'[\''+(tbid) + '\'][\''+this.columnid+'\']';
			} else {
				s = context+'[\''+(this.tableid || tableid) + '\'][\''+this.columnid+'\']';
			}
		} else {
			s = context+'[\''+(this.tableid || tableid) + '\'][\''+this.columnid+'\']';
		}
	}
//	console.log(context,s);
//	console.trace(new Error());
	return s;
}




yy.AggrValue = function(params){ return yy.extend(this, params); }
yy.AggrValue.prototype.toString = function() {
	var s = this.aggregatorid+'(';
	if(this.expression) s += this.expression.toString();
	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

yy.AggrValue.prototype.toType = function() {
	if(['SUM','COUNT','AVG','MIN', 'MAX'].indexOf(this.aggregatorid)>-1) return 'number';
	if(['FIRST','LAST' ].indexOf(this.aggregatorid)>-1) return this.expression.toType();
}
yy.AggrValue.prototype.toJavaScript = function(context, tableid, defcols) {
//	var s = 'alasql.functions.'+this.funcid+'(';
//	if(this.expression) s += this.expression.toJavaScript(context, tableid);
//	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
//	return s;
	return '';
}


yy.OrderExpression = function(params){ return yy.extend(this, params); }
yy.OrderExpression.prototype.toString = function() {
	var s = this.expression.toString();
	if(this.order) s += ' '+this.order.toString();
	return s;
}

yy.GroupExpression = function(params){ return yy.extend(this, params); }
yy.GroupExpression.prototype.toString = function() {
	return this.type+'('+this.group.toString()+')';
}


yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}


/*
//
// Functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.FuncValue = function(params){ return yy.extend(this, params); }
yy.FuncValue.prototype.toString = function() {
	var s = '';
    if(alasql.stdlib[this.funcid] || alasql.stdfn[this.funcid]) s += this.funcid.toUpperCase();
    else s += this.funcid;
    
    s += '(';
	if(this.args && this.args.length > 0) {
		s += this.args.map(function(arg){
			return arg.toString();
		}).join(',');
	};
	s += ')';
	if(this.as) s += ' AS '+this.as.toString();
//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

yy.FuncValue.prototype.toJavaScript = function(context, tableid, defcols) {
	var s = '';
    var funcid = this.funcid;
	// IF this is standard compile functions
	if(alasql.stdlib[funcid.toUpperCase()]) {
		if(this.args && this.args.length > 0) {
			s += alasql.stdlib[funcid.toUpperCase()].apply(this, this.args.map(function(arg) {return arg.toJavaScript(context, tableid)}));
		} else {
			s += alasql.stdlib[funcid.toUpperCase()]();
		}
	} else if(alasql.stdfn[funcid.toUpperCase()]) {
		if(this.newid) s+= 'new ';
		s += 'alasql.stdfn.'+this.funcid+'(';
//		if(this.args) s += this.args.toJavaScript(context, tableid);
		if(this.args && this.args.length > 0) {
			s += this.args.map(function(arg){
				return arg.toJavaScript(context, tableid, defcols);
			}).join(',');
		};
		s += ')';		
	} else {
	// This is user-defined run-time function
	// TODO arguments!!!
//		var s = '';
		if(this.newid) s+= 'new ';
		s += 'alasql.fn.'+this.funcid+'(';
//		if(this.args) s += this.args.toJavaScript(context, tableid);
		if(this.args && this.args.length > 0) {
			s += this.args.map(function(arg){
				return arg.toJavaScript(context, tableid, defcols);
			}).join(',');
		};
		s += ')';
	}
//console.log('userfn:',s,this);

//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

// // Functions compiler
// nodes.FunctionValue.prototype.toJavaScript = function (context, tableid) {
// 	var s = '';
// 	s += fns[this.name.toUpperCase()].apply(null,this.arguments.map(function(arg){
// 		if(arg) return arg.toJavaScript(context, tableid);
// 		else return '';
// 	}));
// 	return s;
// };

// 
// SQL FUNCTIONS COMPILERS
// Based on SQLite functions

// IMPORTANT: These are compiled functions

//alasql.fn = {}; // Keep for compatibility
//alasql.userlib = alasql.fn; 

var stdlib = alasql.stdlib = {}
var stdfn = alasql.stdfn = {}

stdlib.ABS = function(a) {return 'Math.abs('+a+')'};
stdlib.CLONEDEEP = function(a) {return 'alasql.utils.cloneDeep('+a+')'};
stdlib.IIF = function(a,b,c) {
	if(arguments.length == 3) {
		return  '(('+a+')?('+b+'):('+c+'))';
	} else {
		throw new Error('Number of arguments of IFF is not equals to 3');
	};
};
stdlib.IFNULL = function(a,b) {return '('+a+'||'+b+')'};
stdlib.INSTR = function(s,p) {return '(('+s+').indexOf('+p+')+1)'};

stdlib.LEN = function(s) {return '('+s+').length';};
stdlib.LENGTH = function(s) {return '('+s+').length'};

stdlib.LOWER = function(s) {return '('+s+').toLowerCase()';}
stdlib.LCASE = function(s) {return '('+s+').toLowerCase()';}


// LTRIM
stdlib.MAX = function(){return 'Math.max('+arguments.join(',')+')'};
stdlib.MIN = function(){return 'Math.min('+arguments.join(',')+')'};
stdlib.MID = function(a,b,c){
	if(arguments.length == 2) return '('+a+').substr('+b+'-1)';
	else if(arguments.length == 3) return '('+a+').substr('+b+'-1,'+c+')';
};

stdlib.NULLIF = function(a,b){return '('+a+'=='+b+'?null:'+a+')'};

stdlib.RANDOM = function(r) {
	if(arguments.length == 0) {
		return 'Math.random()';
	} else {
		return '(Math.random()*('+r+')|0)';
	}
}
stdlib.ROUND = function(s,d) {
	if(arguments.length == 2) {
		return 'Math.round('+s+'*Math.pow(10,'+d+'))/Math.pow(10,'+d+')';
	} else {
		return 'Math.round('+s+')';
	}
}
alasql.stdlib.SQRT = function(s) {return 'Math.sqrt('+s+')'};

stdlib.UPPER = function(s) {return '('+s+').toUpperCase()';}
stdlib.UCASE = function(s) {return '('+s+').toUpperCase()';}
//REPLACE
// RTRIM
// SUBSTR
// TRIM
//REPLACE
// RTRIM
// SUBSTR
// TRIM




// 
//
// SQL and JS DateTime functions
//
//



/*
//
// CASE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CaseValue = function(params) { return yy.extend(this, params); };
yy.CaseValue.prototype.toString = function() {
	var s = 'CASE ';
	if(this.expression) s += this.expression.toString();
	if(this.whens) {
		s += this.whens.map(function(w) { return ' WHEN '+
			w.when.toString() + ' THEN '+w.then.toString()}).join();
	}
	s += ' END';
	return s;
};
yy.CaseValue.prototype.toJavaScript = function(context, tableid, defcols) {

	var s = '(function(p,params,alasql){var r;';
	if(this.expression) {
//			this.expression.toJavaScript(context, tableid)
		s += 'v='+this.expression.toJavaScript(context, tableid, defcols)+';';
		s += (this.whens||[]).map(function(w) { return ' if(v=='+w.when.toJavaScript(context,tableid, defcols)
			+') {r='+w.then.toJavaScript(context,tableid, defcols)+'}'; }).join(' else ');
		if(this.elses) s += ' else {r='+this.elses.toJavaScript(context,tableid, defcols)+'}';
	} else {
		s += (this.whens||[]).map(function(w) { return ' if('+w.when.toJavaScript(context,tableid, defcols)
			+') {r='+w.then.toJavaScript(context,tableid, defcols)+'}'; }).join(' else ');
		if(this.elses) s += ' else {r='+this.elses.toJavaScript(context,tableid,defcols)+'}';
	}
	s += 'return r;})(p,params,alasql)';

	return s;
};

/*
//
// JSON for Alasql.js
// Date: 19.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Json = function (params) { return yy.extend(this, params); }
yy.Json.prototype.toString = function() {
	var s = '@';
	s += JSONtoString(this.value);
	s += '';
	return s;
};

var JSONtoString = alasql.utils.JSONtoString = function (obj) {
	var s = '';
	if(typeof obj == "string") s = '"'+obj+'"';
	else if(typeof obj == "number") s = obj;
	else if(typeof obj == "boolean") s = obj;
	else if(typeof obj == "object") {
		if(obj instanceof Array) {
			s += '['+obj.map(function(b){
				return JSONtoString(b);
			}).join(',')+']';
		} else if(!obj.toJavaScript || obj instanceof yy.Json) {
			// to prevent recursion
			s = '{';
			var ss = [];
			for(var k in obj) {
				var s1 = ''; 
				if(typeof k == "string") s1 += '"'+k+'"';
				else if(typeof k == "number") s1 += k;
				else if(typeof k == "boolean") s1 += k;
				else {
					throw new Error('THis is not ES6... no expressions on left side yet');
				}
				s1 += ':'+JSONtoString(obj[k]);
				ss.push(s1);
			};
			s += ss.join(',')+'}';
		} else if(obj.toString)	{
			s = obj.toString();
		} else {
			throw new Error('1Can not show JSON object '+JSON.stringify(obj));
		}
	} else {
		throw new Error('2Can not show JSON object '+JSON.stringify(obj));		
	}

	return s;
}



function JSONtoJavaScript(obj, context, tableid, defcols) {
	var s = '';
	if(typeof obj == "string") s = '"'+obj+'"';
	else if(typeof obj == "number") s = '('+obj+')';
	else if(typeof obj == "boolean") s = obj;
	else if(typeof obj == "object") {
		if(obj instanceof Array) {
			s += '['+obj.map(function(b){
				return JSONtoJavaScript(b, context, tableid, defcols);
			}).join(',')+']';
		} else if(!obj.toJavaScript || obj instanceof yy.Json) {
			// to prevent recursion
			s = '{';
			var ss = [];
			for(var k in obj) {
				var s1 = ''; 
				if(typeof k == "string") s1 += '"'+k+'"';
				else if(typeof k == "number") s1 += k;
				else if(typeof k == "boolean") s1 += k;
				else {
					throw new Error('THis is not ES6... no expressions on left side yet');
				}
				s1 += ':'+JSONtoJavaScript(obj[k], context, tableid, defcols);
				ss.push(s1);
			};
			s += ss.join(',')+'}';
		} else if(obj.toJavaScript)	{
			s = obj.toJavaScript(context, tableid, defcols);
		} else {
			throw new Error('1Can not parse JSON object '+JSON.stringify(obj));
		}
	} else {
		throw new Error('2Can not parse JSON object '+JSON.stringify(obj));		
	}

	return s;
}

yy.Json.prototype.toJavaScript = function(context, tableid, defcols) {
	// TODO reod
	return JSONtoJavaScript(this.value,context, tableid, defcols);
}




/*
//
// CAST and CONVERT functions
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Cast = function(params) { return yy.extend(this, params); };
yy.Cast.prototype.toString = function() {
	var s = 'CAST(';
	s += this.expression.toString();
	s += ' AS ';
	s += this.dbtypeid;
	if(typeof this.dbsize != 'undefined') {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+dbprecision;
		s += ')';
	}
	s += ')';
	return s;
};
yy.Cast.prototype.toJavaScript = function(context, tableid, defcols) {

	if(this.dbtypeid == 'INT') {
		return '(('+this.expression.toJavaScript(context, tableid, defcols)+')|0)';
	} if(this.dbtypeid == 'STRING') {
		return '(""+'+this.expression.toJavaScript(context, tableid, defcols)+')';
	} if(this.dbtypeid == 'NUMBER') {
		return '(+('+this.expression.toJavaScript(context, tableid, defcols)+'))';
	} if(this.dbtypeid == 'DATE') {
		if(alasql.options.datetimeformat == 'javascript') {
			return '(new Date('+this.expression.toJavaScript(context, tableid, defcols)+'))';
		} else if(alasql.options.datetimeformat == 'sql') {
			return this.expression.toJavaScript(context, tableid, defcols);
		}
	} if(this.dbtypeid == 'DATETIME') {
		if(alasql.options.datetimeformat == 'javascript') {
			return '(new Date('+this.expression.toJavaScript(context, tableid, defcols)+'))';
		} else if(alasql.options.datetimeformat == 'sql') {
			return this.expression.toJavaScript(context, tableid, defcols);
		}
	} else {

	};

	throw new Error('There is not such type conversion for '+this.toString());
};

/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}

yy.CreateTable = function (params) { return yy.extend(this, params); }
yy.CreateTable.prototype.toString = function() {
	var s = K('CREATE');
	if(this.temporary) s+=' '+K('TEMPORARY');
	s += ' '+K('TABLE');
	if(this.ifnotexists) s += ' '+K('IF')+' '+K('NOT')+' '+K('EXISTS');
	s += ' '+this.table.toString();
	if(this.as) s += ' '+K('AS')+' '+L(this.as);
	else { 
		var ss = this.columns.map(function(col){
			return col.toString();
		});
		s += ' ('+NL()+ID()+ss.join(','+NL()+ID())+')';
	}
	return s;
}

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.CreateTable.prototype.execute = function (databaseid, params, cb) {
//	var self = this;
	var db = alasql.databases[this.table.databaseid || databaseid];

	var tableid = this.table.tableid;
	if(!tableid) {
		throw new Error('Table name is not defined');
	}

//	var ifnotexists = this.ifnotexists;
	var columns = this.columns;
	// if(false) {
	// 	if(!columns) {
	// 		throw new Error('Columns are not defined');
	// 	}
	// }
	var constraints = this.constraints||[];
//	console.log(this);

	// IF NOT EXISTS
	if(this.ifnotexists && db.tables[tableid]) return 0;

	if(db.tables[tableid]) {
		throw new Error('Can not create table \''+tableid
			+'\', because it already exists in the database \''+db.databaseid+'\'');
	}

	var table = db.tables[tableid] = new alasql.Table(); // TODO Can use special object?

	var ss = [];
	if(this.columns) {
		this.columns.forEach(function(col) {
			var dbtypeid = col.dbtypeid;
			if(!alasql.fn[dbtypeid]) dbtypeid = dbtypeid.toUpperCase();
			var newcol = {
				columnid: col.columnid,
				dbtypeid: dbtypeid // TODO: Add types table
			};

			if(col.default) {
				ss.push('\''+col.columnid+'\':'+col.default.toJavaScript());
			}

			table.columns.push(newcol);
			table.xcolumns[newcol.columnid] = newcol;

			// Check for primary key
			if(col.primarykey) {
				var pk = table.pk = {};
				pk.columns = [col.columnid];
				pk.onrightfns = 'r[\''+col.columnid+'\']';
				pk.onrightfn = new Function("r",'return '+pk.onrightfns);
				pk.hh = hash(pk.onrightfns);
				table.indices[pk.hh] = {};
			};

		});
	};
	table.defaultfns = ss.join(',');


//	if(constraints) {
	constraints.forEach(function(con) {
		//console.log(con, con.columns);
		if(con.type == 'PRIMARY KEY') {
			if(table.pk) {
				throw new Error('Primary key already exists');
			}
			var pk = table.pk = {};
			pk.columns = con.columns;
			pk.onrightfns = pk.columns.map(function(columnid){
				return 'r[\''+columnid+'\']'
			}).join("+'`'+");
			pk.onrightfn = new Function("r",'return '+pk.onrightfns);
			pk.hh = hash(pk.onrightfns);
			table.indices[pk.hh] = {};					
		}
	});

//	console.log(100,db.engineid);
	if(db.engineid) {
//		console.log(101,db.engineid);
		alasql.engines[db.engineid].createTable(this.table.databaseid || databaseid, tableid, this.ifnotexists, cb);
	}

//	}
//			if(table.pk) {
	table.insert = function(r) {
		if(this.pk) {
			var pk = this.pk;
			var addr = pk.onrightfn(r);
			if(typeof this.indices[pk.hh][addr] != 'undefined') {
				throw new Error('Cannot insert record, because it already exists in primary key');
			} else {
				table.data.push(r);
				this.indices[pk.hh][addr]=r;
			};
		} else {
			table.data.push(r);						
		}
	};

	table.delete = function(i) {
		if(this.pk) {
			var r = this.data[i];
			var pk = this.pk;
			var addr = pk.onrightfn(r);
			if(typeof this.indices[pk.hh][addr] == 'undefined') {
				throw new Error('Something wrong with index on table');
			} else {
				this.indices[pk.hh][addr]=undefined;
			};
		}
	};

	table.deleteall = function() {
		this.data.length = 0;
		if(this.pk) {
//						var r = this.data[i];
			this.indices[this.pk.hh] = {};
		}
	};

	table.update = function(assignfn, i, params) {
		if(this.pk) {
			var r = this.data[i];
			var pk = this.pk;
			var addr = pk.onrightfn(r,params);
			if(typeof this.indices[pk.hh][addr] == 'undefined') {
				throw new Error('Something wrong with index on table');
			} else {
				this.indices[pk.hh][addr]=undefined;
				assignfn(r);
				var newaddr = pk.onrightfn(r);
				if(typeof this.indices[pk.hh][newaddr] != 'undefined') {
					throw new Error('Record already exists');
				} else {
					this.indices[pk.hh][newaddr] = r;
				}
			} 

		} else {
			assignfn(this.data[i]);
		};

	};
//	console.log(databaseid);
//	console.log(db.databaseid,db.tables);
//	console.log(table);

	return 1;
};




//
// Date functions
// 
// (c) 2014, Andrey Gershun
//


stdfn.NOW = function(){
	var d = new Date();
	var s = d.getFullYear()+"."+("0"+d.getMonth()).substr(-2)+"."+("0"+d.getDate()).substr(-2);
	s += " "+("0"+d.getHours()).substr(-2)+":"+("0"+d.getMinutes()).substr(-2)+"."+("0"+d.getSeconds()).substr(-2);
	return s;
};


stdfn.SECOND = function(d){
	d = new Date(d);
	return d.getSeconds();
};


stdfn.MINUTE = function(d){
	d = new Date(d);
	return d.getMinutes();
};

stdfn.HOUR = function(d){
	d = new Date(d);
	return d.getHours();
};

stdfn.DAY = stdfn.DAYOFMONTH = function(d){
	d = new Date(d);
	return d.getDate();
};

stdfn.MONTH = function(d){
	d = new Date(d);
	return d.getMonth()+1;
};

stdfn.YEAR = function(d){
	d = new Date(d);
	return d.getFullYear();
};

/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropTable = function (params) { return yy.extend(this, params); }
yy.DropTable.prototype.toString = function() {
	var s = K('DROP')+' '+K('TABLE');
	if(this.ifexists) s += ' '+K('IF')+' '+K('EXISTS');
	s += ' '+this.table.toString();
	return s;
}


// DROP TABLE
yy.DropTable.prototype.execute = function (databaseid, params, cb) {
	var db = alasql.databases[this.table.databaseid || databaseid];
	var tableid = this.table.tableid;
//	console.log(db, this.table.databaseid );
	if(db.engineid) {
		return alasql.engines[db.engineid].dropTable(this.table.databaseid || databaseid,tableid, this.ifexists, cb);
	}
	if(!this.ifexists || this.ifexists && db.tables[tableid]) {
		if(!db.tables[tableid]) {
			if(!alasql.options.dropifnotexists) {
				throw new Error('Can not drop table \''+this.table.tableid+'\', because it does not exist in the database.');
			}
		} else {
			delete db.tables[tableid];
			return 1;
		}
	}
	return 0;
};


/*
//
// ALTER TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// ALTER TABLE table1 RENAME TO table2
yy.AlterTable = function (params) { return yy.extend(this, params); }
yy.AlterTable.prototype.toString = function() {
	var s = 'ALTER TABLE '+this.table.toString(); 
	if(this.renameto) s += ' RENAME TO '+this.renameto;
	return s;
}

yy.AlterTable.prototype.execute = function (databaseid, params, cb) {
	var db = alasql.databases[databaseid];
	db.dbversion = Date.now();

	if(this.renameto) {
		var oldtableid = this.table.tableid;
		var newtableid = this.renameto;
			var res = 1;
			if(db.tables[newtableid]) {
				throw new Error("Can not rename a table '"+oldtableid+"' to '"
					+newtableid+"', because the table with this name already exists");
			} else if(newtableid == oldtableid) {
				throw new Error("Can not rename a table '"+oldtableid+"' to itself");
			} else {
				db.tables[newtableid] = db.tables[oldtableid];
				delete db.tables[oldtableid];
				res = 1;
			};
			if(cb) cb(res)
			return res;
	} else if(this.addcolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.addcolumn.columnid;
		if(table.xcolumns[columnid]) {
			throw new Error('Cannot add column "'+columnid+'", because it already exists in the table "'+tableid+'"');
		}

		var col = {
			columnid:columnid,
			dbtypeid:this.dbtypeid,
			dbsize:this.dbsize,
			dbprecision:this.dbprecision,
			dbenum:this.dbenum,
			defaultfns: null // TODO defaultfns!!!
		};

		var defaultfn = function(){};

		table.columns.push(col);
		table.xcolumns[columnid] = col;

		for(var i=0, ilen=table.data.length; i<ilen; i++) {
//				console.log(table.data[i][columnid]);
			table.data[i][columnid] = defaultfn();
		}

		// TODO
		return 1;
	} else if(this.modifycolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.modifycolumn.columnid;

		if(!table.xcolumns[columnid]) {
			throw new Error('Cannot modify column "'+columnid+'", because it was not found in the table "'+tableid+'"');
		}

		var col = table.xcolumns[columnid];
		col.dbtypeid = this.dbtypeid;
		col.dbsize = this.dbsize;
		col.dbprecision = this.dbprecision;
		col.dbenum = this.dbenum;


		// TODO
		return 1;
	} else if(this.renamecolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;

		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.renamecolumn;
		var tocolumnid = this.to;

		var col;
		if(!table.xcolumns[columnid]) {
			throw new Error('Column "'+columnid+'" is not found in the table "'+tableid+'"');
		}
		if(table.xcolumns[tocolumnid]) {
			throw new Error('Column "'+tocolumnid+'" already exists in the table "'+tableid+'"');
		}

		if(columnid != tocolumnid) {
			for(var j=0; j<table.columns.length; j++) {
				if(table.columns[j].columnid == columnid) {
					table.columns[j].columnid = tocolumnid;
				}
			};

			table.xcolumns[tocolumnid]=table.xcolumns[columnid];
			delete table.xcolumns[columnid];

			for(var i=0, ilen=table.data.length; i<ilen; i++) {
//				console.log(table.data[i][columnid]);
				table.data[i][tocolumnid] = table.data[i][columnid];
				delete table.data[i][columnid];
			}
			return table.data.length;
		}
		else return 0;
	} else if(this.dropcolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.dropcolumn;

		var found = false;
		for(var j=0; j<table.columns.length; j++) {
			if(table.columns[j].columnid == columnid) {
				found = true;
				table.columns.splice(j,1);
				break;
			}
		};

		if(!found) {
			throw new Error('Cannot drop column "'+columnid+'", because it was not found in the table "'+tableid+'"');
		}

		delete table.xcolumns[columnid];

		for(var i=0, ilen=table.data.length; i<ilen; i++) {
			delete table.data[i][columnid];
		}
		return table.data.length;
	} else {
		throw Error('Unknown ALTER TABLE method');
	}

};



/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CreateIndex = function (params) { return yy.extend(this, params); }
yy.CreateTable.prototype.toString = function() {
	var s = 'CREATE';
	if(this.unique) s+=' UNIQUE';
	s += ' INDEX ' + this.indexid + " ON "+this.table.toString();
	s += "("+this.columns.toString()+")";
	return s;
}

// CREATE TABLE
yy.CreateIndex.prototype.execute = function (databaseid) {
//	var self = this;
	var db = alasql.databases[databaseid];
	var tableid = this.table.tableid;
	var table = db.tables[tableid];
	var indexid = this.indexid;

	if(this.unique) {
		var rightfns = this.columns.map(function(colid){return "r[\'"+colid+"\']"}).join("+'`'+");
		table.uniqdefs[indexid] = {
			rightfns: rightfns
		};
		var ux = table.uniqs[indexid] = {};
		if(table.data.length > 0) {
			for(var i=0, ilen=table.data.length; i<ilen;i++) {
				var addr = rightfns(table.data[i]);
				if(!ux[addr]) {
					ux[addr] = {num:0};
				};
				ux[addr].num++;
			}
		}
	} else {
		var rightfns = this.columns.map(function(colid){return "r[\'"+colid+"\']"}).join("+'`'+");
		var hh = hash(rightfns);
		table.inddefs[indexid] = {rightfns:rightfns, hh:hh};
		table.indices[hh] = {};

		var ix = table.indices[hh] = {};
		if(table.data.length > 0) {
			for(var i=0, ilen=table.data.length; i<ilen;i++) {
				var addr = rightfns(table.data[i]);
				if(!ix[addr]) {
					ix[addr] = [];
				};
				ix[addr].push(table.data[i]);
			}
		}
	};

};




/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropIndex = function (params) { return yy.extend(this, params); }
yy.DropIndex.prototype.toString = function() {
	return 'INDEX TABLE' + this.indexid;
}


// DROP TABLE
yy.DropIndex.prototype.compile = function (db) {
	var indexid = this.indexid;
	return function() {
		return 1;
	}
};


/*
//
// CREATE VIEW for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CreateView = function (params) { return yy.extend(this, params); }
yy.CreateView.prototype.toString = function() {
	var s = 'CREATE VIEW';
	s += ' '+this.view.toString();
	if(this.columns) { 
		var ss = this.columns.map(function(col){
			return col.toString();
		});
		s += ' ('+ss.join(',')+')';
	}
	s += ' AS '+this.select.toString();
	return s;
};

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.CreateView.prototype.execute = function (databaseid) {
//	var self = this;
	var db = alasql.databases[this.view.databaseid || databaseid];
	var v = db.views[this.view.viewid] = new View();

//	console.log(databaseid);
//	console.log(db.databaseid,db.tables);
//	console.log(table);

	return 1;
};




/*
//
// INSERT for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Insert = function (params) { return yy.extend(this, params); }
yy.Insert.prototype.toString = function() {
	var s = 'INSERT INTO '+this.into.toString();
	if(this.columns) s += '('+this.columns.toString()+')';
	if(this.values) s += ' VALUES '+this.values.toString();
	if(this.select) s += ' '+this.select.toString();
	return s;
}

yy.Insert.prototype.compile = function (databaseid) {
	var self = this;
	databaseid = self.into.databaseid || databaseid
	var db = alasql.databases[databaseid];
//	console.log(self);
	var tableid = self.into.tableid;
	var table = db.tables[tableid];

	// Check, if this dirty flag is required
	var s = '';
	var sw = '';
//	var s = 'db.tables[\''+tableid+'\'].dirty=true;';

	var ss = [];


// INSERT INTO table VALUES
	if(this.values) {

//		console.log(1);
		self.values.forEach(function(values) {

//			s += 'db.tables[\''+tableid+'\'].data.push({';

//			s += '';
			if(self.columns) {
				self.columns.forEach(function(col, idx){
//console.log(db.tables, tableid, table);
		//			ss.push(col.columnid +':'+ self.values[idx].value.toString());
		//			console.log(rec[f.name.value]);
		//			if(rec[f.name.value] == "NULL") rec[f.name.value] = undefined;

		//			if(table.xflds[f.name.value].dbtypeid == "INT") rec[f.name.value] = +rec[f.name.value]|0;
		//			else if(table.xflds[f.name.value].dbtypeid == "FLOAT") rec[f.name.value] = +rec[f.name.value];
					var q = "'"+col.columnid +'\':';
					if(table.xcolumns && table.xcolumns[col.columnid]) { 
						if(["INT","FLOAT","NUMBER","MONEY"].indexOf(table.xcolumns[col.columnid].dbtypeid) >=0) {
							q += "+"+values[idx].toJavaScript();
						} else if (alasql.fn[table.xcolumns[col.columnid].dbtypeid]) {
							q += "(new "+table.xcolumns[col.columnid].dbtypeid+"(";
							q += values[idx].toJavaScript();
							q += "))";
						} else {
							q += values[idx].toJavaScript();
						};
					} else { 
						q += values[idx].toJavaScript();
					}
					ss.push(q);

				});
			} else {
//				var table = db.tables[tableid];
//	console.log('table1', db, self);
//console.log(111, table.columns);
				if((values instanceof Array) && table.columns && table.columns.length > 0) {
					table.columns.forEach(function(col, idx){

						var q = '\''+col.columnid +'\':';
//						var val = values[idx].toJavaScript();

						if(["INT","FLOAT","NUMBER","MONEY"].indexOf(col.dbtypeid) >=0) {
							q += "+"+values[idx].toJavaScript();
						} else if (alasql.fn[col.dbtypeid]) {
							q += "(new "+col.dbtypeid+"(";
							q += values[idx].toJavaScript();
							q += "))";
						} else { 
							q += values[idx].toJavaScript();
						}

						 // if(table.xcolumns && table.xcolumns[col.columnid] && 
						 //  (table.xcolumns[col.columnid].dbtypeid == "DATE" ||
							// table.xcolumns[col.columnid].dbtypeid == "DATETIME"
						 //  )) {
						 // 	val = "(new Date("+val+"))";
						 // }
						// 		|| table.xcolumns[col.columnid].dbtypeid == "FLOAT"
						// 		|| table.xcolumns[col.columnid].dbtypeid == "NUMBER"
						// 		|| table.xcolumns[col.columnid].dbtypeid == "MONEY"
						// 	)) q += '+';
					//	console.log(self.values[idx].toString());
			//console.log(self);
//						q += val;

						// if(table.xcolumns && table.xcolumns[col.columnid] && table.xcolumns[col.columnid].dbtypeid == "INT") q += '|0';
						ss.push(q);

			//			console.log(fld);
						// TODO: type checking and conversions
			//			rec[fld.fldid] = eval(self.insertExpression[idx].toJavaScript('',''));
			//			console.log(rec[fld.fldid]);
			//			if(rec[fld.fldid] == "NULL") rec[fld.fldid] = undefined;

			//			if(table.xflds[fld.fldid].dbtypeid == "INT") rec[fld.fldid] = +rec[fld.fldid]|0;
			//			else if(table.xflds[fld.fldid].dbtypeid == "FLOAT" || table.xflds[fld.fldid].dbtypeid == "MONEY" ) 
			//				rec[fld.fldid] = +rec[fld.fldid];
					});
				} else {
//					console.log(222,values);
//					sw = 'var w='+JSONtoJavaScript(values)+';for(var k in w){r[k]=w[k]};';
					sw = 'var r='+JSONtoJavaScript(values)+';';
				}
			}
//console.log(ss);

			if(db.tables[tableid].defaultfns) ss.unshift(db.tables[tableid].defaultfns);
			if(sw) {
				s += sw;
			} else {
				s += 'var r={'+ss.join(',')+'};';
			}
//			s += 'db.tables[\''+tableid+'\'].insert(r);';
            if(db.tables[tableid].insert) {
    			s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].insert(r);';
            } else {
                s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].data.push(r);';
            }

		});

		s += 'return '+self.values.length;
//console.log(s);
		var insertfn = new Function('db, params',s);
	
// INSERT INTO table SELECT

	} else if(this.select) {
		selectfn = this.select.compile(databaseid);
		var insertfn = function(db, params) {
			var res = selectfn(params);
			db.tables[tableid].data = db.tables[tableid].data.concat(res);
			return res.length;
		}
	} else if(this.default) {
		var insertfns = 'db.tables[\''+tableid+'\'].data.push({'+table.defaultfns+'});return 1;';
        var insertfn = new Function('db,params',insertfns); 
    } else {
    	throw new Error('Wrong INSERT parameters');
    }

	var statement = function(params, cb) {
		//console.log(databaseid);
		var db = alasql.databases[databaseid];

		if(alasql.autocommit && db.engineid) {
			alasql.engines[db.engineid].loadTableData(databaseid,tableid);
		}
		
		var res = insertfn(db,params);

		if(alasql.autocommit && db.engineid) {
			alasql.engines[db.engineid].saveTableData(databaseid,tableid);
		}
//		var res = insertfn(db, params);
		if(cb) cb(res);
		return res;
	};

	return statement;
};

yy.Insert.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
//	throw new Error('Insert statement is should be compiled')
}





/*
//
// DELETE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Delete = function (params) { return yy.extend(this, params); }
yy.Delete.prototype.toString = function() {
	var s = 'DELETE FROM '+this.table.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}

yy.Delete.prototype.compile = function (databaseid) {
//  console.log(11,this);
	databaseid = this.table.databaseid || databaseid;
	var tableid = this.table.tableid;
	var statement;
			var db = alasql.databases[databaseid];

	if(this.where) {
//		try {
//		console.log(this, 22, this.where.toJavaScript('r',''));
//	} catch(err){console.log(444,err)};
		var wherefn = new Function('r,params','return ('+this.where.toJavaScript('r','')+')');
//		console.log(wherefn);
		statement = function (params, cb) {
			if(alasql.autocommit && db.engineid) {
				alasql.engines[db.engineid].loadTableData(databaseid,tableid);
			}

			var table = db.tables[tableid];
//			table.dirty = true;
			var orignum = table.data.length;

			var newtable = [];			
			for(var i=0, ilen=table.data.length;i<ilen;i++) {
				if(wherefn(table.data[i],params)) {
					// Check for transaction - if it is not possible then return all back
					if(table.delete) {
						table.delete(i);
					} else {
						// SImply do not push
					}
				} else newtable.push(table.data[i]);
			}
//			table.data = table.data.filter(function(r){return !;});
			table.data = newtable;
			var res = orignum - table.data.length;
			if(alasql.autocommit && db.engineid) {
				alasql.engines[db.engineid].saveTableData(databaseid,tableid);
			}

//			console.log('deletefn',table.data.length);
			if(cb) cb(res);
			return res;
		}
	} else {
		statement = function (params, cb) {
			if(alasql.autocommit && db.engineid) {
				alasql.engines[db.engineid].loadTableData(databaseid,tableid);
			}

			var table = db.tables[tableid];
			table.dirty = true;
			var orignum = db.tables[tableid].data.length;

			table.deleteall();

			if(alasql.autocommit && db.engineid) {
				alasql.engines[db.engineid].saveTableData(databaseid,tableid);
			}

			if(cb) cb(orignum);
			return orignum;
		};
	};

	return statement;

};

yy.Delete.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
}


/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Update = function (params) { return yy.extend(this, params); }
yy.Update.prototype.toString = function() {
	var s = 'UPDATE '+this.table.toString();
	if(this.columns) s += ' SET '+this.columns.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}


yy.SetColumn = function (params) { return yy.extend(this, params); }
yy.SetColumn.prototype.toString = function() {
	return this.columnid.toString() + '='+this.expression.toString();
}

yy.Update.prototype.compile = function (databaseid) {
//	console.log(this);
	databaseid = this.table.databaseid || databaseid;
	var tableid = this.table.tableid;
	
	if(this.where) {
		var wherefn = new Function('r,params','return '+this.where.toJavaScript('r',''));
	};

	// Construct update function
	var s = '';
	this.columns.forEach(function(col){
		s += 'r[\''+col.columnid+'\']='+col.expression.toJavaScript('r','')+';'; 
	});
	var assignfn = new Function('r,params',s);

	var statement = function(params, cb) {
		var db = alasql.databases[databaseid];

		if(alasql.autocommit && db.engineid) {
			alasql.engines[db.engineid].loadTableData(databaseid,tableid);
		}

		var table = db.tables[tableid];
		if(!table) {
			throw new Error("Table '"+tableid+"' not exists")
		}
//		table.dirty = true;
		var numrows = 0;
		for(var i=0, ilen=table.data.length; i<ilen; i++) {
			if(!wherefn || wherefn(table.data[i], params) ) {
				if(table.update) {
					table.update(assignfn, i, params);
				} else {
					assignfn(table.data[i], params);
				}
				numrows++;
			}
		};

		if(alasql.autocommit && db.engineid) {
			alasql.engines[db.engineid].saveTableData(databaseid,tableid);
		}

		if(cb) cb(numrows);
		return numrows;
	};
	return statement;
};

yy.Update.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
}





/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// Modified: 16.11.2014
// (c) 2014, Andrey Gershun
//
*/

// CREATE DATABASE databaseid
yy.CreateDatabase = function (params) { return yy.extend(this, params); };
yy.CreateDatabase.prototype.toString = function() {
	var s = K('CREATE'); 
	if(this.engineid) s+=' '+L(this.engineid);
	s += ' '+K('DATABASE');
	if(this.ifnotexists) s += ' '+K('IF')+' '+K('NOT')+' '+K('EXISTS');
	s += ' '+L(this.databaseid);
	if(this.args && this.args.length > 0) { 
		s += '('+this.args.map(function(arg){ return arg.toString()}).join(', ')+')';
	}
	if(this.as) s += ' '+K('AS')+' '+L(this.as);
	return s;
}
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.CreateDatabase.prototype.execute = function (databaseid, params, cb) {
	// console.log(alasql.useid, databaseid, this.databaseid);
	// console.trace();
	var args;
	if(this.args && this.args.length > 0) {
		args = this.args.map(function(arg){
			return new Function('params','return '+arg.toJavaScript())(params);
		});
	};
	if(this.engineid) {
		var res = alasql.engines[this.engineid].createDatabase(this.databaseid, this.args, this.ifnotexists, this.as, cb);
		return res;
	} else {
		var dbid = this.databaseid;
		if(alasql.databases[dbid]) {
			throw new Error("Database '"+dbid+"' already exists")
		};
		var a = new alasql.Database(dbid);
		var res = 1;
		if(cb) return cb(res);
		return res;
	}
};

// CREATE DATABASE databaseid
yy.AttachDatabase = function (params) { return yy.extend(this, params); };
yy.AttachDatabase.prototype.toString = function() {
	var s = K('ATTACH');
	if(this.engineid) s += ' '+L(this.engineid);
	s += ' '+K('DATABASE')+' '+L(this.databaseid);
	if(this.as) s+= ' '+K('AS')+' '+L(this.as);
	return s;
}
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.AttachDatabase.prototype.execute = function (databaseid, params, cb) {
	// console.log(alasql.useid, databaseid, this.databaseid);
	// console.trace();
	if(!alasql.engines[this.engineid]) {
		throw new Error('Engine "'+this.engineid+'" is not defined.');
	};
	var res = alasql.engines[this.engineid].attachDatabase(this.databaseid, this.as, cb);
	return res;
};


// USE DATABSE databaseid
// USE databaseid
yy.UseDatabase = function (params) { return yy.extend(this, params); };
yy.UseDatabase.prototype.toString = function() {
	return K('USE') +' '+K('DATABASE')+' '+L(this.databaseid);
}
//yy.UseDatabase.prototype.compile = returnUndefined;
yy.UseDatabase.prototype.execute = function (databaseid, params, cb) {
	var dbid = this.databaseid;
	if(!alasql.databases[dbid]) {
		throw new Error("Database '"+dbid+"' does not exist")
	};
	alasql.use(dbid);
	var res = 1;
	if(cb) cb(res);
	return res;
};

// DROP DATABASE databaseid
yy.DropDatabase = function (params) { return yy.extend(this, params); }
yy.DropDatabase.prototype.toString = function() {
	var s = K('DROP');
	if(this.ifexists) s += ' '+K('IF')+' '+K('EXISTS');
	s += ' '+K('DATABASE')+' '+L(this.databaseid);
	return s;
}
//yy.DropDatabase.prototype.compile = returnUndefined;
yy.DropDatabase.prototype.execute = function (databaseid, params, cb) {
	if(this.engineid) {

//		console.log(this,this.databaseid, this.ifexists);
		return alasql.engines[this.engineid].dropDatabase(this.databaseid, this.ifexists, cb);
	}

	var dbid = this.databaseid;

	if(dbid == alasql.DEFAULTDATABASEID) {
		throw new Error("Drop of default database is prohibited");			
	}
	if(!alasql.databases[dbid]) {
		throw new Error("Database '"+databaseid+"' does not exist");
	};
	delete alasql.databases[dbid];
	if(dbid == alasql.useid) {
		alasql.use();		
	}
	var res = 1;
	if(cb) cb(res);
	return 1;
};







/*
//
// SHOW for Alasql.js
// Date: 19.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ShowDatabases = function (params) { return yy.extend(this, params); }
yy.ShowDatabases.prototype.toString = function() {
	var s = K('SHOW')+' '+K('DATABASES');
	if(this.like) s += 'LIKE '+this.like.toString();
	return s;
}
yy.ShowDatabases.prototype.execute = function (databaseid, params, cb) {
	if(this.engineid) {
		return alasql.engines[this.engineid].showDatabases(this.like, cb);
	} else {
		var self = this;
		var res = [];
		for(dbid in alasql.databases) {
			res.push({databaseid: dbid});
		};
		if(self.like && res && res.length > 0) {
			res = res.filter(function(d){
				return d.databaseid.match(new RegExp((self.like.value).replace(/\%/g,'.*'),'g'));
			});
		}
		if(cb) cb(res);
		return res;
	};

};


yy.ShowTables = function (params) { return yy.extend(this, params); }
yy.ShowTables.prototype.toString = function() {
	var s = K('SHOW')+' '+K('TABLES');
	if(this.databaseid) s += ' FROM '+this.databaseid;
	if(this.like) s += ' '+K('LIKE')+' '+this.like.toString();
	return s;
}
yy.ShowTables.prototype.execute = function (databaseid, params, cb) {
	var db = alasql.databases[this.databaseid || databaseid];

	var self = this;
	var res = [];
	for(tableid in db.tables) {
		res.push({tableid: tableid});
	};
	if(self.like && res && res.length > 0) {
		res = res.filter(function(d){
			return d.tableid.match(new RegExp((self.like.value).replace(/\%/g,'.*'),'g'));
		});
	};
	if(cb) cb(res);
	return res;
};

yy.ShowColumns = function (params) { return yy.extend(this, params); }
yy.ShowColumns.prototype.toString = function() {
	var s = K('SHOW')+' '+K('COLUMNS');
	if(this.table.tableid) s += ' '+K('FROM')+' '+this.table.tableid;
	if(this.databaseid) s += ' '+K('FROM')+' '+this.databaseid;
	return s;
};

yy.ShowColumns.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	if(table && table.columns) {
		var res = table.columns.map(function(col){
			return {columnid: col.columnid, dbtypeid: col.dbtypeid, dbsize: col.dbsize};
		});
		return res;
	} else {
		return [];
	}
};

yy.ShowIndex = function (params) { return yy.extend(this, params); }
yy.ShowIndex.prototype.toString = function() {
	var s = K('SHOW')+' '+K('INDEX');
	if(this.table.tableid) s += ' '+K('FROM')+' '+this.table.tableid;
	if(this.databaseid) s += ' '+K('FROM')+' '+this.databaseid;
	return s;
}
yy.ShowIndex.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	var res = [];
	if(table && table.indices) {
		for(var ind in table.indices) {
			res.push({hh:ind, len:Object.keys(table.indices[ind]).length});
		}
	}
	return res;
};

yy.ShowCreateTable = function (params) { return yy.extend(this, params); }
yy.ShowCreateTable.prototype.toString = function() {
	var s = K('SHOW')+' '+K('CREATE')+' '+K('TABLE')+' '+L(this.table.tableid);
	if(this.databaseid) s += ' '+K('FROM')+' '+L(this.databaseid);
	return s;
}
yy.ShowCreateTable.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	if(table) {
		var s = K('CREATE')+' '+K('TABLE')+' '+L(this.table.tableid)+' (';
		var ss = [];
		if(table.columns) {
			table.columns.forEach(function(col){
				var a = L(col.columnid)+' '+K(col.dbtypeid);
				if(col.dbsize) a += '('+N(col.dbsize)+')';
				if(col.primarykey) a += ' '+K('PRIMARY')+' '+K('KEY');
				// TODO extend
				ss.push(a); 
			});
			s += ss.join(', ');
		};
		s += ')';
		return s;
	} else {
		throw new Error('There is no such table "'+this.table.tableid+'"');
	}
};


/*
//
// SET for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/

yy.SetVariable = function (params) { return yy.extend(this, params); }
yy.SetVariable.prototype.toString = function() {
	var s = K('SET')+' ';
	if(typeof this.autocommit != 'undefined') {
		s += K('AUTOCOMMIT')+' '+(this.autocommit?'ON':'OFF');
	};
	return s;
}

yy.SetVariable.prototype.execute = function (databaseid,cb) {
	if(typeof this.autocommit != 'undefined') {
		alasql.autocommit = this.autocommit;
	}

};



// Console functions
/*
alasql.con = {
	results:{}
};

alasql.con.open = function(el) {
	// For browser only
	if (typeof exports === 'object') return;

	// Find parent element
	el = el || document.getElementById('alasql-con') || document.getElementsByTagName('body');
	if(!el) {throw new Error('Cannot fid element for console.')}

	var conel = document.createElement('div');
	conel.style.width = "1000px";
	conel.style.height = "320px";

	alasql.con.conel = conel;

	var lenta = document.createElement('div');
	lenta.style.width = "1000px";
	lenta.style.height = "200px";
	lenta.style.overflow = "scroll";
	alasql.con.lenta = lenta;

	var inpel = document.createElement('div');
	inpel.style.width = "1000px";
	inpel.style.height = "100px";
	inpel.style.contentEditable = true;
	inpel.innerHTML = 'command ';
	alasql.con.inpel = inpel;

	conel.appendChild(lenta);
	conel.appendChild(inpel);
	el.appendChild(conel);
};

alasql.con.clear = function() {
	// For browser only
	if (typeof exports === 'object') return;

	alasql.con.conel.innerHTML = '';
};

alasql.con.close = function() {
	// For browser only
	if (typeof exports === 'object') return;

	alasql.con.conel.removeChild(alasql.con.lenta);
	alasql.con.conel.removeChild(alasql.con.inel);
	alasql.con.conel.parentElement.removeChild(conel);
};

alasql.con.log = function() {
		// For browser only
	if (typeof exports === 'object') {
		console.log.bind(console).apply(this, arguments);
	} else {
		var s = '<div>';
		s += Array.prototype.slice.call(arguments, 0).map(function(arg){
			return arg.toString();
		}).join(' ');
		s += '</div>';
		alasql.con.conel.innerHTML += s;
	};

};
*/
alasql.test = function(name, times, fn) {
	if(arguments.length == 0) {
		alasql.log(alasql.con.results);
		return;
	} else if(arguments.length == 1) {
		var tm = Date.now();
		fn();
		alasql.con.log(Date.now()-tm);
		return;
	} 

	if(arguments.length == 2) {
		fn = times;
		times = 1;
	}

	var tm = Date.now();
	for(var i=0;i<times;i++) fn();
	alasql.con.results[name] = Date.now()-tm;
};

// Console
// alasql.log = function(sql, params) {
// 	var res;
// 	if(typeof sql == "string") {
// 		res = alasql(sql, params);
// 	} else {
// 		res = sql;
// 	};
// 	if(res instanceof Array) {
// 		if(console.table) {
// 			console.table(res);		
// 		} else {
// 			console.log(res);
// 		}
// 	} else {
// 		console.log(res);				
// 	}
// };

// Console
alasql.log = function(sql, params) {
	var olduseid = alasql.useid;
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	}

	var res;
	if(typeof sql == "string") {
		res = alasql(sql, params);
	} else {
		res = sql;
	};

	// For Node and console.output
	if(target == 'console' || typeof exports == 'object') {
		if(typeof sql == 'string' && alasql.options.logprompt) console.log(olduseid+'>',sql);

		if(res instanceof Array) {
			if(console.table) {
				// For Chrome and other consoles
				console.table(res);		
			} else {
				// Add print procedure
				console.log(JSONtoString(res));
			}
		} else {
			console.log(JSONtoString(res));				
		}

	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}

		}

		var s = '';

		if(typeof sql == 'string' && alasql.options.logprompt) {
			s += '<p>'+olduseid+'&gt;&nbsp;'+alasql.pretty(sql)+'</p>';
		}

		if(res instanceof Array) {
			if(res.length == 0) {
				s += '<p>[ ]</p>'
			} else if(typeof res[0] != 'object' || res[0] instanceof Array) {
				for(var i=0,ilen=res.length;i<ilen;i++) {
					s += '<p>'+loghtml(res[i])+'</p>';
				}
			} else {
				s += loghtml(res);
			}
		} else {
			s += loghtml(res);
		}
		el.innerHTML += s;
	}
};

alasql.clear = function() {
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	};

	if(target == 'console' || typeof exports == 'object') {
		if(console.clear) {
			console.clear();
		} else {
			// Something todo in Node
		}
	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML = '';		
	}
}

alasql.write = function(s) {
//	console.log('write',s);
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	};

	if(target == 'console' || typeof exports == 'object') {
		if(console.log) {
			console.log(s);
		} else {
			// Something todo in Node
		}
	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML += s;		
	}
}

function loghtml(res) {
//	console.log(res); 
	var s  = '';
	if(typeof res == 'undefined') {
		s += 'undefined';
	} else if(res instanceof Array) {
		s += '<style>';
		s += 'table {border:1px black solid; border-collapse: collapse; border-spacing: 0px;}';
		s += 'td,th {border:1px black solid; padding-left:5px; padding-right:5px}';
		s += 'th {background-color: #EEE}';
		s += '</style>';
		s += '<table>';
		var cols = [];			
		for(colid in res[0]) {
			cols.push(colid);
		}
		s += '<tr><th>#';
		cols.forEach(function(colid){
			s += '<th>'+colid;
		});
		for(var i=0,ilen=res.length;i<ilen;i++) {
			s += '<tr><th>'+(i+1);
			cols.forEach(function(colid){
				s += '<td> ';
				if(+res[i][colid] == +res[i][colid]) {
					s += '<div style="text-align:right">';
					if(typeof res[i][colid] == 'undefined') s += 'NULL';
					else s += res[i][colid];
					s += '</div>';
				} else {
					if(typeof res[i][colid] == 'undefined') {
						s += 'NULL';
					} else if (typeof res[i][colid] == 'string') {
						s += res[i][colid];
					} else s += JSONtoString(res[i][colid]);
//					s += res[i][colid];
				};
			});
		}

		s += '</table>';
	} else {
		s += '<p>'+JSONtoString(res)+'</p>';
	}
		// if () {}

		// 		if(typeof res == 'object') {
		// 			s += '<p>'+JSON.stringify(res)+'</p>';
		// 		} else {
		// 		}
	return s;
};



function scrollTo(element, to, duration) {
    if (duration <= 0) return;
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;

    setTimeout(function() {
        if (element.scrollTop==to) return;
        element.scrollTop = element.scrollTop + perTick;
        scrollTo(element, to, duration - 10);
    }, 10);
}

alasql.prompt = function(el, useidel, firstsql) {
	if(typeof exports == 'object') {
		throw new Error('The functionality of prompt is not realized for Node.js');
	};
	var prompti = 0;
	if(typeof el == 'string') el = document.getElementById(el);
	if(typeof useidel == 'string') useidel = document.getElementById(useidel);
	useidel.textContent = alasql.useid;

	if(firstsql) {
		alasql.prompthistory.push(firstsql);
		prompti = alasql.prompthistory.length;
		try {
			var tm = Date.now();
			alasql.log(firstsql);
			alasql.write('<p style="color:blue">'+(Date.now()-tm)+' ms</p>');
		} catch (err) {
			alasql.write('<p>'+olduseid+'&gt;&nbsp;<b>'+sql+'</b></p>');
			alasql.write('<p style="color:red">'+err+'<p>');
		}
	};

	var y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
	scrollTo(document.getElementsByTagName('body')[0],y,500);

	el.onkeydown = function(event) {
		if(event.which == 13) {
			var sql = el.value;
			var olduseid = alasql.useid;
			el.value = '';
			alasql.prompthistory.push(sql);
			prompti = alasql.prompthistory.length;
			try {
				var tm = Date.now();
				alasql.log(sql);
				alasql.write('<p style="color:blue">'+(Date.now()-tm)+' ms</p>');
			} catch (err) {
				alasql.write('<p>'+olduseid+'&gt;&nbsp;'+alasql.pretty(sql, false)+'</p>');
				alasql.write('<p style="color:red">'+err+'<p>');
			}
			el.focus();
//			console.log(el.getBoundingClientRect().top);
			useidel.textContent = alasql.useid;
			var y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
			scrollTo(document.getElementsByTagName('body')[0],y,500);
		} else if(event.which == 38) {
			prompti--; if(prompti<0) prompti = 0;
			if(alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}

		} else if(event.which == 40) {
			prompti++; 
			if(prompti>=alasql.prompthistory.length) {
				prompti = alasql.prompthistory.length;
				el.value = '';
			} else if(alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}
		}

	}
}





/*
//
// Commit for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/
yy.Begin = function (params) { return yy.extend(this, params); }
yy.Begin.prototype.toString = function() {
	return K('BEGIN');
}

yy.Begin.prototype.execute = function (databaseid,params, cb) {
	var res = 1;
	if(alasql.databases[alasql.useid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].begin(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if(cb) cb(res);
	return res;
};

yy.Commit = function (params) { return yy.extend(this, params); }
yy.Commit.prototype.toString = function() {
	return K('COMMIT');
}

yy.Commit.prototype.execute = function (databaseid,params, cb) {
	var res = 1;
	if(alasql.databases[alasql.useid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].commit(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if(cb) cb(res);
	return res;
};

yy.Rollback = function (params) { return yy.extend(this, params); }
yy.Rollback.prototype.toString = function() {
	return K('ROLLBACK');
}

yy.Rollback.prototype.execute = function (databaseid,params,cb) {
	var res = 1;
	if(alasql.databases[alasql.useid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].rollback(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if(cb) cb(res);
	return res;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Help = function (params) { return yy.extend(this, params); }
yy.Help.prototype.toString = function() {
	var s = 'HELP';
	if(this.subject) s += ' '+this.subject;
	return s;
}


alasql.helpdocs = [
	{Command:'CREATE DATABASE database'},
	{Command:'CREATE TABLE table (columns)'},
	{Command:'DROP DATABASE database'},
	{Command:'DROP TABLE table'},
	{Command:'See <a href="http://alasql.org/docs">alasql.org/docs</a> for documentation'}
];

// DROP TABLE
yy.Help.prototype.execute = function (databaseid) {
	var ss = [];
	if(!this.subject) {
		ss = alasql.helpdocs;
	} else {
		ss.push('See <a href="http://alasql.org/docs">alasql.org/docs</a> for documentation');
	}
	return ss;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Source = function (params) { return yy.extend(this, params); }
yy.Source.prototype.toString = function() {
	var s = K('SOURCE');
	if(this.url) s += ' '+S('\''+this.url+'\'');
	return s;
}

// SOURCE FILE
yy.Source.prototype.execute = function (databaseid) {
//	console.log(this.url);
	loadFile(this.url, function(data){
//		console.log(data);
		alasql(data);
	}, function(err){
		throw err;
	});
	return 1;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Assert = function (params) { return yy.extend(this, params); }
yy.Source.prototype.toString = function() {
	var s = 'ASSERT';
	if(this.value) s += ' '+JSON.stringify(this.value);
	return s;
}

// SOURCE FILE
yy.Assert.prototype.execute = function (databaseid) {
	if(!deepEqual(alasql.res,this.value)) {
		if(this.message) {

		} else {
			throw new Error((this.message||'Assert wrong')+': '+JSON.stringify(alasql.res)+' == '+JSON.stringify(this.value));
		}
	}
	return 1;
};


//
// 91websql.js
// 
//
//

var WebSQL = alasql.engines.WebSQL = function (){};

WebSQL.createDatabase = function(wdbid, args, dbid, cb){
	var res = 1;
	var wdb = openDatabase(wdbid, args[0], args[1], args[2]);
	if(this.dbid) {
		var db = alasql.createDatabase(this.dbid);
		db.engineid = 'WebSQL';
		db.wdbid = wdbid;
		sb.wdb = db;
	}
	if(!wdb) {
		throw new Error('Cannot create WebSQL database "'+databaseid+'"')
	}
	if(cb) cb(res);
	return res;
};

WebSQL.dropDatabase = function(databaseid){
	throw new Error('This is impossible to drop WebSQL database.');
};

WebSQL.attachDatabase = function(databaseid, dbid, cb){
	var res = 1;
	if(alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "'+dbid+'" because it already exists');
	};
	alasqlopenDatabase(databaseid, args[0], args[1], args[2]);
	return res;
}




//
// 91websql.js
// 
//
//

var IDB = alasql.engines.IndexedDB = function (){};

IDB.showDatabases = function(like,cb) {
	// console.log('showDatabases',arguments);
	var request = indexedDB.webkitGetDatabaseNames();
	request.onsuccess = function(event) {
		var dblist = event.target.result;
		var res = [];
		if(like) {
			var relike = new RegExp((like.value).replace(/\%/g,'.*'),'g');
		}
		for(var i=0;i<dblist.length;i++) {
			if(!like || dblist[i].match(relike)) {
				res.push({databaseid: dblist[i]});
			}
		};
		cb(res);
	};
};

IDB.createDatabase = function(ixdbid, args, ifnotexists, dbid, cb){
	var request1 = indexedDB.webkitGetDatabaseNames();
	request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(dblist.contains(ixdbid)){
			if(ifnotexists) {
				cb(0);
				return;
			} else {		
				throw new Error('IndexedDB: Cannot create new database "'+ixdbid+'" because it already exists');
			}
		};

		var request2 = window.indexedDB.open(ixdbid,1);
		request2.onsuccess = function(event) {
			event.target.result.close();
			cb(1);
		};
	};
	// }
};

IDB.dropDatabase = function(ixdbid, ifexists, cb){
	var request1 = indexedDB.webkitGetDatabaseNames();
	request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(!dblist.contains(ixdbid)){
			if(ifexists) {
				cb(0);
				return;
			} else {
				throw new Error('IndexedDB: Cannot drop new database "'+ixdbid+'" because it does not exist');
			}
		};
		var request2 = indexedDB.deleteDatabase(ixdbid);
		request2.onsuccess = function(event) {
			cb(1);
		}
	};
};

IDB.attachDatabase = function(ixdbid, dbid, cb) {
	var request1 = indexedDB.webkitGetDatabaseNames();
		request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(!dblist.contains(ixdbid)){
			throw new Error('IndexedDB: Cannot attach database "'+ixdbid+'" because it does not exist');
		};
		var request2 = indexedDB.open(ixdbid);
		request2.onsuccess = function(event) {
			var ixdb = event.target.result;
			var db = new alasql.Database(dbid || ixdbid);
			db.engineid = "IndexedDB";
			db.ixdbid = ixdbid;
			db.tables = [];
		  	var tblist = ixdb.objectStoreNames;
			for(var i=0;i<tblist.length;i++){
				db.tables[tblist[i]] = {};
			};

		// if(!alasql.autocommit) {
		// if(db.tables){
		// 	for(var tbid in db.tables) {
		// 		db.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
		// 	}
		// 	}
		// }
			event.target.result.close();		
			cb(1);
		};
	};
};


IDB.createTable = function(databaseid, tableid, ifnotexists, cb) {
	var ixdbid = alasql.databases[databaseid].ixdbid;

	var request1 = indexedDB.webkitGetDatabaseNames();
		request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(!dblist.contains(ixdbid)){
			throw new Error('IndexedDB: Cannot create table in database "'+ixdbid+'" because it does not exist');
		};
		var request2 = indexedDB.open(ixdbid);
		request2.onversionchange = function(event) {
//			console.log('onversionchange');
			event.target.result.close();
		};
		request2.onsuccess = function(event) {
			var version = event.target.result.version;
			event.target.result.close();

			var request3 = indexedDB.open(ixdbid, version+1);
			request3.onupgradeneeded = function(event) {
				var ixdb = event.target.result;
//				console.log(ixdb);
				var store = ixdb.createObjectStore(tableid);
//				console.log(store);
			};
			request3.onsuccess = function(event) {
//				console.log('opened');
				event.target.result.close();
				cb(1);
			};
			request3.onerror = function(event){
				throw event;
//				console.log('error');
			}
			request3.onblocked = function(event){
				throw new Error('Cannot create table "'+tableid+'" because database "'+databaseid+'"  is blocked');
//				console.log('blocked');
			}				
		};
	};
};

IDB.dropTable = function (databaseid, tableid, ifexists, cb) {
	var ixdbid = alasql.databases[databaseid].ixdbid;

	var request1 = indexedDB.webkitGetDatabaseNames();
		request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(!dblist.contains(ixdbid)){
			throw new Error('IndexedDB: Cannot drop table in database "'+ixdbid+'" because it does not exist');
		};
		var request2 = indexedDB.open(ixdbid);
		request2.onversionchange = function(event) {
			event.target.result.close();
		};
		request2.onsuccess = function(event) {
			var version = event.target.result.version;
			event.target.result.close();

			var request3 = indexedDB.open(ixdbid, version+1);
			request3.onupgradeneeded = function(event) {
				var ixdb = event.target.result;
//				console.log(ixdb);
				ixdb.deleteObjectStore(tableid);
				delete alasql.databases[databaseid].tables[tableid];
//				var store = ixdb.createObjectStore(tableid);
				console.log('deleted');
			};
			request3.onsuccess = function(event) {
				console.log('opened');
				event.target.result.close();
				cb(1);
			};
			request3.onerror = function(event){
				throw event;
//				console.log('error');
			}
			request3.onblocked = function(event){
				throw new Error('Cannot drop table "'+tableid+'" because database "'+databaseid+'" is blocked');
//				console.log('blocked');
			}				
		};
	};
}


//
// 91websql.js
// 
// (c) Andrey Gershun
//

var LS = alasql.engines.localStorage = function (){};

LS.get = function(key) {
	var s = localStorage[key];
	if(typeof s == "undefined") return;
	var v = undefined;
	try {
		v = JSON.parse(s); 
	} catch(err) {
		throw new Error('Cannot parse JSON '+s);
	}
	return v;
};

LS.set = function(key, value){
	if(typeof value == 'undefined') localStorage.removeItem(key);
	else localStorage[key] = JSON.stringify(value); 
}

LS.createDatabase = function(lsdbid, args, ifnotexists, dbid, cb){
	var res = 1;
	var ls = LS.get('alasql');
	if(!(ifnotexists && ls && ls.databases && ls.databases[lsdbid])) {
		if(!ls) ls = {databases:{}};
		if(ls.databases && ls.databases[lsdbid]) {
			throw new Error('localStorage: Cannot create new database "'+lsdbid+'" because it already exists');
		}
		ls.databases[lsdbid] = true;
		LS.set('alasql',ls);
		LS.set(lsdbid,{databaseid:lsdbid, tables:{}});
	} else {
		res = 0;
	}
	if(cb) cb(res);
	return res;
};

LS.dropDatabase = function(lsdbid, ifexists, cb){
	var res = 1;
	var ls = LS.get('alasql');
	if(!(ifexists && ls && ls.databases && !ls.databases[lsdbid])) {
		if(!ls) {
			throw new Error('There are no alasql databases in localStorage');
		};
//		console.log(999,ls.databases,ls.databases[lsdbid], lsdbid);	
		if(ls.databases && !ls.databases[lsdbid]) {
			throw new Error('localStorage: Cannot drop database "'+lsdbid+'" because there is no such database');
		}
		delete ls.databases[lsdbid];
		LS.set('alasql',ls);
		
		var db = LS.get(lsdbid);
		for(var tableid in db.tables) {
//			console.log('remove',lsdbid,tableid);
			localStorage.removeItem(lsdbid+'.'+tableid);
		}

		localStorage.removeItem(lsdbid);
	} else {
		res = 0;
	}
	if(cb) cb(res);
	return res;
};


LS.attachDatabase = function(lsdbid, dbid, cb){
	var res = 1;
	if(alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "'+dbid+'" because it already exists');
	};
	var db = new alasql.Database(dbid || lsdbid);
	db.engineid = "localStorage";
	db.lsdbid = lsdbid;
	db.tables = LS.get(lsdbid).tables;
	// IF AUTOCOMMIT IS OFF then copy data to memory
	if(!alasql.autocommit) {
		if(db.tables){
			for(var tbid in db.tables) {
				db.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
			}
		}
	}
	return res;
};

LS.showDatabases = function(like, cb) {
	var res = [];
	var ls = LS.get('alasql');
	var relike = new RegExp(like.value.replace(/\%/g,'.*'),'g');
	if(ls && ls.databases) {
		for(dbid in ls.databases) {
			res.push({databaseid: dbid});
		};
		if(like && res && res.length > 0) {
			res = res.filter(function(d){
				return d.databaseid.match(relike);
			});
		}		
	};
	if(cb) cb(res);
	return res;
};

LS.createTable = function(databaseid, tableid, ifnotexists, cb) {
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var tb = LS.get(lsdbid+'.'+tableid);
	var res = 1;

	if(tb && !ifnotexists) {
		throw new Error('Table "'+tableid+'" alsready exists in localStorage database "'+lsdbid+'"');
	};
	var lsdb = LS.get(lsdbid);
	var table = alasql.databases[databaseid].tables[tableid];
	lsdb.tables[tableid] = {columns:table.columns};

	LS.set(lsdbid, lsdb);
	LS.set(lsdbid+'.'+tableid, []);

	if(cb) cb(res);
	return res;
}

LS.dropTable = function (databaseid, tableid, ifexists, cb) {
	var res = 1;
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var lsdb = LS.get(lsdbid);
	if(!ifexists && !lsdb.tables[tableid]) {
		throw new Error('Cannot drop table "'+tableid+'" in localStorage, because it does not exist');
	};
	delete lsdb.tables[tableid];
	LS.set(lsdbid, lsdb);
	localStorage.removeItem(lsdbid+'.'+tableid);
	if(cb) cb(res);
	return res;
}

LS.fromTable = function(databaseid, tableid, cb) {
//	console.log(998, databaseid, tableid, cb);
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var res = LS.get(lsdbid+'.'+tableid);
	if(cb) cb(res);
	return res;
};

LS.intoTable = function(databaseid, tableid, value, cb) {
//	console.log('intoTable',databaseid, tableid, value, cb);
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var res = value.length;
	var tb = LS.get(lsdbid+'.'+tableid);
	if(!tb) tb = [];
	tb = tb.concat(value);
	LS.set(lsdbid+'.'+tableid, tb);
//	console.log(lsdbid+'.'+tableid, tb);
//	console.log(localStorage[lsdbid+'.'+tableid]);
	if(cb) cb(res);
	return res;
};

LS.loadTableData = function(databaseid, tableid){
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	db.tables[tableid].data = LS.get(lsdbid+'.'+tableid);
}

LS.saveTableData = function(databaseid, tableid){
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	LS.set(lsdbid+'.'+tableid,db.tables[tableid].data);
	db.tables[tableid].data = null;
}

LS.commit = function(databaseid, cb) {
//	console.log('COMMIT');
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	lsdb = {databaseid:lsdbid, tables:{}};
	if(db.tables) {
		for(var tbid in db.tables) {
			lsdb.tables[tbid] = {columns: db.tables[tbid].columns};
			LS.set(lsdbid+'.'+tbid, db.tables[tbid].data);
		};
	}
	LS.set(lsdbid,lsdb);
	return 1;
};

LS.begin = LS.commit;

LS.rollback = function(databaseid, cb) {
	var db = alasql.databases[databaseid];
	db.dbversion++;
//	console.log(db.dbversion)
	var lsdbid = alasql.databases[databaseid].lsdbid;
	lsdb = LS.get(lsdbid);
//	if(!alasql.autocommit) {
		if(lsdb.tables){
			for(var tbid in lsdb.tables) {
				var tb = new alasql.Table({columns: db.tables[tbid].columns});
				extend(tb,lsdb.tables[tbid]);
				lsdb.tables[tbid] = tb;
				if(!alasql.autocommit) {
					lsdb.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
				}
				lsdb.tables[tbid].indexColumns();

				// index columns
				// convert types
			}
		}
//	}
	delete alasql.databases[databaseid];
	alasql.databases[databaseid] = new alasql.Database(databaseid);
	extend(alasql.databases[databaseid], lsdb);
	alasql.databases[databaseid].engineid = 'localStorage';
//console.log(999, alasql.databases[databaseid]);
}




/*
//
// Last part of Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// End of module


// Create default database
new Database("alasql");

// Set default database
alasql.use("alasql");


return alasql;
}));


//# sourceMappingURL=alasql.js.map