//
// alasql.js
// Alasql - JavaScript SQL database
// Date: 23.11.2014
// Version: 0.0.25
// (Ã±) 2014, Andrey Gershun
//

/*
The MIT License (MIT)

Copyright (c) 2014 Andrey Gershun (agershun@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

//  UMD header
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.alasql = factory();
    }
}(this, function () {

// Main function
alasql = function(sql, params, cb, scope) {
	return alasql.exec(sql, params, cb, scope);
};

alasql.version = "0.0.25";



/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,9],$V1=[2,8],$V2=[1,93],$V3=[1,94],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,54],$V9=[1,72],$Va=[1,74],$Vb=[1,73],$Vc=[1,84],$Vd=[1,85],$Ve=[1,86],$Vf=[1,87],$Vg=[1,88],$Vh=[1,89],$Vi=[1,90],$Vj=[1,91],$Vk=[1,92],$Vl=[1,75],$Vm=[1,76],$Vn=[1,77],$Vo=[1,78],$Vp=[1,82],$Vq=[1,79],$Vr=[1,80],$Vs=[1,81],$Vt=[1,83],$Vu=[1,71],$Vv=[1,70],$Vw=[1,45],$Vx=[1,38],$Vy=[1,40],$Vz=[1,37],$VA=[1,39],$VB=[1,36],$VC=[1,41],$VD=[1,44],$VE=[1,43],$VF=[1,50],$VG=[1,51],$VH=[1,53],$VI=[1,52],$VJ=[1,46],$VK=[1,48],$VL=[1,49],$VM=[8,9,69,75,98,99,109,110,111,112,118],$VN=[1,127],$VO=[1,124],$VP=[1,125],$VQ=[1,126],$VR=[1,128],$VS=[1,129],$VT=[1,130],$VU=[1,131],$VV=[1,132],$VW=[1,133],$VX=[1,134],$VY=[1,135],$VZ=[1,137],$V_=[1,138],$V$=[1,140],$V01=[1,139],$V11=[1,141],$V21=[1,142],$V31=[1,150],$V41=[1,146],$V51=[1,147],$V61=[1,148],$V71=[1,152],$V81=[1,153],$V91=[4,5,74,122,125,135,137,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,166,179],$Va1=[2,51],$Vb1=[1,168],$Vc1=[4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,125,150,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,179,180,181,182],$Vd1=[2,139],$Ve1=[1,170],$Vf1=[4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,125,150,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,179,180,181,182,193,206,220,223,232],$Vg1=[1,181],$Vh1=[4,5,8,9,59,63,67,69,73,74,75,76,78,81,85,86,87,88,89,90,91,92,93,94,96,98,99,108,109,110,111,112,115,116,118,122,125,150,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,179,180,181,182,186,191,193,205,206,207,220,221,223,225,228,229,232,233,235,236,237,239,249],$Vi1=[8,9,75,98,99,109,110,111,112,118],$Vj1=[4,5,8,9,59,69,73,74,75,76,81,85,86,87,88,89,90,91,92,93,94,96,98,99,109,110,111,112,118,186,191,193,233,235,236,237,239],$Vk1=[64,183,184],$Vl1=[2,346],$Vm1=[8,9,73,267,270],$Vn1=[1,239],$Vo1=[1,238],$Vp1=[1,243],$Vq1=[4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,150,159,161,162,163,164,165,166,169,170,171,172,173,174,177,178,179,180,181,182],$Vr1=[2,189],$Vs1=[1,266],$Vt1=[159,161,163],$Vu1=[1,270],$Vv1=[1,271],$Vw1=[4,5],$Vx1=[8,9,74,76],$Vy1=[8,9,75,99,109,110,111,112,118],$Vz1=[1,294],$VA1=[4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,150,159,161,162,163,169,170,171,172,173,174,177,178,181,182],$VB1=[4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,150,159,161,162,163,178,181,182],$VC1=[73,267],$VD1=[73,270],$VE1=[8,9,67,69,75,98,99,109,110,111,112,118],$VF1=[1,324],$VG1=[8,9,67,69,73,75,98,99,109,110,111,112,118],$VH1=[1,331],$VI1=[73,75],$VJ1=[2,138],$VK1=[8,9,73,75,179,193,206,220,223,232],$VL1=[1,358],$VM1=[8,9,75,109,110,111,112,118],$VN1=[8,9,73,75,98,99,109,110,111,112,118],$VO1=[2,82],$VP1=[1,371],$VQ1=[1,372],$VR1=[1,373],$VS1=[1,375],$VT1=[1,374],$VU1=[1,376],$VV1=[1,377],$VW1=[1,378],$VX1=[1,379],$VY1=[8,9,73,75,81,85,86,87,88,89,90,91,92,93,98,99,109,110,111,112,118],$VZ1=[8,9,73,98],$V_1=[8,9,73,75,81,85,86,87,88,89,90,91,92,93,98,99,109,110,111,112,118,173],$V$1=[1,431],$V02=[1,432],$V12=[1,435],$V22=[8,9,75,109,110,111,118],$V32=[8,9,75,81,85,86,87,88,89,90,91,92,93,98,99,109,110,111,112,118],$V42=[1,467],$V52=[8,9,75,109,110,111],$V62=[1,489],$V72=[1,490],$V82=[1,491],$V92=[8,9,73,75],$Va2=[1,512],$Vb2=[1,511],$Vc2=[1,509],$Vd2=[1,507],$Ve2=[1,508],$Vf2=[1,510],$Vg2=[8,9,73],$Vh2=[8,9,75],$Vi2=[1,530],$Vj2=[8,9,73,75,108,109,110,111,112,118],$Vk2=[8,9,75,81,85,86,87,88,89,90,91,92,93,94,96,98,99,109,110,111,112,118],$Vl2=[1,563],$Vm2=[1,564],$Vn2=[1,565],$Vo2=[1,566],$Vp2=[63,220,221,223,225],$Vq2=[2,271],$Vr2=[1,571],$Vs2=[8,9,73,75,109,110,111,118],$Vt2=[8,9,193,205,206,207];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"main":6,"Statements":7,"EOF":8,"SEMICOLON":9,"Statement":10,"ExplainStatement":11,"EXPLAIN":12,"QUERY":13,"PLAN":14,"AlterTable":15,"CreateDatabase":16,"CreateIndex":17,"CreateTable":18,"CreateView":19,"Delete":20,"DropDatabase":21,"DropIndex":22,"DropTable":23,"DropView":24,"Insert":25,"RenameTable":26,"Select":27,"ShowCreateTable":28,"ShowColumns":29,"ShowDatabases":30,"ShowIndex":31,"ShowTables":32,"BeginTransaction":33,"CommitTransaction":34,"RollbackTransaction":35,"EndTransaction":36,"UseDatabase":37,"Update":38,"Help":39,"ExpressionStatement":40,"Source":41,"Assert":42,"DeclareCursor":43,"OpenCursor":44,"FetchCursor":45,"CloseCursor":46,"WithSelectClause":47,"WITH":48,"WithTables":49,"RECURSIVE":50,"SelectClause":51,"IntoClause":52,"FromClause":53,"WhereClause":54,"GroupClause":55,"OrderClause":56,"LimitClause":57,"UnionClause":58,"SELECT":59,"DISTINCT":60,"TopClause":61,"ResultColumns":62,"UNIQUE":63,"ALL":64,"TOP":65,"NumValue":66,"INTO":67,"Table":68,"FROM":69,"FromTablesList":70,"FromTable":71,"JoinTablesList":72,"COMMA":73,"LPAR":74,"RPAR":75,"AS":76,"ParamValue":77,"DOT":78,"JoinTable":79,"JoinMode":80,"JOIN":81,"JoinTableAs":82,"OnClause":83,"JoinModeMode":84,"NATURAL":85,"INNER":86,"LEFT":87,"OUTER":88,"RIGHT":89,"FULL":90,"SEMI":91,"ANTI":92,"CROSS":93,"ON":94,"Expression":95,"USING":96,"ColumnsList":97,"WHERE":98,"GROUP":99,"BY":100,"GroupExpressionsList":101,"HavingClause":102,"GroupExpression":103,"GROUPING":104,"SETS":105,"ROLLUP":106,"CUBE":107,"HAVING":108,"UNION":109,"EXCEPT":110,"INTERSECT":111,"ORDER":112,"OrderExpressionsList":113,"OrderExpression":114,"DIRECTION":115,"COLLATE":116,"NOCASE":117,"LIMIT":118,"OffsetClause":119,"OFFSET":120,"ResultColumn":121,"NUMBER":122,"StringValue":123,"Star":124,"STAR":125,"Column":126,"AggrValue":127,"FuncValue":128,"Op":129,"LogicValue":130,"NullValue":131,"ExistsValue":132,"CaseValue":133,"CastClause":134,"CAST":135,"ColumnType":136,"CONVERT":137,"PrimitiveValue":138,"Aggregator":139,"SUM":140,"COUNT":141,"MIN":142,"MAX":143,"AVG":144,"FIRST":145,"LAST":146,"ExprList":147,"TRUE":148,"FALSE":149,"STRING":150,"NULL":151,"EXISTS":152,"DOLLAR":153,"COLON":154,"QUESTION":155,"CASE":156,"WhensList":157,"ElseClause":158,"END":159,"When":160,"WHEN":161,"THEN":162,"ELSE":163,"LIKE":164,"PLUS":165,"MINUS":166,"SLASH":167,"PERCENT":168,"GT":169,"GE":170,"LT":171,"LE":172,"EQ":173,"NE":174,"CondOp":175,"AllSome":176,"AND":177,"OR":178,"NOT":179,"IN":180,"BETWEEN":181,"NOT_BETWEEN":182,"SOME":183,"ANY":184,"UPDATE":185,"SET":186,"SetColumnsList":187,"SetColumn":188,"DELETE":189,"INSERT":190,"VALUES":191,"ValuesListsList":192,"DEFAULT":193,"ValuesList":194,"Value":195,"DateValue":196,"CREATE":197,"TemporaryClause":198,"TABLE":199,"IfNotExists":200,"CreateTableDefClause":201,"CreateTableOptionsClause":202,"CreateTableOptions":203,"CreateTableOption":204,"ENGINE":205,"AUTO_INCREMENT":206,"CHARSET":207,"TEMPORARY":208,"TEMP":209,"IF":210,"ColumnDefsList":211,"ConstraintsList":212,"Constraint":213,"ConstraintName":214,"PrimaryKey":215,"ForeignKey":216,"UniqueKey":217,"IndexKey":218,"CONSTRAINT":219,"PRIMARY":220,"KEY":221,"ColsList":222,"FOREIGN":223,"REFERENCES":224,"INDEX":225,"ColumnDef":226,"ColumnConstraintsClause":227,"ColumnConstraints":228,"ENUM":229,"ColumnConstraintsList":230,"ColumnConstraint":231,"IDENTITY":232,"DROP":233,"ALTER":234,"RENAME":235,"TO":236,"ADD":237,"COLUMN":238,"MODIFY":239,"DATABASE":240,"USE":241,"SHOW":242,"DATABASES":243,"TABLES":244,"COLUMNS":245,"VIEW":246,"View":247,"DECLARE":248,"CURSOR":249,"FOR":250,"OPEN":251,"CLOSE":252,"FETCH":253,"FetchDirection":254,"NEXT":255,"PRIOR":256,"ABSOLUTE":257,"RELATIVE":258,"HELP":259,"SOURCE":260,"ASSERT":261,"Json":262,"JsonObject":263,"JsonArray":264,"LCUR":265,"JsonPropertiesList":266,"RCUR":267,"LBRA":268,"JsonElementsList":269,"RBRA":270,"JsonProperty":271,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",8:"EOF",9:"SEMICOLON",12:"EXPLAIN",13:"QUERY",14:"PLAN",33:"BeginTransaction",34:"CommitTransaction",35:"RollbackTransaction",36:"EndTransaction",48:"WITH",50:"RECURSIVE",59:"SELECT",60:"DISTINCT",63:"UNIQUE",64:"ALL",65:"TOP",67:"INTO",69:"FROM",73:"COMMA",74:"LPAR",75:"RPAR",76:"AS",78:"DOT",81:"JOIN",85:"NATURAL",86:"INNER",87:"LEFT",88:"OUTER",89:"RIGHT",90:"FULL",91:"SEMI",92:"ANTI",93:"CROSS",94:"ON",96:"USING",98:"WHERE",99:"GROUP",100:"BY",104:"GROUPING",105:"SETS",106:"ROLLUP",107:"CUBE",108:"HAVING",109:"UNION",110:"EXCEPT",111:"INTERSECT",112:"ORDER",115:"DIRECTION",116:"COLLATE",117:"NOCASE",118:"LIMIT",120:"OFFSET",122:"NUMBER",125:"STAR",135:"CAST",137:"CONVERT",140:"SUM",141:"COUNT",142:"MIN",143:"MAX",144:"AVG",145:"FIRST",146:"LAST",148:"TRUE",149:"FALSE",150:"STRING",151:"NULL",152:"EXISTS",153:"DOLLAR",154:"COLON",155:"QUESTION",156:"CASE",159:"END",161:"WHEN",162:"THEN",163:"ELSE",164:"LIKE",165:"PLUS",166:"MINUS",167:"SLASH",168:"PERCENT",169:"GT",170:"GE",171:"LT",172:"LE",173:"EQ",174:"NE",177:"AND",178:"OR",179:"NOT",180:"IN",181:"BETWEEN",182:"NOT_BETWEEN",183:"SOME",184:"ANY",185:"UPDATE",186:"SET",189:"DELETE",190:"INSERT",191:"VALUES",193:"DEFAULT",196:"DateValue",197:"CREATE",199:"TABLE",205:"ENGINE",206:"AUTO_INCREMENT",207:"CHARSET",208:"TEMPORARY",209:"TEMP",210:"IF",219:"CONSTRAINT",220:"PRIMARY",221:"KEY",223:"FOREIGN",224:"REFERENCES",225:"INDEX",228:"ColumnConstraints",229:"ENUM",232:"IDENTITY",233:"DROP",234:"ALTER",235:"RENAME",236:"TO",237:"ADD",238:"COLUMN",239:"MODIFY",240:"DATABASE",241:"USE",242:"SHOW",243:"DATABASES",244:"TABLES",245:"COLUMNS",246:"VIEW",248:"DECLARE",249:"CURSOR",250:"FOR",251:"OPEN",252:"CLOSE",253:"FETCH",255:"NEXT",256:"PRIOR",257:"ABSOLUTE",258:"RELATIVE",259:"HELP",260:"SOURCE",261:"ASSERT",265:"LCUR",267:"RCUR",268:"LBRA",270:"RBRA"},
productions_: [0,[3,1],[3,1],[6,2],[7,3],[7,1],[11,2],[11,4],[10,0],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[47,3],[47,4],[47,1],[49,0],[27,8],[51,4],[51,4],[51,4],[51,3],[61,2],[61,0],[52,0],[52,2],[53,2],[53,3],[53,0],[70,1],[70,3],[71,4],[71,5],[71,3],[71,2],[71,3],[71,1],[71,2],[71,3],[71,1],[68,3],[68,1],[72,2],[72,1],[79,4],[82,1],[82,2],[82,3],[82,2],[82,3],[82,4],[82,5],[80,1],[80,2],[84,0],[84,1],[84,1],[84,2],[84,1],[84,2],[84,1],[84,2],[84,1],[84,1],[84,1],[83,2],[83,2],[83,0],[54,0],[54,2],[55,0],[55,4],[101,1],[101,3],[103,5],[103,4],[103,4],[103,1],[102,0],[102,2],[58,0],[58,2],[58,3],[58,2],[58,2],[56,0],[56,3],[113,1],[113,3],[114,1],[114,2],[114,3],[114,4],[57,0],[57,3],[119,0],[119,2],[62,3],[62,1],[121,3],[121,2],[121,3],[121,2],[121,3],[121,2],[121,1],[124,5],[124,3],[124,1],[126,5],[126,3],[126,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[134,6],[134,6],[134,8],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[127,4],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[128,4],[128,3],[147,1],[147,3],[66,1],[130,1],[130,1],[123,1],[131,1],[132,4],[77,2],[77,2],[77,1],[133,5],[133,4],[157,2],[157,1],[160,4],[158,2],[158,0],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,3],[129,6],[129,6],[129,3],[129,3],[129,2],[129,2],[129,3],[129,5],[129,6],[129,5],[129,6],[129,3],[129,3],[175,1],[175,1],[175,1],[175,1],[175,1],[175,1],[176,1],[176,1],[176,1],[38,6],[38,4],[187,1],[187,3],[188,3],[20,5],[20,3],[25,5],[25,5],[25,8],[25,4],[25,7],[192,3],[192,5],[194,1],[194,3],[195,1],[195,1],[195,1],[195,1],[195,1],[195,1],[97,1],[97,3],[18,9],[202,0],[202,1],[203,2],[203,1],[204,1],[204,3],[204,3],[204,3],[198,0],[198,1],[198,1],[200,0],[200,3],[201,3],[201,1],[201,2],[212,1],[212,3],[213,2],[213,2],[213,2],[213,2],[214,0],[214,2],[215,5],[216,10],[217,1],[218,5],[218,5],[222,1],[222,3],[211,1],[211,3],[226,3],[226,2],[136,6],[136,4],[136,1],[136,4],[227,0],[227,1],[230,2],[230,1],[231,2],[231,7],[231,1],[231,6],[231,2],[231,2],[23,5],[23,3],[15,6],[15,6],[15,6],[15,8],[15,6],[26,5],[16,3],[37,3],[37,2],[21,3],[17,8],[17,9],[22,3],[30,2],[30,4],[32,2],[32,4],[32,4],[32,6],[29,4],[29,6],[31,4],[31,6],[28,4],[28,6],[19,5],[19,8],[24,3],[247,1],[247,3],[43,5],[44,2],[46,2],[45,4],[254,1],[254,1],[254,1],[254,1],[254,2],[254,2],[39,2],[39,1],[40,1],[41,2],[42,2],[42,4],[262,1],[262,1],[262,1],[262,1],[262,1],[262,1],[262,1],[263,3],[263,4],[263,2],[264,3],[264,4],[264,2],[266,3],[266,1],[271,3],[271,3],[269,3],[269,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			if (yy.casesensitive) this.$ = $$[$0];
			else this.$ = $$[$0].toLowerCase();
		
break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 4:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 5: case 57: case 71: case 100: case 115: case 126: case 172: case 186: case 226: case 238: case 246: case 278: case 364:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 7:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 8: case 51: case 56: case 95: case 96: case 98: case 106: case 108: case 113: case 121: case 123: case 257: case 260:
 this.$ = null; 
break;
case 41: case 42: case 64: case 105: case 133: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 156: case 157: case 158: case 159: case 160: case 161: case 188: case 215: case 216: case 217: case 218: case 219: case 220: case 272: case 289: case 291: case 346: case 350: case 352: case 360:
 this.$ = $$[$0]; 
break;
case 43:
 this.$ = $$[$0];
break;
case 45:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 46: case 47:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 48:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 49:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 50:
 this.$ = {top: $$[$0]}; 
break;
case 52: case 288:
this.$ = null
break;
case 53:
this.$ = {into: $$[$0]} 
break;
case 54:
 this.$ = { from: $$[$0] }; 
break;
case 55:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 58: case 101: case 227: case 279:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 59:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 60:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 61:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 62:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 63:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 65:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 66:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 67:
 this.$ = $$[$0]; $$[$0].as = 'delault'; 
break;
case 68:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 69:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 70:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 72:
 this.$ = new yy.Join($$[$0-3]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 73:
 this.$ = {table: $$[$0]}; 
break;
case 74:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 75:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 76:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 77:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 78:
 this.$ = {select: $$[$0-3], as: $$[$0]} ; 
break;
case 79:
 this.$ = {select: $$[$0-4], as: $$[$0] } ; 
break;
case 80:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 81:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 82: case 83:
 this.$ = "INNER"; 
break;
case 84: case 85:
 this.$ = "LEFT"; 
break;
case 86: case 87:
 this.$ = "RIGHT"; 
break;
case 88: case 89:
 this.$ = "OUTER"; 
break;
case 90:
 this.$ = "SEMI"; 
break;
case 91:
 this.$ = "ANTI"; 
break;
case 92:
 this.$ = "CROSS"; 
break;
case 93:
 this.$ = {on: $$[$0]}; 
break;
case 94:
 this.$ = {using: $$[$0]}; 
break;
case 97:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 99:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 102:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 103:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 104:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 107:
 this.$ = {having:$$[$0]}
break;
case 109:
 this.$ = {union: $$[$0]} ; 
break;
case 110:
 this.$ = {unionall: $$[$0]} ; 
break;
case 111:
 this.$ = {except: $$[$0]} ; 
break;
case 112:
 this.$ = {intersect: $$[$0]} ; 
break;
case 114:
 this.$ = {order:$$[$0]}
break;
case 116:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 117:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 118:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 119:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 120:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 122:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 124:
 this.$ = {offset:$$[$0]}
break;
case 125: case 266: case 281: case 363:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 127: case 129: case 131:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 128: case 130: case 132:
 $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];
break;
case 134:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 135:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 136:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 137:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 138:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 139:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 153:
 this.$ = new yy.Cast({expression:$$[$0-3]}) ; yy.extend(this.$,$$[$0-1]) ; 
break;
case 154:
 this.$ = new yy.Cast({expression:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; 
break;
case 155:
 this.$ = new yy.Cast({expression:$$[$0-3], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-5]) ; 
break;
case 162:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 163:
 this.$ = "SUM"; 
break;
case 164:
 this.$ = "COUNT"; 
break;
case 165:
 this.$ = "MIN"; 
break;
case 166:
 this.$ = "MAX"; 
break;
case 167:
 this.$ = "AVG"; 
break;
case 168:
 this.$ = "FIRST"; 
break;
case 169:
 this.$ = "LAST"; 
break;
case 170:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 171:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 173:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 174:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 175:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 176:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 177:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")}); 
break;
case 178:
 this.$ = new yy.NullValue({value:null}); 
break;
case 179:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 180: case 181:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 182:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 183:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 184:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 185:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 187:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 189:
this.$ = null; 
break;
case 190:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 191:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 192:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 193:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 194:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 195:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 196:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 197:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 198:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 199:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 200:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 201:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 202:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 203:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 204:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 205:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 206:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 207:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 208:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 209:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 210:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 211:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 212:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 213:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 214:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 221:
 this.$ = 'ALL'; 
break;
case 222:
 this.$ = 'SOME'; 
break;
case 223:
 this.$ = 'ANY'; 
break;
case 224:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 225:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 228:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 229:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 230:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 231:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 232:
 this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; 
break;
case 233:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 234:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 235:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 236:
 this.$ = [$$[$0-1]]; 
break;
case 237:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 239: case 247:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 248:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
		
break;
case 258: case 259:
 this.$ = {temporary:true}; 
break;
case 261:
 this.$ = {ifnotexists: true}; 
break;
case 262:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 263:
 this.$ = {columns: $$[$0]}; 
break;
case 264:
 this.$ = {as: $$[$0]} 
break;
case 265: case 280:
 this.$ = [$$[$0]];
break;
case 267: case 268: case 269: case 270:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 271:
 this.$ = null 
break;
case 273:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 274:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-6], fktableid: $$[$0-3], fkcolumns: $$[$0-1]}; 
break;
case 282:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 283:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 284:
 this.$ = {dbtypeid: $$[$0-5].toUpperCase(), dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 285:
 this.$ = {dbtypeid: $$[$0-3].toUpperCase(), dbsize: $$[$0-1]} 
break;
case 286:
 this.$ = {dbtypeid: $$[$0].toUpperCase()} 
break;
case 287:
 this.$ = {dbtypeid: 'ENUM', enumvalues: $$[$0-1]} 
break;
case 290:
 yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];
break;
case 292:
this.$ = {primarykey:true};
break;
case 293:
this.$ = {foreignkey:{tableid:$$[$0-3], columnid: $$[$0-1]}};
break;
case 294:
this.$ = {auto_increment:true};
break;
case 295:
 this.$ = {identity: [$$[$0-3],$$[$0-1]]} 
break;
case 296:
this.$ = {default:$$[$0]};
break;
case 297:
this.$ = {notnull:true};
break;
case 298:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 299:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 300:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
case 301:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 302:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 303:
 this.$ = new yy.AlterTable({table:$$[$0-5], renamecolumn: $$[$0-2], to: $$[$0]});
break;
case 304:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});
break;
case 305:
 this.$ = new yy.AlterTable({table:$$[$0-2], renameto: $$[$0]});
break;
case 306:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0] });
break;
case 307: case 308:
 this.$ = new yy.UseDatabase({databaseid: $$[$0] });
break;
case 309:
 this.$ = new yy.DropDatabase({databaseid: $$[$0] });
break;
case 310:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})
break;
case 311:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})
break;
case 312:
 this.$ = new yy.DropIndex({indexid:$$[$0]});
break;
case 313:
 this.$ = new yy.ShowDatabases();
break;
case 314:
 this.$ = new yy.ShowDatabases({like:$$[$0]});
break;
case 315:
 this.$ = new yy.ShowTables();
break;
case 316:
 this.$ = new yy.ShowTables({like:$$[$0]});
break;
case 317:
 this.$ = new yy.ShowTables({databaseid: $$[$0]});
break;
case 318:
 this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});
break;
case 319:
 this.$ = new yy.ShowColumns({table: $$[$0]});
break;
case 320:
 this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});
break;
case 321:
 this.$ = new yy.ShowIndex({table: $$[$0]});
break;
case 322:
 this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});
break;
case 323:
 this.$ = new yy.ShowCreateTable({table: $$[$0]});
break;
case 324:
 this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});
break;
case 325:
 this.$ = new yy.CreateView({view:$$[$0-2], select: $$[$0]}); 
break;
case 326:
 this.$ = new yy.CreateView({view:$$[$0-5], columns: $$[$0-3], select: $$[$0-3]}); 
break;
case 327:
 this.$ = new yy.DropView({view:$$[$0-1]}); 
break;
case 328:
 this.$ = new yy.View({viewid: $$[$0]}); 
break;
case 329:
 this.$ = new yy.View({databaseid:$$[$0-2], viewid: $$[$0]}); 
break;
case 330:
 this.$ = new yy.DeclareCursor({cursorid:$$[$0-3], select:$$[$0]}); 
break;
case 331:
 this.$ = new yy.OpenCursor({cursorid:$$[$0]}); 
break;
case 332:
 this.$ = new yy.CloseCursor({cursorid:$$[$0]}); 
break;
case 333:
 this.$ = new yy.FetchCursor({cursorid:$$[$0]}); yy.extend(this.$,$$[$0-2]); 
break;
case 334:
 this.$ = {direction: 'NEXT'}; 
break;
case 335:
 this.$ = {direction: 'PRIOR'}; 
break;
case 336:
 this.$ = {direction: 'FIRST'}; 
break;
case 337:
 this.$ = {direction: 'LAST'}; 
break;
case 338:
 this.$ = {direction: 'ABSOLUTE', num:$$[$0]}; 
break;
case 339:
 this.$ = {direction: 'RELATIVE', num:$$[$0]}; 
break;
case 340:
 this.$ = new yy.Help({subject:$$[$0].value.toUpperCase()} ) ; 
break;
case 341:
 this.$ = new yy.Help() ; 
break;
case 342:
 this.$ = new yy.ExpressionStatement({expression:$$[$0]}); 
break;
case 343:
 this.$ = new yy.Source({url:$$[$0].value}); 
break;
case 344:
 this.$ = new yy.Assert({value:$$[$0]}); 
break;
case 345:
 this.$ = new yy.Assert({value:$$[$0-2], message:$$[$0]}); 
break;
case 347:
 this.$ = +($$[$0]); 
break;
case 348:
 this.$ = true; 
break;
case 349:
 this.$ = false; 
break;
case 351:
 this.$ = eval($$[$0]); 
break;
case 353: case 356:
 this.$ = $$[$0-1]; 
break;
case 354: case 357:
 this.$ = $$[$0-2]; 
break;
case 355:
 this.$ = {}; 
break;
case 358:
 this.$ = []; 
break;
case 359:
 yy.extend($$[$0-2],$$[$0]); this.$ = $$[$0-2]; 
break;
case 361:
 this.$ = {}; this.$[$$[$0-2].substr(1,$$[$0-2].length-2)] = $$[$0]; 
break;
case 362:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
}
},
table: [o($V0,$V1,{6:1,7:2,10:3,15:4,16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,51:42,95:47,127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,4:$V2,5:$V3,33:$V4,34:$V5,35:$V6,36:$V7,59:$V8,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv,185:$Vw,189:$Vx,190:$Vy,197:$Vz,233:$VA,234:$VB,235:$VC,241:$VD,242:$VE,248:$VF,251:$VG,252:$VH,253:$VI,259:$VJ,260:$VK,261:$VL}),{1:[3]},{8:[1,95],9:[1,96]},o($V0,[2,5]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),o($V0,[2,34]),o($V0,[2,35]),o($V0,[2,36]),o($V0,[2,37]),o($V0,[2,38]),o($V0,[2,39]),o($V0,[2,40]),{199:[1,97]},{63:[1,100],198:101,199:[2,257],208:[1,103],209:[1,104],225:[1,99],240:[1,98],246:[1,102]},{69:[1,105]},{199:[1,108],225:[1,107],240:[1,106],246:[1,109]},{67:[1,110]},{199:[1,111]},o($VM,[2,52],{52:112,67:[1,113]}),{197:[1,114],225:[1,117],243:[1,116],244:[1,118],245:[1,115]},{3:120,4:$V2,5:$V3,240:[1,119]},{3:122,4:$V2,5:$V3,68:121},o($V0,[2,341],{123:123,150:$Vn}),o($V0,[2,342],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),{123:143,150:$Vn},{5:$V31,122:$V41,148:$V51,149:$V61,150:[1,145],262:144,263:149,264:151,265:$V71,268:$V81},{3:154,4:$V2,5:$V3},{3:155,4:$V2,5:$V3},{145:[1,159],146:[1,160],254:156,255:[1,157],256:[1,158],257:[1,161],258:[1,162]},{3:163,4:$V2,5:$V3},o($V91,$Va1,{61:167,60:[1,164],63:[1,165],64:[1,166],65:$Vb1}),o($Vc1,[2,140]),o($Vc1,[2,141]),o($Vc1,[2,142]),o($Vc1,[2,143]),o($Vc1,[2,144]),o($Vc1,[2,145]),o($Vc1,[2,146]),o($Vc1,[2,147]),o($Vc1,[2,148]),o($Vc1,[2,149]),o($Vc1,[2,150]),o($Vc1,[2,151]),o($Vc1,[2,152]),{74:[1,169]},o($Vc1,$Vd1,{74:$Ve1,78:[1,171]}),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:172,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:173,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:174,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($Vc1,[2,136]),o([4,5,8,9,67,69,73,74,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,120,122,125,135,137,140,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,179,180,181,182,193,205,206,207,220,223,232],[2,174]),o($Vf1,[2,175]),o($Vf1,[2,176]),o($Vf1,[2,177]),o($Vf1,[2,178]),{3:175,4:$V2,5:$V3},{3:176,4:$V2,5:$V3},o($Vf1,[2,182]),{74:[1,177]},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:178,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,157:179,160:180,161:$Vg1,166:$Vu,179:$Vv},{74:[1,182]},{74:[1,183]},{74:[2,163]},{74:[2,164]},{74:[2,165]},{74:[2,166]},{74:[2,167]},{74:[2,168]},{74:[2,169]},o($Vh1,[2,1]),o($Vh1,[2,2]),{1:[2,3]},o($V0,$V1,{15:4,16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,51:42,95:47,127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,10:184,4:$V2,5:$V3,33:$V4,34:$V5,35:$V6,36:$V7,59:$V8,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv,185:$Vw,189:$Vx,190:$Vy,197:$Vz,233:$VA,234:$VB,235:$VC,241:$VD,242:$VE,248:$VF,251:$VG,252:$VH,253:$VI,259:$VJ,260:$VK,261:$VL}),{3:122,4:$V2,5:$V3,68:185},{3:186,4:$V2,5:$V3},{3:187,4:$V2,5:$V3},{225:[1,188]},{199:[1,189]},{3:191,4:$V2,5:$V3,247:190},{199:[2,258]},{199:[2,259]},{3:122,4:$V2,5:$V3,68:192},{3:193,4:$V2,5:$V3},{3:194,4:$V2,5:$V3},{3:122,4:$V2,5:$V3,68:196,210:[1,195]},{3:191,4:$V2,5:$V3,247:197},{3:122,4:$V2,5:$V3,68:198},{3:122,4:$V2,5:$V3,68:199},o($Vi1,[2,56],{53:200,69:[1,201]}),{3:122,4:$V2,5:$V3,68:202},{199:[1,203]},{69:[1,204]},o($V0,[2,313],{164:[1,205]}),{69:[1,206]},o($V0,[2,315],{69:[1,208],164:[1,207]}),{3:209,4:$V2,5:$V3},o($V0,[2,308]),{186:[1,210]},o($Vj1,[2,69],{78:[1,211]}),o($V0,[2,340]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:212,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:213,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:214,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:215,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:216,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:217,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($Vk1,[2,215],{127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,95:218,4:$V2,5:$V3,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv}),o($Vk1,[2,216],{127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,95:219,4:$V2,5:$V3,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv}),o($Vk1,[2,217],{127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,95:220,4:$V2,5:$V3,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv}),o($Vk1,[2,218],{127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,95:221,4:$V2,5:$V3,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv}),o($Vk1,[2,219],{127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,95:222,4:$V2,5:$V3,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv}),o($Vk1,[2,220],{127:55,128:56,129:57,126:58,124:59,66:60,130:61,123:62,131:63,77:64,132:65,133:66,134:67,139:68,3:69,95:223,4:$V2,5:$V3,74:$V9,122:$Va,125:$Vb,135:$Vc,137:$Vd,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv}),{64:[1,225],176:224,183:[1,226],184:[1,227]},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:228,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:229,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{74:[1,230]},{180:[1,231]},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:232,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:233,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($V0,[2,343]),o($V0,[2,344]),o($V0,$Vl1,{73:[1,234]}),o($Vm1,[2,347]),o($Vm1,[2,348]),o($Vm1,[2,349]),o($Vm1,[2,350]),o($Vm1,[2,351]),o($Vm1,[2,352]),{4:$Vn1,150:$Vo1,266:235,267:[1,236],271:237},{5:$V31,122:$V41,148:$V51,149:$V61,150:$Vp1,262:242,263:149,264:151,265:$V71,268:$V81,269:240,270:[1,241]},{249:[1,244]},o($V0,[2,331]),{69:[1,245]},{69:[2,334]},{69:[2,335]},{69:[2,336]},{69:[2,337]},{66:246,122:$Va},{66:247,122:$Va},o($V0,[2,332]),o($V91,$Va1,{61:248,65:$Vb1}),o($V91,$Va1,{61:249,65:$Vb1}),o($V91,$Va1,{61:250,65:$Vb1}),{3:69,4:$V2,5:$V3,62:251,66:60,74:$V9,77:64,95:253,121:252,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{66:254,122:$Va},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:255,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,75:[1,257],77:64,95:258,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,147:256,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:259,4:$V2,5:$V3,125:[1,260]},o([4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,150,159,161,162,163,169,170,171,172,173,174,177,178,179,180,181,182],[2,206],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS}),o($Vq1,[2,207],{175:136,125:$VN,167:$VR,168:$VS}),{75:[1,261],125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,175:136,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21},o($Vf1,[2,180]),o($Vf1,[2,181]),{27:262,51:42,59:$V8},{125:$VN,157:263,160:180,161:$Vg1,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,175:136,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21},{158:264,159:$Vr1,160:265,161:$Vg1,163:$Vs1},o($Vt1,[2,186]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:267,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:268,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{4:$Vu1,136:269,229:$Vv1},o($V0,[2,4]),{233:[1,275],235:[1,272],237:[1,273],239:[1,274]},o($V0,[2,306]),{94:[1,276]},{3:277,4:$V2,5:$V3},o($Vw1,[2,260],{200:278,210:[1,279]}),{74:[1,281],76:[1,280]},o($Vx1,[2,328],{78:[1,282]}),o($V0,[2,230],{98:[1,283]}),o($V0,[2,309]),o($V0,[2,312]),{152:[1,284]},o($V0,[2,299]),o($V0,[2,327]),{27:288,51:42,59:$V8,74:[1,287],191:[1,285],193:[1,286]},{236:[1,289]},o($Vy1,[2,96],{54:290,98:[1,291]}),{3:122,4:$V2,5:$V3,68:295,70:292,71:293,74:$Vz1,77:296,153:$Vq,154:$Vr,155:$Vs},o($VM,[2,53]),{3:122,4:$V2,5:$V3,68:297},{3:122,4:$V2,5:$V3,68:298},{123:299,150:$Vn},{3:122,4:$V2,5:$V3,68:300},{123:301,150:$Vn},{3:302,4:$V2,5:$V3},o($V0,[2,307]),{3:306,4:$V2,5:$V3,126:305,187:303,188:304},{3:307,4:$V2,5:$V3},o([4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,150,159,161,162,163,164,169,170,171,172,173,174,177,178,179,180,181,182],[2,190],{175:136,125:$VN,165:$VP,166:$VQ,167:$VR,168:$VS}),o($Vq1,[2,191],{175:136,125:$VN,167:$VR,168:$VS}),o($Vq1,[2,192],{175:136,125:$VN,167:$VR,168:$VS}),o($Vc1,[2,193],{175:136}),o($Vc1,[2,194],{175:136}),o($Vc1,[2,195],{175:136}),o($VA1,[2,196],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,179:$V$,180:$V01}),o($VA1,[2,197],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,179:$V$,180:$V01}),o($VA1,[2,198],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,179:$V$,180:$V01}),o($VA1,[2,199],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,179:$V$,180:$V01}),o($VA1,[2,200],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,179:$V$,180:$V01}),o($VA1,[2,201],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,179:$V$,180:$V01}),{74:[1,308]},{74:[2,221]},{74:[2,222]},{74:[2,223]},o([4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,150,159,161,162,163,177,178,181,182],[2,204],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,179:$V$,180:$V01}),o([4,5,8,9,67,69,73,75,76,81,85,86,87,88,89,90,91,92,93,98,99,108,109,110,111,112,115,116,118,122,150,159,161,162,163,178],[2,205],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,179:$V$,180:$V01,181:$V11,182:$V21}),{3:69,4:$V2,5:$V3,27:309,51:42,59:$V8,66:60,74:$V9,77:64,95:258,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,147:310,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{74:[1,311]},o($VB1,[2,213],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,179:$V$,180:$V01}),o($VB1,[2,214],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,179:$V$,180:$V01}),{5:$V31,122:$V41,148:$V51,149:$V61,150:$Vp1,262:312,263:149,264:151,265:$V71,268:$V81},{73:[1,314],267:[1,313]},o($Vm1,[2,355]),o($VC1,[2,360]),{154:[1,315]},{154:[1,316]},{73:[1,318],270:[1,317]},o($Vm1,[2,358]),o($VD1,[2,364]),o($Vm1,$Vl1),{250:[1,319]},{3:320,4:$V2,5:$V3},{69:[2,338]},{69:[2,339]},{3:69,4:$V2,5:$V3,62:321,66:60,74:$V9,77:64,95:253,121:252,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,62:322,66:60,74:$V9,77:64,95:253,121:252,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,62:323,66:60,74:$V9,77:64,95:253,121:252,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($VE1,[2,49],{73:$VF1}),o($VG1,[2,126]),o($VG1,[2,133],{175:136,3:326,123:328,4:$V2,5:$V3,76:[1,325],122:[1,327],125:$VN,150:$Vn,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($V91,[2,50]),{75:[1,329],125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,175:136,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21},{73:$VH1,75:[1,330]},o($Vf1,[2,171]),o($VI1,[2,172],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($Vc1,$VJ1,{78:[1,332]}),o($Vc1,[2,135]),o($Vc1,[2,208]),{75:[1,333]},{158:334,159:$Vr1,160:265,161:$Vg1,163:$Vs1},{159:[1,335]},o($Vt1,[2,185]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:336,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{125:$VN,162:[1,337],164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,175:136,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21},{76:[1,338],125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,175:136,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21},{73:[1,339]},o($VK1,[2,286],{74:[1,340]}),{74:[1,341]},{236:[1,342],238:[1,343]},{238:[1,344]},{238:[1,345]},{238:[1,346]},{3:122,4:$V2,5:$V3,68:347},{94:[1,348]},{3:122,4:$V2,5:$V3,68:349},{179:[1,350]},{27:351,51:42,59:$V8},{3:353,4:$V2,5:$V3,222:352},{3:354,4:$V2,5:$V3},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:355,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:122,4:$V2,5:$V3,68:356},{74:$VL1,192:357},{191:[1,359]},{3:306,4:$V2,5:$V3,97:360,126:361},o($V0,[2,234]),{3:362,4:$V2,5:$V3},o($VM1,[2,98],{55:363,99:[1,364]}),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:365,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($Vi1,[2,54],{73:[1,366]}),o($VN1,[2,57],{72:367,79:368,80:369,84:370,81:$VO1,85:$VP1,86:$VQ1,87:$VR1,88:$VS1,89:$VT1,90:$VU1,91:$VV1,92:$VW1,93:$VX1}),{27:380,51:42,59:$V8},o($VY1,[2,64],{3:381,4:$V2,5:$V3,76:[1,382]}),o($VY1,[2,67],{3:383,4:$V2,5:$V3,76:[1,384]}),o($V0,[2,323],{69:[1,385]}),o($V0,[2,319],{69:[1,386]}),o($V0,[2,314]),o($V0,[2,321],{69:[1,387]}),o($V0,[2,316]),o($V0,[2,317],{164:[1,388]}),o($V0,[2,225],{73:[1,390],98:[1,389]}),o($VZ1,[2,226]),{173:[1,391]},o($V_1,$Vd1,{78:[1,392]}),o($Vj1,[2,68]),{3:69,4:$V2,5:$V3,27:393,51:42,59:$V8,66:60,74:$V9,77:64,95:258,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,147:394,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{75:[1,395]},{73:$VH1,75:[1,396]},{3:69,4:$V2,5:$V3,27:397,51:42,59:$V8,66:60,74:$V9,77:64,95:258,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,147:398,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($V0,[2,345]),o($Vm1,[2,353]),{4:$Vn1,150:$Vo1,267:[1,399],271:400},{5:$V31,122:$V41,148:$V51,149:$V61,150:$Vp1,262:401,263:149,264:151,265:$V71,268:$V81},{5:$V31,122:$V41,148:$V51,149:$V61,150:$Vp1,262:402,263:149,264:151,265:$V71,268:$V81},o($Vm1,[2,356]),{5:$V31,122:$V41,148:$V51,149:$V61,150:$Vp1,262:404,263:149,264:151,265:$V71,268:$V81,270:[1,403]},{27:405,51:42,59:$V8},o($V0,[2,333]),o($VE1,[2,46],{73:$VF1}),o($VE1,[2,47],{73:$VF1}),o($VE1,[2,48],{73:$VF1}),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:253,121:406,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:407,4:$V2,5:$V3,122:[1,408],123:409,150:$Vn},o($VG1,[2,128]),o($VG1,[2,130]),o($VG1,[2,132]),o($Vc1,[2,162]),o($Vf1,[2,170]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:410,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:411,4:$V2,5:$V3,125:[1,412]},o($Vc1,[2,179]),{159:[1,413]},o($Vc1,[2,184]),{125:$VN,159:[2,188],164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,175:136,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:414,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{4:$Vu1,136:415,229:$Vv1},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:416,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{122:[1,417]},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:419,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv,194:418},{3:420,4:$V2,5:$V3},{3:421,4:$V2,5:$V3},{3:423,4:$V2,5:$V3,226:422},{3:423,4:$V2,5:$V3,226:424},{3:425,4:$V2,5:$V3},{74:[1,426]},{3:122,4:$V2,5:$V3,68:427},{74:[1,428]},{152:[1,429]},o($V0,[2,325]),{73:$V$1,75:[1,430]},o($VI1,[2,278]),o($Vx1,[2,329]),o($V0,[2,229],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($V0,[2,298]),o($V0,[2,231],{73:$V02}),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:419,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv,194:433},o($V0,[2,232]),{73:$V12,75:[1,434]},o($VY1,[2,246]),o($V0,[2,305]),o($V22,[2,113],{56:436,112:[1,437]}),{100:[1,438]},o($Vy1,[2,97],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),{3:122,4:$V2,5:$V3,68:295,71:439,74:$Vz1,77:296,153:$Vq,154:$Vr,155:$Vs},o($Vi1,[2,55],{80:369,84:370,79:440,81:$VO1,85:$VP1,86:$VQ1,87:$VR1,88:$VS1,89:$VT1,90:$VU1,91:$VV1,92:$VW1,93:$VX1}),o($V32,[2,71]),{81:[1,441]},{81:[2,80]},{81:$VO1,84:442,86:$VQ1,87:$VR1,88:$VS1,89:$VT1,90:$VU1,91:$VV1,92:$VW1,93:$VX1},{81:[2,83]},{81:[2,84],88:[1,443]},{81:[2,86],88:[1,444]},{81:[2,88]},{88:[1,445]},{81:[2,90]},{81:[2,91]},{81:[2,92]},{75:[1,446]},o($VY1,[2,62]),{3:447,4:$V2,5:$V3},o($VY1,[2,65]),{3:448,4:$V2,5:$V3},{3:449,4:$V2,5:$V3},{3:450,4:$V2,5:$V3},{3:451,4:$V2,5:$V3},{123:452,150:$Vn},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:453,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:306,4:$V2,5:$V3,126:305,188:454},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:455,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:456,4:$V2,5:$V3},{75:[1,457]},{73:$VH1,75:[1,458]},o($Vc1,[2,209]),o($Vc1,[2,211]),{75:[1,459]},{73:$VH1,75:[1,460]},o($Vm1,[2,354]),o($VC1,[2,359]),o($VC1,[2,361]),o($VC1,[2,362]),o($Vm1,[2,357]),o($VD1,[2,363]),o($V0,[2,330]),o($VG1,[2,125]),o($VG1,[2,127]),o($VG1,[2,129]),o($VG1,[2,131]),o($VI1,[2,173],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($Vc1,[2,137]),o($Vc1,[2,134]),o($Vc1,[2,183]),o($Vt1,[2,187],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),{75:[1,461]},{73:[1,463],75:[1,462],125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,175:136,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21},{73:[1,464],75:[1,465]},{73:$V42,75:[1,466]},o($VI1,[2,238],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($V0,[2,300]),{236:[1,468]},o($V0,[2,301]),{4:$Vu1,136:469,228:[1,470],229:$Vv1},o($V0,[2,302]),o($V0,[2,304]),{3:353,4:$V2,5:$V3,222:471},{74:[1,472]},{3:423,4:$V2,5:$V3,76:[1,475],201:473,211:474,226:476},o($Vw1,[2,261]),{76:[1,477]},{3:478,4:$V2,5:$V3},{74:[1,479]},{73:$V42,75:[1,480]},{27:482,51:42,59:$V8,191:[1,481]},{3:306,4:$V2,5:$V3,126:483},o($V52,[2,121],{57:484,118:[1,485]}),{100:[1,486]},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:492,101:487,103:488,104:$V62,106:$V72,107:$V82,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($VN1,[2,58]),o($V32,[2,70]),{3:122,4:$V2,5:$V3,68:494,74:[1,496],77:495,82:493,153:$Vq,154:$Vr,155:$Vs},{81:[2,81]},{81:[2,85]},{81:[2,87]},{81:[2,89]},o($VY1,[2,61],{3:497,4:$V2,5:$V3,76:[1,498]}),o($VY1,[2,63]),o($VY1,[2,66]),o($V0,[2,324]),o($V0,[2,320]),o($V0,[2,322]),o($V0,[2,318]),o($V0,[2,224],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($VZ1,[2,227]),o($VZ1,[2,228],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($V_1,$VJ1,{78:[1,499]}),o($Vc1,[2,202]),o($Vc1,[2,203]),o($Vc1,[2,210]),o($Vc1,[2,212]),o($Vc1,[2,153]),o($Vc1,[2,154]),{122:[1,500]},{122:[1,501]},o($VK1,[2,285]),o($VK1,[2,287]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:502,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:503,4:$V2,5:$V3},o($V92,[2,288],{227:504,230:505,231:506,179:$Va2,193:$Vb2,206:$Vc2,220:$Vd2,223:$Ve2,232:$Vf2}),o($V92,[2,283]),{73:$V$1,75:[1,513]},{3:353,4:$V2,5:$V3,222:514},{75:[1,515]},{73:[1,516],75:[2,263]},{27:517,51:42,59:$V8},o($VI1,[2,280]),{27:518,51:42,59:$V8},o($VI1,[2,279]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:419,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv,194:519},o($Vg2,[2,236]),{74:$VL1,192:520},o($V0,[2,235]),o($VY1,[2,247]),o($Vh2,[2,108],{58:521,109:[1,522],110:[1,523],111:[1,524]}),{66:525,122:$Va},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:528,113:526,114:527,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($VM1,[2,106],{102:529,73:$Vi2,108:[1,531]}),o($Vj2,[2,100]),{105:[1,532]},{74:[1,533]},{74:[1,534]},o($Vj2,[2,105],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($V32,[2,95],{83:535,94:[1,536],96:[1,537]}),o($Vk2,[2,73],{3:538,4:$V2,5:$V3,76:[1,539]}),{3:540,4:$V2,5:$V3,76:[1,541]},{27:542,51:42,59:$V8},o($VY1,[2,59]),{3:543,4:$V2,5:$V3},{3:411,4:$V2,5:$V3},{75:[1,544]},{75:[1,545]},o($VI1,[2,239],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($V0,[2,303]),o($V92,[2,282]),o($V92,[2,289],{231:546,179:$Va2,193:$Vb2,206:$Vc2,220:$Vd2,223:$Ve2,232:$Vf2}),o($VK1,[2,291]),{221:[1,547]},{221:[1,548]},o($VK1,[2,294]),{74:[1,549]},{3:557,4:$V2,5:$V3,66:551,77:555,122:$Va,123:552,128:556,130:553,131:554,138:550,148:$Vl,149:$Vm,150:$Vn,151:$Vo,153:$Vq,154:$Vr,155:$Vs},{151:[1,558]},o($V0,[2,310]),{73:$V$1,75:[1,559]},o($V0,[2,249],{202:560,203:561,204:562,193:$Vl2,205:$Vm2,206:$Vn2,207:$Vo2}),o($Vp2,$Vq2,{3:423,212:567,226:568,213:569,214:570,4:$V2,5:$V3,219:$Vr2}),{75:[2,264]},o($V0,[2,326]),{73:$V42,75:[1,572]},o($V0,[2,233],{73:$V02}),o($Vh2,[2,45]),{27:573,51:42,59:$V8,64:[1,574]},{27:575,51:42,59:$V8},{27:576,51:42,59:$V8},o($V52,[2,123],{119:577,120:[1,578]}),o($V22,[2,114],{73:[1,579]}),o($Vs2,[2,115]),o($Vs2,[2,117],{175:136,115:[1,580],116:[1,581],125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($VM1,[2,99]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:492,103:582,104:$V62,106:$V72,107:$V82,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:583,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{74:[1,584]},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:492,101:585,103:488,104:$V62,106:$V72,107:$V82,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:492,101:586,103:488,104:$V62,106:$V72,107:$V82,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($V32,[2,72]),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:587,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{3:306,4:$V2,5:$V3,97:588,126:361},o($Vk2,[2,74]),{3:589,4:$V2,5:$V3},o($Vk2,[2,76]),{3:590,4:$V2,5:$V3},{75:[1,591]},o($VY1,[2,60]),o($Vc1,[2,155]),o($VK1,[2,284]),o($VK1,[2,290]),o($VK1,[2,292]),{224:[1,592]},{66:593,122:$Va},o($VK1,[2,296]),o($VK1,[2,156]),o($VK1,[2,157]),o($VK1,[2,158]),o($VK1,[2,159]),o($VK1,[2,160]),o($VK1,[2,161]),{74:$Ve1},o($VK1,[2,297]),o($V0,[2,311]),o($V0,[2,248]),o($V0,[2,250],{204:594,193:$Vl2,205:$Vm2,206:$Vn2,207:$Vo2}),o($Vt2,[2,252]),o($Vt2,[2,253]),{173:[1,595]},{173:[1,596]},{173:[1,597]},{73:[1,598],75:[2,262]},o($VI1,[2,281]),o($VI1,[2,265]),{63:[1,605],215:599,216:600,217:601,218:602,220:[1,603],221:[1,607],223:[1,604],225:[1,606]},{3:608,4:$V2,5:$V3},o($Vg2,[2,237]),o($Vh2,[2,109]),{27:609,51:42,59:$V8},o($Vh2,[2,111]),o($Vh2,[2,112]),o($V52,[2,122]),{66:610,122:$Va},{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:528,114:611,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},o($Vs2,[2,118]),{117:[1,612]},o($Vj2,[2,101]),o($VM1,[2,107],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),{3:69,4:$V2,5:$V3,66:60,74:$V9,77:64,95:492,101:613,103:488,104:$V62,106:$V72,107:$V82,122:$Va,123:62,124:59,125:$Vb,126:58,127:55,128:56,129:57,130:61,131:63,132:65,133:66,134:67,135:$Vc,137:$Vd,139:68,140:$Ve,141:$Vf,142:$Vg,143:$Vh,144:$Vi,145:$Vj,146:$Vk,148:$Vl,149:$Vm,150:$Vn,151:$Vo,152:$Vp,153:$Vq,154:$Vr,155:$Vs,156:$Vt,166:$Vu,179:$Vv},{73:$Vi2,75:[1,614]},{73:$Vi2,75:[1,615]},o($V32,[2,93],{175:136,125:$VN,164:$VO,165:$VP,166:$VQ,167:$VR,168:$VS,169:$VT,170:$VU,171:$VV,172:$VW,173:$VX,174:$VY,177:$VZ,178:$V_,179:$V$,180:$V01,181:$V11,182:$V21}),o($V32,[2,94],{73:$V12}),o($Vk2,[2,75]),o($Vk2,[2,77]),{3:616,4:$V2,5:$V3,76:[1,617]},{3:618,4:$V2,5:$V3},{73:[1,619]},o($Vt2,[2,251]),{3:620,4:$V2,5:$V3},{66:621,122:$Va},{3:622,4:$V2,5:$V3},o($Vp2,$Vq2,{214:570,213:623,219:$Vr2}),o($VI1,[2,267]),o($VI1,[2,268]),o($VI1,[2,269]),o($VI1,[2,270]),{221:[1,624]},{221:[1,625]},o($VI1,[2,275]),{3:626,4:$V2,5:$V3},{3:627,4:$V2,5:$V3},o($Vp2,[2,272]),o($Vh2,[2,110]),o($V52,[2,124]),o($Vs2,[2,116]),o($Vs2,[2,119],{115:[1,628]}),{73:$Vi2,75:[1,629]},o($Vj2,[2,103]),o($Vj2,[2,104]),o($Vk2,[2,78]),{3:630,4:$V2,5:$V3},{74:[1,631]},{66:632,122:$Va},o($Vt2,[2,254]),o($Vt2,[2,255]),o($Vt2,[2,256]),o($VI1,[2,266]),{74:[1,633]},{74:[1,634]},{74:[1,635]},{74:[1,636]},o($Vs2,[2,120]),o($Vj2,[2,102]),o($Vk2,[2,79]),{3:637,4:$V2,5:$V3},{75:[1,638]},{3:353,4:$V2,5:$V3,222:639},{3:353,4:$V2,5:$V3,222:640},{3:306,4:$V2,5:$V3,97:641,126:361},{3:306,4:$V2,5:$V3,97:642,126:361},{75:[1,643]},o($VK1,[2,295]),{73:$V$1,75:[1,644]},{73:$V$1,75:[1,645]},{73:$V12,75:[1,646]},{73:$V12,75:[1,647]},o($VK1,[2,293]),o($VI1,[2,273]),{224:[1,648]},o($VI1,[2,276]),o($VI1,[2,277]),{3:649,4:$V2,5:$V3},{74:[1,650]},{3:353,4:$V2,5:$V3,222:651},{73:$V$1,75:[1,652]},o($VI1,[2,274])],
defaultActions: {86:[2,163],87:[2,164],88:[2,165],89:[2,166],90:[2,167],91:[2,168],92:[2,169],95:[2,3],103:[2,258],104:[2,259],157:[2,334],158:[2,335],159:[2,336],160:[2,337],225:[2,221],226:[2,222],227:[2,223],246:[2,338],247:[2,339],370:[2,80],372:[2,83],375:[2,88],377:[2,90],378:[2,91],379:[2,92],442:[2,81],443:[2,85],444:[2,87],445:[2,89],517:[2,264]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5
break;
case 1:return 5
break;
case 2:return 150
break;
case 3:return 150
break;
case 4:return /* skip comments */
break;
case 5:return /* return 'COMMENT' */
break;
case 6:/* skip whitespace */
break;
case 7:return 257
break;
case 8:return 237
break;
case 9:return 64
break;
case 10:return 234
break;
case 11:return 177
break;
case 12:return 92
break;
case 13:return 184
break;
case 14:return 76
break;
case 15:return 261
break;
case 16:return 115
break;
case 17:return 206
break;
case 18:return 144
break;
case 19:return 181
break;
case 20:return 182
break;
case 21:return 100
break;
case 22:return 156
break;
case 23:return 135
break;
case 24:return 207
break;
case 25:return 252
break;
case 26:return 116
break;
case 27:return "COLUMN"
break;
case 28:return "COLUMNS"
break;
case 29:return "CONSTRAINT"
break;
case 30:return "CONVERT"
break;
case 31:return "COUNT"
break;
case 32:return "CURSOR"
break;
case 33:return 197
break;
case 34:return "CROSS"
break;
case 35:return 107
break;
case 36:return 240
break;
case 37:return 243
break;
case 38:return 248
break;
case 39:return 193
break;
case 40:return 189
break;
case 41:return 115
break;
case 42:return 60
break;
case 43:return 233
break;
case 44:return 159
break;
case 45:return 205
break;
case 46:return 229
break;
case 47:return 163
break;
case 48:return 110
break;
case 49:return 152
break;
case 50:return 12
break;
case 51:return 149
break;
case 52:return 253
break;
case 53:return 145
break;
case 54:return 223
break;
case 55:return 69
break;
case 56:return 99
break;
case 57:return 104
break;
case 58:return 108
break;
case 59:return 259
break;
case 60:return 210
break;
case 61:return 232
break;
case 62:return 180
break;
case 63:return 225
break;
case 64:return 86
break;
case 65:return 190
break;
case 66:return 111
break;
case 67:return 67
break;
case 68:return 81
break;
case 69:return 221
break;
case 70:return 146
break;
case 71:return 87
break;
case 72:return 164
break;
case 73:return 118
break;
case 74:return 260
break;
case 75:return "MAX"
break;
case 76:return "MIN"
break;
case 77:return "EXCEPT"
break;
case 78:return "MODIFY"
break;
case 79:return 85
break;
case 80:return 255
break;
case 81:return 117
break;
case 82:return 179
break;
case 83:return 151
break;
case 84:return 94
break;
case 85:return 120
break;
case 86:return 251
break;
case 87:return 178
break;
case 88:return 112
break;
case 89:return 88
break;
case 90:return 14
break;
case 91:return 220
break;
case 92:return 256
break;
case 93:return 13
break;
case 94:return 224
break;
case 95:return 258
break;
case 96:return 235
break;
case 97:return 89
break;
case 98:return 106
break;
case 99:return 240
break;
case 100:return 243
break;
case 101:return 59
break;
case 102:return 91
break;
case 103:return 186
break;
case 104:return 105
break;
case 105:return 242
break;
case 106:return 183
break;
case 107:return "SUM"
break;
case 108:return 199
break;
case 109:return 244
break;
case 110:return 162
break;
case 111:return 236
break;
case 112:return 65
break;
case 113:return 'TRAN'
break;
case 114:return 'TRANSACTION'
break;
case 115:return 148
break;
case 116:return 109
break;
case 117:return 63
break;
case 118:return 185
break;
case 119:return 241
break;
case 120:return 96
break;
case 121:return 191
break;
case 122:return 246
break;
case 123:return 161
break;
case 124:return 98
break;
case 125:return 122
break;
case 126:return 165
break;
case 127:return 166
break;
case 128:return 125
break;
case 129:return 167
break;
case 130:return 168
break;
case 131:return 170
break;
case 132:return 169
break;
case 133:return 172
break;
case 134:return 174
break;
case 135:return 171
break;
case 136:return 173
break;
case 137:return 174
break;
case 138:return 74
break;
case 139:return 75
break;
case 140:return 265
break;
case 141:return 267
break;
case 142:return 270
break;
case 143:return 78
break;
case 144:return 73
break;
case 145:return 154
break;
case 146:return 9
break;
case 147:return 153
break;
case 148:return 155
break;
case 149:return 4
break;
case 150:return 8
break;
case 151:return 'INVALID'
break;
}
},
rules: [/^(?:\[([^\]])*?\])/i,/^(?:`([^\]])*?`)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:\/\*(.*?)\*\/)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:ABSOLUTE\b)/i,/^(?:ADD\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASSERT\b)/i,/^(?:ASC\b)/i,/^(?:AUTO_INCREMENT\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHARSET\b)/i,/^(?:CLOSE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONVERT\b)/i,/^(?:COUNT\b)/i,/^(?:CURSOR\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DATABASE\b)/i,/^(?:DATABASES\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ENGINE\b)/i,/^(?:ENUM\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FETCH\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:HELP\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:SOURCE\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MINUS\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NEXT\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OPEN\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIOR\b)/i,/^(?:QUERY\b)/i,/^(?:REFERENCES\b)/i,/^(?:RELATIVE\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SCHEMA\b)/i,/^(?:SCHEMAS\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHOW\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLES\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRAN\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

/*
//
// Utilities for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// 
var utils = alasql.utils = {};

// Stub for non-ecisting WHERE clause 
// so is faster then if(whenrfn) whenfn()
function returnTrue () {return true};
function returnUndefined() {};

var escapeq = utils.escapeq = function(s) {
    return s.replace(/\'/g,'\\\'');
}

var doubleq = utils.doubleq = function(s) {
    return s.replace(/(\'\')/g,'\\\'');
}

var doubleqq = utils.doubleqq = function(s) {
    return s.replace(/\'/g,"\'");
}


// For LOAD
var loadFile = utils.loadFile = function(path, success, error) {
    if(typeof exports == 'object') {
        // For Node.js
        var fs = require('fs');
        var data = fs.readFileSync(path);
        success(data.toString());
    } else {
        // For browser
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function()
        {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    if (success)
                        success(xhr.responseText);
                } else {
                    if (error)
                        error(xhr);
                }
            }
        };
        xhr.open("GET", path, false); // Async
        xhr.send();
    }
}


// Fast hash function
var hash = utils.hash = function hash(str){
    var h = 0;
    if (str.length == 0) return h;
    for (var i = 0; i < str.length; i++) {
        h = ((h<<5)-h)+str.charCodeAt(i);
        h = h & h; 
   	}
    return h;
};

// Union arrays
var arrayUnion = utils.arrayUnion = function (a,b) {
    var r = b.slice(0);
    a.forEach(function(i) { if (r.indexOf(i) < 0) r.push(i); });
    return r;
};

// Array Difference
var arrayDiff = utils.arrayDiff  = function (a,b) {
    return a.filter(function(i) {return b.indexOf(i) < 0;});
};

// Arrays deep intersect (with records)
var arrayIntersect = utils.arrayIntersept  = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
            found = found || (ai==bi);
        });

        if(found) {
            r.push(ai); 
        }
    });
    return r;
};


// Arrays deep union (with records)
var arrayUnionDeep = utils.arrayUnionDeep = function (a,b) {
    var r = b.slice(0);
    a.forEach(function(ai) {
        var found = false;
        
        r.forEach(function(ri){
//            found = found || equalDeep(ai, ri, true);
            found = found || deepEqual(ai, ri);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

// Arrays deep union (with records)
var arrayExceptDeep = utils.arrayExceptDeep = function (a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
//            found = found || equalDeep(ai, bi, true);
            found = found || deepEqual(ai, bi);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

// Arrays deep intersect (with records)
var arrayIntersectDeep = utils.arrayInterseptDeep  = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
//            found = found || equalDeep(ai, bi, true);
            found = found || deepEqual(ai, bi, true);
        });

        if(found) {
            r.push(ai); 
        }
    });
    return r;
};

// Deep clone obects
var cloneDeep = utils.cloneDeep = function cloneDeep(obj) {
    if(obj == null || typeof(obj) != 'object')
        return obj;

    var temp = obj.constructor(); // changed

    for(var key in obj) {
        if(obj.hasOwnProperty(key)) {
            temp[key] = cloneDeep(obj[key]);
        }
    }
    return temp;
}

// Check equality of objects
var equalDeep = utils.equalDeep = function equalDeep (x, y, deep) {
    if (deep) {
        if (x == y) return true;

        var p;
        for (p in y) {
            if (typeof (x[p]) == 'undefined') { return false; }
        }

        for (p in y) {
            if (y[p]) {
                switch (typeof (y[p])) {
                    case 'object':
                        if (!equalDeep(y[p],x[p])) { return false; } break;
                    case 'function':
                        if (typeof (x[p]) == 'undefined' ||
                  (p != 'equals' && y[p].toString() != x[p].toString()))
                            return false;
                        break;
                    default:
                        if (y[p] != x[p]) { return false; }
                }
            } else {
                if (x[p])
                    return false;
            }
        }

        for (p in x) {
            if (typeof (y[p]) == 'undefined') { return false; }
        }

        return true;
    }
    return x == y;
};

var deepEqual = utils.deepEqual = function (x, y) {
  if ((typeof x == "object" && x != null) && (typeof y == "object" && y != null)) {
    if (Object.keys(x).length != Object.keys(y).length)
      return false;

    for (var prop in x) {
      if (y.hasOwnProperty(prop))
      {  
        if (! deepEqual(x[prop], y[prop]))
          return false;
      }
      else
        return false;
    }

    return true;
  }
  else if (x !== y)
    return false;
  else
    return true;
}


// Extend object
var extend = utils.extend = function extend (a,b){
    if(typeof a == 'undefined') a = {};
    for(key in b) {
        if(b.hasOwnProperty(key)) {
            a[key] = b[key]
        }
    }
    return a;
};;

// Flat array by first row
var flatArray = utils.flatArray = function(a) {
    if(!a || a.length == 0) return [];
    var key = Object.keys(a[0])[0];
    if(typeof key == 'undefined') return [];
    return a.map(function(ai) {return ai[key]});
};

// Convert array of objects to array of arrays
var arrayOfArrays = utils.arrayOfArrays = function (a) {
    return a.map(function(aa){
        var ar = [];
        for(var key in aa) ar[key] = aa[key];
        return ar;
    });
};



/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/


// Initial parameters
alasql.parser = parser;
alasql.parse = parser.parse.bind(parser); // Shortcut

// Databases
alasql.databases = {};
alasql.databasenum = 0; // Current database

// Deafult options
alasql.options = {};
alasql.options.valueof = false; // Use valueof in orderfn
alasql.options.dropifnotexists = false; // DROP database in any case
alasql.options.datetimeformat = 'sql'; // How to handle DATE and DATETIME types
								// Another value is 'javascript'
alasql.options.casesensitive = true; // Table and column names are case sensitive and converted to lower-case
alasql.options.logtarget = 'output'; // target for log. Values: 'console', 'output', 'id' of html tag
alasql.options.logprompt = true; // Print SQL at log

alasql.prompthistory = [];

// Cache
alasql.MAXSQLCACHESIZE = 10000;
alasql.DEFAULTDATABASEID = 'alasql';

alasql.use = function (databaseid) {
	if(!databaseid) databaseid = alasql.DEFAULTDATABASEID;
	if(alasql.useid == databaseid) return;
	alasql.useid = databaseid;
	var db = alasql.databases[alasql.useid];
	alasql.tables = db.tables;
	alasql.fn = db.fn;
	db.resetSqlCache();
};

// Run one statement
alasql.exec = function (sql, params, cb) {
	return alasql.dexec(alasql.useid, sql, params, cb);
}

alasql.dexec = function (databaseid, sql, params, cb) {
	var db = alasql.databases[databaseid];
//	if(db.databaseid != databaseid) console.trace('got!');
//	console.log(3,db.databaseid,databaseid);
	var hh = hash(sql);
	var statement = db.sqlCache[hh];
	if(statement && db.dbversion == statement.dbversion) {
		return statement(params, cb);
	}

	// Create AST
	var ast = alasql.parse(sql);
	if(!ast.statements) return;
	if(ast.statements.length == 0) return 0;
	else if(ast.statements.length == 1) {
		if(ast.statements[0].compile) {
			var statement = ast.statements[0].compile(databaseid);
			if(!statement) return;
			statement.sql = sql;
			statement.dbversion = db.dbversion;
			
			// Secure sqlCache size
			if (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {
				db.resetSqlCache();
			}
			db.sqlCacheSize++;
			db.sqlCache[hh] = statement;
			var res = alasql.res = statement(params, cb);
			return res;
		} else {
			var res = alasql.res = ast.statements[0].execute(databaseid, params, cb);		
			return res;
		}
	} else {
		// Multiple statements
		return alasql.drun(databaseid, ast, params, cb);
	}
};

// Run multiple statements and return array of results
alasql.drun = function (databaseid, ast, params, cb) {
	var useid = alasql.useid;
	if(useid != databaseid) alasql.use(databaseid);
	var res = [];
	for (var i=0, ilen=ast.statements.length; i<ilen; i++) {
		if(ast.statements[i]) {
//			if(alasql.options.logstatements) console.log(ast.statements[i].toString());
			if(ast.statements[i].compile) { 
				var statement = ast.statements[i].compile(alasql.useid);
				res.push(alasql.res = statement(params));
			} else {
				res.push(alasql.res = ast.statements[i].execute(alasql.useid, params));
			}		
		}
	};
	if(useid != databaseid) alasql.use(useid);
	if(cb) cb(res);
	alasql.res = res;
	return res;
};

// Compiler
alasql.compile = function(sql, kind, databaseid) {
	if(!kind) kind = 'collection';
	if(!databaseid) databaseid = alasql.useid;
	var ast = alasql.parse(sql);
	if(ast.statements.length == 1) {
		var statementfn = ast.statements[0].compile(databaseid);
		
		if(kind == 'value') {
			return function(params,cb) {
				var res = statementfn(params);
				var key = Object.keys(res[0])[0];
				if(cb) cb(res[0][key]);
				return res[0][key];
			};
		} else  if(kind == 'single') {
			return function(params,cb) {
				var res = statementfn(params);
				if(cb) cb(res[0]);
				return res[0];
			}
		} else  if(kind == 'row') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				var a = [];
				for(var key in res[0]) {
					a.push(res[0][key]);
				};
				if(cb) cb(a);
				return a;
			}
		} else  if(kind == 'column') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				var ar = [];
				var key = Object.keys(res)[0];
				for(var i=0, ilen=res.length; i<ilen; i++){
					ar.push(res[i][key]);
				}
				if(cb) cb(ar);
				return ar;
			}
		} else if(kind == 'array') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				res = flatArray(res);
				if(cb) cb(res);
				return res;
			};
		} else if(kind == 'matrix') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				res = arrayOfArrays(res);
				if(cb) cb(res);
				return res;
			};				
		} else if(kind == 'collection') {
			return statementfn;
		} else {
			return statementfn;
		}

	} else {
		throw new Error('Number of statments in SQL is not equal to 1');
	}
}

// // Default methods to exec SQL statements
// alasql.run = alasql.exec = function (sql, params, cb) {
// 	return this.currentDatabase.exec(sql, params, cb);
// };

// Promised version of exec
// alasql.aexec = function (sql, params) {
// 	var self = this;
// 	return new Promise(function(resolve, reject){
// 		self.exec(sql,params,resolve);
// 	});
// };


// MSSQL-Like aliases
alasql.query = function (sql, params, cb) {
	var res = this.exec(sql, params);
	if(cb) cb(res);
	return res;	
};

alasql.queryArray = function (sql, params, cb) {
	var res = flatArray(this.exec(sql, params));
	if(cb) cb(res);
	return res;
};

alasql.querySingle = function (sql, params, cb) {
	var res = this.exec(sql, params)[0];
	if(cb) cb(res);
	return res;
};

alasql.queryRow = function (sql, params, cb) {
	var res = this.querySingle(sql, params);
	var a = [];
	for(var key in res) {
		a.push(res[key]);
	};
	if(cb) cb(a);
	return a;
};

alasql.queryValue = function (sql, params, cb) {
	var res = this.exec(sql, params)[0];
	var val = res[Object.keys(res)[0]];
	if(cb) cb(val);
	return val;
	// TODO Refactor to query.columns
};

alasql.queryArrayOfArrays = function (sql, params, cb) {
	var res = this.exec(sql, params);
	var keys = Object.keys(res[0]);
	var klen = keys.length;
	var aa = [];
	for(var i=0, ilen=res.length;i<ilen;i++) {
		var r = res[i];
		var a = [];
		for(var k=0; k<klen;k++){
			a.push(r[keys[k]]);
		}
		aa.push(a);
	}

	if(cb) cb(aa);
	return aa;
};

/*alasql.queryColumn = function (sql, params, cb) {
	var res = this.exec(sql, params);
	var keys = Object.keys(res[0]);
	var klen = keys.length;
	var aa = [];
	for(var i=0, ilen=res.length;i<ilen;i++) {
		var r = res[i];
		var a = [];
		for(var k=0; k<klen;k++){
			a.push(r[keys[k]]);
		}
		aa.push(a);
	}

	if(cb) cb(aa);
	return aa;
};
*/
alasql.value = alasql.queryValue;
alasql.single = alasql.querySingle;
alasql.row = alasql.queryRow;
alasql.column = alasql.queryArray;
alasql.array = alasql.queryArray;
alasql.matrix = alasql.queryArrayOfArrays;



/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Main Database class
var Database = alasql.Database = function (databaseid) {
	var self = this;
	if(self === alasql) {
		if(databaseid) {
			self = alasql.databases[databaseid];
			if(!self) {
				throw new Error('Database "'+databaseid+'" not found');
			}
		} else {
			// Create new database (or get alasql?)
			self = alasql.databases.alasql;
//			self = new Database(databaseid); // to call without new
		}
	}
	if(!databaseid) {
		databaseid = "db"+(alasql.databasenum++); // Random name
	};
	self.databaseid = databaseid;
	alasql.databases[databaseid] = self;
	self.tables = {};
	self.views = {};

	self.indices = {};
	self.fn = {};
	self.resetSqlCache();
	self.dbversion = 0;
	return self;
};

// Start database

Database.prototype.resetSqlCache = function () {
	this.sqlCache = {}; // Cache for compiled SQL statements
	this.sqlCacheSize = 0;	
}



// // Main SQL function
Database.prototype.exec = function(sql, params, cb) {
	return alasql.dexec(this.databaseid, sql, params, cb);
};

// 	// Compile
// 	var statement = this.compile(sql);
// 	// Run
// 	if(statement) {
// 		var data = statement(params, cb);
// 		return data;
// 	}
// 	return;
// };

// // Async version of exec
Database.prototype.aexec = function(sql, params) {
	var self = this;
	return new Promise(function(resolve, reject){
		alasql.dexec(this.databaseid,sql,params,resolve);
	});
};


// Aliases like MS SQL
Database.prototype.query = Database.prototype.exec;
Database.prototype.run = Database.prototype.exec;
Database.prototype.queryArray = function(sql, params, cb) {
	return flatArray(this.exec(sql, params, cb));
}

Database.prototype.queryArrayOfArrays = function(sql, params, cb) {
	return arrayOfArrays(this.exec(sql, params, cb));
}

Database.prototype.querySingle = function(sql, params, cb) {
	return this.exec(sql, params, cb)[0];
}
Database.prototype.queryValue = function(sql, params, cb) {
	var res = this.querySingle(sql, params, cb);
	return res[Object.keys(res)[0]];
}

Database.prototype.value  = Database.prototype.queryValue;
Database.prototype.row    = Database.prototype.querySingle;
Database.prototype.array  = Database.prototype.queryArray;
Database.prototype.matrix = Database.prototype.queryArrayOfArrays;


// Compile statements
Database.prototype.compile = function(sql, kind) {
	return alasql.compile(sql, kind, databaseid);
};
// 	var self = this;
// 	var hh = hash(sql);

// 	// Check cache with hash of SQL statement
// 	var statement = this.sqlcache[hh];
// 	if(!statement) {

// 		// If not fount, then compile it
// 		var ast = alasql.parse(sql);
// 		// Save to cache

// 		statement = this.sqlcache[hh]= ast.compile(self);

// 		// Memory leak prevention 
// 		this.sqlcachesize++;
// 		if(this.sqlcachesize > alasql.MAXSQLCACHESIZE) {
// 			this.resetSqlCache();
// 		}
// 	};
// 	return statement;
// }

// SQL.js compatibility method
Database.prototype.prepare = Database.prototype.compile;


// Added for compatibility with WebSQL





/*
//
// Transactio class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

Database.prototype.transaction = function(cb) {
	var tx = new alasql.Transaction(this.databaseid);
	var res = cb(tx);
	return res;
};

// Transaction class (for WebSQL compatibility)
var Transaction = alasql.Transaction = function (databaseid) {
	this.transactionid = Date.now();
	this.databaseid = databaseid;
	this.commited = false; 
	this.dbversion = alasql.databases[databaseid].dbversion;
//	this.bank = cloneDeep(alasql.databases[databaseid]);
	this.bank = JSON.stringify(alasql.databases[databaseid]);
	// TODO CLone Tables with insertfns
//	console.log(this);
	return this;
};

// Main class 


// Commit
Transaction.prototype.commit = function() {
	this.commited = true;
	alasql.databases[this.databaseid].dbversion = Date.now();
	delete this.bank;
};

// Rollback
Transaction.prototype.rollback = function() {
	if(!this.commited) {
		alasql.databases[this.databaseid] = JSON.parse(this.bank);
		// alasql.databases[this.databaseid].tables = this.bank;
		// alasql.databases[this.databaseid].dbversion = this.dbversion;
		delete this.bank;
	} else {
		throw new Error('Transaction already commited');
	}
};

// Transactions stub
Transaction.prototype.exec = Transaction.prototype.executeSQL = function(sql, params, cb) {
//	console.log(this.databaseid);
	return alasql.dexec(this.databaseid,sql,params,cb);
};


Transaction.prototype.query = Database.prototype.exec;
Transaction.prototype.run = Database.prototype.exec;
Transaction.prototype.queryArray = function(sql, params, cb) {
	return flatArray(this.exec(sql, params, cb));
}

Transaction.prototype.queryArrayOfArrays = function(sql, params, cb) {
	return arrayOfArrays(this.exec(sql, params, cb));
}

Transaction.prototype.querySingle = function(sql, params, cb) {
	return this.exec(sql, params, cb)[0];
}
Transaction.prototype.queryValue = function(sql, params, cb) {
	var res = this.querySingle(sql, params, cb);
	return res[Object.keys(res)[0]];
}



/*
//
// Persistence Store for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Store to Storage
alasql.store = function(databaseid, transactionid) {
	var obj = {
		tables: alasql.databases[databaseid].tables
	};
	var key = databaseid;
	if(transactionid) key += "."+transactionid;
	localStorage[key] = JSON.stringify(obj);
};

// Restore from localStorage
alasql.restore = function(databaseid, transactionid) {
	var key = databaseid;
	if(transactionid) key += "."+transactionid;

	var res = localStorage[key];
	if(res) {
		var obj = JSON.parse(localStorage[key]);
		var db = new alasql.Database(databaseid);
		db.databaseid = databaseid;
		db.tables = obj.tables;
		return db;
	} else {
		return null;
	}

};

// Clear all database records with transactions
alasql.wipe = function (databaseid, transactionid) {
	var key = databaseid;
	if(transactionid) {
		key += "."+transactionid;
		localStorage.removeItem(key);
	} else {
		for(var key in localStorage) {
			if(key.substr(0,databaseid.length+1) == databaseid+".") {
				localStorage.removeItem(key);
			};
		};
		localStorage.removeItem(databaseid);
	}
};

/*
//
// Table class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var Table = alasql.Table = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	this.data = [];

	this.inddefs = {};
	this.indices = {};

	this.uniqs = {};
	this.uniqdefs = {};	

	extend(this,params);
};


// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;

Table.prototype.indexColumns = function() {
	var self = this;
	self.xcolumns = {};
	self.columns.forEach(function(col){
		self.xcolumns[col.columnid] = col;
	});	
}




/*
//
// View class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var View = alasql.View = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	this.query = [];

	extend(this,params);
};

// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;




/*
//
// Query class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var Query = alasql.Query = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	extend(this,params);
};

// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;




/*
//
// Parser helper for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

var yy = parser.yy = {};

// Utility
yy.extend = extend;
// Option for case sensitive
yy.casesensitive = alasql.options.casesensitive; 

// Base class for all yy classes
var Base = yy.Base = function (params) { return yy.extend(this, params); };

Base.prototype.toString = function() {}
Base.prototype.toType = function() {}
Base.prototype.toJavaScript = function() {}

//var BaseClause = yy,BaseClause = function (params) { return yy.extend(this, params); };
Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {}

//var BaseStatement = yy,BaseStatement = function (params) { return yy.extend(this, params); };
Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {}




/*
//
// Statements class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Statements container
yy.Statements = function(params) { return yy.extend(this, params); };

yy.Statements.prototype.toString = function () {
	return this.statements.map(function(st){return st.toString()}).join(';');
};

// Compile array of statements into single statement
yy.Statements.prototype.compile = function(db) {
	var statements = this.statements.map(function(st){
		return st.compile(db)
	});
	if(statements.length == 1) {
		return statements[0];	
	} else {
		return function(params, cb){
			var res = statements.map(function(st){ return st(params); });
			if(cb) cb(res);
			return res;
		}
	}
};


// Main query procedure
function queryfn(query,oldscope) {

//	console.log(query);

	// Run all subqueries before main statement
	if(query.queriesfn) {
		query.queriesdata = query.queriesfn.map(function(q){return flatArray(q(query.params))});
//		console.log(query.queriesdata[0]);
	}

	var scope;
	if(!oldscope) scope = {};
	else scope = cloneDeep(oldscope);
	query.scope = scope;

	// First - refresh data sources
	query.sources.forEach(function(source){
//		source.data = query.database.tables[source.tableid].data;
		source.data = source.datafn(query, query.params); 

//
// Ugly hack to use in query.wherefn and source.srcwherefns functions
// constructions like this.queriesdata['test'].
// I can elimite it with source.srcwherefn.bind(this)()
// but it may be slow.
// 
		source.queriesdata = query.queriesdata;  
	});

	// Preindexation of data sources
//	if(!oldscope) {
		preIndex(query);
//	}

	// Prepare variables
	query.data = [];
	query.xgroups = {};
	query.groups = [];

	// Level of Joins
	var h = 0;

	// Start walking over data
	doJoin(query, scope, h);

	// If groupping, then filter groups with HAVING function
	if(query.groupfn) {
		if(query.havingfn) query.groups = query.groups.filter(query.havingfn)
		query.data = query.groups;
	};

	// Remove distinct values	
	doDistinct(query);	

	// Reduce to limit and offset
	doLimit(query);

	// UNION / UNION ALL
	if(query.unionallfn) {
		query.data = query.data.concat(query.unionallfn(query.params));
	} else if(query.unionfn) {
		query.data = arrayUnionDeep(query.data, query.unionfn(query.params));
	} else if(query.exceptfn) {
		query.data = arrayExceptDeep(query.data, query.exceptfn(query.params));
	} else if(query.intersectfn) {
		query.data = arrayIntersectDeep(query.data, query.intersectfn(query.params));
	};

	// Ordering
	if(query.orderfn) query.data = query.data.sort(query.orderfn);

	if(query.intofn) {
		query.intofn();
		return query.data.length;
	} else {
		return query.data;
	}

	// That's all
};

// Limiting
function doLimit (query) {
//	console.log(query.limit, query.offset)
	if(query.limit) {
		var offset = 0;
		if(query.offset) offset = ((query.offset|0)-1)||0;
		var limit = (query.limit|0) + offset;
		query.data = query.data.slice(offset,limit);
	}
}

// Distinct
function doDistinct (query) {
	if(query.distinct) {
		var uniq = {};
		// TODO: Speedup, because Object.keys is slow
		for(var i=0,ilen=query.data.length;i<ilen;i++) {
			var uix = Object.keys(query.data[i]).map(function(k){return query.data[i][k]}).join('`');
			uniq[uix] = query.data[i];
		};
		query.data = [];
		for(var key in uniq) query.data.push(uniq[key]);
	}
};


// Optimization: preliminary indexation of joins
preIndex = function(query) {
//	console.log(query);
	// Loop over all sources
	for(var k=0, klen = query.sources.length;k<klen;k++) {
		var source = query.sources[k];
		// If there is indexation rule
//console.log('preIndex', source);

		if(source.optimization == 'ix' && source.onleftfn && source.onrightfn) {
			// If there is no table.indices - create it
			if(!query.database.tables[source.tableid].indices) query.database.tables[source.tableid].indices = {};
				// Check if index already exists
			var ixx = query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)];
			if( !query.database.tables[source.tableid].dirty && ixx) {
				source.ix = ixx; 
			} else {
				source.ix = {};
				// Walking over source data
				var scope = {};
				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					// Prepare scope for indexation
					scope[source.alias || source.tableid] = source.data[i];

					// Check if it apply to where function 
					if(source.srcwherefn(scope, query.params, alasql)) {
						// Create index entry for each address
						var addr = source.onrightfn(scope, query.params, alasql);
						var group = source.ix [addr]; 
						if(!group) {
							group = source.ix [addr] = []; 
						}
						group.push(source.data[i]);
					}
				}
				// Save index to original table				
				query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)] = source.ix;
			}
			// Optimization for WHERE column = expression
		} else if (source.wxleftfns) {
			// Check if index exists
			var ixx = query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')];
			if( !query.database.tables[source.tableid].dirty && ixx) {
				// Use old index if exists
				source.ix = ixx;
				// Reduce data (apply filter)
				source.data = source.ix[source.wxrightfn(null, query.params, alasql)]; 
			} else {
				// Create new index
				source.ix = {};
				// Prepare scope
				var scope = {};
				// Walking on each source line
				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					scope[source.alias || source.tableid] = source.data[i];
					// Create index entry
					var addr = source.wxleftfn(scope, query.params, alasql);
					var group = source.ix [addr]; 
					if(!group) {
						group = source.ix [addr] = []; 
					}
					group.push(source.data[i]);
				}
//					query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`'+source.onwherefns)] = source.ix;
				query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')] = source.ix;
			}
			// Apply where filter to reduces rows
			if(source.srcwherefns) {
				if(source.data) {
					var scope = {};
					source.data = source.data.filter(function(r) {
						scope[source.alias] = r;
						return source.srcwherefn(scope, query.params, alasql);
					});
				} else {
					source.data = [];
				}
			}		

		// If there is no any optimization than apply srcwhere filter
		} else if(source.srcwherefns) {
			if(source.data) {
				var scope = {};
				source.data = source.data.filter(function(r) {
					scope[source.alias] = r;
					return source.srcwherefn(scope, query.params, alasql);
				});
			} else {
				source.data = [];
			};
		}			
		// Change this to another place (this is a wrong)
		if(query.database.tables[source.tableid]) {
			//query.database.tables[source.tableid].dirty = false;
		} else {
			// this is a subquery?
		}
	}
}



//
// Join all lines over sources 
//

function doJoin (query, scope, h) {
//	console.log(query.sources.length);
	// Check, if this is a last join?
	if(h>=query.sources.length) {
//console.log(query.wherefns);
		// Then apply where and select
		if(query.wherefn(scope,query.params, alasql)) {
			var res = query.selectfn(scope, query.params, alasql);
//			console.log("last",scope);
			// If there is a GROUP BY then pipe to groupping function
			if(query.groupfn) {
				query.groupfn(res, query.params, alasql)
			} else {
				query.data.push(res);
			}	
		}
	} else {

// STEP 1

		var source = query.sources[h];
		var nextsource = query.sources[h+1];

//		if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "RIGHT"
//			|| source.joinmode == "OUTER" || source.joinmode == "SEMI") {
		if(source.joinmode != "ANTI") {

			// if(nextsource && nextsource.joinmode == "RIGHT") {
			// 	if(!nextsource.rightdata) {
			// 		console.log("ok");
			// 		nextsource.rightdata = new Array(nextsource.data.length);
			// 		console.log(nextsource.data.length, nextsource.rightdata);
			// 	}
			// }

			var tableid = source.alias || source.tableid; 
			var pass = false; // For LEFT JOIN
			var data = source.data;


			// Reduce data for looping if there is optimization hint
			if(source.joinmode != "RIGHT" && source.joinmode != "OUTER" && source.joinmode != "ANTI" && source.optimization == 'ix') {
				data = source.ix[ source.onleftfn(scope, query.params, alasql) ] || [];
			}

			// Main cycle
			for(var i=0, ilen=data.length; i<ilen; i++) {
				scope[tableid] = data[i];
				// Reduce with ON and USING clause
				if(!source.onleftfn || (source.onleftfn(scope, query.params, alasql) == source.onrightfn(scope, query.params, alasql))) {
					// For all non-standard JOINs like a-b=0
					if(source.onmiddlefn(scope, query.params, alasql)) {
						// Recursively call new join
//						if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "OUTER" || source.joinmode == "RIGHT" ) {
						if(source.joinmode != "SEMI") { 
//							console.log(scope);
							doJoin(query, scope, h+1);
						}

						// if(source.data[i].f = 200) debugger;

//						if(source.joinmode == "RIGHT" || source.joinmode == "ANTI" || source.joinmode == "OUTER") {
						if(source.joinmode != "LEFT" && source.joinmode != "INNER") {
							data[i]._rightjoin = true;
						}

						// for LEFT JOIN
						pass = true;
					}
				}
			};


			// Additional join for LEFT JOINS
			if((source.joinmode == 'LEFT' || source.joinmode == 'OUTER' || source.joinmode == 'SEMI' ) && !pass) {
			// Clear the scope after the loop
				scope[tableid] = {};
				doJoin(query,scope,h+1);
			}	


		}

// STEP 2

		if(h+1 < query.sources.length) {

			if(nextsource.joinmode == "OUTER" || nextsource.joinmode == "RIGHT" 
				|| nextsource.joinmode == "ANTI") {
		
				scope[source.alias] = {};
			
				for (var j=0; j<nextsource.data.length;j++){
					if(!nextsource.data[j]._rightjoin) {
						scope[nextsource.alias] = nextsource.data[j];
						doJoin(query, scope, h+2);
						nextsource.data[j]._rightjoin = undefined;
					}
				}

			};
		};

		scope[tableid] = undefined;

/*
		if(h+1 < query.sources.length) {
			var nextsource = query.sources[h+1];

			if(nextsource.joinmode == "OUTER" || nextsource.joinmode == "RIGHT" 
				|| nextsource.joinmode == "ANTI") {


				console.log(h,query.sources.length);
				// Swap


//				swapSources(query,h);

//				console.log(query.sources);
				//debugger;
//				var source = query.sources[h];

//				var tableid = source.alias || source.tableid; 
//				var data = source.data;

				// Reduce data for looping if there is optimization hint
//				if(source.optimization == 'ix') {
//					data = source.ix[ source.onleftfn(scope, query.params, alasql) ] || [];
//				}

				// Main cycle
				var pass = false;
//				console.log(tableid, data.length);
				for(var i=0, ilen=nextsource.data.length; i<ilen; i++) {
					scope[nextsource.tableid] = nextsource.data[i];
					// Reduce with ON and USING clause
					if(!source.onleftfn || (source.onleftfn(scope, query.params, alasql) == source.onrightfn(scope, query.params, alasql))) {
						// For all non-standard JOINs like a-b=0
						if(source.onmiddlefn(scope, query.params, alasql)) {
							// Recursively call new join
//							if(source.joinmode == "OUTER") {
								doJoin(query, scope, h+2);
//							}
							// for LEFT JOIN
							pass = true;
						}
					};
					if(!pass) {
					// Clear the scope after the loop
//						scope[tableid] = {};
						console.log(scope);
						doJoin(query,scope,h+2);
					}	
				};

				// Additional join for LEFT JOINS
					scope[query.sources[h+1].tableid] = {};
					console.log(scope);

				scope[tableid] = undefined;

				// SWAP BACK
				swapSources(query,h);

			}
		}

*/
	}

};

function swapSources(query, h) {
	var source = query.sources[h];
	var nextsource = query.sources[h+1];

	var onleftfn = source.onleftfn;
	var onleftfns = source.onleftfns;
	var onrightfn = source.onrightfn;
	var onrightfns = source.onrightfns;
	var optimization = source.optimization;

	source.onleftfn = nextsource.onrightfn;
	source.onleftfns = nextsource.onrightfns;
	source.onrightfn = nextsource.onleftfn;
	source.onrightfns = nextsource.onleftfns;
	source.optimization = nextsource.optimization;

	nextsource.onleftfn = onleftfn;
	nextsource.onleftfns = onleftfns;
	nextsource.onrightfn = onrightfn;
	nextsource.onrightfns = onrightfns;
	nextsource.optimization = optimization;

	query.sources[h] = nextsource;
	query.sources[h+1] = source;
}



/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

//
// Main part of SELECT procedure
//

yy.Select = function (params) { return yy.extend(this, params); }
yy.Select.prototype.toString = function() {
	var s = 'SELECT ';
	if(this.top) s += 'TOP '+this.top.value+' ';
	s += this.columns.map(function(col){
		var s = col.toString();
//		console.log(col);
		if(typeof col.as != "undefined") s += ' AS '+col.as;
		return s;
	}).join(',');

	if(this.from) {
		s += ' FROM '+this.from.map(function(f){
			console.log(f);
			var ss = f.toString();
			if(f.as) ss += ' AS '+f.as;
			return ss;
		}).join(',');
	};

	if(this.joins) {
		s += ' '+this.joins.map(function(jn){
			var ss = jn.joinmode +' JOIN ';
			ss += jn.table.toString();
			if(jn.using) ss += ' USING '+jn.using.toString();
			if(jn.on) ss += ' ON '+jn.on.toString();
			return ss;
 		});
	}

	if(this.where) s += ' WHERE '+this.where.toString();
	if(this.group) s += ' GROUP BY '+this.group.toString();
	if(this.having) s += ' HAVING '+this.having.toString();
	if(this.order) s += ' ORDER BY '+this.order.toString();
	if(this.union) s += ' UNION '+this.union.toString();
	if(this.unionall) s += ' UNION ALL '+this.unionall.toString();
	if(this.except) s += ' EXCEPT '+this.except.toString();
	if(this.intersect) s += ' INTERSECT '+this.intersect.toString();
	if(this.limit) s += ' LIMIT '+this.limit.value;
	if(this.offset) s += ' OFFSET '+this.offset.value;
	return s;
};

// Compile SELECT statement
yy.Select.prototype.compile = function(databaseid) {
	var db = alasql.databases[databaseid];
	// Create variable for query
	var query = new Query();
	
	query.database = db;
	// 0. Precompile whereexists
	this.compileWhereExists(query);

	// 0. Precompile queries for IN, NOT IN, ANY and ALL operators
	this.compileQueries(query);
	
	query.defcols = this.compileDefCols(query, databaseid);

	// 1. Compile FROM clause
	query.fromfn = this.compileFrom(query);
	// 2. Compile JOIN clauses
	if(this.joins) this.compileJoins(query);
	// 3. Compile SELECT clause
	query.selectfn = this.compileSelect(query);
	// 5. Optimize WHERE and JOINS
	if(this.where) this.compileWhereJoins(query);

	// 4. Compile WHERE clause
	query.wherefn = this.compileWhere(query);


	// 6. Compile GROUP BY
	if(this.group) query.groupfn = this.compileGroup(query);
	// 7. Compile DISTINCT, LIMIT and OFFSET
	query.distinct = this.distinct;

	if(this.top) {
		query.limit = this.top.value;
	} else if(this.limit) {
		query.limit = this.limit.value;
		if(this.offset) {
			query.offset = this.offset.value;
		}
	}
	// 8. Compile ORDER BY clause
	if(this.order) query.orderfn = this.compileOrder(query);

	// 9. Compile ordering function for UNION and UNIONALL
	if(this.union) {
		query.unionfn = this.union.compile(databaseid);
		if(this.union.order) {
			query.orderfn = this.union.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.unionall) {
		query.unionallfn = this.unionall.compile(databaseid);
		if(this.unionall.order) {
			query.orderfn = this.unionall.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.except) {
		query.exceptfn = this.except.compile(databaseid);
		if(this.except.order) {
			query.orderfn = this.except.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.intersect) {
		query.intersectfn = this.intersect.compile(databaseid);
		if(this.intersect.order) {
			query.intersectfn = this.intersect.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	};

	// SELECT INTO
//	console.log(this.into);
	if(this.into) {
		query.intofns = 
		'alasql.databases[\''+(this.into.databaseid||databaseid)+'\'].tables'+
		'[\''+this.into.tableid+'\'].data='+
		'alasql.databases[\''+(this.into.databaseid||databaseid)+'\'].tables'+
		'[\''+this.into.tableid+'\'].data.concat(this.data)';
		query.intofn = new Function(query.intofns); 
	}
//console.log(query);

	// Now, compile all togeather into one function with query object in scope
	var statement = function(params, cb, oldscope) {
		query.params = params;
		var res = queryfn(query,oldscope); 
		if(cb) cb(res); 
		return res;
	};

//	statement.dbversion = ;
//	console.log(statement.query);
	return statement;
};

yy.Select.prototype.exec = function(databaseid) {
	throw new Error('Select statement should be precompiled');

};



/*
//
// EXISTS and other subqueries functions  functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExistsValue = function(params) { return yy.extend(this, params); }
yy.ExistsValue.prototype.toString = function() {
	return 'EXISTS('+this.value.toString()+')';
};

yy.ExistsValue.prototype.toType = function() {
	return 'boolean';
};

yy.ExistsValue.prototype.toJavaScript = function() {
//	return 'ww=this.existsfn['+this.existsidx+'](params,null,p).length,console.log(ww),ww';
	return 'this.existsfn['+this.existsidx+'](params,null,p).length';
};

yy.Select.prototype.compileWhereExists = function(query) {
	if(!this.exists) return;
	query.existsfn = this.exists.map(function(ex) {
		return ex.compile(query.database.databaseid);
	});
};

yy.Select.prototype.compileQueries = function(query) {
	if(!this.queries) return;
	query.queriesfn = this.queries.map(function(q) {
		return q.compile(query.database.databaseid);
	});
};

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT Compile functions


// Compile JOIN caluese
yy.Select.prototype.compileJoins = function(query) {
//	console.log(this);
//	debugger;
	var self = this;




	this.joins.forEach(function(jn){

		// Test CROSS-JOIN
		if(jn.joinmode == "CROSS") {
			if(jn.using || jn.on) {
				throw new Error('CROSS JOIN cannot have USING or ON clauses');
			} else {
				jn.joinmode == "INNER";
			}
		}


		var tq = jn.table;
		var source = {
			alias: tq.alias||tq.tableid,
			databaseid: jn.databaseid || query.database.databaseid,
			tableid: tq.tableid,
			joinmode: jn.joinmode,
			onmiddlefn: returnTrue,
			srcwherefns: '',	// for optimization
			srcwherefn: returnTrue
		};



		// Test NATURAL-JOIN
		if(jn.natural) {
			if(jn.using || jn.on) {
				throw new Error('NATURAL JOIN cannot have USING or ON clauses');
			} else {
//				source.joinmode == "INNER";
				if(query.sources.length > 0) {
					var prevSource = query.sources[query.sources.length-1];
					var prevTable = alasql.databases[prevSource.databaseid].tables[prevSource.tableid];
					var table = alasql.databases[source.databaseid].tables[source.tableid];

					if(prevTable && table) {
						var c1 = prevTable.columns.map(function(col){return col.columnid});
						var c2 = table.columns.map(function(col){return col.columnid});
						jn.using = arrayIntersect(c1,c2);
//						console.log(jn.using);
					} else {
						throw new Error('In this version of Alasql NATURAL JOIN '+
							'works for tables with predefined columns only');
					};
				}
			}
		}




		source.datafn = function(query,params) {
			return query.database.tables[source.tableid].data;
		}


		var alias = tq.as || tq.tableid;
		query.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid};

		if(jn.using) {
			var prevSource = query.sources[query.sources.length-1];
//			console.log(query.sources[0],prevSource,source);
			source.onleftfns = jn.using.map(function(colid){
				return "p['"+(prevSource.alias||prevSource.tableid)+"']['"+colid+"']";
			}).join('+"`"+');
			source.onleftfn = new Function('p,params,alasql','return '+source.onleftfns);
			source.onrightfns = jn.using.map(function(colid){
				return "p['"+(source.alias||source.tableid)+"']['"+colid+"']";
			}).join('+"`"+');
			source.onrightfn = new Function('p,params,alasql','return '+source.onrightfns);
			source.optimization = 'ix';
		} else if(jn.on) {
//console.log(jn.on);
			if(jn.on instanceof yy.Op && jn.on.op == '=' && !jn.on.allsome) {
//				console.log('ix optimization', jn.on.toJavaScript('p',query.defaultTableid) );
				source.optimization = 'ix';
			// 	source.onleftfns = jn.on.left.toJavaScript('p',query.defaultTableid);
			// 	source.onleftfn = new Function('p', 'return '+source.onleftfns);
			// 	source.onrightfns = jn.on.right.toJavaScript('p',query.defaultTableid);
			// 	source.onrightfn = new Function('p', 'return '+source.onrightfns);

				var lefts = '';
				var rights = '';
				var middles = '';
				var middlef = false;
				// Test right and left sides
				var ls = jn.on.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = jn.on.right.toJavaScript('p',query.defaultTableid,query.defcols);

				if((ls.indexOf("p['"+alias+"']")>-1) && !(rs.indexOf("p['"+alias+"']")>-1)){
					if((ls.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { rights = ls; } 
						else { middlef = true };

				} else 	if(!(ls.indexOf("p['"+alias+"']")>-1) && (rs.indexOf("p['"+alias+"']")>-1)){
					if((rs.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { lefts = ls; } 
						else { middlef = true };
				} else {
					middlef = true;
				}

//				console.log(alias, 1,lefts, rights, middlef);

				if((rs.indexOf("p['"+alias+"']")>-1) && !(ls.indexOf("p['"+alias+"']")>-1)){
					if((rs.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { rights = rs; } 
						else { middlef = true };
				} else if(!(rs.indexOf("p['"+alias+"']")>-1) && (ls.indexOf("p['"+alias+"']")>-1)){
					if((ls.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { lefts = rs; } 
						else { middlef = true };
				} else {
					middlef = true;
				}

//				console.log(alias, 2,lefts, rights, middlef);

				if(middlef) {
//					middles = jn.on.toJavaScript('p',query.defaultTableid);
//				} else {
					rights = '';
					lefts = '';
					middles = jn.on.toJavaScript('p',query.defaultTableid,query.defcols);
					source.optimization = 'no';
					// What to here?
				} 

				source.onleftfns = lefts;
				source.onrightfns = rights;
				source.onmiddlefns = middles || 'true';
//			console.log(source.onleftfns, '-',source.onrightfns, '-',source.onmiddlefns);

				source.onleftfn = new Function('p,params,alasql', 'return '+source.onleftfns);
				source.onrightfn = new Function('p,params,alasql', 'return '+source.onrightfns);
				source.onmiddlefn = new Function('p,params,alasql', 'return '+source.onmiddlefns);

//			} else if(jn.on instanceof yy.Op && jn.on.op == 'AND') {
//				console.log('join on and ',jn);

			} else {
//				console.log('no optimization');
				source.optimization = 'no';
//				source.onleftfn = returnTrue;
//				source.onleftfns = "true";
				source.onmiddlefns = jn.on.toJavaScript('p',query.defaultTableid,query.defcols);
				source.onmiddlefn = new Function('p,params,alasql','return '+jn.on.toJavaScript('p',query.defaultTableid,query.defcols));
			};
//			console.log(source.onleftfns, source.onrightfns, source.onmiddlefns);

			// Optimization function
		};

//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
//console.log(source, jn);
		// TODO SubQueries
		if(!query.database.tables[source.tableid]) {
			throw new Error('Table \''+source.tableid+
			'\' is not exists in database \''+query.database.databaseid)+'\'';
		};
		source.data = query.database.tables[source.tableid].data;
/*		if(source.joinmode == 'RIGHT') {
			var prevSource = query.sources.pop();
			if(prevSource.joinmode == 'INNER') {
				prevSource.joinmode = 'LEFT';
				var onleftfn = prevSource.onleftfn;
				var onleftfns = prevSource.onleftfns;
				var onrightfn = prevSource.onrightfn;
				var onrightfns = prevSource.onrightfns;
				var optimization = prevSource.optimization;

				prevSource.onleftfn = source.onrightfn;
				prevSource.onleftfns = source.onrightfns;
				prevSource.onrightfn = source.onleftfn;
				prevSource.onrightfns = source.onleftfns;
				prevSource.optimization = source.optimization;

				source.onleftfn = onleftfn;
				source.onleftfns = onleftfns;
				source.onrightfn = onrightfn;
				source.onrightfns = onrightfns;
				source.optimization = optimization;

				source.joinmode = 'INNER';
				query.sources.push(source);
				query.sources.push(prevSource);
			} else {
				throw new Error('Do not know how to process this SQL');
			}
		} else {
			query.sources.push(source);
		}
*/	
		query.sources.push(source);
	});
//	console.log('sources',query.sources);
}


// Compile group of statements
yy.Select.prototype.compileGroup = function(query) {
	var self = this;

	var allgroup = decartes(this.group);

	//console.log(allgroup);
	// Prepare groups
	//var allgroup = [['a'], ['a','b'], ['a', 'b', 'c']];

	// Union all arrays to get a maximum
	var allgroups = [];
	allgroup.forEach(function(a){
		allgroups = arrayUnion(allgroups, a);
	});

	// Create negative array

	var s = '';

	allgroup.forEach(function(agroup) {


		// Start of group function
		s += 'var g=this.xgroups[';

	//	var gcols = this.group.map(function(col){return col.columnid}); // Group fields with r
		// Array with group columns from record
		var rg = agroup.map(function(columnid){
			// Check, if aggregator exists but GROUP BY is not exists
			if(columnid == '') return '1'; // Create fictive groupping column for fictive GROUP BY
			else return "r['"+columnid+"']";
		});

		if(rg.length == 0) rg = ["''"];

	//	console.log('rg',rg);

		s += rg.join('+"`"+');
		s += '];if(!g) {this.groups.push(g=this.xgroups[';
		s += rg.join('+"`"+');
		s += '] = {';
	//	s += ']=r';

		s += agroup.map(function(columnid){
			if(columnid == '') return '';
			else return "'"+columnid+"':r['"+columnid+"'],";
		}).join('');


		var neggroup = arrayDiff(allgroups,agroup);

		s += neggroup.map(function(columnid){
			return "'"+columnid+"':null,";
		}).join('');


		s += self.columns.map(function(col){
			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM'
					|| col.aggregatorid == 'MIN'
					|| col.aggregatorid == 'MAX'
					|| col.aggregatorid == 'FIRST'
					|| col.aggregatorid == 'LAST'
					|| col.aggregatorid == 'AVG'
//				) { return '\''+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJavaScript(); 	
				) { return '\''+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') { return '\''+col.as+'\':1,'; }
//				else if(col.aggregatorid == 'MIN') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
//				else if(col.aggregatorid == 'MAX') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
				return '';
			} else return '';
		}).join('');





		// columnid:r.columnid
	//	var srg = [];//rg.map(function(fn){ return (fn+':'+fn); });

	//	var srg = this.group.map(function(col){
	//		if(col == '') return '';
	//		else return col.columnid+':'+col.toJavaScript('r','');
	//	});

	// Initializw aggregators

	/*
		this.columns.forEach(function(col){
	//		console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';


			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM') { srg.push("'"+col.as+'\':0'); }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') {srg.push( "'"+col.as+'\':0'); }
				else if(col.aggregatorid == 'MIN') { srg.push( "'"+col.as+'\':Infinity'); }
				else if(col.aggregatorid == 'MAX') { srg.push( "'"+col.as+'\':-Infinity'); }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
			};

		});

	*/

	/*****************/

	//	s += srg.join(',');

		// var ss = [];
		// gff.forEach(function(fn){
		// 	ss.push(fn+':rec.'+fn);
		// });
		// s += ss.join(',');
	//	s += '});};';

		s += '});} else {';
	//	console.log(s, this.columns);



	// var neggroup = arrayDiff(allgroups,agroup);

	// console.log(agroup,neggroup);

	// s += neggroup.map(function(columnid){
	// 	return "g['"+columnid+"']=null;";
	// }).join('');

	// console.log(s);


	//console.log(query.selectfn);
		s += self.columns.map(function(col){
			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM') { return 'g[\''+col.as+'\']+=r[\''+col.as+'\'];'; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') { return 'g[\''+col.as+'\']++;'; }
				else if(col.aggregatorid == 'MIN') { return 'g[\''+col.as+'\']=Math.min(g[\''+col.as+'\'],r[\''+col.as+'\']);'; }
				else if(col.aggregatorid == 'MAX') { return 'g[\''+col.as+'\']=Math.max(g[\''+col.as+'\'],r[\''+col.as+'\']);'; }
				else if(col.aggregatorid == 'FIRST') { return ''; }
				else if(col.aggregatorid == 'LAST') { return 'g[\''+col.as+'\']=r[\''+col.as+'\'];'; }
				else if(col.aggregatorid == 'AVG') { return ''; }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
				return '';
			} else return '';
		}).join('');


	//	s += selectFields.map(function(f){
	//			console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';
	//			if (f.field instanceof SQLParser.nodes.FunctionValue 
	//				&& (f.field.name.toUpperCase() == 'SUM' || f.field.name.toUpperCase() == 'COUNT')) {
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+='+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+=rec.'+f.name.value+';'; //f.field.arguments[0].toJavaScript(); 	
	//			};
	//			return '';
	//		}).join('');

		//s += '	group.amt += rec.emplid;';
		//s += 'group.count++;';

		s += '}';
	//	console.log(s, this.group);

	});

//	console.log(s);
	return new Function('r,params',s);

}

yy.Select.prototype.compileFrom = function(query) {
	var self = this;
	query.sources = [];
//	var tableid = this.from[0].tableid;
//	var as = '';
//	if(self.from[0].as) as = this.from[0].as;
//console.log(this);
	query.aliases = {};
	if(!self.from) return;

	self.from.forEach(function(tq){
		var alias = tq.as || tq.tableid;
//		console.log(alias);
		if(tq instanceof yy.Table) {
//			console.log(tq, tq.databaseid, query);
			query.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid, type:'table'};
		} else if(tq instanceof yy.Select) {
			query.aliases[alias] = {type:'subquery'};
		} else if(tq instanceof yy.ParamValue) {
			query.aliases[alias] = {type:'paramvalue'};
		} else {
			throw new Error('Wrong table at FROM');
		}

		var source = {
			alias: alias,
			databaseid: tq.databaseid || query.database.databaseid,
			tableid: tq.tableid,
			joinmode: 'INNER',
			onmiddlefn: returnTrue,			
			srcwherefns: '',	// for optimization
			srcwherefn: returnTrue			
		};

		if(tq instanceof yy.Table) {
			source.datafn = function(query,params) {
				// if(!query) console.log('query');
				// if(!query.database) console.log('query');
				// if(!query.database.tables) console.log('query');
				// if(!source.tableid) console.log('query');
				// if(!query.database.tables[source.tableid]) console.log(query);
				// if(!query.database.tables[source.tableid].data) console.log('query');

				return query.database.tables[source.tableid].data;
//				return alasql.databases[source.databaseid].tables[source.tableid].data;
			}
		} else if(tq instanceof yy.Select) {
			source.subquery = tq.compile(query.database.databaseid);
			source.datafn = function(query, params) {
				return source.subquery(query.params);
			}						
		} else if(tq instanceof yy.ParamValue) {
			source.datafn = new Function('query,params',
				"return params['"+tq.param+"'];");
		} else {
			throw new Error('Wrong table at FROM');
		}
//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
		query.sources.push(source);

	});
	// TODO Add joins
	query.defaultTableid = query.sources[0].alias;
//console.log(query.defaultTableid);
};

// yy.Select.prototype.compileSources = function(query) {
// 	return sources;
// };

function compileSelectStar (query,alias) {
	// console.log(query.aliases[alias]);
//	console.log(query,alias);
	// console.log(query.aliases[alias].tableid);
//	console.log(alias);
	var s = '', sp = '', ss=[];
//	if(!alias) {
//		sp += 'for(var k1 in p) var w=p[k1];for(var k2 in w){r[k2]=w[k2]};';
//	} else 	{
		if(query.aliases[alias].tableid) {
			var columns = query.database.tables[query.aliases[alias].tableid].columns;
		};
		// Check if this is a Table or other

		if(columns) {
			columns.forEach(function(tcol){
				ss.push('\''+tcol.columnid+'\':p[\''+alias+'\'][\''+tcol.columnid+'\']');

	//		console.log('ok',s);

				var coldef = {
					columnid:tcol.columnid, 
					dbtypeid:tcol.dbtypeid, 
					dbsize:tcol.dbsize, 
					dbprecision:tcol.dbprecision,
					dbenum: tcol.dbenum
				};
				query.columns.push(coldef);
				query.xcolumns[coldef.columnid]=coldef;

			});
		} else {
			// if column not exists, then copy all
			sp += 'var w=p["'+alias+'"];for(var k in w){r[k]=w[k]};';
			query.dirtyColumns = true;
		}
//	}
//console.log({s:ss.join(','),sp:sp});
	return {s:ss.join(','),sp:sp};
}


yy.Select.prototype.compileSelect = function(query) {
	var self = this;
	query.columns = [];
	query.xcolumns = {};
	query.dirtyColumns = false;
	var s = 'var r={';
	var sp = '';
	var ss = [];
	this.columns.forEach(function(col){
		if(col instanceof yy.Column) {
			if(col.columnid == '*') {
				if(col.tableid) {
					//Copy all
					var ret = compileSelectStar(query, col.tableid);
					if(ret.s)  ss = ss.concat(ret.s);
					sp += ret.sp;

				} else {
//					console.log('aliases', query.aliases);
					for(var alias in query.aliases) {
						var ret = compileSelectStar(query, alias); //query.aliases[alias].tableid);
						if(ret.s) ss = ss.concat(ret.s);
						sp += ret.sp;
					}
					// TODO Remove these lines
					// In case of no information 
					// sp += 'for(var k1 in p){var w=p[k1];'+
					// 			'for(k2 in w) {r[k2]=w[k2]}}'
				}
			} else {
				// If field, otherwise - expression
				var tbid = col.tableid;
				if(!tbid) tbid = query.defcols[col.columnid];
				if(!tbid) tbid = query.defaultTableid;
				ss.push(escapeq(col.as || col.columnid)+':p[\''+(tbid)+'\'][\''+col.columnid+'\']');

				if(query.aliases[tbid] && query.aliases[tbid].type == 'table') {

					if(!query.database.tables[query.aliases[tbid].tableid]) {
						throw new Error('Table \''+(tbid)+'\' does not exists in database');
					}
					var xcolumns = query.database.tables[query.aliases[tbid].tableid].xcolumns;
//console.log(xcolumns, col,123);
//					console.log(0);
					if(xcolumns) {
//						console.log(1);
						var tcol = xcolumns[col.columnid];
						var coldef = {
							columnid:col.as || col.columnid, 
							dbtypeid:tcol.dbtypeid, 
							dbsize:tcol.dbsize, 
							dbpecision:tcol.dbprecision,
							dbenum: tcol.dbenum
						};
//						console.log(2);
						query.columns.push(coldef);
						query.xcolumns[coldef.columnid]=coldef;
					} else {
						query.dirtyColumns = true;
					}
				} else {
					// This is a subquery? 
					// throw new Error('There is now such table \''+col.tableid+'\'');
				};

			}
		} else if(col instanceof yy.AggrValue) {
			if(!self.group) {
//				self.group=[new yy.Column({columnid:'q',as:'q'	})];
				self.group = [''];
			}
			if(!col.as) col.as = escapeq(col.toString());
			if (col.aggregatorid == 'SUM' || col.aggregatorid == 'MAX' ||  col.aggregatorid == 'MIN' ||
				col.aggregatorid == 'FIRST' || col.aggregatorid == 'LAST' ||  col.aggregatorid == 'AVG'
				) {
				ss.push("'"+escapeq(col.as)+'\':'+col.expression.toJavaScript("p",query.defaultTableid,query.defcols))	
			} else if (col.aggregatorid == 'COUNT') {
				ss.push("'"+escapeq(col.as)+"':1");
				// Nothing
			} 
//			else if (col.aggregatorid == 'MAX') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			} else if (col.aggregatorid == 'MIN') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			}
		} else {
			ss.push('\''+escapeq(col.as || col.columnid || col.toString())+'\':'+col.toJavaScript("p",query.defaultTableid,query.defcols));
//			ss.push('\''+escapeq(col.toString())+'\':'+col.toJavaScript("p",query.defaultTableid));
			//if(col instanceof yy.Expression) {
		}
	});
	s += ss.join(',')+'};'+sp;
//	console.log(s);
	query.selectfns = s;
	return new Function('p,params,alasql',s+'return r');
};

yy.Select.prototype.compileWhere = function(query) {
	if(this.where) {
		s = this.where.toJavaScript('p',query.defaultTableid,query.defcols);
		query.wherefns = s;
//		console.log(s);
		return new Function('p,params,alasql','return '+s);
	} else return function(){return true};
};

yy.Select.prototype.compileWhereJoins = function(query) {
//	console.log(this.where);
	optimizeWhereJoin(query, this.where.expression);

	//for sources compile wherefs
	query.sources.forEach(function(source) {
		if(source.srcwherefns) {
			source.srcwherefn = new Function('p,params,alasql','return '+source.srcwherefns);
		};
		if(source.wxleftfns) {
			source.wxleftfn = new Function('p,params,alasql','return '+source.wxleftfns);
		};
		if(source.wxrightfns) {
			source.wxrightfn = new Function('p,params,alasql','return '+source.wxrightfns);
		};
//		console.log(source.alias, source.wherefns)
//		console.log(source);
	});
};

function optimizeWhereJoin (query, ast) {
	if(!ast) return false;
	var s = ast.toJavaScript('p',query.defaultTableid,query.defcols);
	var fsrc = [];
	query.sources.forEach(function(source,idx) {
		// Optimization allowed only for tables only
		if(source.tableid) {
			// This is a good place to remove all unnecessary optimizations
			if(s.indexOf('p[\''+source.alias+'\']')>-1) fsrc.push(source);
		};
	});
//	console.log(ast);
//	console.log(s);
//	console.log(fsrc.length);
	if(fsrc.length == 0) {
//		console.log('no optimization, can remove this part of ast');
		return;
	} else if (fsrc.length == 1) {

		if(!(s.match(/p\[\'.*?\'\]/g)||[])
			.every(function(s){ 
						return s == "p['"+fsrc[0].alias+"']"})) { 
			return; 
			// This is means, that we have column from parent query
			// So we return without optimization
		} 

		var src = fsrc[0]; // optmiization source
		src.srcwherefns = src.srcwherefns ? src.srcwherefns+'&&'+s : s;

		if((ast instanceof yy.Op) && (ast.op == '=' && !ast.allsome)) {
			if(ast.left instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = ast.right.toJavaScript('p',query.defaultTableid,query.defcols);
				if(rs.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = ls; 
					fsrc[0].wxrightfns = rs; 
				} 
			} if(ast.right instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = ast.right.toJavaScript('p',query.defaultTableid,query.defcols);
				if(ls.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = rs; 
					fsrc[0].wxrightfns = ls; 
				} 
			}
		}
		ast.reduced = true;  // To do not duplicate wherefn and srcwherefn
		return;
	} else {
		if(ast.op = 'AND') {
			optimizeWhereJoin(query,ast.left);
			optimizeWhereJoin(query,ast.right);
		} 
	}

};


yy.Select.prototype.compileOrder = function (query) {
	if(this.order) {
		var s = '';
		var sk = '';
		this.order.forEach(function(ord){
			var columnid = ord.expression.columnid; 
			
			// Date conversion
			var dg = ''; 
			if(query.xcolumns[columnid]) {
				var dbtypeid = query.xcolumns[columnid].dbtypeid;
				if( dbtypeid == 'DATE' || dbtypeid == 'DATETIME') dg = '.valueOf()';
				// TODO Add other types mapping
			} else {
				if(alasql.options.valueof) dg = '.valueOf()'; // TODO Check
			}
			
			// COLLATE NOCASE
			if(ord.nocase) columnid += '.toUpperCase()';

			// TODO Add date comparision
			s += 'if(a[\''+columnid+"']"+dg+(ord.direction == 'ASC'?'>':'<')+'b[\''+columnid+"']"+dg+')return 1;';
			s += 'if(a[\''+columnid+"']"+dg+'==b[\''+columnid+"']"+dg+'){';
			sk += '}';
		});
		s += 'return 0;';
		s += sk+'return -1';
		query.orderfns = s;

		return new Function('a,b',s);
	};
};



/*
//
// ROLLUP(), CUBE(), GROUPING SETS() for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Calculate ROLLUP() combination

var rollup = function (a) {
	var rr = [];
	var mask = 0;
	var glen = a.length;
	for(var g=0;g<glen+1;g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(mask&(1<<i)) ss.push(a[i]);
		}
		rr.push(ss);
		mask = (mask<<1)+1; 
	};
	return rr;
};

// Calculate CUBE()
var cube = function (a) {
	var rr = [];
	var glen = a.length;
	for(var g=0;g<(1<<glen);g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(g&(1<<i)) //ss.push(a[i]);
				//ss = cartes(ss,decartes(a[i]));
				ss = ss.concat(decartes(a[i]));
				//
		}
		rr.push(ss);
	}
	return rr;
}

// GROUPING SETS()
var groupingsets = function(a) {
	return a.reduce(function(acc,d){
		acc = acc.concat(decartes(d));
		return acc;
	}, []);
}

// Cartesian production
var cartes = function(a1,a2){
	var rrr =[];
	for(var i1=0;i1<a1.length;i1++) {
		for(var i2=0;i2<a2.length;i2++) {
			rrr.push(a1[i1].concat(a2[i2]));
		}
	};
	return rrr;
}

// Prepare function
function decartes(gv) {
//	console.log(gv);
	if(gv instanceof Array) {
		var res = [[]];
		for(var t=0; t<gv.length; t++) {
			if(gv[t] instanceof yy.Column) {
		 		res = res.map(function(r){return r.concat(gv[t].columnid)}); 	
			} else if(gv[t] instanceof yy.GroupExpression) {
				if(gv[t].type == 'ROLLUP') res = cartes(res,rollup(gv[t].group));
				else if(gv[t].type == 'CUBE') res = cartes(res,cube(gv[t].group));
				else if(gv[t].type == 'GROUPING SETS') res = cartes(res,groupingsets(gv[t].group));
			} else {
//				res = res.concat(gv[t]);
			};

			// switch(gv[t].t) {
			// 	case 'plain': 
			// 		res = res.map(function(r){return r.concat(gv[t].p)}); 

			// 	break; 
			// 	case 'rollup': res = cartes(res,rollup(gv[t].p)); break; 
			// 	case 'cube': res = cartes(res,cube(gv[t].p)); break; 
			// 	case 'groupingsets': res = cartes(res,groupingsets(gv[t].p)); break; 
			// 	default: res = res.concat(gv[t]);
			// }
		}
		return res;
	} else {
		if(gv instanceof yy.Column) return [gv.columnid];

		// switch(gv.t) {
		// 	case 'plain': return gv.p; break;
		// 	case 'rollup': return rollup(gv.p); break; 
		// 	case 'cube': return cube(gv.p); break; 
		// 	case 'groupingsets':  return groupingsets(gv.p); break; 
		// 	default: return [gv];//return decartes(gv.p);
		// }
		// return gv;
	}
}


/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Select.prototype.compileDefCols = function(query, databaseid) {
//	console.log('defcols');
	var defcols = {};
	if(this.from) {
		this.from.forEach(function(fr){
			if(fr instanceof yy.Table) {
				var alias = fr.as || fr.tableid;
				var table = alasql.databases[fr.databaseid || databaseid].tables[fr.tableid];
				if(table.columns) {
					table.columns.forEach(function(col){
						if(defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if(fr instanceof yy.Select) {

			} else if(fr instanceof yy.ParamValue) {

			} else {
				throw new Error('Unknown type of FROM clause');
			};
		});
	};

	if(this.joins) {
		this.joins.forEach(function(jn){
//			console.log(jn);
			var alias = jn.table.tableid;
			if(jn.as) alias = jn.as;
			if(jn.table) {
				var alias = jn.as || jn.table.tableid;
				var table = alasql.databases[jn.databaseid || databaseid].tables[jn.table.tableid];
//				console.log(jn.table.tableid);
				if(table.columns) {
					table.columns.forEach(function(col){
						if(defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if(jn.select) {

			} else if(jn.param) {

			} else {
				throw new Error('Unknown type of FROM clause');
			};
		});
	};
	// for(var k in defcols) {
	// 	if(defcols[k] == '-') defcols[k] = undefined;
	// }
//	console.log(defcols);
	return defcols;
}

/*
//
// UNION for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT UNION statement

yy.Union = function (params) { return yy.extend(this, params); }
yy.Union.prototype.toString = function () {
	return "UNION";
};

yy.Union.prototype.compile = function (tableid) {
	return null;
};

/*
//
// Expressions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExpressionStatement = function(params) { return yy.extend(this, params); };
yy.ExpressionStatement.prototype.toString = function() {
	return this.expression.toString();
};

yy.ExpressionStatement.prototype.execute = function (databaseid, params) {
	if(this.expression) {
		var expr =  new Function("params",'return '+this.expression.toJavaScript('','', null));
		return expr(params);
	}
}

yy.Expression = function(params) { return yy.extend(this, params); };
yy.Expression.prototype.toString = function() {
	return this.expression.toString();
};
yy.Expression.prototype.toJavaScript = function(context, tableid, defcols) {
//	console.log('Expression',this);
	if(this.expression.reduced) return 'true';
	return this.expression.toJavaScript(context, tableid, defcols);
};
yy.Expression.prototype.compile = function(context, tableid, defcols){
//	console.log('Expression',this);
	if(this.reduced) return returnTrue();
	return new Function('p','return '+this.toJavaScript(context, tableid, defcols));
};




yy.Literal = function (params) { return yy.extend(this, params); }
yy.Literal.prototype.toString = function() {
	var s = this.value;
	if(this.value1) s = this.value1+'.'+s; 
//	else s = tableid+'.'+s;
	return s;
}


yy.Join = function (params) { return yy.extend(this, params); }
yy.Join.prototype.toString = function() {
	return 'JOIN'+this.table.toString();
}
//yy.Join.prototype.toJavaScript = function(context, tableid) {
//	return 'JOIN'+this.table.toString();
//}


yy.Table = function (params) { return yy.extend(this, params); }
yy.Table.prototype.toString = function() {
	var s = this.tableid;
//	if(this.joinmode)
	if(this.databaseid) s = this.databaseid+'.'+s;
	return s;
};


yy.View = function (params) { return yy.extend(this, params); }
yy.View.prototype.toString = function() {
	var s = this.viewid;
//	if(this.joinmode)
	if(this.databaseid) s = this.databaseid+'.'+s;
	return s;
};


yy.Op = function (params) { return yy.extend(this, params); }
yy.Op.prototype.toString = function() {
	if(this.op == 'IN' || this.op == 'NOT IN') {
		return this.left.toString()+" "+this.op+" ("+this.right.toString()+")";
	}
	if(this.allsome) {
		return this.left.toString()+" "+this.op+" "+this.allsome+' ('+this.right.toString()+')';
	}
	return this.left.toString()+" "+this.op+" "+(this.allsome?this.allsome+' ':'')+this.right.toString();
};

yy.Op.prototype.toType = function(tableid) {
	if(['-','*','/','%'].indexOf(this.op) >-1) return 'number';
	if(this.op == '+') {
		if(this.left.toType(tableid) == 'string' || this.right.toType(tableid) == 'string') return 'string';
		if(this.left.toType(tableid) == 'number' || this.right.toType(tableid) == 'number') return 'number';
	};
	if(['AND','OR','NOT','=','!=','>','>=','<','<=', 'IN', 'NOT IN', 'LIKE'].indexOf(this.op) >-1 ) return 'boolean';
	if(this.op == 'BETWEEN' || this.op == 'NOT BETWEEN') return 'boolean';
	if(this.allsome) return 'boolean';
	if(!this.op) return this.left.toType();

	return 'unknown';
};

yy.Op.prototype.toJavaScript = function(context,tableid,defcols) {
//	console.log(this);
	var op = this.op;
	if(this.op == '=') op = '===';
	else if(this.op == '<>') op = '!=';
	else if(this.op == 'OR') op = '||';

	if(this.op == 'LIKE') {
		var s = "("+this.left.toJavaScript(context,tableid, defcols)+")"+
		".match(new RegExp('^'+("+this.right.toJavaScript(context,tableid, defcols)+").replace(/\\\%/g,'.*')+'$','g'))"
//		console.log(s);
		return s;
	};

	if(this.op == 'BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '(('+this.right.left.toJavaScript(context,tableid, defcols)+'<='+this.left.toJavaScript(context,tableid, defcols)+')&&'+
			'('+this.left.toJavaScript(context,tableid, defcols)+'<='+this.right.right.toJavaScript(context,tableid, defcols)+'))';		
		} else {
			throw new Error('Wrong BETWEEM operator without AND part');
		}
	};

	if(this.op == 'NOT BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '!(('+this.right.left.toJavaScript(context,tableid, defcols)+'<='+this.left.toJavaScript(context,tableid, defcols)+')&&'+
			'('+this.left.toJavaScript(context,tableid, defcols)+'<='+this.right.right.toJavaScript(context,tableid, defcols)+'))';		
		} else {
			throw new Error('Wrong NOT BETWEEM operator without AND part');
		}
	};

	if(this.op == 'IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')>-1)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')>-1)';
			return s;
		} else {
			throw new Error('Wrong IN operator without SELECT part');
		}
	};


	if(this.op == 'NOT IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')<0)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')<0)';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}
	};

	if(this.allsome == 'ALL') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.queriesdata['+this.queriesidx+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

	if(this.allsome == 'SOME' || this.allsome == 'ANY') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.queriesdata['+this.queriesidx+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

// Special case for AND optimization (if reduced)
	if(this.op == 'AND') {
		if(this.left.reduced) {
			if(this.right.reduced) {
				return 'true';
			} else {
				return this.right.toJavaScript(context,tableid, defcols);
			}
		} else if(this.right.reduced) {
			return this.left.toJavaScript(context,tableid, defcols);
		}			

		// Otherwise process as regular operation (see below)
		op = '&&';

	}


	// Change names
//	console.log(this);
	return '('+this.left.toJavaScript(context,tableid, defcols)+op+this.right.toJavaScript(context,tableid, defcols)+')';
};




yy.NumValue = function (params) { return yy.extend(this, params); }
yy.NumValue.prototype.toString = function() {
	return this.value.toString();
};

yy.NumValue.prototype.toType = function() {
	return 'number';
};

yy.NumValue.prototype.toJavaScript = function() {
	return ""+this.value;
}


yy.StringValue = function (params) { return yy.extend(this, params); }
yy.StringValue.prototype.toString = function() {
	return "'"+this.value.toString()+"'";
}

yy.StringValue.prototype.toType = function() {
	return 'string';
}

yy.StringValue.prototype.toJavaScript = function() {
//	console.log("'"+doubleqq(this.value)+"'");
//	return "'"+doubleqq(this.value)+"'";
	return "'"+escapeq(this.value)+"'";

}


yy.LogicValue = function (params) { return yy.extend(this, params); }
yy.LogicValue.prototype.toString = function() {
	return this.value?'TRUE':'FALSE';
}

yy.LogicValue.prototype.toType = function() {
	return 'boolean';
}

yy.LogicValue.prototype.toJavaScript = function() {
	return this.value?'true':'false';
}

yy.NullValue = function (params) { return yy.extend(this, params); }
yy.NullValue.prototype.toString = function() {
	return 'NULL';
}
yy.NullValue.prototype.toJavaScript = function() {
	return 'null';
}

yy.ParamValue = function (params) { return yy.extend(this, params); }
yy.ParamValue.prototype.toString = function() {
	return '$'+this.param;
}
yy.ParamValue.prototype.toJavaScript = function() {
	if(typeof this.param == "string") return "params[\'"+this.param+"\']";
	else return "params["+this.param+"]";
}



yy.UniOp = function (params) { return yy.extend(this, params); }
yy.UniOp.prototype.toString = function() {
	if(this.op == '-') return this.op+this.right.toString();
	if(this.op == 'NOT') return this.op+'('+this.right.toString()+')';
	else if(this.op == null) return '('+this.right.toString()+')';
};

yy.UniOp.prototype.toType = function(tableid) {
	if(this.op == '-') return 'number';
	if(this.op == 'NOT') return 'boolean';
};

yy.UniOp.prototype.toJavaScript = function(context, tableid, defcols) {
	if(this.op == '-') return "-"+this.right.toJavaScript(context, tableid, defcols);
	if(this.op == 'NOT') return '!('+this.right.toJavaScript(context, tableid, defcols)+')';
	else if(this.op == null) return '('+this.right.toJavaScript(context, tableid, defcols)+')';
};



// yy.Star = function (params) { return yy.extend(this, params); }
// yy.Star.prototype.toString = function() {
// 	var s = this.fieldid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// 		if(this.databaseid) {
// 			s = this.databaseid+'.'+s;
// 		}
// 	}
// 	if(this.alias) s += ' AS '+this.alias;
// 	return s;
// }

yy.Column = function(params) { return yy.extend(this, params); }
yy.Column.prototype.toString = function() {
	var s;
	if(this.columnid == +this.columnid) {
		s = '['+this.columnid+']';
	} else {
		s = this.columnid;
	}
	if(this.tableid) {
		if(+this.columnid == this.columnid) {
			s = this.tableid+s;
		} else {
			s = this.tableid+'.'+s;
		}
		if(this.databaseid) {
			s = this.databaseid+'.'+s;
		}
	}
//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

yy.Column.prototype.toJavaScript = function(context, tableid, defcols) {
//	var s = this.value;
// 	var s = this.columnid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// //		if(this.databaseid) {
// //			s = this.databaseid+'.'+s;
// //		}
// 	} else {
// 		s = tableid+'.'+s;
// 	}
//console.log('yy.Column',this, tableid);
	var s = '';
	if(!this.tableid && tableid == '' && !defcols) {
		s = context+'[\''+this.columnid+'\']';
	} else {
		if(this.tableid) {
			s = context+'[\''+(this.tableid) + '\'][\''+this.columnid+'\']';			
		} else if(defcols) {
			var tbid = defcols[this.columnid];
			if(tbid == '-') {
				throw new Error('Cannot resolve column "'+this.columnid+'" because it exists in two source tables');
			} else if(tbid) {
				s = context+'[\''+(tbid) + '\'][\''+this.columnid+'\']';
			} else {
				s = context+'[\''+(this.tableid || tableid) + '\'][\''+this.columnid+'\']';
			}
		} else {
			s = context+'[\''+(this.tableid || tableid) + '\'][\''+this.columnid+'\']';
		}
	}
//	console.log(context,s);
//	console.trace(new Error());
	return s;
}




yy.AggrValue = function(params){ return yy.extend(this, params); }
yy.AggrValue.prototype.toString = function() {
	var s = this.aggregatorid+'(';
	if(this.expression) s += this.expression.toString();
	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

yy.AggrValue.prototype.toType = function() {
	if(['SUM','COUNT','AVG','MIN', 'MAX'].indexOf(this.aggregatorid)>-1) return 'number';
	if(['FIRST','LAST' ].indexOf(this.aggregatorid)>-1) return this.expression.toType();
}
yy.AggrValue.prototype.toJavaScript = function(context, tableid, defcols) {
//	var s = 'alasql.functions.'+this.funcid+'(';
//	if(this.expression) s += this.expression.toJavaScript(context, tableid);
//	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
//	return s;
	return '';
}


yy.OrderExpression = function(params){ return yy.extend(this, params); }
yy.OrderExpression.prototype.toString = function() {
	var s = this.expression.toString();
	if(this.order) s += ' '+this.order.toString();
	return s;
}

yy.GroupExpression = function(params){ return yy.extend(this, params); }
yy.GroupExpression.prototype.toString = function() {
	return this.type+'('+this.group.toString()+')';
}


yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}


/*
//
// Functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.FuncValue = function(params){ return yy.extend(this, params); }
yy.FuncValue.prototype.toString = function() {
	var s = '';
    if(alasql.stdlib[this.funcid]) s += this.funcid.toUpperCase();
    else s += this.funcid;
    
    s += '(';
	if(this.args && this.args.length > 0) {
		s += this.args.map(function(arg){
			return arg.toString();
		}).join(',');
	};
	s += ')';
	if(this.as) s += ' AS '+this.as.toString();
//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

yy.FuncValue.prototype.toJavaScript = function(context, tableid, defcols) {
	var s = '';
    var funcid = this.funcid;
	// IF this is standard compile functions
	if(alasql.stdlib[funcid.toUpperCase()]) {
		if(this.args && this.args.length > 0) {
			s += alasql.stdlib[funcid.toUpperCase()].apply(this, this.args.map(function(arg) {return arg.toJavaScript(context, tableid)}));
		} else {
			s += alasql.stdlib[funcid.toUpperCase()]();
		}
	} else {
	// This is user-defined run-time function
	// TODO arguments!!!
		var s = 'alasql.fn.'+this.funcid+'(';
//		if(this.args) s += this.args.toJavaScript(context, tableid);
		s += this.args.map(function(arg){
			return arg.toJavaScript(context, tableid, defcols);
		}).join(',');
		s += ')';
	}
//console.log('userfn:',s,this);

//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

// // Functions compiler
// nodes.FunctionValue.prototype.toJavaScript = function (context, tableid) {
// 	var s = '';
// 	s += fns[this.name.toUpperCase()].apply(null,this.arguments.map(function(arg){
// 		if(arg) return arg.toJavaScript(context, tableid);
// 		else return '';
// 	}));
// 	return s;
// };

// 
// SQL FUNCTIONS COMPILERS
// Based on SQLite functions

// IMPORTANT: These are compiled functions

alasql.fn = {}; // Keep for compatibility
//alasql.userlib = alasql.fn; 

var stdlib = alasql.stdlib = {}

stdlib.ABS = function(a) {return 'Math.abs('+a+')'};
stdlib.IIF = function(a,b,c) {
	if(arguments.length == 3) {
		return  '(('+a+')?('+b+'):('+c+'))';
	} else {
		throw new Error('Number of arguments of IFF is not equals to 3');
	};
};
stdlib.IFNULL = function(a,b) {return '('+a+'||'+b+')'};
stdlib.INSTR = function(s,p) {return '(('+s+').indexOf('+p+')+1)'};

stdlib.LEN = function(s) {return '('+s+').length';};
stdlib.LENGTH = function(s) {return '('+s+').length'};

stdlib.LOWER = function(s) {return '('+s+').toLowerCase()';}
stdlib.LCASE = function(s) {return '('+s+').toLowerCase()';}


// LTRIM
stdlib.MAX = function(){return 'Math.max('+arguments.join(',')+')'};
stdlib.MIN = function(){return 'Math.min('+arguments.join(',')+')'};
stdlib.MID = function(a,b,c){
	if(arguments.length == 2) return '('+a+').substr('+b+'-1)';
	else if(arguments.length == 3) return '('+a+').substr('+b+'-1,'+c+')';
};

stdlib.NOW = function(){return '(new Date())';};
stdlib.NULLIF = function(a,b){return '('+a+'=='+b+'?null:'+a+')'};

stdlib.RANDOM = function(r) {
	if(arguments.length == 0) {
		return 'Math.random()';
	} else {
		return '(Math.random()*('+r+')|0)';
	}
}
stdlib.ROUND = function(s,d) {
	if(arguments.length == 2) {
		return 'Math.round('+s+'*Math.pow(10,'+d+'))/Math.pow(10,'+d+')';
	} else {
		return 'Math.round('+s+')';
	}
}
stdlib.UPPER = function(s) {return '('+s+').toUpperCase()';}
stdlib.UCASE = function(s) {return '('+s+').toUpperCase()';}
//REPLACE
// RTRIM
// SUBSTR
// TRIM
//REPLACE
// RTRIM
// SUBSTR
// TRIM


// 
//
// SQL and JS DateTime functions
//
//



/*
//
// CASE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CaseValue = function(params) { return yy.extend(this, params); };
yy.CaseValue.prototype.toString = function() {
	var s = 'CASE ';
	if(this.expression) s += this.expression.toString();
	if(this.whens) {
		s += this.whens.map(function(w) { return ' WHEN '+
			w.when.toString() + ' THEN '+w.then.toString()}).join();
	}
	s += ' END';
	return s;
};
yy.CaseValue.prototype.toJavaScript = function(context, tableid, defcols) {

	var s = '(function(p,params,alasql){var r;';
	if(this.expression) {
//			this.expression.toJavaScript(context, tableid)
		s += 'v='+this.expression.toJavaScript(context, tableid, defcols)+';';
		s += (this.whens||[]).map(function(w) { return ' if(v=='+w.when.toJavaScript(context,tableid, defcols)
			+') {r='+w.then.toJavaScript(context,tableid, defcols)+'}'; }).join(' else ');
		if(this.elses) s += ' else {r='+this.elses.toJavaScript(context,tableid, defcols)+'}';
	} else {
		s += (this.whens||[]).map(function(w) { return ' if('+w.when.toJavaScript(context,tableid, defcols)
			+') {r='+w.then.toJavaScript(context,tableid, defcols)+'}'; }).join(' else ');
		if(this.elses) s += ' else {r='+this.elses.toJavaScript(context,tableid,defcols)+'}';
	}
	s += 'return r;})(p,params,alasql)';

	return s;
};

/*
//
// CAST and CONVERT functions
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Cast = function(params) { return yy.extend(this, params); };
yy.Cast.prototype.toString = function() {
	var s = 'CAST(';
	s += this.expression.toString();
	s += ' AS ';
	s += this.dbtypeid;
	if(typeof this.dbsize != 'undefined') {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+dbprecision;
		s += ')';
	}
	s += ')';
	return s;
};
yy.Cast.prototype.toJavaScript = function(context, tableid, defcols) {

	if(this.dbtypeid == 'INT') {
		return '(('+this.expression.toJavaScript(context, tableid, defcols)+')|0)';
	} if(this.dbtypeid == 'STRING') {
		return '(""+'+this.expression.toJavaScript(context, tableid, defcols)+')';
	} if(this.dbtypeid == 'NUMBER') {
		return '(+('+this.expression.toJavaScript(context, tableid, defcols)+'))';
	} if(this.dbtypeid == 'DATE') {
		if(alasql.options.datetimeformat == 'javascript') {
			return '(new Date('+this.expression.toJavaScript(context, tableid, defcols)+'))';
		} else if(alasql.options.datetimeformat == 'sql') {
			return this.expression.toJavaScript(context, tableid, defcols);
		}
	} if(this.dbtypeid == 'DATETIME') {
		if(alasql.options.datetimeformat == 'javascript') {
			return '(new Date('+this.expression.toJavaScript(context, tableid, defcols)+'))';
		} else if(alasql.options.datetimeformat == 'sql') {
			return this.expression.toJavaScript(context, tableid, defcols);
		}
	} else {

	};

	throw new Error('There is not such type conversion for '+this.toString());
};

/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}

yy.CreateTable = function (params) { return yy.extend(this, params); }
yy.CreateTable.prototype.toString = function() {
	var s = 'CREATE';
	if(this.temporary) s+=' TEMPORARY';
	s += ' TABLE';
	if(this.ifnotexists) s += ' IF NOT EXISTS';
	s += ' '+this.table.toString();
	if(this.as) s += ' AS '+this.as;
	else { 
		var ss = this.columns.map(function(col){
			return col.toString();
		});
		s += ' ('+ss.join(',')+')';
	}
	return s;
}

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.CreateTable.prototype.execute = function (databaseid) {
//	var self = this;
	var db = alasql.databases[databaseid];

	var tableid = this.table.tableid;
	if(!tableid) {
		throw new Error('Table name is not defined');
	}
//	var ifnotexists = this.ifnotexists;
	var columns = this.columns;
	if(!columns) {
		throw new Error('Columns are not defined');
	}
	var constraints = this.constraints||[];
//	console.log(this);

	// IF NOT EXISTS
	if(this.ifnotexists && db.tables[tableid]) return 0;

	if(db.tables[tableid]) {
		throw new Error('Can not create table \''+tableid
			+'\', because it already exists in the database \''+db.databaseid+'\'');
	}

	var table = db.tables[tableid] = new alasql.Table(); // TODO Can use special object?
	table.defaultfns = '';

	this.columns.forEach(function(col) {
		var newcol = {
			columnid: col.columnid,
			dbtypeid: col.dbtypeid // TODO: Add types table
		};

		if(col.default) {
			table.defaultfns += '\''+col.columnid+'\':'+col.default.toJavaScript()+',';
		}

		table.columns.push(newcol);
		table.xcolumns[newcol.columnid] = newcol;

		// Check for primary key
		if(col.primarykey) {
			var pk = table.pk = {};
			pk.columns = [col.columnid];
			pk.onrightfns = 'r[\''+col.columnid+'\']';
			pk.onrightfn = new Function("r",'return '+pk.onrightfns);
			pk.hh = hash(pk.onrightfns);
			table.indices[pk.hh] = {};
		};

	});


	constraints.forEach(function(con) {
		//console.log(con, con.columns);
		if(con.type == 'PRIMARY KEY') {
			if(table.pk) {
				throw new Error('Primary key already exists');
			}
			var pk = table.pk = {};
			pk.columns = con.columns;
			pk.onrightfns = pk.columns.map(function(columnid){
				return 'r[\''+columnid+'\']'
			}).join("+'`'+");
			pk.onrightfn = new Function("r",'return '+pk.onrightfns);
			pk.hh = hash(pk.onrightfns);
			table.indices[pk.hh] = {};					
		}
	});

//			if(table.pk) {
	table.insert = function(r) {
		if(this.pk) {
			var pk = this.pk;
			var addr = pk.onrightfn(r);
			if(typeof this.indices[pk.hh][addr] != 'undefined') {
				throw new Error('Cannot insert record, because it already exists in primary key');
			} else {
				table.data.push(r);
				this.indices[pk.hh][addr]=r;
			};
		} else {
			table.data.push(r);						
		}
	};

	table.delete = function(i) {
		if(this.pk) {
			var r = this.data[i];
			var pk = this.pk;
			var addr = pk.onrightfn(r);
			if(typeof this.indices[pk.hh][addr] == 'undefined') {
				throw new Error('Something wrong with index on table');
			} else {
				this.indices[pk.hh][addr]=undefined;
			};
		}
	};

	table.deleteall = function() {
		this.data.length = 0;
		if(this.pk) {
//						var r = this.data[i];
			this.indices[this.pk.hh] = {};
		}
	};

	table.update = function(assignfn, i, params) {
		if(this.pk) {
			var r = this.data[i];
			var pk = this.pk;
			var addr = pk.onrightfn(r,params);
			if(typeof this.indices[pk.hh][addr] == 'undefined') {
				throw new Error('Something wrong with index on table');
			} else {
				this.indices[pk.hh][addr]=undefined;
				assignfn(r);
				var newaddr = pk.onrightfn(r);
				if(typeof this.indices[pk.hh][newaddr] != 'undefined') {
					throw new Error('Record already exists');
				} else {
					this.indices[pk.hh][newaddr] = r;
				}
			} 

		} else {
			assignfn(this.data[i]);
		};

	};
//	console.log(databaseid);
//	console.log(db.databaseid,db.tables);
//	console.log(table);

	return 1;
};




/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropTable = function (params) { return yy.extend(this, params); }
yy.DropTable.prototype.toString = function() {
	var s = 'DROP TABLE';
	if(this.ifexists) s += ' IF EXISTS';
	s += ' '+this.table.toString();
	return s;
}


// DROP TABLE
yy.DropTable.prototype.execute = function (databaseid) {
	var db = alasql.databases[databaseid];
	var tableid = this.table.tableid;
	if(!this.ifexists || this.ifexists && db.tables[tableid]) {
		if(!db.tables[tableid]) {
			if(!alasql.options.dropifnotexists) {
				throw new Error('Can not drop table \''+this.table.tableid+'\', because it does not exist in the database.');
			}
		} else {
			delete db.tables[tableid];
			return 1;
		}
	}
	return 0;
};


/*
//
// ALTER TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// ALTER TABLE table1 RENAME TO table2
yy.AlterTable = function (params) { return yy.extend(this, params); }
yy.AlterTable.prototype.toString = function() {
	var s = 'ALTER TABLE '+this.table.toString(); 
	if(this.renameto) s += ' RENAME TO '+this.renameto;
	return s;
}

yy.AlterTable.prototype.execute = function (databaseid, params, cb) {
	var db = alasql.databases[databaseid];
	db.dbversion = Date.now();

	if(this.renameto) {
		var oldtableid = this.table.tableid;
		var newtableid = this.renameto;
			var res = 1;
			if(db.tables[newtableid]) {
				throw new Error("Can not rename a table '"+oldtableid+"' to '"
					+newtableid+"', because the table with this name already exists");
			} else if(newtableid == oldtableid) {
				throw new Error("Can not rename a table '"+oldtableid+"' to itself");
			} else {
				db.tables[newtableid] = db.tables[oldtableid];
				delete db.tables[oldtableid];
				res = 1;
			};
			if(cb) cb(res)
			return res;
	} else if(this.addcolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.addcolumn.columnid;
		if(table.xcolumns[columnid]) {
			throw new Error('Cannot add column "'+columnid+'", because it already exists in the table "'+tableid+'"');
		}

		var col = {
			columnid:columnid,
			dbtypeid:this.dbtypeid,
			dbsize:this.dbsize,
			dbprecision:this.dbprecision,
			dbenum:this.dbenum,
			defaultfns: null // TODO defaultfns!!!
		};

		var defaultfn = function(){};

		table.columns.push(col);
		table.xcolumns[columnid] = col;

		for(var i=0, ilen=table.data.length; i<ilen; i++) {
//				console.log(table.data[i][columnid]);
			table.data[i][columnid] = defaultfn();
		}

		// TODO
		return 1;
	} else if(this.modifycolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.modifycolumn.columnid;

		if(!table.xcolumns[columnid]) {
			throw new Error('Cannot modify column "'+columnid+'", because it was not found in the table "'+tableid+'"');
		}

		var col = table.xcolumns[columnid];
		col.dbtypeid = this.dbtypeid;
		col.dbsize = this.dbsize;
		col.dbprecision = this.dbprecision;
		col.dbenum = this.dbenum;


		// TODO
		return 1;
	} else if(this.renamecolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;

		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.renamecolumn;
		var tocolumnid = this.to;

		var col;
		if(!table.xcolumns[columnid]) {
			throw new Error('Column "'+columnid+'" is not found in the table "'+tableid+'"');
		}
		if(table.xcolumns[tocolumnid]) {
			throw new Error('Column "'+tocolumnid+'" already exists in the table "'+tableid+'"');
		}

		if(columnid != tocolumnid) {
			for(var j=0; j<table.columns.length; j++) {
				if(table.columns[j].columnid == columnid) {
					table.columns[j].columnid = tocolumnid;
				}
			};

			table.xcolumns[tocolumnid]=table.xcolumns[columnid];
			delete table.xcolumns[columnid];

			for(var i=0, ilen=table.data.length; i<ilen; i++) {
//				console.log(table.data[i][columnid]);
				table.data[i][tocolumnid] = table.data[i][columnid];
				delete table.data[i][columnid];
			}
			return table.data.length;
		}
		else return 0;
	} else if(this.dropcolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.dropcolumn;

		var found = false;
		for(var j=0; j<table.columns.length; j++) {
			if(table.columns[j].columnid == columnid) {
				found = true;
				table.columns.splice(j,1);
				break;
			}
		};

		if(!found) {
			throw new Error('Cannot drop column "'+columnid+'", because it was not found in the table "'+tableid+'"');
		}

		delete table.xcolumns[columnid];

		for(var i=0, ilen=table.data.length; i<ilen; i++) {
			delete table.data[i][columnid];
		}
		return table.data.length;
	} else {
		throw Error('Unknown ALTER TABLE method');
	}

};



/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CreateIndex = function (params) { return yy.extend(this, params); }
yy.CreateTable.prototype.toString = function() {
	var s = 'CREATE';
	if(this.unique) s+=' UNIQUE';
	s += ' INDEX ' + this.indexid + " ON "+this.table.toString();
	s += "("+this.columns.toString()+")";
	return s;
}

// CREATE TABLE
yy.CreateIndex.prototype.execute = function (databaseid) {
//	var self = this;
	var db = alasql.databases[databaseid];
	var tableid = this.table.tableid;
	var table = db.tables[tableid];
	var indexid = this.indexid;

	if(this.unique) {
		var rightfns = this.columns.map(function(colid){return "r[\'"+colid+"\']"}).join("+'`'+");
		table.uniqdefs[indexid] = {
			rightfns: rightfns
		};
		var ux = table.uniqs[indexid] = {};
		if(table.data.length > 0) {
			for(var i=0, ilen=table.data.length; i<ilen;i++) {
				var addr = rightfns(table.data[i]);
				if(!ux[addr]) {
					ux[addr] = {num:0};
				};
				ux[addr].num++;
			}
		}
	} else {
		var rightfns = this.columns.map(function(colid){return "r[\'"+colid+"\']"}).join("+'`'+");
		var hh = hash(rightfns);
		table.inddefs[indexid] = {rightfns:rightfns, hh:hh};
		table.indices[hh] = {};

		var ix = table.indices[hh] = {};
		if(table.data.length > 0) {
			for(var i=0, ilen=table.data.length; i<ilen;i++) {
				var addr = rightfns(table.data[i]);
				if(!ix[addr]) {
					ix[addr] = [];
				};
				ix[addr].push(table.data[i]);
			}
		}
	};

};




/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropIndex = function (params) { return yy.extend(this, params); }
yy.DropIndex.prototype.toString = function() {
	return 'INDEX TABLE' + this.indexid;
}


// DROP TABLE
yy.DropIndex.prototype.compile = function (db) {
	var indexid = this.indexid;
	return function() {
		return 1;
	}
};


/*
//
// CREATE VIEW for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CreateView = function (params) { return yy.extend(this, params); }
yy.CreateView.prototype.toString = function() {
	var s = 'CREATE VIEW';
	s += ' '+this.view.toString();
	if(this.columns) { 
		var ss = this.columns.map(function(col){
			return col.toString();
		});
		s += ' ('+ss.join(',')+')';
	}
	s += ' AS '+this.select.toString();
	return s;
};

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.CreateView.prototype.execute = function (databaseid) {
//	var self = this;
	var db = alasql.databases[this.view.databaseid || databaseid];
	var v = db.views[this.view.viewid] = new View();

//	console.log(databaseid);
//	console.log(db.databaseid,db.tables);
//	console.log(table);

	return 1;
};




/*
//
// INSERT for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Insert = function (params) { return yy.extend(this, params); }
yy.Insert.prototype.toString = function() {
	var s = 'INSERT INTO '+this.into.toString();
	if(this.columns) s += '('+this.columns.toString()+')';
	if(this.values) s += ' VALUES '+this.values.toString();
	if(this.select) s += ' '+this.select.toString();
	return s;
}

yy.Insert.prototype.compile = function (databaseid) {
	var self = this;
	var db = alasql.databases[databaseid];
//	console.log(self);
	var tableid = self.into.tableid;
	var table = db.tables[tableid];

	// Check, if this dirty flag is required
	var s = '';
//	var s = 'db.tables[\''+tableid+'\'].dirty=true;';


// INSERT INTO table VALUES
	if(this.values) {

		self.values.forEach(function(values) {

//			s += 'db.tables[\''+tableid+'\'].data.push({';

			s += 'var r={';
			var ss = [];
			if(self.columns) {
				self.columns.forEach(function(col, idx){
		//			ss.push(col.columnid +':'+ self.values[idx].value.toString());
		//			console.log(rec[f.name.value]);
		//			if(rec[f.name.value] == "NULL") rec[f.name.value] = undefined;

		//			if(table.xflds[f.name.value].dbtypeid == "INT") rec[f.name.value] = +rec[f.name.value]|0;
		//			else if(table.xflds[f.name.value].dbtypeid == "FLOAT") rec[f.name.value] = +rec[f.name.value];
					var q = col.columnid +':';
					// if(table.xcolumns && table.xcolumns[col.columnid] && 
					// 	( table.xcolumns[col.columnid].dbtypeid == "INT"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "FLOAT"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "NUMBER"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "MONEY"
					// 	)) q += '+';
		//			console.log(self.values[idx].value);
					q += values[idx].toJavaScript();
					// if(table.xcolumns && table.xcolumns[col.columnid] && table.xcolumns[col.columnid].dbtypeid == "INT") q += '|0';
					ss.push(q);

				});
			} else {
				var table = db.tables[tableid];
//	console.log('table1', db, self);
				table.columns.forEach(function(col, idx){
					var q = '\''+col.columnid +'\':';
					var val = values[idx].toJavaScript();

					 if(table.xcolumns && table.xcolumns[col.columnid] && 
					  (table.xcolumns[col.columnid].dbtypeid == "DATE" ||
						table.xcolumns[col.columnid].dbtypeid == "DATETIME"
					  )) {
					 	val = "(new Date("+val+"))";
					 }
					// 		|| table.xcolumns[col.columnid].dbtypeid == "FLOAT"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "NUMBER"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "MONEY"
					// 	)) q += '+';
				//	console.log(self.values[idx].toString());
		//console.log(self);
					q += val;

					// if(table.xcolumns && table.xcolumns[col.columnid] && table.xcolumns[col.columnid].dbtypeid == "INT") q += '|0';
					ss.push(q);

		//			console.log(fld);
					// TODO: type checking and conversions
		//			rec[fld.fldid] = eval(self.insertExpression[idx].toJavaScript('',''));
		//			console.log(rec[fld.fldid]);
		//			if(rec[fld.fldid] == "NULL") rec[fld.fldid] = undefined;

		//			if(table.xflds[fld.fldid].dbtypeid == "INT") rec[fld.fldid] = +rec[fld.fldid]|0;
		//			else if(table.xflds[fld.fldid].dbtypeid == "FLOAT" || table.xflds[fld.fldid].dbtypeid == "MONEY" ) 
		//				rec[fld.fldid] = +rec[fld.fldid];
				});
			}

			if(db.tables[tableid].defaultfns) s += db.tables[tableid].defaultfns;
			s += ss.join(',')+'};';
//			s += 'db.tables[\''+tableid+'\'].insert(r);';
            if(db.tables[tableid].insert) {
    			s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].insert(r);';
            } else {
                s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].data.push(r);';
            }

		});

		s += 'return '+self.values.length;
//console.log(s);
		var insertfn = new Function('db, params',s);
	
// INSERT INTO table SELECT

	} else if(this.select) {
		selectfn = this.select.compile(databaseid);
		var insertfn = function(db, params) {
			var res = selectfn(params);
			db.tables[tableid].data = db.tables[tableid].data.concat(res);
			return res.length;
		}
	} else if(this.default) {
        var insertfn = new Function('db,params','db.tables[\''+tableid+'\'].data.push({'+table.defaultfns+'});return 1;'); 
    } else {
    	throw new Error('Wrong INSERT parameters');
    }

	var statement = function(params, cb) {
		//console.log(databaseid);
		var db = alasql.databases[databaseid];
		var res = insertfn(db, params);
		if(cb) cb(res);
		return res;
	};

	return statement;
};

yy.Insert.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
//	throw new Error('Insert statement is should be compiled')
}





/*
//
// DELETE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Delete = function (params) { return yy.extend(this, params); }
yy.Delete.prototype.toString = function() {
	var s = 'DELETE FROM '+this.table.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}

yy.Delete.prototype.compile = function (databaseid) {
//  console.log(11,this);

	var tableid = this.table.tableid;
	var statement;
			var db = alasql.databases[databaseid];

	if(this.where) {
//		try {
//		console.log(this, 22, this.where.toJavaScript('r',''));
//	} catch(err){console.log(444,err)};
		var wherefn = new Function('r,params','return ('+this.where.toJavaScript('r','')+')');
//		console.log(wherefn);
		statement = function (params, cb) {
			var table = db.tables[tableid];
//			table.dirty = true;
			var orignum = table.data.length;

			var newtable = [];			
			for(var i=0, ilen=table.data.length;i<ilen;i++) {
				if(wherefn(table.data[i],params)) {
					// Check for transaction - if it is not possible then return all back
					if(table.delete) {
						table.delete(i);
					} else {
						// SImply do not push
					}
				} else newtable.push(table.data[i]);
			}
//			table.data = table.data.filter(function(r){return !;});
			table.data = newtable;
//			console.log('deletefn',table.data.length);
			if(cb) cb(orignum - table.data.length);
			return orignum - table.data.length;
		}
	} else {
		statement = function (params, cb) {
			var table = db.tables[tableid];
			table.dirty = true;
			var orignum = db.tables[tableid].data.length;

			table.deleteall();

			if(cb) cb(orignum);
			return orignum;
		};
	};

	return statement;

};

yy.Delete.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
}


/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Update = function (params) { return yy.extend(this, params); }
yy.Update.prototype.toString = function() {
	var s = 'UPDATE '+this.table.toString();
	if(this.columns) s += ' SET '+this.columns.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}


yy.SetColumn = function (params) { return yy.extend(this, params); }
yy.SetColumn.prototype.toString = function() {
	return this.columnid.toString() + '='+this.expression.toString();
}

yy.Update.prototype.compile = function (databaseid) {
//	console.log(this);
	var tableid = this.table.tableid;
	
	if(this.where) {
		var wherefn = new Function('r,params','return '+this.where.toJavaScript('r',''));
	};

	// Construct update function
	var s = '';
	this.columns.forEach(function(col){
		s += 'r[\''+col.columnid+'\']='+col.expression.toJavaScript('r','')+';'; 
	});
	var assignfn = new Function('r,params',s);

	var statement = function(params, cb) {
		var db = alasql.databases[databaseid];
		var table = db.tables[tableid];
		if(!table) {
			throw new Error("Table '"+tableid+"' not exists")
		}
//		table.dirty = true;
		var numrows = 0;
		for(var i=0, ilen=table.data.length; i<ilen; i++) {
			if(!wherefn || wherefn(table.data[i], params) ) {
				if(table.update) {
					table.update(assignfn, i, params);
				} else {
					assignfn(table.data[i], params);
				}
				numrows++;
			}
		};
		if(cb) cb(numrows);
		return numrows;
	};
	return statement;
};

yy.Update.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
}





/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// Modified: 16.11.2014
// (c) 2014, Andrey Gershun
//
*/

// CREATE DATABASE databaseid
yy.CreateDatabase = function (params) { return yy.extend(this, params); };
yy.CreateDatabase.prototype.toString = function() {
	return 'CREATE DATABASE '+this.databaseid;
}
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.CreateDatabase.prototype.execute = function (databaseid) {
	var dbid = this.databaseid;
	if(alasql.databases[dbid]) {
		throw new Error("Database '"+dbid+"' already exists")
	};
	var a = new alasql.Database(dbid);
	return 1;
};

// USE DATABSE databaseid
// USE databaseid
yy.UseDatabase = function (params) { return yy.extend(this, params); };
yy.UseDatabase.prototype.toString = function() {
	return 'USE DATABASE '+this.databaseid;
}
//yy.UseDatabase.prototype.compile = returnUndefined;
yy.UseDatabase.prototype.execute = function (databaseid) {
	var dbid = this.databaseid;
	if(!alasql.databases[dbid]) {
		throw new Error("Database '"+dbid+"' does not exist")
	};
	alasql.use(dbid);
	return 1;
};

// DROP DATABASE databaseid
yy.DropDatabase = function (params) { return yy.extend(this, params); }
yy.DropDatabase.prototype.toString = function() {
	return 'DROP DATABASE '+this.databaseid;
}
//yy.DropDatabase.prototype.compile = returnUndefined;
yy.DropDatabase.prototype.execute = function (db) {
	var dbid = this.databaseid;

	if(dbid == alasql.DEFAULTDATABASEID) {
		throw new Error("Drop of default database is prohibited");			
	}
	if(!alasql.databases[dbid]) {
		throw new Error("Database '"+databaseid+"' does not exist");
	};
	delete alasql.databases[dbid];
	if(dbid == alasql.useid) {
		alasql.use();		
	}
	return 1;
};







/*
//
// SHOW for Alasql.js
// Date: 19.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ShowDatabases = function (params) { return yy.extend(this, params); }
yy.ShowDatabases.prototype.toString = function() {
	var s = 'SHOW DATABASES ';
	if(this.like) s += 'LIKE '+this.like.toString();
	return s;
}
yy.ShowDatabases.prototype.execute = function (databaseid) {
	var self = this;
	var res = [];
	for(dbid in alasql.databases) {
		res.push({databaseid: dbid});
	};
	if(self.like && res && res.length > 0) {
		res = res.filter(function(d){
			return d.databaseid.match(new RegExp((self.like.value).replace(/\%/g,'.*'),'g'));
		});
	}
	return res;
};


yy.ShowTables = function (params) { return yy.extend(this, params); }
yy.ShowTables.prototype.toString = function() {
	var s = 'SHOW TABLES';
	if(this.databaseid) s += ' FROM '+this.databaseid;
	if(this.like) s += ' LIKE '+this.like.toString();
	return s;
}
yy.ShowTables.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];

	var self = this;
	var res = [];
	for(tableid in db.tables) {
		res.push({tableid: tableid});
	};
	if(self.like && res && res.length > 0) {
		res = res.filter(function(d){
			return d.tableid.match(new RegExp((self.like.value).replace(/\%/g,'.*'),'g'));
		});
	};
	return res;
};

yy.ShowColumns = function (params) { return yy.extend(this, params); }
yy.ShowColumns.prototype.toString = function() {
	var s = 'SHOW COLUMNS';
	if(this.table.tableid) s += ' FROM '+this.table.tableid;
	if(this.databaseid) s += ' FROM '+this.databaseid;
	return s;
};

yy.ShowColumns.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	if(table && table.columns) {
		var res = table.columns.map(function(col){
			return {columnid: col.columnid, dbtypeid: col.dbtypeid, dbsize: col.dbsize};
		});
		return res;
	} else {
		return [];
	}
};

yy.ShowIndex = function (params) { return yy.extend(this, params); }
yy.ShowIndex.prototype.toString = function() {
	var s = 'SHOW INDEX';
	if(this.table.tableid) s += ' FROM '+this.table.tableid;
	if(this.databaseid) s += ' FROM '+this.databaseid;
	return s;
}
yy.ShowIndex.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	var res = [];
	if(table && table.indices) {
		for(var ind in table.indices) {
			res.push({hh:ind, len:Object.keys(table.indices[ind]).length});
		}
	}
	return res;
};

yy.ShowCreateTable = function (params) { return yy.extend(this, params); }
yy.ShowCreateTable.prototype.toString = function() {
	var s = 'SHOW CREATE TABLE '+this.table.tableid;
	if(this.databaseid) s += ' FROM '+this.databaseid;
	return s;
}
yy.ShowCreateTable.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	if(table) {
		var s = 'CREATE TABLE '+this.table.tableid+' (';
		var ss = [];
		if(table.columns) {
			table.columns.forEach(function(col){
				var a = col.columnid+' '+col.dbtypeid;
				if(col.dbsize) a += '('+col.dbsize+')';
				if(col.primarykey) a += ' PRIMARY KEY';
				// TODO extend
				ss.push(a); 
			});
			s += ss.join(', ');
		};
		s += ')';
		return s;
	} else {
		throw new Error('There is no such table "'+this.table.tableid+'"');
	}
};


// Console functions
/*
alasql.con = {
	results:{}
};

alasql.con.open = function(el) {
	// For browser only
	if (typeof exports === 'object') return;

	// Find parent element
	el = el || document.getElementById('alasql-con') || document.getElementsByTagName('body');
	if(!el) {throw new Error('Cannot fid element for console.')}

	var conel = document.createElement('div');
	conel.style.width = "1000px";
	conel.style.height = "320px";

	alasql.con.conel = conel;

	var lenta = document.createElement('div');
	lenta.style.width = "1000px";
	lenta.style.height = "200px";
	lenta.style.overflow = "scroll";
	alasql.con.lenta = lenta;

	var inpel = document.createElement('div');
	inpel.style.width = "1000px";
	inpel.style.height = "100px";
	inpel.style.contentEditable = true;
	inpel.innerHTML = 'command ';
	alasql.con.inpel = inpel;

	conel.appendChild(lenta);
	conel.appendChild(inpel);
	el.appendChild(conel);
};

alasql.con.clear = function() {
	// For browser only
	if (typeof exports === 'object') return;

	alasql.con.conel.innerHTML = '';
};

alasql.con.close = function() {
	// For browser only
	if (typeof exports === 'object') return;

	alasql.con.conel.removeChild(alasql.con.lenta);
	alasql.con.conel.removeChild(alasql.con.inel);
	alasql.con.conel.parentElement.removeChild(conel);
};

alasql.con.log = function() {
		// For browser only
	if (typeof exports === 'object') {
		console.log.bind(console).apply(this, arguments);
	} else {
		var s = '<div>';
		s += Array.prototype.slice.call(arguments, 0).map(function(arg){
			return arg.toString();
		}).join(' ');
		s += '</div>';
		alasql.con.conel.innerHTML += s;
	};

};
*/
alasql.test = function(name, times, fn) {
	if(arguments.length == 0) {
		alasql.log(alasql.con.results);
		return;
	} else if(arguments.length == 1) {
		var tm = Date.now();
		fn();
		alasql.con.log(Date.now()-tm);
		return;
	} 

	if(arguments.length == 2) {
		fn = times;
		times = 1;
	}

	var tm = Date.now();
	for(var i=0;i<times;i++) fn();
	alasql.con.results[name] = Date.now()-tm;
};

// Console
// alasql.log = function(sql, params) {
// 	var res;
// 	if(typeof sql == "string") {
// 		res = alasql(sql, params);
// 	} else {
// 		res = sql;
// 	};
// 	if(res instanceof Array) {
// 		if(console.table) {
// 			console.table(res);		
// 		} else {
// 			console.log(res);
// 		}
// 	} else {
// 		console.log(res);				
// 	}
// };

// Console
alasql.log = function(sql, params) {
	var olduseid = alasql.useid;
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	}

	var res;
	if(typeof sql == "string") {
		res = alasql(sql, params);
	} else {
		res = sql;
	};

	// For Node and console.output
	if(target == 'console' || typeof exports == 'object') {
		if(typeof sql == 'string' && alasql.options.logprompt) console.log(olduseid+'>',sql);

		if(res instanceof Array) {
			if(console.table) {
				// For Chrome and other consoles
				console.table(res);		
			} else {
				// Add print procedure
				console.log(res);
			}
		} else {
			console.log(res);				
		}

	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}

		}

		var s = '';

		if(typeof sql == 'string' && alasql.options.logprompt) {
			s += '<p>'+olduseid+'&gt;&nbsp;<b>'+sql+'</b></p>';
		}

		if(res instanceof Array) {
			if(res.length == 0) {
				s += '<p>[ ]</p>'
			} else if(typeof res[0] != 'object' || res[0] instanceof Array) {
				for(var i=0,ilen=res.length;i<ilen;i++) {
					s += '<p>'+loghtml(res[i])+'</p>';
				}
			} else {
				s += loghtml(res);
			}
		} else {
			s += loghtml(res);
		}
		el.innerHTML += s;
	}
};

alasql.clear = function() {
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	};

	if(target == 'console' || typeof exports == 'object') {
		if(console.clear) {
			console.clear();
		} else {
			// Something todo in Node
		}
	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML = '';		
	}
}

alasql.write = function(s) {
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	};

	if(target == 'console' || typeof exports == 'object') {
		if(console.clear) {
			console.log(s);
		} else {
			// Something todo in Node
		}
	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML += s;		
	}
}

function loghtml(res) {
	var s  = '';
	if(typeof res == 'undefined') {
		s += 'undefined';
	} else if(res instanceof Array) {
		s += '<style>';
		s += 'table {border:1px black solid; border-collapse: collapse; border-spacing: 0px;}';
		s += 'td,th {border:1px black solid; padding-left:5px; padding-right:5px}';
		s += 'th {background-color: #EEE}';
		s += '</style>';
		s += '<table>';
		var cols = [];			
		for(colid in res[0]) {
			cols.push(colid);
		}
		s += '<tr><th>#';
		cols.forEach(function(colid){
			s += '<th>'+colid;
		});
		for(var i=0,ilen=res.length;i<ilen;i++) {
			s += '<tr><th>'+(i+1);
			cols.forEach(function(colid){
				s += '<td> ';
				if(+res[i][colid] == +res[i][colid]) {
					s += '<div style="text-align:right">'+res[i][colid]+'</div>';
				} else {
					s += res[i][colid];
				};
			});
		}

		s += '</table>';
	} else {
		s += '<p>'+res.toString()+'</p>';
	}
		// if () {}

		// 		if(typeof res == 'object') {
		// 			s += '<p>'+JSON.stringify(res)+'</p>';
		// 		} else {
		// 		}
	return s;
};



function scrollTo(element, to, duration) {
    if (duration <= 0) return;
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;

    setTimeout(function() {
        if (element.scrollTop==to) return;
        element.scrollTop = element.scrollTop + perTick;
        scrollTo(element, to, duration - 10);
    }, 10);
}

alasql.prompt = function(el, useidel, firstsql) {
	if(typeof exports == 'object') {
		throw new Error('The functionality of prompt is not realized for Node.js');
	};
	var prompti = 0;
	if(typeof el == 'string') el = document.getElementById(el);
	if(typeof useidel == 'string') useidel = document.getElementById(useidel);
	useidel.textContent = alasql.useid;

	if(firstsql) {
		alasql.prompthistory.push(firstsql);
		prompti = alasql.prompthistory.length;
		alasql.log(firstsql);
	}

	var y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
	scrollTo(document.getElementsByTagName('body')[0],y,500);

	el.onkeydown = function(event) {
		if(event.which == 13) {
			var sql = el.value;
			var olduseid = alasql.useid;
			el.value = '';
			alasql.prompthistory.push(sql);
			prompti = alasql.prompthistory.length;
			try {
				alasql.log(sql);
			} catch (err) {
				alasql.write('<p>'+olduseid+'&gt;&nbsp;<b>'+sql+'</b></p>');
				alasql.write('<p style="color:red">'+err+'<p>');
			}
			el.focus();
//			console.log(el.getBoundingClientRect().top);
			useidel.textContent = alasql.useid;
			var y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
			scrollTo(document.getElementsByTagName('body')[0],y,500);
		} else if(event.which == 38) {
			prompti--; if(prompti<0) prompti = 0;
			if(alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}

		} else if(event.which == 40) {
			prompti++; 
			if(prompti>=alasql.prompthistory.length) {
				prompti = alasql.prompthistory.length;
				el.value = '';
			} else if(alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}
		}

	}
}





/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Help = function (params) { return yy.extend(this, params); }
yy.Help.prototype.toString = function() {
	var s = 'HELP';
	if(this.subject) s += ' '+this.subject;
	return s;
}


alasql.helpdocs = [
	{Command:'CREATE DATABASE database'},
	{Command:'CREATE TABLE table (columns)'},
	{Command:'DROP DATABASE database'},
	{Command:'DROP TABLE table'},
	{Command:'See <a href="http://alasql.org/docs">alasql.org/docs</a> for documentation'}
];

// DROP TABLE
yy.Help.prototype.execute = function (databaseid) {
	var ss = [];
	if(!this.subject) {
		ss = alasql.helpdocs;
	} else {
		ss.push('See <a href="http://alasql.org/docs">alasql.org/docs</a> for documentation');
	}
	return ss;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Source = function (params) { return yy.extend(this, params); }
yy.Source.prototype.toString = function() {
	var s = 'SOURCE';
	if(this.url) s += ' '+this.url;
	return s;
}

// SOURCE FILE
yy.Source.prototype.execute = function (databaseid) {
//	console.log(this.url);
	loadFile(this.url, function(data){
//		console.log(data);
		alasql(data);
	}, function(err){
		throw err;
	});
	return 1;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Assert = function (params) { return yy.extend(this, params); }
yy.Source.prototype.toString = function() {
	var s = 'ASSERT';
	if(this.value) s += ' '+JSON.stringify(this.value);
	return s;
}

// SOURCE FILE
yy.Assert.prototype.execute = function (databaseid) {
	if(!deepEqual(alasql.res,this.value)) {
		if(this.message) {

		} else {
			throw new Error((this.message||'Assert wrong')+': '+JSON.stringify(alasql.res)+' == '+JSON.stringify(this.value));
		}
	}
	return 1;
};


/*
//
// Last part of Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// End of module


// Create default database
new Database("alasql");

// Set default database
alasql.use("alasql");


return alasql;
}));


//# sourceMappingURL=alasql.js.map