
    import {extend} from "../../utils/object.js";
    var yy = {extend:extend};
    /* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,9],$V1=[2,7],$V2=[1,8],$V3=[8,9,41,47,70,71,81,82,83,84,90],$V4=[4,5,46,94,97,106,108,111,112,113,114,115,116,117,119,120,121,122,123,124,125,126,127,137,155],$V5=[2,24],$V6=[1,17],$V7=[4,5,26,29,30,36,46,94,97,106,108,111,112,113,114,115,116,117,119,120,121,122,123,124,125,126,127,137,155],$V8=[8,9,47,70,71,81,82,83,84,90],$V9=[1,28],$Va=[1,29],$Vb=[1,53],$Vc=[1,55],$Vd=[1,54],$Ve=[1,65],$Vf=[1,66],$Vg=[1,67],$Vh=[1,68],$Vi=[1,69],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,63],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,64],$Vw=[1,52],$Vx=[1,51],$Vy=[8,9,47,71,81,82,83,84,90],$Vz=[1,79],$VA=[4,5,8,9,41,45,47,48,53,57,58,59,60,61,62,63,64,65,66,68,70,71,81,82,83,84,90],$VB=[1,84],$VC=[4,5,8,9,38,41,45,46,47,48,50,53,57,58,59,60,61,62,63,64,65,66,68,70,71,80,81,82,83,84,87,88,90,94,97,121,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],$VD=[8,9,38,41,47,70,71,81,82,83,84,90],$VE=[1,88],$VF=[8,9,38,41,45,47,70,71,81,82,83,84,90],$VG=[1,96],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,103],$VR=[1,104],$VS=[1,105],$VT=[1,106],$VU=[1,107],$VV=[1,108],$VW=[1,109],$VX=[1,111],$VY=[1,112],$VZ=[1,114],$V_=[1,113],$V$=[1,115],$V01=[1,116],$V11=[4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,97,121,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],$V21=[1,128],$V31=[8,9,47,81,82,83,84,90],$V41=[8,9,45,47,70,71,81,82,83,84,90],$V51=[2,62],$V61=[1,139],$V71=[1,140],$V81=[1,141],$V91=[1,143],$Va1=[1,142],$Vb1=[1,144],$Vc1=[1,145],$Vd1=[1,146],$Ve1=[1,147],$Vf1=[8,9,45,47,53,57,58,59,60,61,62,63,64,65,70,71,81,82,83,84,90],$Vg1=[30,159,160],$Vh1=[4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,121,130,132,133,134,135,136,137,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],$Vi1=[2,169],$Vj1=[1,201],$Vk1=[130,132,134],$Vl1=[8,9,47,81,82,83,90],$Vm1=[8,9,47,53,57,58,59,60,61,62,63,64,65,70,71,81,82,83,84,90],$Vn1=[1,220],$Vo1=[4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,66,68,70,71,80,81,82,83,84,87,88,90,94,97,121,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],$Vp1=[45,47],$Vq1=[4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,97,121,130,132,133,134,135,136,137,138,139,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],$Vr1=[4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,121,130,132,133,134,141,142,143,144,145,146,147,148,149,150,153,154,157,158],$Vs1=[4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,121,130,132,133,134,154,157,158],$Vt1=[8,9,47,81,82,83],$Vu1=[1,240],$Vv1=[1,241],$Vw1=[1,242],$Vx1=[8,9,47],$Vy1=[1,274],$Vz1=[8,9,45,47,80,81,82,83,84,90],$VA1=[8,9,47,53,57,58,59,60,61,62,63,64,65,66,68,70,71,81,82,83,84,90],$VB1=[8,9,45,47,81,82,83,90];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"main":6,"Statements":7,"EOF":8,"SEMICOLON":9,"Statement":10,"ExplainStatement":11,"Select":12,"WithSelectClause":13,"WITH":14,"WithTables":15,"RECURSIVE":16,"SelectClause":17,"IntoClause":18,"FromClause":19,"WhereClause":20,"GroupClause":21,"OrderClause":22,"LimitClause":23,"UnionClause":24,"SelectModifier":25,"DISTINCT":26,"TopClause":27,"ResultColumns":28,"UNIQUE":29,"ALL":30,"SELECT":31,"VALUE":32,"ROW":33,"COLUMN":34,"MATRIX":35,"TOP":36,"NumValue":37,"INTO":38,"Table":39,"FuncValue":40,"FROM":41,"FromTablesList":42,"FromTable":43,"JoinTablesList":44,"COMMA":45,"LPAR":46,"RPAR":47,"AS":48,"ParamValue":49,"DOT":50,"JoinTable":51,"JoinMode":52,"JOIN":53,"JoinTableAs":54,"OnClause":55,"JoinModeMode":56,"NATURAL":57,"INNER":58,"LEFT":59,"OUTER":60,"RIGHT":61,"FULL":62,"SEMI":63,"ANTI":64,"CROSS":65,"ON":66,"Expression":67,"USING":68,"ColumnsList":69,"WHERE":70,"GROUP":71,"BY":72,"GroupExpressionsList":73,"HavingClause":74,"GroupExpression":75,"GROUPING":76,"SETS":77,"ROLLUP":78,"CUBE":79,"HAVING":80,"UNION":81,"EXCEPT":82,"INTERSECT":83,"ORDER":84,"OrderExpressionsList":85,"OrderExpression":86,"DIRECTION":87,"COLLATE":88,"NOCASE":89,"LIMIT":90,"OffsetClause":91,"OFFSET":92,"ResultColumn":93,"NUMBER":94,"StringValue":95,"Star":96,"STAR":97,"Column":98,"AggrValue":99,"Op":100,"LogicValue":101,"NullValue":102,"ExistsValue":103,"CaseValue":104,"CastClause":105,"CAST":106,"ColumnType":107,"CONVERT":108,"PrimitiveValue":109,"Aggregator":110,"SUM":111,"COUNT":112,"MIN":113,"MAX":114,"AVG":115,"FIRST":116,"LAST":117,"ExprList":118,"TRUE":119,"FALSE":120,"STRING":121,"NULL":122,"EXISTS":123,"DOLLAR":124,"COLON":125,"QUESTION":126,"CASE":127,"WhensList":128,"ElseClause":129,"END":130,"When":131,"WHEN":132,"THEN":133,"ELSE":134,"LIKE":135,"PLUS":136,"MINUS":137,"SLASH":138,"PERCENT":139,"ARROW":140,"GT":141,"GE":142,"LT":143,"LE":144,"EQ":145,"EQEQ":146,"EQEQEQ":147,"NE":148,"NEEQEQ":149,"NEEQEQEQ":150,"CondOp":151,"AllSome":152,"AND":153,"OR":154,"NOT":155,"IN":156,"BETWEEN":157,"NOT_BETWEEN":158,"SOME":159,"ANY":160,"ValuesListsList":161,"ValuesList":162,"AT":163,"Json":164,"Value":165,"DateValue":166,"AsClause":167,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",8:"EOF",9:"SEMICOLON",11:"ExplainStatement",14:"WITH",16:"RECURSIVE",26:"DISTINCT",29:"UNIQUE",30:"ALL",31:"SELECT",32:"VALUE",33:"ROW",34:"COLUMN",35:"MATRIX",36:"TOP",38:"INTO",41:"FROM",45:"COMMA",46:"LPAR",47:"RPAR",48:"AS",50:"DOT",53:"JOIN",57:"NATURAL",58:"INNER",59:"LEFT",60:"OUTER",61:"RIGHT",62:"FULL",63:"SEMI",64:"ANTI",65:"CROSS",66:"ON",68:"USING",69:"ColumnsList",70:"WHERE",71:"GROUP",72:"BY",76:"GROUPING",77:"SETS",78:"ROLLUP",79:"CUBE",80:"HAVING",81:"UNION",82:"EXCEPT",83:"INTERSECT",84:"ORDER",87:"DIRECTION",88:"COLLATE",89:"NOCASE",90:"LIMIT",92:"OFFSET",94:"NUMBER",97:"STAR",106:"CAST",107:"ColumnType",108:"CONVERT",111:"SUM",112:"COUNT",113:"MIN",114:"MAX",115:"AVG",116:"FIRST",117:"LAST",119:"TRUE",120:"FALSE",121:"STRING",122:"NULL",123:"EXISTS",124:"DOLLAR",125:"COLON",126:"QUESTION",127:"CASE",130:"END",132:"WHEN",133:"THEN",134:"ELSE",135:"LIKE",136:"PLUS",137:"MINUS",138:"SLASH",139:"PERCENT",140:"ARROW",141:"GT",142:"GE",143:"LT",144:"LE",145:"EQ",146:"EQEQ",147:"EQEQEQ",148:"NE",149:"NEEQEQ",150:"NEEQEQEQ",153:"AND",154:"OR",155:"NOT",156:"IN",157:"BETWEEN",158:"NOT_BETWEEN",159:"SOME",160:"ANY",163:"AT",164:"Json",166:"DateValue"},
productions_: [0,[3,1],[3,1],[6,2],[7,3],[7,1],[7,1],[10,0],[10,1],[13,3],[13,4],[13,1],[15,0],[12,8],[17,4],[17,4],[17,4],[17,3],[25,1],[25,2],[25,2],[25,2],[25,2],[27,2],[27,0],[18,0],[18,2],[18,2],[19,2],[19,3],[19,0],[42,1],[42,3],[43,4],[43,5],[43,3],[43,2],[43,3],[43,1],[43,2],[43,3],[43,1],[43,1],[43,2],[43,3],[39,3],[39,1],[44,2],[44,1],[51,4],[54,1],[54,2],[54,3],[54,2],[54,3],[54,4],[54,5],[54,1],[54,2],[54,3],[52,1],[52,2],[56,0],[56,1],[56,1],[56,2],[56,1],[56,2],[56,1],[56,2],[56,1],[56,1],[56,1],[55,2],[55,2],[55,0],[20,0],[20,2],[21,0],[21,4],[73,1],[73,3],[75,5],[75,4],[75,4],[75,1],[74,0],[74,2],[24,0],[24,2],[24,3],[24,2],[24,2],[22,0],[22,3],[85,1],[85,3],[86,1],[86,2],[86,3],[86,4],[23,0],[23,3],[91,0],[91,2],[28,3],[28,1],[93,3],[93,2],[93,3],[93,2],[93,3],[93,2],[93,1],[96,5],[96,3],[96,1],[98,5],[98,3],[98,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[105,6],[105,6],[105,8],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[99,4],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[40,4],[40,3],[118,1],[118,3],[37,1],[101,1],[101,1],[95,1],[102,1],[103,4],[49,2],[49,2],[49,1],[104,5],[104,4],[128,2],[128,1],[131,4],[129,2],[129,0],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,5],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,6],[100,6],[100,3],[100,3],[100,2],[100,2],[100,3],[100,5],[100,6],[100,5],[100,6],[100,3],[100,3],[151,1],[151,1],[151,1],[151,1],[151,1],[151,1],[152,1],[152,1],[152,1],[161,3],[161,2],[161,1],[161,5],[161,4],[161,3],[162,1],[162,3],[165,1],[165,1],[165,1],[165,1],[165,1],[165,1],[167,0],[167,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			if (yy.casesensitive) this.$ = $$[$0];
			else this.$ = $$[$0].toLowerCase();
		
break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 4:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 5: case 6: case 31: case 48: case 80: case 95: case 106: case 152: case 166: case 213: case 214: case 218:
 this.$ = [$$[$0]]; 
break;
case 7: case 24: case 30: case 75: case 76: case 78: case 86: case 88: case 93: case 101: case 103:
 this.$ = null; 
break;
case 9: case 10: case 38: case 85: case 113: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 136: case 137: case 138: case 139: case 140: case 141: case 168: case 203: case 204: case 205: case 206: case 207: case 208:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = $$[$0];
break;
case 13:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 14:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]); yy.extend(this.$, $$[$0-1]); 
break;
case 15:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 16:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 17:
 this.$ = new yy.Select({ columns:$$[$0] }); yy,extend(this.$, $$[$0-2]);yy.extend(this.$, $$[$0-1]); 
break;
case 18:
 this.$ = null
break;
case 19:
 this.$ = {modifier:'VALUE'}
break;
case 20:
 this.$ = {modifier:'ROW'}
break;
case 21:
 this.$ = {modifier:'COLUMN'}
break;
case 22:
 this.$ = {modifier:'MATRIX'}
break;
case 23:
 this.$ = {top: $$[$0]}; 
break;
case 25:
this.$ = null
break;
case 26: case 27:
this.$ = {into: $$[$0]} 
break;
case 28:
 this.$ = { from: $$[$0] }; 
break;
case 29:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 32: case 81:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 33:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 34:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 35:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 36:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 37:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 39: case 43:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 40: case 44:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 41: case 42:
 this.$ = $$[$0]; $$[$0].as = 'default'; 
break;
case 45:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 46:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 47:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 49:
 this.$ = new yy.Join($$[$0-3]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 50:
 this.$ = {table: $$[$0]}; 
break;
case 51:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 52:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 53:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 54:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 55:
 this.$ = {select: $$[$0-3], as: $$[$0]} ; 
break;
case 56:
 this.$ = {select: $$[$0-4], as: $$[$0] } ; 
break;
case 57:
 this.$ = {func:$$[$0], as:'default'}; 
break;
case 58:
 this.$ = {func:$$[$0-1], as: $$[$0]}; 
break;
case 59:
 this.$ = {func:$$[$0-2], as: $$[$0]}; 
break;
case 60:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 61:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 62: case 63:
 this.$ = "INNER"; 
break;
case 64: case 65:
 this.$ = "LEFT"; 
break;
case 66: case 67:
 this.$ = "RIGHT"; 
break;
case 68: case 69:
 this.$ = "OUTER"; 
break;
case 70:
 this.$ = "SEMI"; 
break;
case 71:
 this.$ = "ANTI"; 
break;
case 72:
 this.$ = "CROSS"; 
break;
case 73:
 this.$ = {on: $$[$0]}; 
break;
case 74:
 this.$ = {using: $$[$0]}; 
break;
case 77:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 79:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 82:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 83:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 84:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 87:
 this.$ = {having:$$[$0]}
break;
case 89:
 this.$ = {union: $$[$0]} ; 
break;
case 90:
 this.$ = {unionall: $$[$0]} ; 
break;
case 91:
 this.$ = {except: $$[$0]} ; 
break;
case 92:
 this.$ = {intersect: $$[$0]} ; 
break;
case 94:
 this.$ = {order:$$[$0]}
break;
case 96:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 97:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 98:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 99:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 100:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 102:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 104:
 this.$ = {offset:$$[$0]}
break;
case 105:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 107: case 109: case 111:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 108: case 110: case 112:
 $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];
break;
case 114:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 115:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 116:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 117:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 118:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 119:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 133:
 this.$ = new yy.Cast({expression:$$[$0-3]}) ; yy.extend(this.$,$$[$0-1]) ; 
break;
case 134:
 this.$ = new yy.Cast({expression:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; 
break;
case 135:
 this.$ = new yy.Cast({expression:$$[$0-3], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-5]) ; 
break;
case 142:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 143:
 this.$ = "SUM"; 
break;
case 144:
 this.$ = "COUNT"; 
break;
case 145:
 this.$ = "MIN"; 
break;
case 146:
 this.$ = "MAX"; 
break;
case 147:
 this.$ = "AVG"; 
break;
case 148:
 this.$ = "FIRST"; 
break;
case 149:
 this.$ = "LAST"; 
break;
case 150:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 151:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 153:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 154:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 155:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 156:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 157:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")}); 
break;
case 158:
 this.$ = new yy.NullValue({value:null}); 
break;
case 159:

			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length});
			yy.exists.push($$[$0-1]);
		
break;
case 160: case 161:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 162:

			if(typeof yy.question == 'undefined') yy.question = 0;
			this.$ = new yy.ParamValue({param: yy.question++});
		
break;
case 163:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 164:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 165:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 167:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 169:
this.$ = null; 
break;
case 170:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 171:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 172:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 173:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 174:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 175:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 176: case 177: case 179:
 this.$ = new yy.Op({left:$$[$0-2], op:'->' , right:$$[$0]}); 
break;
case 178:
 this.$ = new yy.Op({left:$$[$0-4], op:'->' , right:$$[$0-1]}); 
break;
case 180:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 181:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 182:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 183:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 184:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 185:
 this.$ = new yy.Op({left:$$[$0-2], op:'==' , right:$$[$0]}); 
break;
case 186:
 this.$ = new yy.Op({left:$$[$0-2], op:'===' , right:$$[$0]}); 
break;
case 187:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 188:
 this.$ = new yy.Op({left:$$[$0-2], op:'!==' , right:$$[$0]}); 
break;
case 189:
 this.$ = new yy.Op({left:$$[$0-2], op:'!===' , right:$$[$0]}); 
break;
case 190:

			if(!yy.queries) yy.queries = [];
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);
		
break;
case 191:

			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]});
		
break;
case 192:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 193:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 194:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 195:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 196:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 197:

			if(!yy.queries) yy.queries = [];
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);
		
break;
case 198:

			if(!yy.queries) yy.queries = [];
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);
		
break;
case 199:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 200:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 201:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 202:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 209:
 this.$ = 'ALL'; 
break;
case 210:
 this.$ = 'SOME'; 
break;
case 211:
 this.$ = 'ANY'; 
break;
case 212:
 this.$ = [$$[$0-1]]; 
break;
case 215:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 216:
this.$ = $$[$0-3]; $$[$0-3].push($$[$0])
break;
case 217: case 219:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 226:
this.$ = null;
break;
case 227:
 this.$ = $$[$0-1]; 
break;
}
},
table: [o($V0,$V1,{6:1,7:2,10:3,12:5,17:6,25:7,11:[1,4],31:$V2}),{1:[3]},{8:[1,9],9:[1,10]},o($V0,[2,5]),o($V0,[2,6]),o($V0,[2,8]),o($V3,[2,25],{18:11,38:[1,12]}),o($V4,$V5,{27:16,26:[1,13],29:[1,14],30:[1,15],36:$V6}),o($V7,[2,18],{32:[1,18],33:[1,19],34:[1,20],35:[1,21]}),{1:[2,3]},o($V0,$V1,{12:5,17:6,25:7,10:22,31:$V2}),o($V8,[2,30],{19:23,41:[1,24]}),{3:27,4:$V9,5:$Va,39:25,40:26},o($V4,$V5,{27:30,36:$V6}),o($V4,$V5,{27:31,36:$V6}),o($V4,$V5,{27:32,36:$V6}),{3:50,4:$V9,5:$Va,28:33,37:41,40:37,46:$Vb,49:45,67:35,93:34,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{37:74,94:$Vc},o($V7,[2,19]),o($V7,[2,20]),o($V7,[2,21]),o($V7,[2,22]),o($V0,[2,4]),o($Vy,[2,76],{20:75,70:[1,76]}),{3:27,4:$V9,5:$Va,39:80,40:82,42:77,43:78,46:$Vz,49:81,124:$Vs,125:$Vt,126:$Vu},o($V3,[2,26]),o($V3,[2,27]),o($VA,[2,46],{46:$VB,50:[1,83]}),o($VC,[2,1]),o($VC,[2,2]),{3:50,4:$V9,5:$Va,28:85,37:41,40:37,46:$Vb,49:45,67:35,93:34,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,28:86,37:41,40:37,46:$Vb,49:45,67:35,93:34,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,28:87,37:41,40:37,46:$Vb,49:45,67:35,93:34,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($VD,[2,17],{45:$VE}),o($VF,[2,106]),o($VF,[2,113],{3:90,95:92,151:110,4:$V9,5:$Va,48:[1,89],94:[1,91],97:$VG,121:$Vp,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),o($V11,[2,120]),o($V11,[2,121]),o($V11,[2,122]),o($V11,[2,123]),o($V11,[2,124]),o($V11,[2,125]),o($V11,[2,126]),o($V11,[2,127]),o($V11,[2,128]),o($V11,[2,129]),o($V11,[2,130]),o($V11,[2,131]),o($V11,[2,132]),{46:[1,117]},o($V11,[2,119],{46:$VB,50:[1,118]}),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:119,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:120,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:121,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($V11,[2,116]),o([4,5,8,9,38,41,45,46,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,92,94,97,106,108,111,112,113,114,115,116,117,119,120,121,122,123,124,125,126,127,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],[2,154]),o($V11,[2,155]),o($V11,[2,156]),o($V11,[2,157]),o($V11,[2,158]),{3:122,4:$V9,5:$Va},{3:123,4:$V9,5:$Va},o($V11,[2,162]),{46:[1,124]},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:125,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,128:126,131:127,132:$V21,137:$Vw,155:$Vx},{46:[1,129]},{46:[1,130]},{46:[2,143]},{46:[2,144]},{46:[2,145]},{46:[2,146]},{46:[2,147]},{46:[2,148]},{46:[2,149]},o($V4,[2,23]),o($V31,[2,78],{21:131,71:[1,132]}),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:133,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($V8,[2,28],{45:[1,134]}),o($V41,[2,31],{44:135,51:136,52:137,56:138,53:$V51,57:$V61,58:$V71,59:$V81,60:$V91,61:$Va1,62:$Vb1,63:$Vc1,64:$Vd1,65:$Ve1}),{12:148,17:6,25:7,31:$V2},o($Vf1,[2,38],{3:149,4:$V9,5:$Va,48:[1,150]}),o($Vf1,[2,41],{3:151,4:$V9,5:$Va,48:[1,152]}),o($Vf1,[2,42],{3:153,4:$V9,5:$Va,48:[1,154]}),{3:155,4:$V9,5:$Va},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,47:[1,157],49:45,67:158,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,118:156,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($VD,[2,14],{45:$VE}),o($VD,[2,15],{45:$VE}),o($VD,[2,16],{45:$VE}),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:35,93:159,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:160,4:$V9,5:$Va,94:[1,161],95:162,121:$Vp},o($VF,[2,108]),o($VF,[2,110]),o($VF,[2,112]),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:163,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:164,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:165,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:166,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:167,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:168,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:169,4:$V9,5:$Va,37:170,40:172,46:[1,171],94:$Vc},o($Vg1,[2,203],{99:36,40:37,100:38,98:39,96:40,37:41,101:42,95:43,102:44,49:45,103:46,104:47,105:48,110:49,3:50,67:173,4:$V9,5:$Va,46:$Vb,94:$Vc,97:$Vd,106:$Ve,108:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx}),o($Vg1,[2,204],{99:36,40:37,100:38,98:39,96:40,37:41,101:42,95:43,102:44,49:45,103:46,104:47,105:48,110:49,3:50,67:174,4:$V9,5:$Va,46:$Vb,94:$Vc,97:$Vd,106:$Ve,108:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx}),o($Vg1,[2,205],{99:36,40:37,100:38,98:39,96:40,37:41,101:42,95:43,102:44,49:45,103:46,104:47,105:48,110:49,3:50,67:175,4:$V9,5:$Va,46:$Vb,94:$Vc,97:$Vd,106:$Ve,108:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx}),o($Vg1,[2,206],{99:36,40:37,100:38,98:39,96:40,37:41,101:42,95:43,102:44,49:45,103:46,104:47,105:48,110:49,3:50,67:176,4:$V9,5:$Va,46:$Vb,94:$Vc,97:$Vd,106:$Ve,108:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx}),o($Vg1,[2,207],{99:36,40:37,100:38,98:39,96:40,37:41,101:42,95:43,102:44,49:45,103:46,104:47,105:48,110:49,3:50,67:177,4:$V9,5:$Va,46:$Vb,94:$Vc,97:$Vd,106:$Ve,108:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx}),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:178,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:179,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($Vg1,[2,208],{99:36,40:37,100:38,98:39,96:40,37:41,101:42,95:43,102:44,49:45,103:46,104:47,105:48,110:49,3:50,67:180,4:$V9,5:$Va,46:$Vb,94:$Vc,97:$Vd,106:$Ve,108:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx}),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:181,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:182,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{30:[1,184],152:183,159:[1,185],160:[1,186]},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:187,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:188,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{46:[1,189]},{156:[1,190]},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:191,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:192,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:193,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:194,4:$V9,5:$Va,97:[1,195]},o([4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,121,130,132,133,134,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],[2,194],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM}),o($Vh1,[2,195],{151:110,97:$VG,138:$VK,139:$VL,140:$VM}),{47:[1,196],97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},o($V11,[2,160]),o($V11,[2,161]),{12:197,17:6,25:7,31:$V2},{97:$VG,128:198,131:127,132:$V21,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},{129:199,130:$Vi1,131:200,132:$V21,134:$Vj1},o($Vk1,[2,166]),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:202,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:203,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{107:[1,204]},o($Vl1,[2,93],{22:205,84:[1,206]}),{72:[1,207]},o($Vy,[2,77],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),{3:27,4:$V9,5:$Va,39:80,40:82,43:208,46:$Vz,49:81,124:$Vs,125:$Vt,126:$Vu},o($V8,[2,29],{52:137,56:138,51:209,53:$V51,57:$V61,58:$V71,59:$V81,60:$V91,61:$Va1,62:$Vb1,63:$Vc1,64:$Vd1,65:$Ve1}),o($Vm1,[2,48]),{53:[1,210]},{53:[2,60]},{53:$V51,56:211,58:$V71,59:$V81,60:$V91,61:$Va1,62:$Vb1,63:$Vc1,64:$Vd1,65:$Ve1},{53:[2,63]},{53:[2,64],60:[1,212]},{53:[2,66],60:[1,213]},{53:[2,68]},{60:[1,214]},{53:[2,70]},{53:[2,71]},{53:[2,72]},{47:[1,215]},o($Vf1,[2,36]),{3:216,4:$V9,5:$Va},o($Vf1,[2,39]),{3:217,4:$V9,5:$Va},o($Vf1,[2,43]),{3:218,4:$V9,5:$Va},o($VA,[2,45]),{45:$Vn1,47:[1,219]},o($Vo1,[2,151]),o($Vp1,[2,152],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),o($VF,[2,105]),o($VF,[2,107]),o($VF,[2,109]),o($VF,[2,111]),o([4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,121,130,132,133,134,135,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158],[2,170],{151:110,97:$VG,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM}),o($Vh1,[2,171],{151:110,97:$VG,138:$VK,139:$VL,140:$VM}),o($Vh1,[2,172],{151:110,97:$VG,138:$VK,139:$VL,140:$VM}),o($Vq1,[2,173],{151:110,140:$VM}),o($Vq1,[2,174],{151:110,140:$VM}),o($Vq1,[2,175],{151:110,140:$VM}),o($V11,[2,176],{46:$VB}),o($V11,[2,177]),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:221,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($V11,[2,179]),o($Vr1,[2,180],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,181],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,182],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,183],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,184],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,185],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,186],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,187],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,188],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),o($Vr1,[2,189],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,155:$VZ,156:$V_}),{46:[1,222]},{46:[2,209]},{46:[2,210]},{46:[2,211]},o([4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,121,130,132,133,134,153,154,157,158],[2,192],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,155:$VZ,156:$V_}),o([4,5,8,9,38,41,45,47,48,53,57,58,59,60,61,62,63,64,65,70,71,80,81,82,83,84,87,88,90,94,121,130,132,133,134,154],[2,193],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,155:$VZ,156:$V_,157:$V$,158:$V01}),{3:50,4:$V9,5:$Va,12:223,17:6,25:7,31:$V2,37:41,40:37,46:$Vb,49:45,67:158,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,118:224,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{46:[1,225]},o($Vs1,[2,201],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,155:$VZ,156:$V_}),o($Vs1,[2,202],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,155:$VZ,156:$V_}),{47:[1,226],97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},o($V11,[2,118],{50:[1,227]}),o($V11,[2,115]),o($V11,[2,196]),{47:[1,228]},{129:229,130:$Vi1,131:200,132:$V21,134:$Vj1},{130:[1,230]},o($Vk1,[2,165]),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:231,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{97:$VG,133:[1,232],135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},{48:[1,233],97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},{45:[1,234]},o($Vt1,[2,101],{23:235,90:[1,236]}),{72:[1,237]},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:243,73:238,75:239,76:$Vu1,78:$Vv1,79:$Vw1,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($V41,[2,32]),o($Vm1,[2,47]),{3:27,4:$V9,5:$Va,39:245,40:248,46:[1,247],49:246,54:244,124:$Vs,125:$Vt,126:$Vu},{53:[2,61]},{53:[2,65]},{53:[2,67]},{53:[2,69]},o($Vf1,[2,35],{3:249,4:$V9,5:$Va,48:[1,250]}),o($Vf1,[2,37]),o($Vf1,[2,40]),o($Vf1,[2,44]),o($Vo1,[2,150]),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:251,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{47:[1,252],97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},{3:50,4:$V9,5:$Va,12:253,17:6,25:7,31:$V2,37:41,40:37,46:$Vb,49:45,67:158,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,118:254,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{47:[1,255]},{45:$Vn1,47:[1,256]},{3:50,4:$V9,5:$Va,12:257,17:6,25:7,31:$V2,37:41,40:37,46:$Vb,49:45,67:158,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,118:258,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($V11,[2,142]),{3:259,4:$V9,5:$Va,97:[1,260]},o($V11,[2,159]),{130:[1,261]},o($V11,[2,164]),{97:$VG,130:[2,168],135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:262,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{107:[1,263]},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:264,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($Vx1,[2,88],{24:265,81:[1,266],82:[1,267],83:[1,268]}),{37:269,94:$Vc},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:272,85:270,86:271,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($V31,[2,86],{74:273,45:$Vy1,80:[1,275]}),o($Vz1,[2,80]),{77:[1,276]},{46:[1,277]},{46:[1,278]},o($Vz1,[2,85],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),o($Vm1,[2,75],{55:279,66:[1,280],68:[1,281]}),o($VA1,[2,50],{3:282,4:$V9,5:$Va,48:[1,283]}),{3:284,4:$V9,5:$Va,48:[1,285]},{12:286,17:6,25:7,31:$V2},o($VA1,[2,57],{3:287,4:$V9,5:$Va,48:[1,288]}),o($Vf1,[2,33]),{3:289,4:$V9,5:$Va},o($Vp1,[2,153],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),o($V11,[2,178]),{47:[1,290]},{45:$Vn1,47:[1,291]},o($V11,[2,197]),o($V11,[2,199]),{47:[1,292]},{45:$Vn1,47:[1,293]},o($V11,[2,117]),o($V11,[2,114]),o($V11,[2,163]),o($Vk1,[2,167],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),{47:[1,294]},{45:[1,296],47:[1,295],97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,151:110,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01},o($Vx1,[2,13]),{12:297,17:6,25:7,30:[1,298],31:$V2},{12:299,17:6,25:7,31:$V2},{12:300,17:6,25:7,31:$V2},o($Vt1,[2,103],{91:301,92:[1,302]}),o($Vl1,[2,94],{45:[1,303]}),o($VB1,[2,95]),o($VB1,[2,97],{151:110,87:[1,304],88:[1,305],97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),o($V31,[2,79]),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:243,75:306,76:$Vu1,78:$Vv1,79:$Vw1,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:307,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{46:[1,308]},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:243,73:309,75:239,76:$Vu1,78:$Vv1,79:$Vw1,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:243,73:310,75:239,76:$Vu1,78:$Vv1,79:$Vw1,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($Vm1,[2,49]),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:311,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{69:[1,312]},o($VA1,[2,51]),{3:313,4:$V9,5:$Va},o($VA1,[2,53]),{3:314,4:$V9,5:$Va},{47:[1,315]},o($VA1,[2,58]),{3:316,4:$V9,5:$Va},o($Vf1,[2,34]),o($V11,[2,190]),o($V11,[2,191]),o($V11,[2,198]),o($V11,[2,200]),o($V11,[2,133]),o($V11,[2,134]),{94:[1,317]},o($Vx1,[2,89]),{12:318,17:6,25:7,31:$V2},o($Vx1,[2,91]),o($Vx1,[2,92]),o($Vt1,[2,102]),{37:319,94:$Vc},{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:272,86:320,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},o($VB1,[2,98]),{89:[1,321]},o($Vz1,[2,81]),o($V31,[2,87],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),{3:50,4:$V9,5:$Va,37:41,40:37,46:$Vb,49:45,67:243,73:322,75:239,76:$Vu1,78:$Vv1,79:$Vw1,94:$Vc,95:43,96:40,97:$Vd,98:39,99:36,100:38,101:42,102:44,103:46,104:47,105:48,106:$Ve,108:$Vf,110:49,111:$Vg,112:$Vh,113:$Vi,114:$Vj,115:$Vk,116:$Vl,117:$Vm,119:$Vn,120:$Vo,121:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,137:$Vw,155:$Vx},{45:$Vy1,47:[1,323]},{45:$Vy1,47:[1,324]},o($Vm1,[2,73],{151:110,97:$VG,135:$VH,136:$VI,137:$VJ,138:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$,158:$V01}),o($Vm1,[2,74]),o($VA1,[2,52]),o($VA1,[2,54]),{3:325,4:$V9,5:$Va,48:[1,326]},o($VA1,[2,59]),{47:[1,327]},o($Vx1,[2,90]),o($Vt1,[2,104]),o($VB1,[2,96]),o($VB1,[2,99],{87:[1,328]}),{45:$Vy1,47:[1,329]},o($Vz1,[2,83]),o($Vz1,[2,84]),o($VA1,[2,55]),{3:330,4:$V9,5:$Va},o($V11,[2,135]),o($VB1,[2,100]),o($Vz1,[2,82]),o($VA1,[2,56])],
defaultActions: {9:[2,3],67:[2,143],68:[2,144],69:[2,145],70:[2,146],71:[2,147],72:[2,148],73:[2,149],138:[2,60],140:[2,63],143:[2,68],145:[2,70],146:[2,71],147:[2,72],184:[2,209],185:[2,210],186:[2,211],211:[2,61],212:[2,65],213:[2,67],214:[2,69]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'ATLBRA'
break;
case 1:return 5
break;
case 2:return 5
break;
case 3:return 121
break;
case 4:return 121
break;
case 5:return /* skip comments */
break;
case 6:return /* return 'COMMENT' */
break;
case 7:/* skip whitespace */
break;
case 8:return 154
break;
case 9:return 153
break;
case 10:return 'ABSOLUTE'
break;
case 11:return 'ADD'
break;
case 12:return 30
break;
case 13:return 'ALTER'
break;
case 14:return 153
break;
case 15:return 64
break;
case 16:return 160
break;
case 17:return 48
break;
case 18:return 'ASSERT'
break;
case 19:return 87
break;
case 20:return 115
break;
case 21:return 'BEGIN'
break;
case 22:return 157
break;
case 23:return 158
break;
case 24:return 72
break;
case 25:return 127
break;
case 26:return 106
break;
case 27:return 'CHARSET'
break;
case 28:return 88
break;
case 29:return "CONVERT"
break;
case 30:return "COUNT"
break;
case 31:return "CROSS"
break;
case 32:return 'DEFAULT'
break;
case 33:return 'DELETE'
break;
case 34:return 87
break;
case 35:return 26
break;
case 36:return 'ENGINE'
break;
case 37:return 'ENUM'
break;
case 38:return 134
break;
case 39:return 82
break;
case 40:return 123
break;
case 41:return 'EXPLAIN'
break;
case 42:return 120
break;
case 43:return 116
break;
case 44:return 'FOREIGN'
break;
case 45:return 41
break;
case 46:return 71
break;
case 47:return 76
break;
case 48:return 80
break;
case 49:return 'HELP'
break;
case 50:return 'IF'
break;
case 51:return 'IDENTITY'
break;
case 52:return 156
break;
case 53:return 'INDEX'
break;
case 54:return 58
break;
case 55:return 'INSERT'
break;
case 56:return 83
break;
case 57:return 38
break;
case 58:return 53
break;
case 59:return 'KEY'
break;
case 60:return 117
break;
case 61:return 59
break;
case 62:return 135
break;
case 63:return 90
break;
case 64:return 'SOURCE'
break;
case 65:return 35
break;
case 66:return "MAX"
break;
case 67:return "MIN"
break;
case 68:return "EXCEPT"
break;
case 69:return 89
break;
case 70:return 155
break;
case 71:return 122
break;
case 72:return 'OFF'
break;
case 73:return 66
break;
case 74:return 92
break;
case 75:return 'OPEN'
break;
case 76:return 154
break;
case 77:return 84
break;
case 78:return 60
break;
case 79:return 61
break;
case 80:return 33
break;
case 81:return 31
break;
case 82:return 'SET'
break;
case 83:return 77
break;
case 84:return 159
break;
case 85:return "SUM"
break;
case 86:return 133
break;
case 87:return 'TO'
break;
case 88:return 36
break;
case 89:return 119
break;
case 90:return 81
break;
case 91:return 29
break;
case 92:return 'UPDATE'
break;
case 93:return 'USE'
break;
case 94:return 68
break;
case 95:return 32
break;
case 96:return 'VALUES'
break;
case 97:return 132
break;
case 98:return 70
break;
case 99:return 94
break;
case 100:return 140
break;
case 101:return 136
break;
case 102:return 137
break;
case 103:return 97
break;
case 104:return 138
break;
case 105:return 139
break;
case 106:return 150
break;
case 107:return 147
break;
case 108:return 149
break;
case 109:return 146
break;
case 110:return 142
break;
case 111:return 141
break;
case 112:return 144
break;
case 113:return 148
break;
case 114:return 143
break;
case 115:return 145
break;
case 116:return 148
break;
case 117:return 46
break;
case 118:return 47
break;
case 119:return 163
break;
case 120:return 'LCUR'
break;
case 121:return 'RCUR'
break;
case 122:return 'RBRA'
break;
case 123:return 50
break;
case 124:return 45
break;
case 125:return 125
break;
case 126:return 9
break;
case 127:return 124
break;
case 128:return 126
break;
case 129:return 4
break;
case 130:return 8
break;
case 131:return 'INVALID'
break;
}
},
rules: [/^(?:@\[)/i,/^(?:\[([^\]])*?\])/i,/^(?:`([^\]])*?`)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:\/\*(.*?)\*\/)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:ABSOLUTE\b)/i,/^(?:ADD\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASSERT\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHARSET\b)/i,/^(?:COLLATE\b)/i,/^(?:CONVERT\b)/i,/^(?:COUNT\b)/i,/^(?:CROSS\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:ENGINE\b)/i,/^(?:ENUM\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:HELP\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:SOURCE\b)/i,/^(?:MATRIX\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MINUS\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:OFF\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OPEN\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:RIGHT\b)/i,/^(?:ROW\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUE\b)/i,/^(?:VALUES\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:->)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:!===)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:@)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

    export {parser};
    