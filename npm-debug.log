0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.21
3 info using node@v0.10.30
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\Андрей\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\Андрей\\AppData\\Roaming\\npm-cache\\alasql\\0.0.10\\package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package.tgz
13 verbose folder .
14 info prepublish alasql@0.0.10
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\Андрей\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile 7ca7a0f5--cache-alasql-0-0-10-package-tgz tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package.tgz
18 verbose lock tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package.tgz C:\Users\Андрей\AppData\Roaming\npm-cache\7ca7a0f5--cache-alasql-0-0-10-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 7ca7a0f5--cache-alasql-0-0-10-package-tgz tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package.tgz
22 silly lockFile 7ca7a0f5--cache-alasql-0-0-10-package-tgz tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package.tgz
23 silly lockFile ab4968d0--npm-cache-alasql-0-0-10-package C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package
24 verbose lock C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package C:\Users\Андрей\AppData\Roaming\npm-cache\ab4968d0--npm-cache-alasql-0-0-10-package.lock
25 silly lockFile ab4968d0--npm-cache-alasql-0-0-10-package C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package
26 silly lockFile ab4968d0--npm-cache-alasql-0-0-10-package C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.10\package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'alasql',
29 silly publish   description: 'Alasql.js - pure JavaScript fast in-memory client-side SQL database',
29 silly publish   version: '0.0.10',
29 silly publish   author: { name: 'Andrey Gershun', email: 'agershun@gmail.com' },
29 silly publish   directories: { example: 'examples', test: 'test' },
29 silly publish   dependencies: { 'es6-promise': '2.0.0' },
29 silly publish   devDependencies: { 'gulp-uglify': '^1.0.1' },
29 silly publish   engines: [ 'node' ],
29 silly publish   repository: { type: 'git', url: 'http://github.com/agershun/alasql.git' },
29 silly publish   bugs: { url: 'https://github.com/agershun/alasql/issues' },
29 silly publish   homepage: 'https://github.com/agershun/alasql',
29 silly publish   main: 'index.js',
29 silly publish   scripts: { test: 'mocha' },
29 silly publish   keywords:
29 silly publish    [ 'sql',
29 silly publish      'alasql',
29 silly publish      'mdx',
29 silly publish      'olap',
29 silly publish      'alasql',
29 silly publish      'parser',
29 silly publish      'stand-alone',
29 silly publish      'relational',
29 silly publish      'database',
29 silly publish      'RDBMS',
29 silly publish      'data',
29 silly publish      'query',
29 silly publish      'statement' ],
29 silly publish   license: 'MIT',
29 silly publish   readme: '# Alasql.js - pure JavaScript client-side in-memory fast SQL-database \r\n\r\nVersion: 0.0.10 Date: November 6, 2014 [Changelog](CHANGELOG.md) \r\n\r\nAlasql - \'[à la SQL](http://en.wiktionary.org/wiki/%C3%A0_la)\' - is a lightweight client-side in-memory SQL database designed to work in browser and Node.js. \r\n\r\n* Alasql was written with pure JavaScript and does not use browser WebSQL database. \r\n* Alasql is fully functional compact sql server with JOINs, GROUPs, UNIONs and limited transactions support.\r\n* Alasql supports ROLLUP(), CUBE() and GROUPING SETS() functions\r\n* Alasql works with all modern versions of browsers (Chrome, Firefox, IE, Safari), Node.js, and mobile iOS and Android.\r\n* Alasql is fast, because it uses some optimization methods.\r\n\r\nCheck Alasql vs other JavaScript databases: \r\n* [Alabase vs. WebSQL](http://jsperf.com/alasql-js-vs-websql)\r\n* [Alabase vs. SQL.js](http://jsperf.com/sql-js-vs-alasql-js/4)\r\n\r\n## Examples\r\n\r\nTry Alasql in Fiddle: [sample 1](http://jsfiddle.net/38hj2uwy/6/), [sample 2](http://jsfiddle.net/6a06dqhc/3/), [sqmple 3](http://jsfiddle.net/606ksx2g/1/)\r\n\r\n\r\nOther examples:\r\n* [Sandbox](examples/sandbox.html)\r\n* [Sieve of Eratosthenes](examples/prime.html)\r\n\r\n## Installation\r\n\r\n### In browser\r\n\r\nInclude file: [alasql.js](./alasql.js) to the page.\r\n\r\n```\r\n  <script src="alasql.js"></script>  \r\n  <script>\r\n    alasql.exec("CREATE TABLE test (language INT, hello STRING)");\r\n    alasql.exec("INSERT INTO test VALUES (1,\'Hello!\')");\r\n    alasql.exec("INSERT INTO test VALUES (2,\'Aloha!\')");\r\n    alasql.exec("INSERT INTO test VALUES (3,\'Bonjour!\')");\r\n    console.table(alasql.exec("SELECT * FROM test WHERE language > 1"));\r\n  </script>\r\n\r\n```\r\n\r\nYou can use alasql.js with define()/require() functions in browser as well, because it supports AMD and UMD.\r\n\r\n### In Node.js\r\n\r\nUse the following command for installation:\r\n```\r\n    npm install alasql\r\n```\r\nThen require alasql.js file:\r\n\r\n```\r\n    var alasql = require(\'alasql\');\r\n\r\n    var db = new alasql.Database();\r\n    \r\n    db.exec("CREATE TABLE test (one INT, two INT)");\r\n    db.tables.test.data = [   // You can mix SQL and JavaScript\r\n        {one:3,two:4},\r\n        {one:5,two:6},\r\n    ];\r\n    var res = db.exec("SELECT * FROM test ORDER BY two DESC");\r\n    console.log(res[0].one);\r\n\r\n```\r\n\r\n### Supported SQL statements\r\n\r\n* SELECT fields FROM tableid1 JOIN tableid2 ON oncond WHERE cond GROUP BY v1,v2 HAVING cond ORDER BY a,b, LIMIT number OFFSET number\r\n* INSERT INTO table \\[ (field1, field2) \\] VALUES (value1, value2)\r\n* UPDATE table SET field = value1, field = value2 WHERE condition \r\n* DELETE FROM table WHERE condition \r\n* CREATE TABLE \\[IF NOT EXISTS\\] table\r\n* DROP TABLE \\[IF EXISTS\\] table\r\n\r\n#### SELECT statement\r\n\r\nNow Alasql.js supports following subset of SELECT syntax:\r\n\r\n* SELECT column1, column2 AS alias3, FUNCTION(field4+field5) AS alias6, SUM(field7) AS alias8, *, table2.*\r\n* FROM table1, table2\r\n* LEFT / RIGHT / INNER  JOIN table2 ON condition / USING columns\r\n* WHERE condition\r\n* GROUP BY column1, column2, ROLLUP(a,b), CUBE(c,d,e), GROUPING SETS(g,h)\r\n* HAVING condition\r\n* ORDER BY column1, column2 DESC, \r\n* LIMIT number [OFFSET number]\r\n\r\n#### Functions\r\n\r\n* ABS\r\n* IIF\r\n* IFNULL\r\n* INSTR\r\n* LOWER\r\n* UPPER\r\n\r\n#### Aggregators\r\n\r\n* SUM()\r\n* COUNT() \r\n* MIN()\r\n* MAX()\r\n\r\n#### Grouping functions\r\n\r\n* ROLLUP()\r\n* CUBE()\r\n* GROUPING SETS()\r\n\r\n### alasql\r\n\r\nalasql is a main variable of module. You can use it immediatly as default database\r\n\r\nIn browser:\r\n```\r\n    <script src="alasql.js"></script>\r\n    <script>\r\n        alasql.exec(\'CREATE TABLE one (two INT)\');\r\n    </script>\r\n```\r\n\r\nor in Node.js:\r\n```\r\n    var alasql = require(\'alasql\');\r\n    alasql.exec(\'CREATE TABLE one (two INT)\');\r\n```\r\n\r\nAnother approach is to create new database:\r\n\r\n```\r\n    var mybase = new alasql Database();\r\n    mybase.exec(\'CREATE TABLE one (two INT)\');\r\n```\r\nYou can give a name to database and then access it from alasql:\r\n```\r\n    var mybase = new alasql Database(\'mybase\');\r\n    console.log(alasql.databases.mybase);\r\n```\r\n\r\nEach database can be used with the following methods:\r\n\r\n* vat db = new alasql.Database() - create new alasql-database\r\n* var res = db.exec("sql-statement") - executes SELECT query and returns array of objects \r\n\r\nUsually, alasql.js works synchronously, but you can use callback.\r\n\r\n```\r\n    db.exec(\'SELECT * FROM test\', function(res){\r\n    \tconsole.log(res);\r\n    });\r\n```\r\n\r\nor you can use aexec() - promised version of exec (in this case you need to install es6-prommise module for Node.js) (this feature is experimental and may be removed):\r\n```\r\n    db.aexec(\'SELECT * FROM test\').then(function(res){\r\n        console.log(res);\r\n    });\r\n```\r\nYou can use compile statements:\r\n```\r\n    var insert = db.compile(\'INSERT INTO one (1,2)\');\r\n    insert();\r\n```\r\n\r\nYou can use parameters in compiled statements:\r\n\r\n```\r\n    var insert1 = db.compile(\'INSERT INTO one (?,?)\');\r\n    var insert2 = db.compile(\'INSERT INTO one ($a,$b)\');\r\n    var insert3 = db.compile(\'INSERT INTO one (:a,:b)\');\r\n\r\n    insert1([1,2]);\r\n    insert2({a:1,b:2});\r\n    insert3({a:3,b:4});\r\n\r\n    db.exec(\'INSERT INTO one (?,?)\',[5,6]);\r\n\r\n```\r\n\r\n### Transactions\r\n\r\nThere is a limited support of transactions (with tx.rollback() and tx.commit() functions):\r\n\r\n```\r\n    db = new alasql.Database("mydb");\r\n    db.transaction(function(tx) {\r\n        tx.exec(\'SELECT COUNT(*) FROM students\');\r\n        tx.rollback();\r\n    });     \r\n\r\n```\r\n\r\n### SQL to JavaScript parser and compiler\r\n\r\nYou can use Alasql to parse and compile SQL statements:\r\n\r\n```\r\n    var ast = alasql.parser.parse("SELECT * FROM one");\r\n    var statement = alasql.compile("SELECT * FROM one");\r\n    statement();\r\n```\r\n\r\nAlasql uses wonderful [Jison](jison.org) parser to produce AST-tree.\r\n\r\n\r\n### Performance\r\n\r\nAccording the preliminary performance tests alasql.js is faster than [sql.js]() in 5 to 10 times on more than 1000 records tables, and 2 to 3 times to [WebSQL]() on different queries. \r\n\r\nAlasql has four different optimization algorithm:\r\n* Caching of compiled queries\r\n* Joins: Preindexation of joined table\r\n* Joins: Prefiltering of WHERE expressions\r\n\r\nNow optimization algorithm has some limitations and therefore "table1 JOIN table2 USING column1, column2" is faster than "table1 JOIN table2 ON table1.column1 = table2.column1 AND table1.column2 = table2.column2 ", but with one column it is ok.\r\n\r\n### Limitations\r\n\r\nIt is Ok with select for 1000000 records or 2 join two tables by 10000 records in each. \r\n\r\n### Tests\r\n\r\nI use mocha for tests. Run mocha from command line:\r\n\r\n```\r\n    mocha\r\n```\r\nor run [test/main.html](test/main.html) in browser.\r\n\r\n\r\n### Known Bugs\r\n\r\n1. Semicolon with multiple statements\r\n2. ORDER BY clause on three or more UNIONS\r\n3. There are many of them. Please, [give me a chance](https://github.com/agershun/alasql/issues) to fix them  \r\n\r\n### Future Plans\r\n\r\nRead my [to do](TODO.md) page\r\n\r\n## Similar projects (SQL database, MDX/OLAP on JavaScript)\r\nSQL-database:\r\n* [sql.js](https://github.com/kripken/sql.js) - port of SQLike to JavaScript\r\n* [SequelSphere](http://www.sequelsphere.com/) - commercial SQL-database\r\n* [Datamanip](https://github.com/RossKor/datamanip.js)\r\n* [jsonQ.js](https://github.com/emasstudio/jsonQ.js)\r\n* [SQittle](https://github.com/moxley/sqittle)\r\n* [SQLinJS](https://github.com/nuxy/SQLinJS)\r\n* [jQuery-SQL-Emulator](https://github.com/maciakl/jQuery-SQL-Emulator)\r\n\r\nLINQ realizations:\r\n* [SQLike](http://www.thomasfrank.se/sqlike.html) - \r\n* [JSLINQ](http://jslinq.codeplex.com/)\r\n* [JavaScriptSQL](http://javascriptsql.sourceforge.net/ARCH/en/index.html)\r\n* [TrimQuery](https://code.google.com/p/trimpath/wiki/TrimQuery)\r\n* [jlinq](http://www.hugoware.net/projects/jlinq)\r\n* [jSQL](https://github.com/PaulGuo/jSQL)\r\n\r\nOther:\r\n* [dom-storage-query-language](https://code.google.com/p/dom-storage-query-language/)\r\n* [kombai-js](https://code.google.com/p/kombai-js/)\r\n\r\nJavaScript databases:\r\n* [SearchJS](https://github.com/deitch/searchjs)\r\n* [TaffyDB](http://www.taffydb.com/)\r\n* [River](https://github.com/andykent/river)\r\n* [CrossFilter](https://github.com/square/crossfilter)\r\n* [js-hypercube](https://github.com/thesmart/js-hypercube)\r\n* [cubico](https://github.com/diegodayan/cubico)\r\n* [SimpleMemolap](https://github.com/ajlopez/SimpleMemolap)\r\n\r\n## Credits\r\n\r\nMany thanks to Andrew Kent for his SQL Parser and other people for useful tools, which made our work much easier.\r\n\r\n## License\r\n\r\n(c) 2014, Andrey Gershun (agershun@gmail.com), [MIT licence information](LICENSE)\r\n\r\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: '3043dab31f161037a936c3d510fe918f66d499e5',
29 silly publish   _id: 'alasql@0.0.10',
29 silly publish   _shasum: 'c02e912e0de8424610997a6e6c51fcfdc198539f',
29 silly publish   _from: '.' }
30 verbose request where is /alasql
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 4127411c0b920570
33 verbose url raw /alasql
34 verbose url resolving [ 'https://registry.npmjs.org/', './alasql' ]
35 verbose url resolved https://registry.npmjs.org/alasql
36 verbose request where is https://registry.npmjs.org/alasql
37 info trying registry request attempt 1 at 17:31:05
38 http PUT https://registry.npmjs.org/alasql
39 http 403 https://registry.npmjs.org/alasql
40 verbose headers { date: 'Thu, 06 Nov 2014 14:31:07 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '14770',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-fra1228-FRA',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1415284265.404993,VS0,VE2345',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.0.10
42 error old={"name":"alasql","description":"Alasql.js - pure JavaScript fast in-memory client-side SQL database","version":"0.0.10","author":{"name":"Andrey Gershun","email":"agershun@gmail.com"},"directories":{"example":"examples","test":"test"},"dependencies":{"es6-promise":"2.0.0"},"devDependencies":{"gulp-uglify":"^1.0.1"},"engines":["node"],"repository":{"type":"git","url":"http://github.com/agershun/alasql.git"},"bugs":{"url":"https://github.com/agershun/alasql/issues"},"homepage":"https://github.com/agershun/alasql","main":"index.js","scripts":{"test":"mocha"},"keywords":["sql","alasql","mdx","olap","alasql","parser","stand-alone","relational","database","RDBMS","data","query","statement"],"license":"MIT","gitHead":"b170623378e1d7bdcd747a1f404f7fd96b713805","_id":"alasql@0.0.10","_shasum":"6e74ced517f7ff096e002cc451f0c0755b6b98fc","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"agershun","email":"agershun@gmail.com"},"maintainers":[{"name":"agershun","email":"agershun@gmail.com"}],"dist":{"shasum":"6e74ced517f7ff096e002cc451f0c0755b6b98fc","tarball":"http://registry.npmjs.org/alasql/-/alasql-0.0.10.tgz"}}
42 error new={"name":"alasql","description":"Alasql.js - pure JavaScript fast in-memory client-side SQL database","version":"0.0.10","author":{"name":"Andrey Gershun","email":"agershun@gmail.com"},"directories":{"example":"examples","test":"test"},"dependencies":{"es6-promise":"2.0.0"},"devDependencies":{"gulp-uglify":"^1.0.1"},"engines":["node"],"repository":{"type":"git","url":"http://github.com/agershun/alasql.git"},"bugs":{"url":"https://github.com/agershun/alasql/issues"},"homepage":"https://github.com/agershun/alasql","main":"index.js","scripts":{"test":"mocha"},"keywords":["sql","alasql","mdx","olap","alasql","parser","stand-alone","relational","database","RDBMS","data","query","statement"],"license":"MIT","readme":"# Alasql.js - pure JavaScript client-side in-memory fast SQL-database \u000d\u000a\u000d\u000aVersion: 0.0.10 Date: November 6, 2014 [Changelog](CHANGELOG.md) \u000d\u000a\u000d\u000aAlasql - '[à la SQL](http://en.wiktionary.org/wiki/%C3%A0_la)' - is a lightweight client-side in-memory SQL database designed to work in browser and Node.js. \u000d\u000a\u000d\u000a* Alasql was written with pure JavaScript and does not use browser WebSQL database. \u000d\u000a* Alasql is fully functional compact sql server with JOINs, GROUPs, UNIONs and limited transactions support.\u000d\u000a* Alasql supports ROLLUP(), CUBE() and GROUPING SETS() functions\u000d\u000a* Alasql works with all modern versions of browsers (Chrome, Firefox, IE, Safari), Node.js, and mobile iOS and Android.\u000d\u000a* Alasql is fast, because it uses some optimization methods.\u000d\u000a\u000d\u000aCheck Alasql vs other JavaScript databases: \u000d\u000a* [Alabase vs. WebSQL](http://jsperf.com/alasql-js-vs-websql)\u000d\u000a* [Alabase vs. SQL.js](http://jsperf.com/sql-js-vs-alasql-js/4)\u000d\u000a\u000d\u000a## Examples\u000d\u000a\u000d\u000aTry Alasql in Fiddle: [sample 1](http://jsfiddle.net/38hj2uwy/6/), [sample 2](http://jsfiddle.net/6a06dqhc/3/), [sqmple 3](http://jsfiddle.net/606ksx2g/1/)\u000d\u000a\u000d\u000a\u000d\u000aOther examples:\u000d\u000a* [Sandbox](examples/sandbox.html)\u000d\u000a* [Sieve of Eratosthenes](examples/prime.html)\u000d\u000a\u000d\u000a## Installation\u000d\u000a\u000d\u000a### In browser\u000d\u000a\u000d\u000aInclude file: [alasql.js](./alasql.js) to the page.\u000d\u000a\u000d\u000a```\u000d\u000a  <script src=\"alasql.js\"></script>  \u000d\u000a  <script>\u000d\u000a    alasql.exec(\"CREATE TABLE test (language INT, hello STRING)\");\u000d\u000a    alasql.exec(\"INSERT INTO test VALUES (1,'Hello!')\");\u000d\u000a    alasql.exec(\"INSERT INTO test VALUES (2,'Aloha!')\");\u000d\u000a    alasql.exec(\"INSERT INTO test VALUES (3,'Bonjour!')\");\u000d\u000a    console.table(alasql.exec(\"SELECT * FROM test WHERE language > 1\"));\u000d\u000a  </script>\u000d\u000a\u000d\u000a```\u000d\u000a\u000d\u000aYou can use alasql.js with define()/require() functions in browser as well, because it supports AMD and UMD.\u000d\u000a\u000d\u000a### In Node.js\u000d\u000a\u000d\u000aUse the following command for installation:\u000d\u000a```\u000d\u000a    npm install alasql\u000d\u000a```\u000d\u000aThen require alasql.js file:\u000d\u000a\u000d\u000a```\u000d\u000a    var alasql = require('alasql');\u000d\u000a\u000d\u000a    var db = new alasql.Database();\u000d\u000a    \u000d\u000a    db.exec(\"CREATE TABLE test (one INT, two INT)\");\u000d\u000a    db.tables.test.data = [   // You can mix SQL and JavaScript\u000d\u000a        {one:3,two:4},\u000d\u000a        {one:5,two:6},\u000d\u000a    ];\u000d\u000a    var res = db.exec(\"SELECT * FROM test ORDER BY two DESC\");\u000d\u000a    console.log(res[0].one);\u000d\u000a\u000d\u000a```\u000d\u000a\u000d\u000a### Supported SQL statements\u000d\u000a\u000d\u000a* SELECT fields FROM tableid1 JOIN tableid2 ON oncond WHERE cond GROUP BY v1,v2 HAVING cond ORDER BY a,b, LIMIT number OFFSET number\u000d\u000a* INSERT INTO table \\[ (field1, field2) \\] VALUES (value1, value2)\u000d\u000a* UPDATE table SET field = value1, field = value2 WHERE condition \u000d\u000a* DELETE FROM table WHERE condition \u000d\u000a* CREATE TABLE \\[IF NOT EXISTS\\] table\u000d\u000a* DROP TABLE \\[IF EXISTS\\] table\u000d\u000a\u000d\u000a#### SELECT statement\u000d\u000a\u000d\u000aNow Alasql.js supports following subset of SELECT syntax:\u000d\u000a\u000d\u000a* SELECT column1, column2 AS alias3, FUNCTION(field4+field5) AS alias6, SUM(field7) AS alias8, *, table2.*\u000d\u000a* FROM table1, table2\u000d\u000a* LEFT / RIGHT / INNER  JOIN table2 ON condition / USING columns\u000d\u000a* WHERE condition\u000d\u000a* GROUP BY column1, column2, ROLLUP(a,b), CUBE(c,d,e), GROUPING SETS(g,h)\u000d\u000a* HAVING condition\u000d\u000a* ORDER BY column1, column2 DESC, \u000d\u000a* LIMIT number [OFFSET number]\u000d\u000a\u000d\u000a#### Functions\u000d\u000a\u000d\u000a* ABS\u000d\u000a* IIF\u000d\u000a* IFNULL\u000d\u000a* INSTR\u000d\u000a* LOWER\u000d\u000a* UPPER\u000d\u000a\u000d\u000a#### Aggregators\u000d\u000a\u000d\u000a* SUM()\u000d\u000a* COUNT() \u000d\u000a* MIN()\u000d\u000a* MAX()\u000d\u000a\u000d\u000a#### Grouping functions\u000d\u000a\u000d\u000a* ROLLUP()\u000d\u000a* CUBE()\u000d\u000a* GROUPING SETS()\u000d\u000a\u000d\u000a### alasql\u000d\u000a\u000d\u000aalasql is a main variable of module. You can use it immediatly as default database\u000d\u000a\u000d\u000aIn browser:\u000d\u000a```\u000d\u000a    <script src=\"alasql.js\"></script>\u000d\u000a    <script>\u000d\u000a        alasql.exec('CREATE TABLE one (two INT)');\u000d\u000a    </script>\u000d\u000a```\u000d\u000a\u000d\u000aor in Node.js:\u000d\u000a```\u000d\u000a    var alasql = require('alasql');\u000d\u000a    alasql.exec('CREATE TABLE one (two INT)');\u000d\u000a```\u000d\u000a\u000d\u000aAnother approach is to create new database:\u000d\u000a\u000d\u000a```\u000d\u000a    var mybase = new alasql Database();\u000d\u000a    mybase.exec('CREATE TABLE one (two INT)');\u000d\u000a```\u000d\u000aYou can give a name to database and then access it from alasql:\u000d\u000a```\u000d\u000a    var mybase = new alasql Database('mybase');\u000d\u000a    console.log(alasql.databases.mybase);\u000d\u000a```\u000d\u000a\u000d\u000aEach database can be used with the following methods:\u000d\u000a\u000d\u000a* vat db = new alasql.Database() - create new alasql-database\u000d\u000a* var res = db.exec(\"sql-statement\") - executes SELECT query and returns array of objects \u000d\u000a\u000d\u000aUsually, alasql.js works synchronously, but you can use callback.\u000d\u000a\u000d\u000a```\u000d\u000a    db.exec('SELECT * FROM test', function(res){\u000d\u000a    \u0009console.log(res);\u000d\u000a    });\u000d\u000a```\u000d\u000a\u000d\u000aor you can use aexec() - promised version of exec (in this case you need to install es6-prommise module for Node.js) (this feature is experimental and may be removed):\u000d\u000a```\u000d\u000a    db.aexec('SELECT * FROM test').then(function(res){\u000d\u000a        console.log(res);\u000d\u000a    });\u000d\u000a```\u000d\u000aYou can use compile statements:\u000d\u000a```\u000d\u000a    var insert = db.compile('INSERT INTO one (1,2)');\u000d\u000a    insert();\u000d\u000a```\u000d\u000a\u000d\u000aYou can use parameters in compiled statements:\u000d\u000a\u000d\u000a```\u000d\u000a    var insert1 = db.compile('INSERT INTO one (?,?)');\u000d\u000a    var insert2 = db.compile('INSERT INTO one ($a,$b)');\u000d\u000a    var insert3 = db.compile('INSERT INTO one (:a,:b)');\u000d\u000a\u000d\u000a    insert1([1,2]);\u000d\u000a    insert2({a:1,b:2});\u000d\u000a    insert3({a:3,b:4});\u000d\u000a\u000d\u000a    db.exec('INSERT INTO one (?,?)',[5,6]);\u000d\u000a\u000d\u000a```\u000d\u000a\u000d\u000a### Transactions\u000d\u000a\u000d\u000aThere is a limited support of transactions (with tx.rollback() and tx.commit() functions):\u000d\u000a\u000d\u000a```\u000d\u000a    db = new alasql.Database(\"mydb\");\u000d\u000a    db.transaction(function(tx) {\u000d\u000a        tx.exec('SELECT COUNT(*) FROM students');\u000d\u000a        tx.rollback();\u000d\u000a    });     \u000d\u000a\u000d\u000a```\u000d\u000a\u000d\u000a### SQL to JavaScript parser and compiler\u000d\u000a\u000d\u000aYou can use Alasql to parse and compile SQL statements:\u000d\u000a\u000d\u000a```\u000d\u000a    var ast = alasql.parser.parse(\"SELECT * FROM one\");\u000d\u000a    var statement = alasql.compile(\"SELECT * FROM one\");\u000d\u000a    statement();\u000d\u000a```\u000d\u000a\u000d\u000aAlasql uses wonderful [Jison](jison.org) parser to produce AST-tree.\u000d\u000a\u000d\u000a\u000d\u000a### Performance\u000d\u000a\u000d\u000aAccording the preliminary performance tests alasql.js is faster than [sql.js]() in 5 to 10 times on more than 1000 records tables, and 2 to 3 times to [WebSQL]() on different queries. \u000d\u000a\u000d\u000aAlasql has four different optimization algorithm:\u000d\u000a* Caching of compiled queries\u000d\u000a* Joins: Preindexation of joined table\u000d\u000a* Joins: Prefiltering of WHERE expressions\u000d\u000a\u000d\u000aNow optimization algorithm has some limitations and therefore \"table1 JOIN table2 USING column1, column2\" is faster than \"table1 JOIN table2 ON table1.column1 = table2.column1 AND table1.column2 = table2.column2 \", but with one column it is ok.\u000d\u000a\u000d\u000a### Limitations\u000d\u000a\u000d\u000aIt is Ok with select for 1000000 records or 2 join two tables by 10000 records in each. \u000d\u000a\u000d\u000a### Tests\u000d\u000a\u000d\u000aI use mocha for tests. Run mocha from command line:\u000d\u000a\u000d\u000a```\u000d\u000a    mocha\u000d\u000a```\u000d\u000aor run [test/main.html](test/main.html) in browser.\u000d\u000a\u000d\u000a\u000d\u000a### Known Bugs\u000d\u000a\u000d\u000a1. Semicolon with multiple statements\u000d\u000a2. ORDER BY clause on three or more UNIONS\u000d\u000a3. There are many of them. Please, [give me a chance](https://github.com/agershun/alasql/issues) to fix them  \u000d\u000a\u000d\u000a### Future Plans\u000d\u000a\u000d\u000aRead my [to do](TODO.md) page\u000d\u000a\u000d\u000a## Similar projects (SQL database, MDX/OLAP on JavaScript)\u000d\u000aSQL-database:\u000d\u000a* [sql.js](https://github.com/kripken/sql.js) - port of SQLike to JavaScript\u000d\u000a* [SequelSphere](http://www.sequelsphere.com/) - commercial SQL-database\u000d\u000a* [Datamanip](https://github.com/RossKor/datamanip.js)\u000d\u000a* [jsonQ.js](https://github.com/emasstudio/jsonQ.js)\u000d\u000a* [SQittle](https://github.com/moxley/sqittle)\u000d\u000a* [SQLinJS](https://github.com/nuxy/SQLinJS)\u000d\u000a* [jQuery-SQL-Emulator](https://github.com/maciakl/jQuery-SQL-Emulator)\u000d\u000a\u000d\u000aLINQ realizations:\u000d\u000a* [SQLike](http://www.thomasfrank.se/sqlike.html) - \u000d\u000a* [JSLINQ](http://jslinq.codeplex.com/)\u000d\u000a* [JavaScriptSQL](http://javascriptsql.sourceforge.net/ARCH/en/index.html)\u000d\u000a* [TrimQuery](https://code.google.com/p/trimpath/wiki/TrimQuery)\u000d\u000a* [jlinq](http://www.hugoware.net/projects/jlinq)\u000d\u000a* [jSQL](https://github.com/PaulGuo/jSQL)\u000d\u000a\u000d\u000aOther:\u000d\u000a* [dom-storage-query-language](https://code.google.com/p/dom-storage-query-language/)\u000d\u000a* [kombai-js](https://code.google.com/p/kombai-js/)\u000d\u000a\u000d\u000aJavaScript databases:\u000d\u000a* [SearchJS](https://github.com/deitch/searchjs)\u000d\u000a* [TaffyDB](http://www.taffydb.com/)\u000d\u000a* [River](https://github.com/andykent/river)\u000d\u000a* [CrossFilter](https://github.com/square/crossfilter)\u000d\u000a* [js-hypercube](https://github.com/thesmart/js-hypercube)\u000d\u000a* [cubico](https://github.com/diegodayan/cubico)\u000d\u000a* [SimpleMemolap](https://github.com/ajlopez/SimpleMemolap)\u000d\u000a\u000d\u000a## Credits\u000d\u000a\u000d\u000aMany thanks to Andrew Kent for his SQL Parser and other people for useful tools, which made our work much easier.\u000d\u000a\u000d\u000a## License\u000d\u000a\u000d\u000a(c) 2014, Andrey Gershun (agershun@gmail.com), [MIT licence information](LICENSE)\u000d\u000a\u000d\u000a","readmeFilename":"README.md","gitHead":"3043dab31f161037a936c3d510fe918f66d499e5","_id":"alasql@0.0.10","_shasum":"c02e912e0de8424610997a6e6c51fcfdc198539f","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"agershun","email":"agershun@gmail.com"},"maintainers":[{"name":"agershun","email":"agershun@gmail.com"}],"dist":{"shasum":"c02e912e0de8424610997a6e6c51fcfdc198539f","tarball":"http://registry.npmjs.org/alasql/-/alasql-0.0.10.tgz"}}: alasql
42 error     at RegClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:300:14)
42 error     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:238:65)
42 error     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:123:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:893:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:844:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:938:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Windows_NT 6.2.9200
45 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error cwd C:\Users\Андрей\Dropbox\repo\alasql
47 error node -v v0.10.30
48 error npm -v 1.4.21
49 verbose exit [ 1, true ]
