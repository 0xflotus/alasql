0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish',
1 verbose cli   './' ]
2 info using npm@1.4.21
3 info using node@v0.10.30
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ './' ]
6 verbose cache add [ './', null ]
7 verbose cache add name=undefined spec="./" args=["./",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: './',
8 verbose parsed url   path: './',
8 verbose parsed url   href: './' }
9 silly lockFile 0ee6c175- ./
10 verbose lock ./ C:\Users\Андрей\AppData\Roaming\npm-cache\0ee6c175-.lock
11 verbose tar pack [ 'C:\\Users\\Андрей\\AppData\\Roaming\\npm-cache\\alasql\\0.0.3\\package.tgz',
11 verbose tar pack   './' ]
12 verbose tarball C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package.tgz
13 verbose folder ./
14 info prepublish alasql@0.0.3
15 silly lockFile 04cb2bca-tar tar://./
16 verbose lock tar://./ C:\Users\Андрей\AppData\Roaming\npm-cache\04cb2bca-tar.lock
17 silly lockFile 4a26eb5f-m-cache-alasql-0-0-3-package-tgz tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package.tgz
18 verbose lock tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package.tgz C:\Users\Андрей\AppData\Roaming\npm-cache\4a26eb5f-m-cache-alasql-0-0-3-package-tgz.lock
19 silly lockFile 04cb2bca-tar tar://./
20 silly lockFile 04cb2bca-tar tar://./
21 silly lockFile 4a26eb5f-m-cache-alasql-0-0-3-package-tgz tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package.tgz
22 silly lockFile 4a26eb5f-m-cache-alasql-0-0-3-package-tgz tar://C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package.tgz
23 silly lockFile 8a333d41-g-npm-cache-alasql-0-0-3-package C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package
24 verbose lock C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package C:\Users\Андрей\AppData\Roaming\npm-cache\8a333d41-g-npm-cache-alasql-0-0-3-package.lock
25 silly lockFile 8a333d41-g-npm-cache-alasql-0-0-3-package C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package
26 silly lockFile 8a333d41-g-npm-cache-alasql-0-0-3-package C:\Users\Андрей\AppData\Roaming\npm-cache\alasql\0.0.3\package
27 silly lockFile 0ee6c175- ./
28 silly lockFile 0ee6c175- ./
29 silly publish { name: 'alasql',
29 silly publish   description: 'Pure JavaScript fast client-side SQL database',
29 silly publish   version: '0.0.3',
29 silly publish   author: { name: 'Andrey Gershun', email: 'agershun@gmail.com' },
29 silly publish   directories: { example: 'examples', test: 'test' },
29 silly publish   dependencies: {},
29 silly publish   devDependencies: {},
29 silly publish   engines: [ 'node' ],
29 silly publish   repository: { type: 'git', url: 'http://github.com/agershun/alasql.git' },
29 silly publish   bugs: { url: 'https://github.com/agershun/alasql/issues' },
29 silly publish   homepage: 'https://github.com/agershun/alasql',
29 silly publish   main: 'index.js',
29 silly publish   scripts: { test: 'mocha' },
29 silly publish   keywords:
29 silly publish    [ 'sql',
29 silly publish      'alasql',
29 silly publish      'stand-alone',
29 silly publish      'relational',
29 silly publish      'database',
29 silly publish      'RDBMS',
29 silly publish      'data',
29 silly publish      'query',
29 silly publish      'statement' ],
29 silly publish   license: 'MIT',
29 silly publish   gitHead: '99efe1f24cee2230a53f0a48d0416feb07cc9a57',
29 silly publish   readme: '# alasql.js - pure JavaScript client-side SQL-database \r\n\r\nVersion: 0.0.3 Date: October 28, 2014 [Changelog](CHANGELOG.md) \r\n\r\nalasql.js - \'[à la SQL](http://en.wiktionary.org/wiki/%C3%A0_la)\' - is a lightweight client-side SQL database designed to work in browser and Node.js. It uses [SQL Parser](https://github.com/forward/sql-parser) by Andrew Kent for parsing of SQL statements.\r\n\r\nTry it in [Fiddle](http://jsfiddle.net/agershun/38hj2uwy/3/)\r\n\r\n## Installation\r\n\r\n### In browser\r\n\r\nJust add two files [alasql.js](lib/alasql.js) and [sql-parser.js](lib/sql-parser.js) to the page.\r\n\r\n```\r\n  <script src="sql-parser.js"></script>\r\n  <script src="alasql.js"></script>\t\r\n  <script>\r\n    var db = new alasql.Database();\r\n    db.run("CREATE TABLE test (one INT, two NVARCHAR(MAX))");\r\n    db.run("INSERT INTO test (1,2)");\r\n    db.tables.test.recs.push({one:3,two:4}); // You can add values directly to array\r\n    console.table(db.exec("SELECT * FROM test"));\r\n  </script>\r\n\r\n```\r\n\r\nYou can use alasql.js with define()/require() functions as well, because it supports UMD.\r\n\r\n### In Node.js\r\n\r\nUse the following command for installation:\r\n```\r\n    npm install alasql\r\n```\r\nThen require alasql.js file:\r\n\r\n```\r\n    var alasql = require(\'alasql\');\r\n    var db = new alasql.Database();\r\n    db.run("CREATE TABLE test (one INT, two INT)");\r\n    db.tables.test.recs = [\r\n        {one:3,two:4},\r\n        {one:5,two:6},\r\n    ];\r\n    var res = db.exec("SELECT * FROM test ORDER BY two DESC");\r\n    console.log(res[0].one);\r\n\r\n```\r\n\r\n### Supported SQL statements\r\n\r\n* SELECT conditions FROM tableid1 JOIN tableid2 ON oncond WHERE cond GROUP BY v1,v2 HAVING cond ORDER BY a,b, LIMIT number\r\n* INSERT INTO table \\[ (field1, field2) \\] VALUES (value1, value2)\r\n* UPDATE table SET field = value1, field = value2 WHERE condition \r\n* DELETE FROM table WHERE condition \r\n* CREATE TABLE \\[IF NOT EXIST\\] table\r\n* DROP TABLE \\[IF EXIST\\] table\r\n* ALTER TABLE table1 RENAME TO table2\r\n\r\n\r\n#### SELECT statement\r\n\r\nNow alasql.js supports following subset of SELECT syntax:\r\n\r\n* SELECT field1, field2 AS alias3, FUNCTION(field4+field5) AS alias6, SUM(field7) AS alias8, *, table2.*\r\n* FROM table1\r\n* LEFT OUTER/INNER JOIN table2 ON condition\r\n* WHERE condition\r\n* GROUP BY field1, alias3\r\n* HAVING condition\r\n* ORDER BY field1, alias3\r\n* LIMIT number\r\n\r\n#### Functions\r\n\r\n* ABS\r\n* MIN\r\n* MAX\r\n* some others (to be continued)\r\n\r\n#### Aggregators\r\n\r\n* SUM()\r\n* COUNT() \r\n\r\n### Database methods\r\n\r\nEach database can be used with the following methods:\r\n\r\n* vat db = new Database() - create new alasql-database\r\n* var res = db.exec(sql-statement) - executes SELECT query and returns array of objects \r\n\r\nalasql.js works synchronously.\r\n\r\n### Performance\r\n\r\nAccording the preliminary performance tests alasql.js is faster than [sql.js]() in 5 to 10 times on more than 1000 records tables, and compete [WebSQL]() on different queries. \r\n\r\nThe preliminary [performance report](PERFORMANCE.md).\r\n\r\n### Limitations\r\n\r\nIt is ok with 1000000 records in memory of browser. \r\n\r\n### Tests\r\n\r\nI use mocha for tests. Run mocha from command line:\r\n\r\n```\r\n    mocha\r\n```\r\nor run [test/main.html](test/main.html) in browser.\r\n\r\n\r\n### Known Bugs\r\n\r\n1. There is a \'[STAR bug](https://github.com/forward/sql-parser/issues/6)\' in sql-parser, therefore\r\nit is still impossible to use multiplication function.\r\n2. There are many others... \r\n\r\n### Future Plans\r\n\r\nRead my [to do](TODO.md) page\r\n\r\n## Credits\r\n\r\nMany thanks to Andrew Kent for his SQL Parser and other people for useful tools, which made our work much easier.\r\n\r\n## License\r\n\r\n(c) 2014, Andrey Gershun (agershun@gmail.com), [MIT licence information](LICENSE)\r\n\r\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   _id: 'alasql@0.0.3',
29 silly publish   _shasum: '3aa2328b7861b550ac1fc68d3ac729e58a2acd74',
29 silly publish   _from: './' }
30 verbose request where is /alasql
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 5a06774786b37afd
33 verbose url raw /alasql
34 verbose url resolving [ 'https://registry.npmjs.org/', './alasql' ]
35 verbose url resolved https://registry.npmjs.org/alasql
36 verbose request where is https://registry.npmjs.org/alasql
37 info trying registry request attempt 1 at 18:46:25
38 http PUT https://registry.npmjs.org/alasql
39 http 403 https://registry.npmjs.org/alasql
40 verbose headers { date: 'Tue, 28 Oct 2014 15:46:29 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '7819',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-fra1220-FRA',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1414511187.127846,VS0,VE2345',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.0.3
42 error old={"name":"alasql","description":"Pure JavaScript fast client-side SQL database","version":"0.0.3","author":{"name":"Andrey Gershun","email":"agershun@gmail.com"},"directories":{"example":"examples","test":"test"},"dependencies":{},"devDependencies":{},"engines":["node"],"repository":{"type":"git","url":"http://github.com/agershun/alasql.git"},"bugs":{"url":"https://github.com/agershun/alasql/issues"},"homepage":"https://github.com/agershun/alasql","main":"index.js","scripts":{"test":"mocha"},"keywords":["sql","alasql","stand-alone","relational","database","RDBMS","data","query","statement"],"license":"MIT","gitHead":"e1d4fafcb6603b56698123f1380fad97a9664033","_id":"alasql@0.0.3","_shasum":"73c3a9e9a2657273f46e4e6c44b4d7bf5b08a20c","_from":"./","_npmVersion":"1.4.21","_npmUser":{"name":"agershun","email":"agershun@gmail.com"},"maintainers":[{"name":"agershun","email":"agershun@gmail.com"}],"dist":{"shasum":"73c3a9e9a2657273f46e4e6c44b4d7bf5b08a20c","tarball":"http://registry.npmjs.org/alasql/-/alasql-0.0.3.tgz"}}
42 error new={"name":"alasql","description":"Pure JavaScript fast client-side SQL database","version":"0.0.3","author":{"name":"Andrey Gershun","email":"agershun@gmail.com"},"directories":{"example":"examples","test":"test"},"dependencies":{},"devDependencies":{},"engines":["node"],"repository":{"type":"git","url":"http://github.com/agershun/alasql.git"},"bugs":{"url":"https://github.com/agershun/alasql/issues"},"homepage":"https://github.com/agershun/alasql","main":"index.js","scripts":{"test":"mocha"},"keywords":["sql","alasql","stand-alone","relational","database","RDBMS","data","query","statement"],"license":"MIT","gitHead":"99efe1f24cee2230a53f0a48d0416feb07cc9a57","readme":"# alasql.js - pure JavaScript client-side SQL-database \u000d\u000a\u000d\u000aVersion: 0.0.3 Date: October 28, 2014 [Changelog](CHANGELOG.md) \u000d\u000a\u000d\u000aalasql.js - '[à la SQL](http://en.wiktionary.org/wiki/%C3%A0_la)' - is a lightweight client-side SQL database designed to work in browser and Node.js. It uses [SQL Parser](https://github.com/forward/sql-parser) by Andrew Kent for parsing of SQL statements.\u000d\u000a\u000d\u000aTry it in [Fiddle](http://jsfiddle.net/agershun/38hj2uwy/3/)\u000d\u000a\u000d\u000a## Installation\u000d\u000a\u000d\u000a### In browser\u000d\u000a\u000d\u000aJust add two files [alasql.js](lib/alasql.js) and [sql-parser.js](lib/sql-parser.js) to the page.\u000d\u000a\u000d\u000a```\u000d\u000a  <script src=\"sql-parser.js\"></script>\u000d\u000a  <script src=\"alasql.js\"></script>\u0009\u000d\u000a  <script>\u000d\u000a    var db = new alasql.Database();\u000d\u000a    db.run(\"CREATE TABLE test (one INT, two NVARCHAR(MAX))\");\u000d\u000a    db.run(\"INSERT INTO test (1,2)\");\u000d\u000a    db.tables.test.recs.push({one:3,two:4}); // You can add values directly to array\u000d\u000a    console.table(db.exec(\"SELECT * FROM test\"));\u000d\u000a  </script>\u000d\u000a\u000d\u000a```\u000d\u000a\u000d\u000aYou can use alasql.js with define()/require() functions as well, because it supports UMD.\u000d\u000a\u000d\u000a### In Node.js\u000d\u000a\u000d\u000aUse the following command for installation:\u000d\u000a```\u000d\u000a    npm install alasql\u000d\u000a```\u000d\u000aThen require alasql.js file:\u000d\u000a\u000d\u000a```\u000d\u000a    var alasql = require('alasql');\u000d\u000a    var db = new alasql.Database();\u000d\u000a    db.run(\"CREATE TABLE test (one INT, two INT)\");\u000d\u000a    db.tables.test.recs = [\u000d\u000a        {one:3,two:4},\u000d\u000a        {one:5,two:6},\u000d\u000a    ];\u000d\u000a    var res = db.exec(\"SELECT * FROM test ORDER BY two DESC\");\u000d\u000a    console.log(res[0].one);\u000d\u000a\u000d\u000a```\u000d\u000a\u000d\u000a### Supported SQL statements\u000d\u000a\u000d\u000a* SELECT conditions FROM tableid1 JOIN tableid2 ON oncond WHERE cond GROUP BY v1,v2 HAVING cond ORDER BY a,b, LIMIT number\u000d\u000a* INSERT INTO table \\[ (field1, field2) \\] VALUES (value1, value2)\u000d\u000a* UPDATE table SET field = value1, field = value2 WHERE condition \u000d\u000a* DELETE FROM table WHERE condition \u000d\u000a* CREATE TABLE \\[IF NOT EXIST\\] table\u000d\u000a* DROP TABLE \\[IF EXIST\\] table\u000d\u000a* ALTER TABLE table1 RENAME TO table2\u000d\u000a\u000d\u000a\u000d\u000a#### SELECT statement\u000d\u000a\u000d\u000aNow alasql.js supports following subset of SELECT syntax:\u000d\u000a\u000d\u000a* SELECT field1, field2 AS alias3, FUNCTION(field4+field5) AS alias6, SUM(field7) AS alias8, *, table2.*\u000d\u000a* FROM table1\u000d\u000a* LEFT OUTER/INNER JOIN table2 ON condition\u000d\u000a* WHERE condition\u000d\u000a* GROUP BY field1, alias3\u000d\u000a* HAVING condition\u000d\u000a* ORDER BY field1, alias3\u000d\u000a* LIMIT number\u000d\u000a\u000d\u000a#### Functions\u000d\u000a\u000d\u000a* ABS\u000d\u000a* MIN\u000d\u000a* MAX\u000d\u000a* some others (to be continued)\u000d\u000a\u000d\u000a#### Aggregators\u000d\u000a\u000d\u000a* SUM()\u000d\u000a* COUNT() \u000d\u000a\u000d\u000a### Database methods\u000d\u000a\u000d\u000aEach database can be used with the following methods:\u000d\u000a\u000d\u000a* vat db = new Database() - create new alasql-database\u000d\u000a* var res = db.exec(sql-statement) - executes SELECT query and returns array of objects \u000d\u000a\u000d\u000aalasql.js works synchronously.\u000d\u000a\u000d\u000a### Performance\u000d\u000a\u000d\u000aAccording the preliminary performance tests alasql.js is faster than [sql.js]() in 5 to 10 times on more than 1000 records tables, and compete [WebSQL]() on different queries. \u000d\u000a\u000d\u000aThe preliminary [performance report](PERFORMANCE.md).\u000d\u000a\u000d\u000a### Limitations\u000d\u000a\u000d\u000aIt is ok with 1000000 records in memory of browser. \u000d\u000a\u000d\u000a### Tests\u000d\u000a\u000d\u000aI use mocha for tests. Run mocha from command line:\u000d\u000a\u000d\u000a```\u000d\u000a    mocha\u000d\u000a```\u000d\u000aor run [test/main.html](test/main.html) in browser.\u000d\u000a\u000d\u000a\u000d\u000a### Known Bugs\u000d\u000a\u000d\u000a1. There is a '[STAR bug](https://github.com/forward/sql-parser/issues/6)' in sql-parser, therefore\u000d\u000ait is still impossible to use multiplication function.\u000d\u000a2. There are many others... \u000d\u000a\u000d\u000a### Future Plans\u000d\u000a\u000d\u000aRead my [to do](TODO.md) page\u000d\u000a\u000d\u000a## Credits\u000d\u000a\u000d\u000aMany thanks to Andrew Kent for his SQL Parser and other people for useful tools, which made our work much easier.\u000d\u000a\u000d\u000a## License\u000d\u000a\u000d\u000a(c) 2014, Andrey Gershun (agershun@gmail.com), [MIT licence information](LICENSE)\u000d\u000a\u000d\u000a","readmeFilename":"README.md","_id":"alasql@0.0.3","_shasum":"3aa2328b7861b550ac1fc68d3ac729e58a2acd74","_from":"./","_npmVersion":"1.4.21","_npmUser":{"name":"agershun","email":"agershun@gmail.com"},"maintainers":[{"name":"agershun","email":"agershun@gmail.com"}],"dist":{"shasum":"3aa2328b7861b550ac1fc68d3ac729e58a2acd74","tarball":"http://registry.npmjs.org/alasql/-/alasql-0.0.3.tgz"}}: alasql
42 error     at RegClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:300:14)
42 error     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:238:65)
42 error     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:123:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:893:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:844:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:938:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Windows_NT 6.2.9200
45 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish" "./"
46 error cwd C:\Users\Андрей\Dropbox\repo\alasql
47 error node -v v0.10.30
48 error npm -v 1.4.21
49 verbose exit [ 1, true ]
