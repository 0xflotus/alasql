/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,6],$V1=[1,18],$V2=[1,13],$V3=[1,14],$V4=[1,12],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,25],$V9=[1,49],$Va=[1,46],$Vb=[1,50],$Vc=[1,55],$Vd=[1,56],$Ve=[1,57],$Vf=[1,58],$Vg=[1,51],$Vh=[1,52],$Vi=[1,53],$Vj=[1,54],$Vk=[1,48],$Vl=[1,47],$Vm=[5,6,36,40,41,42,43,46,48,50,52,53,63,69,103,108,135,137],$Vn=[34,36],$Vo=[1,73],$Vp=[34,36,40],$Vq=[1,77],$Vr=[1,75],$Vs=[1,76],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[5,6,34,36,40,42,46,52,53,62,63,66,67,69,71,73,75,92,93,94,95,96,97,98,99,100],$VB=[2,71],$VC=[5,6,42,53,63,69],$VD=[1,96],$VE=[1,102],$VF=[5,6,34,36,40,42,46,52,53,62,63,66,67,69,71,73,95,96,97,98,99,100],$VG=[5,6,34,36,40,42,46,52,53,62,63,66,67,69,71,73,92,93,95,96,97,98,99,100],$VH=[5,6,42,63,69],$VI=[5,6,42,52,53,63,69],$VJ=[5,6,40,42,52,53,63,69],$VK=[2,30],$VL=[1,132],$VM=[1,134],$VN=[5,6,40,52],$VO=[40,42,99],$VP=[2,70],$VQ=[5,6,42,69],$VR=[5,6,42,46,52,53,63,69],$VS=[40,42],$VT=[1,175],$VU=[1,176],$VV=[5,6,42],$VW=[1,183],$VX=[1,184],$VY=[1,185],$VZ=[1,192],$V_=[1,208],$V$=[5,6,40,42,62,63,69],$V01=[5,6,40,42],$V11=[5,6,40,42,101,128],$V21=[5,6,40,42,69];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"SEMICOLON":6,"Statement":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"SELECT":30,"DISTINCT":31,"ResultColumns":32,"ALL":33,"INTO":34,"Table":35,"FROM":36,"FromTablesList":37,"JoinTablesList":38,"FromTable":39,"COMMA":40,"LPAR":41,"RPAR":42,"LITERAL":43,"DOT":44,"JoinTable":45,"JOIN":46,"OnClause":47,"ON":48,"Expression":49,"USING":50,"ColumnList":51,"WHERE":52,"GROUP":53,"BY":54,"GroupExpressionsList":55,"HavingClause":56,"GroupExpression":57,"GROUPING":58,"SETS":59,"ROLLUP":60,"CUBE":61,"HAVING":62,"ORDER":63,"OrderExpressionsList":64,"OrderExpression":65,"DIRECTION":66,"COLLATE":67,"NOCASE":68,"LIMIT":69,"OffsetClause":70,"OFFSET":71,"ResultColumn":72,"AS":73,"Star":74,"STAR":75,"Column":76,"AggrValue":77,"FuncValue":78,"Op":79,"NumValue":80,"LogicValue":81,"StringValue":82,"Aggregator":83,"SUM":84,"COUNT":85,"MIN":86,"MAX":87,"NUMBER":88,"TRUE":89,"FALSE":90,"STRING":91,"PLUS":92,"MINUS":93,"SLASH":94,"GT":95,"GE":96,"LT":97,"LE":98,"EQ":99,"NE":100,"NOT":101,"UPDATE":102,"SET":103,"SetColumnsList":104,"SetColumn":105,"DELETE":106,"INSERT":107,"VALUES":108,"ValuesList":109,"ColumnsList":110,"Value":111,"CREATE":112,"TemporaryClause":113,"TABLE":114,"IfNotExists":115,"CreateTableDefClause":116,"ConstraintsClause":117,"TEMPORARY":118,"TEMP":119,"IF":120,"EXISTS":121,"ColumnDefList":122,"ColumnDef":123,"ColumnTypeName":124,"ColumnConstraint":125,"ColumnConstraints":126,"SignedNumber":127,"PRIMARY":128,"KEY":129,"NULL":130,"ConstraintsList":131,"Constraint":132,"DROP":133,"ALTER":134,"RENAME":135,"TO":136,"ADD":137,"COLUMN":138,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",30:"SELECT",31:"DISTINCT",33:"ALL",34:"INTO",36:"FROM",40:"COMMA",41:"LPAR",42:"RPAR",43:"LITERAL",44:"DOT",46:"JOIN",48:"ON",50:"USING",51:"ColumnList",52:"WHERE",53:"GROUP",54:"BY",58:"GROUPING",59:"SETS",60:"ROLLUP",61:"CUBE",62:"HAVING",63:"ORDER",66:"DIRECTION",67:"COLLATE",68:"NOCASE",69:"LIMIT",71:"OFFSET",73:"AS",75:"STAR",84:"SUM",85:"COUNT",86:"MIN",87:"MAX",88:"NUMBER",89:"TRUE",90:"FALSE",91:"STRING",92:"PLUS",93:"MINUS",94:"SLASH",95:"GT",96:"GE",97:"LT",98:"LE",99:"EQ",100:"NE",101:"NOT",102:"UPDATE",103:"SET",106:"DELETE",107:"INSERT",108:"VALUES",112:"CREATE",114:"TABLE",118:"TEMPORARY",119:"TEMP",120:"IF",121:"EXISTS",126:"ColumnConstraints",127:"SignedNumber",128:"PRIMARY",129:"KEY",130:"NULL",133:"DROP",134:"ALTER",135:"RENAME",136:"TO",137:"ADD",138:"COLUMN"},
productions_: [0,[3,2],[4,3],[4,1],[4,0],[8,2],[8,4],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[19,3],[19,4],[19,1],[21,0],[12,7],[23,3],[23,3],[23,2],[24,0],[24,2],[25,2],[25,3],[37,1],[37,3],[39,4],[39,2],[39,1],[35,3],[35,1],[38,2],[38,1],[45,3],[47,2],[47,2],[26,0],[26,2],[27,0],[27,4],[55,1],[55,3],[57,5],[57,4],[57,4],[57,1],[56,0],[56,2],[28,0],[28,3],[64,1],[64,3],[65,1],[65,2],[65,3],[65,4],[29,0],[29,3],[70,0],[70,2],[32,3],[32,1],[72,3],[72,1],[74,5],[74,3],[74,1],[76,5],[76,3],[76,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[77,4],[83,1],[83,1],[83,1],[83,1],[78,4],[80,1],[81,1],[81,1],[82,1],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,2],[79,2],[79,3],[14,6],[14,4],[104,1],[104,3],[105,3],[15,5],[15,3],[13,7],[13,10],[109,1],[109,3],[111,1],[111,1],[111,1],[110,1],[110,3],[16,9],[113,0],[113,1],[113,1],[115,0],[115,3],[116,1],[116,2],[122,1],[122,3],[123,3],[123,2],[124,6],[124,4],[124,1],[125,0],[125,2],[125,2],[117,0],[131,3],[131,1],[132,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2: case 27: case 43: case 106:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 3: case 26: case 34: case 42: case 52: case 63: case 105: case 112: case 117:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 30: case 47: case 65: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 81: case 82: case 83: case 84: case 123:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
  yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);yy.extend(this.$,$$[$0]); this.$ = $$[$0-6]; 
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); 
break;
case 22: case 120: case 134:
this.$ = null
break;
case 23:
this.$ = $$[$0]
break;
case 24:
 this.$ = { from: $$[$0] }; 
break;
case 25:
 this.$ = { from: $$[$0-1], joins: $$[$0] }; 
break;
case 28:
 this.$ = new yy.SubQuery({select:$$[$0-2]}); this.$.as = $$[$0-2] 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 31:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 32:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 35:
 this.$ = new yy.Join({table:$$[$0-2]}); yy.extend(this.$, $$[$0]); 
break;
case 36:
 this.$ = {on: $$[$0]}; 
break;
case 37:
 this.$ = {using: $$[$0]}; 
break;
case 38: case 40: case 48: case 50: case 58: case 60:
 this.$ = null; 
break;
case 39:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 41:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 44:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 45:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 46:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 49:
 this.$ = {having:$$[$0]}
break;
case 51:
 this.$ = {order:$$[$0]}
break;
case 53:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 54:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 55:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 56:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 57:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 59:
 this.$ = {limit:$$[$0]}; yy.extend(this.$, $$[$0])
break;
case 61:
 this.$ = {offset:$$[$01]}
break;
case 62: case 128:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 64:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 66:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 67:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 68:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 69:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 70:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 71:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 80:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 85:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], expression: $$[$0-1]}); 
break;
case 86:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 87:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 88:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 89:
 this.$ = new yy.StringValue({value: $$[$0]}); 
break;
case 90:
 this.$ = new yy.Op({left:$$[$0-2], op:'+' , right:$$[$0]}); 
break;
case 91:
 this.$ = new yy.Op({left:$$[$0-2], op:'-' , right:$$[$0]}); 
break;
case 92:
 this.$ = new yy.Op({left:$$[$0-2], op:'*' , right:$$[$0]}); 
break;
case 93:
 this.$ = new yy.Op({left:$$[$0-2], op:'/' , right:$$[$0]}); 
break;
case 94:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 95:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 96:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 97:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 98:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 99:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 100:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 101:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 102:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 103:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 104:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 107:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 108:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 109:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 110:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 111:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 113: case 118:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 119:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);
		
break;
case 121: case 122:
 this.$ = {temporary:true}; 
break;
case 124:
 this.$ = {ifnotexists: true}; 
break;
case 125:
 this.$ = {columns: $$[$0]}; 
break;
case 126:
 this.$ = {as: $$[$0]} 
break;
case 127:
 this.$ = [$$[$0]];
break;
case 129:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 130:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 131:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 132:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 133:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 135:
this.$ = {primarykey:true};
break;
case 136:
this.$ = {notnull:true};
break;
case 137:
this.$ = null;
break;
case 138:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 139:
this.$ = [$$[$0]];
break;
case 141:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 142:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,7:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V1,102:$V2,106:$V3,107:$V4,112:$V5,133:$V6,134:$V7}),{1:[3]},{5:[1,19],6:[1,20]},o($V0,[2,3]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),{24:21,34:[1,22],36:[2,22]},{34:[1,23]},{35:24,43:$V8},{36:[1,26]},{113:27,114:[2,120],118:[1,28],119:[1,29]},{114:[1,30]},{114:[1,31]},{31:[1,32],32:34,33:[1,33],41:$V9,43:$Va,49:36,72:35,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{1:[2,1]},{7:59,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V1,102:$V2,106:$V3,107:$V4,112:$V5,133:$V6,134:$V7},{25:60,36:[1,61]},{35:62,43:$V8},{35:63,43:$V8},{103:[1,64]},o($Vm,[2,32],{44:[1,65]}),{35:66,43:$V8},{114:[1,67]},{114:[2,121]},{114:[2,122]},{35:69,43:$V8,120:[1,68]},{35:70,43:$V8},{32:71,41:$V9,43:$Va,49:36,72:35,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{32:72,41:$V9,43:$Va,49:36,72:35,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},o($Vn,[2,21],{40:$Vo}),o($Vp,[2,63]),o($Vp,[2,65],{73:[1,74],75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VA,[2,72]),o($VA,[2,73]),o($VA,[2,74]),o($VA,[2,75]),o($VA,[2,76]),o($VA,[2,77]),o($VA,[2,78]),o($VA,[2,79]),{41:[1,85]},o($VA,$VB,{41:[1,86],44:[1,87]}),{41:$V9,43:$Va,49:88,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:89,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:90,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},o($VA,[2,68]),o($VA,[2,86]),o($VA,[2,87]),o($VA,[2,88]),o($VA,[2,89]),{41:[2,81]},{41:[2,82]},{41:[2,83]},{41:[2,84]},o($V0,[2,2]),o($VC,[2,38],{26:91,52:[1,92]}),{35:94,37:93,39:95,41:$VD,43:$V8},{36:[2,23]},{41:[1,98],108:[1,97]},{43:$VE,76:101,104:99,105:100},{43:[1,103]},o($V0,[2,109],{52:[1,104]}),{43:[2,123],115:105,120:[1,106]},{121:[1,107]},o($V0,[2,142]),{135:[1,108],137:[1,109]},o($Vn,[2,19],{40:$Vo}),o($Vn,[2,20],{40:$Vo}),{41:$V9,43:$Va,49:36,72:110,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{43:[1,111]},{41:$V9,43:$Va,49:112,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:113,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:114,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:115,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:116,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:117,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:118,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:119,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:120,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:121,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:122,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:123,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{43:[1,124],75:[1,125]},o($VF,[2,100],{75:$Vq,92:$Vr,93:$Vs,94:$Vt}),o($VG,[2,101],{75:$Vq,94:$Vt}),{42:[1,126],75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VH,[2,40],{27:127,53:[1,128]}),{41:$V9,43:$Va,49:129,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},o($VI,[2,24],{40:[1,130]}),o($VJ,$VK,{38:131,45:133,43:$VL,46:$VM}),o($VJ,[2,26]),{12:135,23:11,30:$V1},{41:[1,136]},{43:$VE,76:138,110:137},o($V0,[2,104],{40:[1,140],52:[1,139]}),o($VN,[2,105]),{99:[1,141]},o($VO,$VB,{44:[1,142]}),o($Vm,[2,31]),{41:$V9,43:$Va,49:143,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{35:144,43:$V8},{101:[1,145]},{35:146,43:$V8},{136:[1,147]},{138:[1,148]},o($Vp,[2,62]),o($Vp,[2,64]),o($VG,[2,90],{75:$Vq,94:$Vt}),o($VG,[2,91],{75:$Vq,94:$Vt}),o($VA,[2,92]),o($VA,[2,93]),o($VF,[2,94],{75:$Vq,92:$Vr,93:$Vs,94:$Vt}),o($VF,[2,95],{75:$Vq,92:$Vr,93:$Vs,94:$Vt}),o($VF,[2,96],{75:$Vq,92:$Vr,93:$Vs,94:$Vt}),o($VF,[2,97],{75:$Vq,92:$Vr,93:$Vs,94:$Vt}),o($VF,[2,98],{75:$Vq,92:$Vr,93:$Vs,94:$Vt}),o($VF,[2,99],{75:$Vq,92:$Vr,93:$Vs,94:$Vt}),{42:[1,149],75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},{42:[1,150],75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz},o($VA,$VP,{44:[1,151]}),o($VA,[2,67]),o($VA,[2,102]),o($VQ,[2,50],{28:152,63:[1,153]}),{54:[1,154]},o($VC,[2,39],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),{35:156,39:155,41:$VD,43:$V8},o($VI,[2,25],{45:157,46:$VM}),o($VJ,[2,29]),o($VR,[2,34]),{35:158,43:$V8},{42:[1,159]},{80:162,81:164,82:163,88:$Vg,89:$Vh,90:$Vi,91:$Vj,109:160,111:161},{40:[1,166],42:[1,165]},o($VS,[2,117]),{41:$V9,43:$Va,49:167,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{43:$VE,76:101,105:168},{41:$V9,43:$Va,49:169,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{43:[1,170]},o($V0,[2,108],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),{41:[1,171]},{121:[1,172]},o($V0,[2,141]),{43:[1,173]},{43:$VT,123:174},o($VA,[2,80]),o($VA,[2,85]),{43:$VU,75:[1,177]},o($VV,[2,58],{29:178,69:[1,179]}),{54:[1,180]},{41:$V9,43:$Va,49:186,55:181,57:182,58:$VW,60:$VX,61:$VY,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},o($VJ,[2,27]),o($VJ,$VK,{43:$VL}),o($VR,[2,33]),{47:187,48:[1,188],50:[1,189]},{43:[1,190]},{40:$VZ,42:[1,191]},o($VS,[2,112]),o($VS,[2,114]),o($VS,[2,115]),o($VS,[2,116]),{108:[1,193]},{43:$VE,76:194},o($V0,[2,103],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VN,[2,106]),o($VN,[2,107],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VO,$VP,{44:[1,195]}),{43:$VT,73:[1,198],116:196,122:197,123:199},{43:[2,124]},o($V0,[2,143]),o($V0,[2,144]),{43:[1,202],124:200,126:[1,201]},o($VA,[2,69]),o($VA,[2,66]),o($VV,[2,18]),{41:$V9,43:$Va,49:203,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:206,64:204,65:205,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},o($VH,[2,48],{56:207,40:$V_,62:[1,209]}),o($V$,[2,42]),{59:[1,210]},{41:[1,211]},{41:[1,212]},o($V$,[2,47],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VR,[2,35]),{41:$V9,43:$Va,49:213,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{51:[1,214]},o($VJ,[2,28]),o($V0,[2,110]),{80:162,81:164,82:163,88:$Vg,89:$Vh,90:$Vi,91:$Vj,111:215},{41:[1,216]},o($VS,[2,118]),{43:$VU},{42:[2,137],117:217},{40:[1,218],42:[2,125]},{12:219,23:11,30:$V1},o($VS,[2,127]),o($V01,[2,134],{125:220,101:[1,222],128:[1,221]}),o($V01,[2,130]),o($V11,[2,133],{41:[1,223]}),o($VV,[2,60],{70:224,71:[1,225],75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VQ,[2,51],{40:[1,226]}),o($V21,[2,52]),o($V21,[2,54],{66:[1,227],67:[1,228],75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VH,[2,41]),{41:$V9,43:$Va,49:186,57:229,58:$VW,60:$VX,61:$VY,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:230,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:[1,231]},{41:$V9,43:$Va,49:186,55:232,57:182,58:$VW,60:$VX,61:$VY,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:186,55:233,57:182,58:$VW,60:$VX,61:$VY,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},o($VR,[2,36],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($VR,[2,37]),o($VS,[2,113]),{80:162,81:164,82:163,88:$Vg,89:$Vh,90:$Vi,91:$Vj,109:234,111:161},{42:[1,235]},{43:$VT,123:236},{42:[2,126]},o($V01,[2,129]),{129:[1,237]},{130:[1,238]},{127:[1,239]},o($VV,[2,59]),{41:$V9,43:$Va,49:240,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{41:$V9,43:$Va,49:206,65:241,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},o($V21,[2,55]),{68:[1,242]},o($V$,[2,43]),o($VH,[2,49],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),{41:$V9,43:$Va,49:186,55:243,57:182,58:$VW,60:$VX,61:$VY,74:41,75:$Vb,76:40,77:37,78:38,79:39,80:42,81:43,82:44,83:45,84:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,93:$Vk,101:$Vl},{40:$V_,42:[1,244]},{40:$V_,42:[1,245]},{40:$VZ,42:[1,246]},o($V0,[2,119]),o($VS,[2,128]),o($V01,[2,135]),o($V01,[2,136]),{42:[1,248],44:[1,247]},o($VV,[2,61],{75:$Vq,92:$Vr,93:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz}),o($V21,[2,53]),o($V21,[2,56],{66:[1,249]}),{40:$V_,42:[1,250]},o($V$,[2,45]),o($V$,[2,46]),o($V0,[2,111]),{127:[1,251]},o($V11,[2,132]),o($V21,[2,57]),o($V$,[2,44]),{42:[1,252]},o($V11,[2,131])],
defaultActions: {19:[2,1],28:[2,121],29:[2,122],55:[2,81],56:[2,82],57:[2,83],58:[2,84],62:[2,23],172:[2,124],219:[2,126]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 33
break;
case 2:return 134
break;
case 3:return 'AND'
break;
case 4:return 73
break;
case 5:return 66
break;
case 6:return 54
break;
case 7:return 112
break;
case 8:return 67
break;
case 9:return "COUNT"
break;
case 10:return 61
break;
case 11:return 106
break;
case 12:return 66
break;
case 13:return 31
break;
case 14:return 133
break;
case 15:return 121
break;
case 16:return 9
break;
case 17:return 90
break;
case 18:return 36
break;
case 19:return 53
break;
case 20:return 58
break;
case 21:return 62
break;
case 22:return 120
break;
case 23:return 107
break;
case 24:return 34
break;
case 25:return 129
break;
case 26:return "MAX"
break;
case 27:return "MIN"
break;
case 28:return 68
break;
case 29:return 101
break;
case 30:return 'OR'
break;
case 31:return 63
break;
case 32:return 11
break;
case 33:return 128
break;
case 34:return 10
break;
case 35:return 60
break;
case 36:return 30
break;
case 37:return 103
break;
case 38:return 59
break;
case 39:return "SUM"
break;
case 40:return 114
break;
case 41:return 89
break;
case 42:return 102
break;
case 43:return 108
break;
case 44:return 52
break;
case 45:return 92
break;
case 46:return 93
break;
case 47:return 75
break;
case 48:return 94
break;
case 49:return 95
break;
case 50:return 96
break;
case 51:return 97
break;
case 52:return 98
break;
case 53:return 99
break;
case 54:return 100
break;
case 55:return 100
break;
case 56:return 41
break;
case 57:return 42
break;
case 58:return 44
break;
case 59:return 40
break;
case 60:return 6
break;
case 61:return 43
break;
case 62:return 88
break;
case 63:return 91
break;
case 64:return 5
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:KEY\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TRUE\b)/i,/^(?:UPDATE\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}