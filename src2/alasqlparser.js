/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,6],$V1=[1,18],$V2=[1,13],$V3=[1,14],$V4=[1,12],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,25],$V9=[1,49],$Va=[1,46],$Vb=[1,50],$Vc=[1,55],$Vd=[1,56],$Ve=[1,57],$Vf=[1,58],$Vg=[1,59],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,48],$Vm=[1,47],$Vn=[5,6,36,40,41,42,43,47,49,50,51,52,54,56,57,67,73,110,115,141,143],$Vo=[34,36],$Vp=[1,74],$Vq=[34,36,40],$Vr=[1,78],$Vs=[1,76],$Vt=[1,77],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[5,6,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,79,97,98,99,100,101,102,103,104,105,106,107],$VE=[2,76],$VF=[5,6,42,57,67,73],$VG=[1,99],$VH=[1,105],$VI=[5,6,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,100,101,102,103,104,105,106,107],$VJ=[5,6,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,97,98,100,101,102,103,104,105,106,107],$VK=[5,6,42,67,73],$VL=[5,6,42,56,57,67,73],$VM=[5,6,40,42,56,57,67,73],$VN=[2,30],$VO=[1,137],$VP=[2,36],$VQ=[1,140],$VR=[1,141],$VS=[1,142],$VT=[5,6,40,56],$VU=[5,6,40,42,47,49,50,51,56,57,67,73,104],$VV=[2,75],$VW=[5,6,42,73],$VX=[5,6,42,47,49,50,51,56,57,67,73],$VY=[1,174],$VZ=[5,6,40,42,47,49,50,51,56,57,67,73],$V_=[1,183],$V$=[1,184],$V01=[5,6,42],$V11=[1,191],$V21=[1,192],$V31=[1,193],$V41=[1,198],$V51=[40,42],$V61=[1,214],$V71=[5,6,40,42,66,67,73],$V81=[5,6,40,42],$V91=[5,6,40,42,108,134],$Va1=[5,6,40,42,73];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"SEMICOLON":6,"Statement":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"SELECT":30,"DISTINCT":31,"ResultColumns":32,"ALL":33,"INTO":34,"Table":35,"FROM":36,"FromTablesList":37,"JoinTablesList":38,"FromTable":39,"COMMA":40,"LPAR":41,"RPAR":42,"LITERAL":43,"DOT":44,"JoinTable":45,"JoinMode":46,"JOIN":47,"OnClause":48,"LEFT":49,"RIGHT":50,"ANTI":51,"ON":52,"Expression":53,"USING":54,"ColumnsList":55,"WHERE":56,"GROUP":57,"BY":58,"GroupExpressionsList":59,"HavingClause":60,"GroupExpression":61,"GROUPING":62,"SETS":63,"ROLLUP":64,"CUBE":65,"HAVING":66,"ORDER":67,"OrderExpressionsList":68,"OrderExpression":69,"DIRECTION":70,"COLLATE":71,"NOCASE":72,"LIMIT":73,"OffsetClause":74,"OFFSET":75,"ResultColumn":76,"AS":77,"Star":78,"STAR":79,"Column":80,"AggrValue":81,"FuncValue":82,"Op":83,"NumValue":84,"LogicValue":85,"StringValue":86,"Aggregator":87,"SUM":88,"COUNT":89,"MIN":90,"MAX":91,"AVG":92,"NUMBER":93,"TRUE":94,"FALSE":95,"STRING":96,"PLUS":97,"MINUS":98,"SLASH":99,"GT":100,"GE":101,"LT":102,"LE":103,"EQ":104,"NE":105,"AND":106,"OR":107,"NOT":108,"UPDATE":109,"SET":110,"SetColumnsList":111,"SetColumn":112,"DELETE":113,"INSERT":114,"VALUES":115,"ValuesList":116,"Value":117,"CREATE":118,"TemporaryClause":119,"TABLE":120,"IfNotExists":121,"CreateTableDefClause":122,"ConstraintsClause":123,"TEMPORARY":124,"TEMP":125,"IF":126,"EXISTS":127,"ColumnDefList":128,"ColumnDef":129,"ColumnTypeName":130,"ColumnConstraint":131,"ColumnConstraints":132,"SignedNumber":133,"PRIMARY":134,"KEY":135,"NULL":136,"ConstraintsList":137,"Constraint":138,"DROP":139,"ALTER":140,"RENAME":141,"TO":142,"ADD":143,"COLUMN":144,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",30:"SELECT",31:"DISTINCT",33:"ALL",34:"INTO",36:"FROM",40:"COMMA",41:"LPAR",42:"RPAR",43:"LITERAL",44:"DOT",47:"JOIN",49:"LEFT",50:"RIGHT",51:"ANTI",52:"ON",54:"USING",56:"WHERE",57:"GROUP",58:"BY",62:"GROUPING",63:"SETS",64:"ROLLUP",65:"CUBE",66:"HAVING",67:"ORDER",70:"DIRECTION",71:"COLLATE",72:"NOCASE",73:"LIMIT",75:"OFFSET",77:"AS",79:"STAR",88:"SUM",89:"COUNT",90:"MIN",91:"MAX",92:"AVG",93:"NUMBER",94:"TRUE",95:"FALSE",96:"STRING",97:"PLUS",98:"MINUS",99:"SLASH",100:"GT",101:"GE",102:"LT",103:"LE",104:"EQ",105:"NE",106:"AND",107:"OR",108:"NOT",109:"UPDATE",110:"SET",113:"DELETE",114:"INSERT",115:"VALUES",118:"CREATE",120:"TABLE",124:"TEMPORARY",125:"TEMP",126:"IF",127:"EXISTS",132:"ColumnConstraints",133:"SignedNumber",134:"PRIMARY",135:"KEY",136:"NULL",139:"DROP",140:"ALTER",141:"RENAME",142:"TO",143:"ADD",144:"COLUMN"},
productions_: [0,[3,2],[4,3],[4,1],[4,0],[8,2],[8,4],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[19,3],[19,4],[19,1],[21,0],[12,7],[23,3],[23,3],[23,2],[24,0],[24,2],[25,2],[25,3],[37,1],[37,3],[39,4],[39,2],[39,1],[35,3],[35,1],[38,2],[38,1],[45,4],[46,0],[46,1],[46,1],[46,1],[48,2],[48,2],[48,0],[26,0],[26,2],[27,0],[27,4],[59,1],[59,3],[61,5],[61,4],[61,4],[61,1],[60,0],[60,2],[28,0],[28,3],[68,1],[68,3],[69,1],[69,2],[69,3],[69,4],[29,0],[29,3],[74,0],[74,2],[32,3],[32,1],[76,3],[76,1],[78,5],[78,3],[78,1],[80,5],[80,3],[80,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[81,4],[87,1],[87,1],[87,1],[87,1],[87,1],[82,4],[84,1],[85,1],[85,1],[86,1],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,2],[83,2],[83,3],[14,6],[14,4],[111,1],[111,3],[112,3],[15,5],[15,3],[13,7],[13,10],[116,1],[116,3],[117,1],[117,1],[117,1],[55,1],[55,3],[16,9],[119,0],[119,1],[119,1],[121,0],[121,3],[122,1],[122,2],[128,1],[128,3],[129,3],[129,2],[130,6],[130,4],[130,1],[131,0],[131,2],[131,2],[123,0],[137,3],[137,1],[138,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2: case 27: case 48: case 114:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 3: case 26: case 34: case 47: case 57: case 68: case 113: case 120: case 125:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 30: case 52: case 70: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 86: case 87: case 88: case 89: case 90: case 131:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
  yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);yy.extend(this.$,$$[$0]); this.$ = $$[$0-6]; 
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); 
break;
case 22: case 128: case 142:
this.$ = null
break;
case 23:
this.$ = $$[$0]
break;
case 24:
 this.$ = { from: $$[$0] }; 
break;
case 25:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 28:
 this.$ = new yy.SubQuery({select:$$[$0-2]}); this.$.as = $$[$0-2] 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 31:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 32:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 35:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 36:
this.$ = "INNER";
break;
case 37: case 38: case 39:
this.$ = $$[$0];
break;
case 40:
 this.$ = {on: $$[$0]}; 
break;
case 41:
 this.$ = {using: $$[$0]}; 
break;
case 42: case 43: case 45: case 53: case 55: case 63: case 65:
 this.$ = null; 
break;
case 44:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 46:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 49:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 50:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 51:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 54:
 this.$ = {having:$$[$0]}
break;
case 56:
 this.$ = {order:$$[$0]}
break;
case 58:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 59:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 60:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 61:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 62:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 64:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 66:
 this.$ = {offset:$$[$0]}
break;
case 67: case 136:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 69:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 71:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 72:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 73:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 74:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 75:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 76:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 85:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 91:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], expression: $$[$0-1]}); 
break;
case 92:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 93:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 94:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 95:
 this.$ = new yy.StringValue({value: $$[$0]}); 
break;
case 96:
 this.$ = new yy.Op({left:$$[$0-2], op:'+' , right:$$[$0]}); 
break;
case 97:
 this.$ = new yy.Op({left:$$[$0-2], op:'-' , right:$$[$0]}); 
break;
case 98:
 this.$ = new yy.Op({left:$$[$0-2], op:'*' , right:$$[$0]}); 
break;
case 99:
 this.$ = new yy.Op({left:$$[$0-2], op:'/' , right:$$[$0]}); 
break;
case 100:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 101:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 102:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 103:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 104:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 105:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 106:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 107:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 108:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 109:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 110:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 111:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 112:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 115:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 116:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 117:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 118:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 119:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 121: case 126:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 127:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);
		
break;
case 129: case 130:
 this.$ = {temporary:true}; 
break;
case 132:
 this.$ = {ifnotexists: true}; 
break;
case 133:
 this.$ = {columns: $$[$0]}; 
break;
case 134:
 this.$ = {as: $$[$0]} 
break;
case 135:
 this.$ = [$$[$0]];
break;
case 137:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 138:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 139:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 140:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 141:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 143:
this.$ = {primarykey:true};
break;
case 144:
this.$ = {notnull:true};
break;
case 145:
this.$ = null;
break;
case 146:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 147:
this.$ = [$$[$0]];
break;
case 149:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 150:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,7:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V1,109:$V2,113:$V3,114:$V4,118:$V5,139:$V6,140:$V7}),{1:[3]},{5:[1,19],6:[1,20]},o($V0,[2,3]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),{24:21,34:[1,22],36:[2,22]},{34:[1,23]},{35:24,43:$V8},{36:[1,26]},{119:27,120:[2,128],124:[1,28],125:[1,29]},{120:[1,30]},{120:[1,31]},{31:[1,32],32:34,33:[1,33],41:$V9,43:$Va,53:36,76:35,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{1:[2,1]},{7:60,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V1,109:$V2,113:$V3,114:$V4,118:$V5,139:$V6,140:$V7},{25:61,36:[1,62]},{35:63,43:$V8},{35:64,43:$V8},{110:[1,65]},o($Vn,[2,32],{44:[1,66]}),{35:67,43:$V8},{120:[1,68]},{120:[2,129]},{120:[2,130]},{35:70,43:$V8,126:[1,69]},{35:71,43:$V8},{32:72,41:$V9,43:$Va,53:36,76:35,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{32:73,41:$V9,43:$Va,53:36,76:35,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},o($Vo,[2,21],{40:$Vp}),o($Vq,[2,68]),o($Vq,[2,70],{77:[1,75],79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),o($VD,[2,83]),o($VD,[2,84]),{41:[1,88]},o($VD,$VE,{41:[1,89],44:[1,90]}),{41:$V9,43:$Va,53:91,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:92,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:93,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},o($VD,[2,73]),o($VD,[2,92]),o($VD,[2,93]),o($VD,[2,94]),o($VD,[2,95]),{41:[2,86]},{41:[2,87]},{41:[2,88]},{41:[2,89]},{41:[2,90]},o($V0,[2,2]),o($VF,[2,43],{26:94,56:[1,95]}),{35:97,37:96,39:98,41:$VG,43:$V8},{36:[2,23]},{41:[1,101],115:[1,100]},{43:$VH,80:104,111:102,112:103},{43:[1,106]},o($V0,[2,117],{56:[1,107]}),{43:[2,131],121:108,126:[1,109]},{127:[1,110]},o($V0,[2,150]),{141:[1,111],143:[1,112]},o($Vo,[2,19],{40:$Vp}),o($Vo,[2,20],{40:$Vp}),{41:$V9,43:$Va,53:36,76:113,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{43:[1,114]},{41:$V9,43:$Va,53:115,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:116,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:117,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:118,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:119,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:120,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:121,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:122,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:123,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:124,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:125,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:126,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:127,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:128,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{43:[1,129],79:[1,130]},o($VI,[2,108],{79:$Vr,97:$Vs,98:$Vt,99:$Vu}),o($VJ,[2,109],{79:$Vr,99:$Vu}),{42:[1,131],79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VK,[2,45],{27:132,57:[1,133]}),{41:$V9,43:$Va,53:134,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},o($VL,[2,24],{40:[1,135]}),o($VM,$VN,{38:136,45:138,46:139,43:$VO,47:$VP,49:$VQ,50:$VR,51:$VS}),o($VM,[2,26]),{12:143,23:11,30:$V1},{41:[1,144]},{43:$VH,55:145,80:146},o($V0,[2,112],{40:[1,148],56:[1,147]}),o($VT,[2,113]),{104:[1,149]},o($VU,$VE,{44:[1,150]}),o($Vn,[2,31]),{41:$V9,43:$Va,53:151,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{35:152,43:$V8},{108:[1,153]},{35:154,43:$V8},{142:[1,155]},{144:[1,156]},o($Vq,[2,67]),o($Vq,[2,69]),o($VJ,[2,96],{79:$Vr,99:$Vu}),o($VJ,[2,97],{79:$Vr,99:$Vu}),o($VD,[2,98]),o($VD,[2,99]),o($VI,[2,100],{79:$Vr,97:$Vs,98:$Vt,99:$Vu}),o($VI,[2,101],{79:$Vr,97:$Vs,98:$Vt,99:$Vu}),o($VI,[2,102],{79:$Vr,97:$Vs,98:$Vt,99:$Vu}),o($VI,[2,103],{79:$Vr,97:$Vs,98:$Vt,99:$Vu}),o($VI,[2,104],{79:$Vr,97:$Vs,98:$Vt,99:$Vu}),o($VI,[2,105],{79:$Vr,97:$Vs,98:$Vt,99:$Vu}),o([5,6,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,106,107],[2,106],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA}),o([5,6,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,107],[2,107],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB}),{42:[1,157],79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},{42:[1,158],79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC},o($VD,$VV,{44:[1,159]}),o($VD,[2,72]),o($VD,[2,110]),o($VW,[2,55],{28:160,67:[1,161]}),{58:[1,162]},o($VF,[2,44],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),{35:164,39:163,41:$VG,43:$V8},o($VL,[2,25],{46:139,45:165,47:$VP,49:$VQ,50:$VR,51:$VS}),o($VM,[2,29]),o($VX,[2,34]),{47:[1,166]},{47:[2,37]},{47:[2,38]},{47:[2,39]},{42:[1,167]},{84:170,85:172,86:171,93:$Vh,94:$Vi,95:$Vj,96:$Vk,116:168,117:169},{40:$VY,42:[1,173]},o($VZ,[2,125]),{41:$V9,43:$Va,53:175,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{43:$VH,80:104,112:176},{41:$V9,43:$Va,53:177,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{43:[1,178]},o($V0,[2,116],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),{41:[1,179]},{127:[1,180]},o($V0,[2,149]),{43:[1,181]},{43:$V_,129:182},o($VD,[2,85]),o($VD,[2,91]),{43:$V$,79:[1,185]},o($V01,[2,63],{29:186,73:[1,187]}),{58:[1,188]},{41:$V9,43:$Va,53:194,59:189,61:190,62:$V11,64:$V21,65:$V31,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},o($VM,[2,27]),o($VM,$VN,{43:$VO}),o($VX,[2,33]),{35:195,43:$V8},{43:[1,196]},{40:$V41,42:[1,197]},o($V51,[2,120]),o($V51,[2,122]),o($V51,[2,123]),o($V51,[2,124]),{115:[1,199]},{43:$VH,80:200},o($V0,[2,111],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($VT,[2,114]),o($VT,[2,115],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($VU,$VV,{44:[1,201]}),{43:$V_,77:[1,204],122:202,128:203,129:205},{43:[2,132]},o($V0,[2,151]),o($V0,[2,152]),{43:[1,208],130:206,132:[1,207]},o($VD,[2,74]),o($VD,[2,71]),o($V01,[2,18]),{41:$V9,43:$Va,53:209,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:212,68:210,69:211,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},o($VK,[2,53],{60:213,40:$V61,66:[1,215]}),o($V71,[2,47]),{63:[1,216]},{41:[1,217]},{41:[1,218]},o($V71,[2,52],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($VX,[2,42],{48:219,52:[1,220],54:[1,221]}),o($VM,[2,28]),o($V0,[2,118]),{84:170,85:172,86:171,93:$Vh,94:$Vi,95:$Vj,96:$Vk,117:222},{41:[1,223]},o($VZ,[2,126]),{43:$V$},{42:[2,145],123:224},{40:[1,225],42:[2,133]},{12:226,23:11,30:$V1},o($V51,[2,135]),o($V81,[2,142],{131:227,108:[1,229],134:[1,228]}),o($V81,[2,138]),o($V91,[2,141],{41:[1,230]}),o($V01,[2,65],{74:231,75:[1,232],79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($VW,[2,56],{40:[1,233]}),o($Va1,[2,57]),o($Va1,[2,59],{70:[1,234],71:[1,235],79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($VK,[2,46]),{41:$V9,43:$Va,53:194,61:236,62:$V11,64:$V21,65:$V31,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:237,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:[1,238]},{41:$V9,43:$Va,53:194,59:239,61:190,62:$V11,64:$V21,65:$V31,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:194,59:240,61:190,62:$V11,64:$V21,65:$V31,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},o($VX,[2,35]),{41:$V9,43:$Va,53:241,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{43:$VH,55:242,80:146},o($V51,[2,121]),{84:170,85:172,86:171,93:$Vh,94:$Vi,95:$Vj,96:$Vk,116:243,117:169},{42:[1,244]},{43:$V_,129:245},{42:[2,134]},o($V81,[2,137]),{135:[1,246]},{136:[1,247]},{133:[1,248]},o($V01,[2,64]),{41:$V9,43:$Va,53:249,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{41:$V9,43:$Va,53:212,69:250,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},o($Va1,[2,60]),{72:[1,251]},o($V71,[2,48]),o($VK,[2,54],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),{41:$V9,43:$Va,53:194,59:252,61:190,62:$V11,64:$V21,65:$V31,78:41,79:$Vb,80:40,81:37,82:38,83:39,84:42,85:43,86:44,87:45,88:$Vc,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,98:$Vl,108:$Vm},{40:$V61,42:[1,253]},{40:$V61,42:[1,254]},o($VX,[2,40],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($VX,[2,41],{40:$VY}),{40:$V41,42:[1,255]},o($V0,[2,127]),o($V51,[2,136]),o($V81,[2,143]),o($V81,[2,144]),{42:[1,257],44:[1,256]},o($V01,[2,66],{79:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o($Va1,[2,58]),o($Va1,[2,61],{70:[1,258]}),{40:$V61,42:[1,259]},o($V71,[2,50]),o($V71,[2,51]),o($V0,[2,119]),{133:[1,260]},o($V91,[2,140]),o($Va1,[2,62]),o($V71,[2,49]),{42:[1,261]},o($V91,[2,139])],
defaultActions: {19:[2,1],28:[2,129],29:[2,130],55:[2,86],56:[2,87],57:[2,88],58:[2,89],59:[2,90],63:[2,23],140:[2,37],141:[2,38],142:[2,39],180:[2,132],226:[2,134]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 33
break;
case 2:return 140
break;
case 3:return 106
break;
case 4:return 51
break;
case 5:return 77
break;
case 6:return 70
break;
case 7:return 92
break;
case 8:return 58
break;
case 9:return 118
break;
case 10:return 71
break;
case 11:return "COUNT"
break;
case 12:return 65
break;
case 13:return 113
break;
case 14:return 70
break;
case 15:return 31
break;
case 16:return 139
break;
case 17:return 127
break;
case 18:return 9
break;
case 19:return 95
break;
case 20:return 36
break;
case 21:return 57
break;
case 22:return 62
break;
case 23:return 66
break;
case 24:return 126
break;
case 25:return 'INNER'
break;
case 26:return 114
break;
case 27:return 34
break;
case 28:return 47
break;
case 29:return 135
break;
case 30:return 49
break;
case 31:return 73
break;
case 32:return "MAX"
break;
case 33:return "MIN"
break;
case 34:return 72
break;
case 35:return 108
break;
case 36:return 52
break;
case 37:return 75
break;
case 38:return 107
break;
case 39:return 67
break;
case 40:return 11
break;
case 41:return 134
break;
case 42:return 10
break;
case 43:return 50
break;
case 44:return 64
break;
case 45:return 30
break;
case 46:return 110
break;
case 47:return 63
break;
case 48:return "SUM"
break;
case 49:return 120
break;
case 50:return 94
break;
case 51:return 109
break;
case 52:return 54
break;
case 53:return 115
break;
case 54:return 56
break;
case 55:return 97
break;
case 56:return 98
break;
case 57:return 79
break;
case 58:return 99
break;
case 59:return 100
break;
case 60:return 101
break;
case 61:return 102
break;
case 62:return 103
break;
case 63:return 104
break;
case 64:return 105
break;
case 65:return 105
break;
case 66:return 41
break;
case 67:return 42
break;
case 68:return 44
break;
case 69:return 40
break;
case 70:return 6
break;
case 71:return 43
break;
case 72:return 93
break;
case 73:return 96
break;
case 74:return 5
break;
case 75:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TRUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}