/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,6],$V1=[1,18],$V2=[1,13],$V3=[1,14],$V4=[1,12],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,25],$V9=[1,47],$Va=[1,44],$Vb=[1,48],$Vc=[1,49],$Vd=[1,50],$Ve=[1,51],$Vf=[1,52],$Vg=[1,46],$Vh=[1,45],$Vi=[5,6,36,40,41,42,43,46,48,50,52,53,63,68,96,101,128,130],$Vj=[34,36],$Vk=[1,67],$Vl=[34,36,40],$Vm=[1,71],$Vn=[1,69],$Vo=[1,70],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[5,6,34,36,40,42,46,52,53,62,63,66,67,68,70,72,74,85,86,87,88,89,90,91,92,93],$Vx=[2,70],$Vy=[5,6,42,53,63,68],$Vz=[1,89],$VA=[1,95],$VB=[5,6,34,36,40,42,46,52,53,62,63,66,67,68,70,72,88,89,90,91,92,93],$VC=[5,6,34,36,40,42,46,52,53,62,63,66,67,68,70,72,85,86,88,89,90,91,92,93],$VD=[5,6,42,63,68],$VE=[5,6,42,52,53,63,68],$VF=[5,6,40,42,52,53,63,68],$VG=[2,30],$VH=[1,124],$VI=[1,126],$VJ=[5,6,40,52],$VK=[40,42,92],$VL=[2,69],$VM=[5,6,42,68],$VN=[5,6,42,46,52,53,63,68],$VO=[40,42],$VP=[1,166],$VQ=[1,167],$VR=[5,6,42],$VS=[1,174],$VT=[1,175],$VU=[1,176],$VV=[1,183],$VW=[1,199],$VX=[5,6,40,42,62,63,68],$VY=[5,6,40,42],$VZ=[5,6,40,42,94,121],$V_=[5,6,40,42,68];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"SEMICOLON":6,"Statement":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"SELECT":30,"DISTINCT":31,"ResultColumns":32,"ALL":33,"INTO":34,"Table":35,"FROM":36,"FromTablesList":37,"JoinTablesList":38,"FromTable":39,"COMMA":40,"LPAR":41,"RPAR":42,"LITERAL":43,"DOT":44,"JoinTable":45,"JOIN":46,"OnClause":47,"ON":48,"Expression":49,"USING":50,"ColumnList":51,"WHERE":52,"GROUP":53,"BY":54,"GroupExpressionsList":55,"HavingClause":56,"GroupExpression":57,"GROUPING":58,"SETS":59,"ROLLUP":60,"CUBE":61,"HAVING":62,"ORDER":63,"OrderExpressionsList":64,"OrderExpression":65,"ASC":66,"DESC":67,"LIMIT":68,"OffsetClause":69,"OFFSET":70,"ResultColumn":71,"AS":72,"Star":73,"STAR":74,"Column":75,"FuncValue":76,"Op":77,"NumValue":78,"LogicValue":79,"StringValue":80,"NUMBER":81,"TRUE":82,"FALSE":83,"STRING":84,"PLUS":85,"MINUS":86,"SLASH":87,"GT":88,"GE":89,"LT":90,"LE":91,"EQ":92,"NE":93,"NOT":94,"UPDATE":95,"SET":96,"SetColumnsList":97,"SetColumn":98,"DELETE":99,"INSERT":100,"VALUES":101,"ValuesList":102,"ColumnsList":103,"Value":104,"CREATE":105,"TemporaryClause":106,"TABLE":107,"IfNotExists":108,"CreateTableDefClause":109,"ConstraintsClause":110,"TEMPORARY":111,"TEMP":112,"IF":113,"EXISTS":114,"ColumnDefList":115,"ColumnDef":116,"ColumnTypeName":117,"ColumnConstraint":118,"ColumnConstraints":119,"SignedNumber":120,"PRIMARY":121,"KEY":122,"NULL":123,"ConstraintsList":124,"Constraint":125,"DROP":126,"ALTER":127,"RENAME":128,"TO":129,"ADD":130,"COLUMN":131,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",30:"SELECT",31:"DISTINCT",33:"ALL",34:"INTO",36:"FROM",40:"COMMA",41:"LPAR",42:"RPAR",43:"LITERAL",44:"DOT",46:"JOIN",48:"ON",50:"USING",51:"ColumnList",52:"WHERE",53:"GROUP",54:"BY",58:"GROUPING",59:"SETS",60:"ROLLUP",61:"CUBE",62:"HAVING",63:"ORDER",66:"ASC",67:"DESC",68:"LIMIT",70:"OFFSET",72:"AS",74:"STAR",81:"NUMBER",82:"TRUE",83:"FALSE",84:"STRING",85:"PLUS",86:"MINUS",87:"SLASH",88:"GT",89:"GE",90:"LT",91:"LE",92:"EQ",93:"NE",94:"NOT",95:"UPDATE",96:"SET",99:"DELETE",100:"INSERT",101:"VALUES",105:"CREATE",107:"TABLE",111:"TEMPORARY",112:"TEMP",113:"IF",114:"EXISTS",119:"ColumnConstraints",120:"SignedNumber",121:"PRIMARY",122:"KEY",123:"NULL",126:"DROP",127:"ALTER",128:"RENAME",129:"TO",130:"ADD",131:"COLUMN"},
productions_: [0,[3,2],[4,3],[4,1],[4,0],[8,2],[8,4],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[19,3],[19,4],[19,1],[21,0],[12,7],[23,3],[23,3],[23,2],[24,0],[24,2],[25,2],[25,3],[37,1],[37,3],[39,4],[39,2],[39,1],[35,3],[35,1],[38,2],[38,1],[45,3],[47,2],[47,2],[26,0],[26,2],[27,0],[27,4],[55,1],[55,3],[57,5],[57,4],[57,4],[57,1],[56,0],[56,2],[28,0],[28,3],[64,1],[64,3],[65,2],[65,2],[65,1],[29,0],[29,3],[69,0],[69,2],[32,3],[32,1],[71,3],[71,1],[73,5],[73,3],[73,1],[75,5],[75,3],[75,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[76,4],[78,1],[79,1],[79,1],[80,1],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,2],[77,2],[77,3],[14,6],[14,4],[97,1],[97,3],[98,3],[15,5],[15,3],[13,7],[13,10],[102,1],[102,3],[104,1],[104,1],[104,1],[103,1],[103,3],[16,9],[106,0],[106,1],[106,1],[108,0],[108,3],[109,1],[109,2],[115,1],[115,3],[116,3],[116,2],[117,6],[117,4],[117,1],[118,0],[118,2],[118,2],[110,0],[124,3],[124,1],[125,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2: case 27: case 43: case 99:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 3: case 26: case 34: case 42: case 52: case 62: case 98: case 105: case 110:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 30: case 47: case 64: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 116:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
  yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);yy.extend(this.$,$$[$0]); this.$ = $$[$0-6]; 
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); 
break;
case 22: case 113: case 127:
this.$ = null
break;
case 23:
this.$ = $$[$0]
break;
case 24:
 this.$ = { from: [$$[$0]] }; 
break;
case 25:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 28:
 this.$ = new yy.SubQuery({select:$$[$0-2]}); this.$.as = $$[$0-2] 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 31:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 32:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 35:
 this.$ = new yy.Join({table:$$[$0-2]}); yy.extend(this.$, $$[$0]); 
break;
case 36:
 this.$ = {on: $$[$0]}; 
break;
case 37:
 this.$ = {using: $$[$0]}; 
break;
case 38: case 40: case 48: case 50: case 57: case 59:
 this.$ = null; 
break;
case 39:
 this.$ = {where:$$[$0]}; 
break;
case 41:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 44:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 45:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 46:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 49:
 this.$ = {having:$$[$0]}
break;
case 51:
 this.$ = {order:$$[$0]}
break;
case 53:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 54: case 55:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], order:$$[$0].toUpperCase()}) 
break;
case 56:
 this.$ = new yy.OrderExpression({expression: $$[$0]}) 
break;
case 58:
 this.$ = {limit:$$[$0]}; yy.extend(this.$, $$[$0])
break;
case 60:
 this.$ = {offset:$$[$01]}
break;
case 61: case 121:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 63:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 65:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 66:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 67:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 68:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 69:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 70:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 78:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], expression: $$[$0-1]}); 
break;
case 79:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 80:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 81:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 82:
 this.$ = new yy.StringValue({value: $$[$0]}); 
break;
case 83:
 this.$ = new yy.Op({left:$$[$0-2], op:'+' , right:$$[$0]}); 
break;
case 84:
 this.$ = new yy.Op({left:$$[$0-2], op:'-' , right:$$[$0]}); 
break;
case 85:
 this.$ = new yy.Op({left:$$[$0-2], op:'*' , right:$$[$0]}); 
break;
case 86:
 this.$ = new yy.Op({left:$$[$0-2], op:'/' , right:$$[$0]}); 
break;
case 87:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 88:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 89:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 90:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 91:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 92:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 93:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 94:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 95:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 96:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 97:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 100:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 101:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 102:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 103:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 104:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 106: case 111:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 112:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);
		
break;
case 114: case 115:
 this.$ = {temporary:true}; 
break;
case 117:
 this.$ = {ifnotexists: true}; 
break;
case 118:
 this.$ = {columns: $$[$0]}; 
break;
case 119:
 this.$ = {as: $$[$0]} 
break;
case 120:
 this.$ = [$$[$0]];
break;
case 122:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 123:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 124:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 125:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 126:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 128:
this.$ = {primarykey:true};
break;
case 129:
this.$ = {notnull:true};
break;
case 130:
this.$ = null;
break;
case 131:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 132:
this.$ = [$$[$0]];
break;
case 134:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 135:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,7:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V1,95:$V2,99:$V3,100:$V4,105:$V5,126:$V6,127:$V7}),{1:[3]},{5:[1,19],6:[1,20]},o($V0,[2,3]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),{24:21,34:[1,22],36:[2,22]},{34:[1,23]},{35:24,43:$V8},{36:[1,26]},{106:27,107:[2,113],111:[1,28],112:[1,29]},{107:[1,30]},{107:[1,31]},{31:[1,32],32:34,33:[1,33],41:$V9,43:$Va,49:36,71:35,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{1:[2,1]},{7:53,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V1,95:$V2,99:$V3,100:$V4,105:$V5,126:$V6,127:$V7},{25:54,36:[1,55]},{35:56,43:$V8},{35:57,43:$V8},{96:[1,58]},o($Vi,[2,32],{44:[1,59]}),{35:60,43:$V8},{107:[1,61]},{107:[2,114]},{107:[2,115]},{35:63,43:$V8,113:[1,62]},{35:64,43:$V8},{32:65,41:$V9,43:$Va,49:36,71:35,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{32:66,41:$V9,43:$Va,49:36,71:35,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},o($Vj,[2,21],{40:$Vk}),o($Vl,[2,62]),o($Vl,[2,64],{72:[1,68],74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($Vw,[2,71]),o($Vw,[2,72]),o($Vw,[2,73]),o($Vw,[2,74]),o($Vw,[2,75]),o($Vw,[2,76]),o($Vw,[2,77]),o($Vw,$Vx,{41:[1,79],44:[1,80]}),{41:$V9,43:$Va,49:81,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:82,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:83,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},o($Vw,[2,67]),o($Vw,[2,79]),o($Vw,[2,80]),o($Vw,[2,81]),o($Vw,[2,82]),o($V0,[2,2]),o($Vy,[2,38],{26:84,52:[1,85]}),{35:87,37:86,39:88,41:$Vz,43:$V8},{36:[2,23]},{41:[1,91],101:[1,90]},{43:$VA,75:94,97:92,98:93},{43:[1,96]},o($V0,[2,102],{52:[1,97]}),{43:[2,116],108:98,113:[1,99]},{114:[1,100]},o($V0,[2,135]),{128:[1,101],130:[1,102]},o($Vj,[2,19],{40:$Vk}),o($Vj,[2,20],{40:$Vk}),{41:$V9,43:$Va,49:36,71:103,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{43:[1,104]},{41:$V9,43:$Va,49:105,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:106,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:107,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:108,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:109,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:110,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:111,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:112,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:113,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:114,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:115,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{43:[1,116],74:[1,117]},o($VB,[2,93],{74:$Vm,85:$Vn,86:$Vo,87:$Vp}),o($VC,[2,94],{74:$Vm,87:$Vp}),{42:[1,118],74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($VD,[2,40],{27:119,53:[1,120]}),{41:$V9,43:$Va,49:121,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},o($VE,[2,24],{40:[1,122]}),o($VF,$VG,{38:123,45:125,43:$VH,46:$VI}),o($VF,[2,26]),{12:127,23:11,30:$V1},{41:[1,128]},{43:$VA,75:130,103:129},o($V0,[2,97],{40:[1,132],52:[1,131]}),o($VJ,[2,98]),{92:[1,133]},o($VK,$Vx,{44:[1,134]}),o($Vi,[2,31]),{41:$V9,43:$Va,49:135,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{35:136,43:$V8},{94:[1,137]},{35:138,43:$V8},{129:[1,139]},{131:[1,140]},o($Vl,[2,61]),o($Vl,[2,63]),o($VC,[2,83],{74:$Vm,87:$Vp}),o($VC,[2,84],{74:$Vm,87:$Vp}),o($Vw,[2,85]),o($Vw,[2,86]),o($VB,[2,87],{74:$Vm,85:$Vn,86:$Vo,87:$Vp}),o($VB,[2,88],{74:$Vm,85:$Vn,86:$Vo,87:$Vp}),o($VB,[2,89],{74:$Vm,85:$Vn,86:$Vo,87:$Vp}),o($VB,[2,90],{74:$Vm,85:$Vn,86:$Vo,87:$Vp}),o($VB,[2,91],{74:$Vm,85:$Vn,86:$Vo,87:$Vp}),o($VB,[2,92],{74:$Vm,85:$Vn,86:$Vo,87:$Vp}),{42:[1,141],74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($Vw,$VL,{44:[1,142]}),o($Vw,[2,66]),o($Vw,[2,95]),o($VM,[2,50],{28:143,63:[1,144]}),{54:[1,145]},o($Vy,[2,39],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),{35:147,39:146,41:$Vz,43:$V8},o($VE,[2,25],{45:148,46:$VI}),o($VF,[2,29]),o($VN,[2,34]),{35:149,43:$V8},{42:[1,150]},{78:153,79:155,80:154,81:$Vc,82:$Vd,83:$Ve,84:$Vf,102:151,104:152},{40:[1,157],42:[1,156]},o($VO,[2,110]),{41:$V9,43:$Va,49:158,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{43:$VA,75:94,98:159},{41:$V9,43:$Va,49:160,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{43:[1,161]},o($V0,[2,101],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),{41:[1,162]},{114:[1,163]},o($V0,[2,134]),{43:[1,164]},{43:$VP,116:165},o($Vw,[2,78]),{43:$VQ,74:[1,168]},o($VR,[2,57],{29:169,68:[1,170]}),{54:[1,171]},{41:$V9,43:$Va,49:177,55:172,57:173,58:$VS,60:$VT,61:$VU,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},o($VF,[2,27]),o($VF,$VG,{43:$VH}),o($VN,[2,33]),{47:178,48:[1,179],50:[1,180]},{43:[1,181]},{40:$VV,42:[1,182]},o($VO,[2,105]),o($VO,[2,107]),o($VO,[2,108]),o($VO,[2,109]),{101:[1,184]},{43:$VA,75:185},o($V0,[2,96],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($VJ,[2,99]),o($VJ,[2,100],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($VK,$VL,{44:[1,186]}),{43:$VP,72:[1,189],109:187,115:188,116:190},{43:[2,117]},o($V0,[2,136]),o($V0,[2,137]),{43:[1,193],117:191,119:[1,192]},o($Vw,[2,68]),o($Vw,[2,65]),o($VR,[2,18]),{41:$V9,43:$Va,49:194,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:197,64:195,65:196,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},o($VD,[2,48],{56:198,40:$VW,62:[1,200]}),o($VX,[2,42]),{59:[1,201]},{41:[1,202]},{41:[1,203]},o($VX,[2,47],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($VN,[2,35]),{41:$V9,43:$Va,49:204,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{51:[1,205]},o($VF,[2,28]),o($V0,[2,103]),{78:153,79:155,80:154,81:$Vc,82:$Vd,83:$Ve,84:$Vf,104:206},{41:[1,207]},o($VO,[2,111]),{43:$VQ},{42:[2,130],110:208},{40:[1,209],42:[2,118]},{12:210,23:11,30:$V1},o($VO,[2,120]),o($VY,[2,127],{118:211,94:[1,213],121:[1,212]}),o($VY,[2,123]),o($VZ,[2,126],{41:[1,214]}),o($VR,[2,59],{69:215,70:[1,216],74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($VM,[2,51],{40:[1,217]}),o($V_,[2,52]),o($V_,[2,56],{66:[1,218],67:[1,219],74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($VD,[2,41]),{41:$V9,43:$Va,49:177,57:220,58:$VS,60:$VT,61:$VU,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:221,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:[1,222]},{41:$V9,43:$Va,49:177,55:223,57:173,58:$VS,60:$VT,61:$VU,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:177,55:224,57:173,58:$VS,60:$VT,61:$VU,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},o($VN,[2,36],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($VN,[2,37]),o($VO,[2,106]),{78:153,79:155,80:154,81:$Vc,82:$Vd,83:$Ve,84:$Vf,102:225,104:152},{42:[1,226]},{43:$VP,116:227},{42:[2,119]},o($VY,[2,122]),{122:[1,228]},{123:[1,229]},{120:[1,230]},o($VR,[2,58]),{41:$V9,43:$Va,49:231,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{41:$V9,43:$Va,49:197,65:232,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},o($V_,[2,54]),o($V_,[2,55]),o($VX,[2,43]),o($VD,[2,49],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),{41:$V9,43:$Va,49:177,55:233,57:173,58:$VS,60:$VT,61:$VU,73:40,74:$Vb,75:39,76:37,77:38,78:41,79:42,80:43,81:$Vc,82:$Vd,83:$Ve,84:$Vf,86:$Vg,94:$Vh},{40:$VW,42:[1,234]},{40:$VW,42:[1,235]},{40:$VV,42:[1,236]},o($V0,[2,112]),o($VO,[2,121]),o($VY,[2,128]),o($VY,[2,129]),{42:[1,238],44:[1,237]},o($VR,[2,60],{74:$Vm,85:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv}),o($V_,[2,53]),{40:$VW,42:[1,239]},o($VX,[2,45]),o($VX,[2,46]),o($V0,[2,104]),{120:[1,240]},o($VZ,[2,125]),o($VX,[2,44]),{42:[1,241]},o($VZ,[2,124])],
defaultActions: {19:[2,1],28:[2,114],29:[2,115],56:[2,23],163:[2,117],210:[2,119]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 33
break;
case 2:return 127
break;
case 3:return 'AND'
break;
case 4:return 72
break;
case 5:return 54
break;
case 6:return 105
break;
case 7:return 61
break;
case 8:return 99
break;
case 9:return 31
break;
case 10:return 126
break;
case 11:return 114
break;
case 12:return 9
break;
case 13:return 83
break;
case 14:return 36
break;
case 15:return 53
break;
case 16:return 58
break;
case 17:return 62
break;
case 18:return 113
break;
case 19:return 100
break;
case 20:return 34
break;
case 21:return 122
break;
case 22:return 94
break;
case 23:return 'OR'
break;
case 24:return 63
break;
case 25:return 11
break;
case 26:return 121
break;
case 27:return 10
break;
case 28:return 60
break;
case 29:return 30
break;
case 30:return 96
break;
case 31:return 59
break;
case 32:return 107
break;
case 33:return 82
break;
case 34:return 95
break;
case 35:return 101
break;
case 36:return 52
break;
case 37:return 85
break;
case 38:return 86
break;
case 39:return 74
break;
case 40:return 87
break;
case 41:return 88
break;
case 42:return 89
break;
case 43:return 90
break;
case 44:return 91
break;
case 45:return 92
break;
case 46:return 93
break;
case 47:return 93
break;
case 48:return 41
break;
case 49:return 42
break;
case 50:return 44
break;
case 51:return 40
break;
case 52:return 6
break;
case 53:return 43
break;
case 54:return 81
break;
case 55:return 84
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:KEY\b)/i,/^(?:NOT\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:TABLE\b)/i,/^(?:TRUE\b)/i,/^(?:UPDATE\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}