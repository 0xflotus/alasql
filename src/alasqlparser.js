/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,131,135,136,141,160,161],$V8=[5,7,31,131,135,136,141,160,161],$V9=[1,26],$Va=[1,53],$Vb=[1,50],$Vc=[1,54],$Vd=[1,64],$Ve=[1,65],$Vf=[1,66],$Vg=[1,67],$Vh=[1,68],$Vi=[1,69],$Vj=[1,70],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,63],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,52],$Vu=[1,51],$Vv=[5,7,31,37,41,42,43,44,48,50,51,52,53,55,57,58,68,69,70,71,77,131,132,135,136,137,141,160,161,162,164],$Vw=[35,37],$Vx=[1,84],$Vy=[35,37,41],$Vz=[1,88],$VA=[1,86],$VB=[1,87],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,100],$VN=[1,99],$VO=[1,101],$VP=[1,102],$VQ=[5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,70,71,74,75,77,79,81,83,112,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,131,135,136,141,160,161],$VR=[2,81],$VS=[5,7,31,43,58,68,69,70,71,77,131,135,136,141,160,161],$VT=[1,117],$VU=[1,123],$VV=[1,140],$VW=[1,141],$VX=[1,142],$VY=[5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,70,71,74,75,77,79,81,112,113,116,117,118,119,120,121,123,124,125,126,127,128,131,135,136,141,160,161],$VZ=[5,7,31,43,68,69,70,71,77,131,135,136,141,160,161],$V_=[5,7,31,43,57,58,68,69,70,71,77,131,135,136,141,160,161],$V$=[5,7,31,41,43,57,58,68,69,70,71,77,131,135,136,141,160,161],$V01=[2,30],$V11=[1,171],$V21=[2,36],$V31=[1,174],$V41=[1,175],$V51=[1,176],$V61=[5,7,31,41,57,131,135,136,141,160,161],$V71=[5,7,31,41,43,48,50,51,52,57,58,68,69,70,71,77,120,131,135,136,141,160,161],$V81=[5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,70,71,74,75,77,79,81,116,117,118,119,120,121,123,124,127,128,131,135,136,141,160,161],$V91=[5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,70,71,74,75,77,79,81,124,127,128,131,135,136,141,160,161],$Va1=[1,202],$Vb1=[41,43],$Vc1=[2,80],$Vd1=[5,7,31,43,68,69,70,77,131,135,136,141,160,161],$Ve1=[5,7,31,43,48,50,51,52,57,58,68,69,70,71,77,131,135,136,141,160,161],$Vf1=[1,219],$Vg1=[1,222],$Vh1=[5,7,31,41,43,48,50,51,52,57,58,68,69,70,71,77,131,135,136,141,160,161],$Vi1=[1,231],$Vj1=[1,243],$Vk1=[5,7,31,43,68,69,70,131,135,136,141,160,161],$Vl1=[1,250],$Vm1=[1,251],$Vn1=[1,252],$Vo1=[1,257],$Vp1=[5,7,31,43,131,135,136,141,160,161],$Vq1=[1,285],$Vr1=[5,7,31,41,43,67,68,69,70,71,77,131,135,136,141,160,161],$Vs1=[5,7,31,41,43,131,135,136,141,160,161],$Vt1=[5,7,31,41,43,125,131,135,136,141,156,160,161],$Vu1=[5,7,31,41,43,68,69,70,77,131,135,136,141,160,161];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"ResultColumns":33,"ALL":34,"INTO":35,"Table":36,"FROM":37,"FromTablesList":38,"JoinTablesList":39,"FromTable":40,"COMMA":41,"LPAR":42,"RPAR":43,"LITERAL":44,"DOT":45,"JoinTable":46,"JoinMode":47,"JOIN":48,"OnClause":49,"LEFT":50,"RIGHT":51,"INNER":52,"ON":53,"Expression":54,"USING":55,"ColumnsList":56,"WHERE":57,"GROUP":58,"BY":59,"GroupExpressionsList":60,"HavingClause":61,"GroupExpression":62,"GROUPING":63,"SETS":64,"ROLLUP":65,"CUBE":66,"HAVING":67,"UNION":68,"EXCEPT":69,"INTERSECT":70,"ORDER":71,"OrderExpressionsList":72,"OrderExpression":73,"DIRECTION":74,"COLLATE":75,"NOCASE":76,"LIMIT":77,"OffsetClause":78,"OFFSET":79,"ResultColumn":80,"AS":81,"Star":82,"STAR":83,"Column":84,"AggrValue":85,"FuncValue":86,"Op":87,"NumValue":88,"LogicValue":89,"StringValue":90,"NullValue":91,"ParamValue":92,"ExistsValue":93,"Aggregator":94,"SUM":95,"COUNT":96,"MIN":97,"MAX":98,"AVG":99,"FIRST":100,"LAST":101,"ExprList":102,"NUMBER":103,"TRUE":104,"FALSE":105,"STRING":106,"NULL":107,"EXISTS":108,"DOLLAR":109,"COLON":110,"QUESTION":111,"PLUS":112,"MINUS":113,"SLASH":114,"PERCENT":115,"GT":116,"GE":117,"LT":118,"LE":119,"EQ":120,"NE":121,"AllSome":122,"AND":123,"OR":124,"NOT":125,"IN":126,"BETWEEN":127,"NOT_BETWEEN":128,"SOME":129,"ANY":130,"UPDATE":131,"SET":132,"SetColumnsList":133,"SetColumn":134,"DELETE":135,"INSERT":136,"VALUES":137,"ValuesList":138,"Value":139,"DateValue":140,"CREATE":141,"TemporaryClause":142,"TABLE":143,"IfNotExists":144,"CreateTableDefClause":145,"ConstraintsClause":146,"TEMPORARY":147,"TEMP":148,"IF":149,"ColumnDefList":150,"ColumnDef":151,"ColumnTypeName":152,"ColumnConstraint":153,"ColumnConstraints":154,"SignedNumber":155,"PRIMARY":156,"KEY":157,"ConstraintsList":158,"Constraint":159,"DROP":160,"ALTER":161,"RENAME":162,"TO":163,"ADD":164,"COLUMN":165,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",34:"ALL",35:"INTO",37:"FROM",41:"COMMA",42:"LPAR",43:"RPAR",44:"LITERAL",45:"DOT",48:"JOIN",50:"LEFT",51:"RIGHT",52:"INNER",53:"ON",55:"USING",57:"WHERE",58:"GROUP",59:"BY",63:"GROUPING",64:"SETS",65:"ROLLUP",66:"CUBE",67:"HAVING",68:"UNION",69:"EXCEPT",70:"INTERSECT",71:"ORDER",74:"DIRECTION",75:"COLLATE",76:"NOCASE",77:"LIMIT",79:"OFFSET",81:"AS",83:"STAR",95:"SUM",96:"COUNT",97:"MIN",98:"MAX",99:"AVG",100:"FIRST",101:"LAST",103:"NUMBER",104:"TRUE",105:"FALSE",106:"STRING",107:"NULL",108:"EXISTS",109:"DOLLAR",110:"COLON",111:"QUESTION",112:"PLUS",113:"MINUS",114:"SLASH",115:"PERCENT",116:"GT",117:"GE",118:"LT",119:"LE",120:"EQ",121:"NE",123:"AND",124:"OR",125:"NOT",126:"IN",127:"BETWEEN",128:"NOT_BETWEEN",129:"SOME",130:"ANY",131:"UPDATE",132:"SET",135:"DELETE",136:"INSERT",137:"VALUES",140:"DateValue",141:"CREATE",143:"TABLE",147:"TEMPORARY",148:"TEMP",149:"IF",154:"ColumnConstraints",155:"SignedNumber",156:"PRIMARY",157:"KEY",160:"DROP",161:"ALTER",162:"RENAME",163:"TO",164:"ADD",165:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,3],[23,3],[23,2],[24,0],[24,2],[25,2],[25,3],[38,1],[38,3],[40,4],[40,2],[40,1],[36,3],[36,1],[39,2],[39,1],[46,4],[47,0],[47,1],[47,1],[47,1],[49,2],[49,2],[49,0],[26,0],[26,2],[27,0],[27,4],[60,1],[60,3],[62,5],[62,4],[62,4],[62,1],[61,0],[61,2],[30,0],[30,2],[30,3],[30,2],[30,2],[28,0],[28,3],[72,1],[72,3],[73,1],[73,2],[73,3],[73,4],[29,0],[29,3],[78,0],[78,2],[33,3],[33,1],[80,3],[80,1],[82,5],[82,3],[82,1],[84,5],[84,3],[84,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[85,4],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[86,4],[102,1],[102,3],[88,1],[89,1],[89,1],[90,1],[91,1],[93,4],[92,2],[92,2],[92,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,6],[87,6],[87,6],[87,6],[87,6],[87,6],[87,3],[87,3],[87,2],[87,2],[87,3],[87,5],[87,6],[87,5],[87,6],[87,3],[87,3],[122,1],[122,1],[122,1],[14,6],[14,4],[133,1],[133,3],[134,3],[15,5],[15,3],[13,7],[13,10],[138,1],[138,3],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[56,1],[56,3],[16,9],[142,0],[142,1],[142,1],[144,0],[144,3],[145,1],[145,2],[150,1],[150,3],[151,3],[151,2],[152,6],[152,4],[152,1],[153,0],[153,2],[153,2],[146,0],[158,3],[158,1],[159,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 26: case 34: case 47: case 62: case 73: case 102: case 146: case 153: case 161:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 30: case 52: case 75: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 94: case 95: case 96: case 97: case 98: case 99: case 100:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); 
break;
case 22: case 178:
this.$ = null
break;
case 23:
this.$ = $$[$0]
break;
case 24:
 this.$ = { from: $$[$0] }; 
break;
case 25:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 27: case 48: case 147:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 28:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 31:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 32:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 35:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 36:
this.$ = "INNER";
break;
case 37: case 38: case 39:
this.$ = $$[$0];
break;
case 40:
 this.$ = {on: $$[$0]}; 
break;
case 41:
 this.$ = {using: $$[$0]}; 
break;
case 42: case 43: case 45: case 53: case 55: case 60: case 68: case 70: case 164: case 167:
 this.$ = null; 
break;
case 44:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 46:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 49:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 50:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 51:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 54:
 this.$ = {having:$$[$0]}
break;
case 56:
 this.$ = {union: $$[$0]} ; 
break;
case 57:
 this.$ = {unionall: $$[$0]} ; 
break;
case 58:
 this.$ = {except: $$[$0]} ; 
break;
case 59:
 this.$ = {intersect: $$[$0]} ; 
break;
case 61:
 this.$ = {order:$$[$0]}
break;
case 63:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 64:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 65:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 66:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 67:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 69:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 71:
 this.$ = {offset:$$[$0]}
break;
case 72: case 172:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 74:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 76:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 77:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 78:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 79:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 80:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 81:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 93:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 101:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 103:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 104:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 105:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 106:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 107:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 108:
 this.$ = new yy.NullValue({value:null}); 
break;
case 109:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 110: case 111:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 112:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
			console.log(yy.question);
		
break;
case 113:
 this.$ = new yy.Op({left:$$[$0-2], op:'+' , right:$$[$0]}); 
break;
case 114:
 this.$ = new yy.Op({left:$$[$0-2], op:'-' , right:$$[$0]}); 
break;
case 115:
 this.$ = new yy.Op({left:$$[$0-2], op:'*' , right:$$[$0]}); 
break;
case 116:
 this.$ = new yy.Op({left:$$[$0-2], op:'/' , right:$$[$0]}); 
break;
case 117:
 this.$ = new yy.Op({left:$$[$0-2], op:'%' , right:$$[$0]}); 
break;
case 118:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 119:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 120:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 121:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 122:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 123:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 124: case 125: case 126: case 127: case 128: case 129:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 130:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 131:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 132:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 133:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 134:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 135:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 136:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 137:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 138:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 139:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 140:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 141:
 this.$ = 'ALL'; 
break;
case 142:
 this.$ = 'SOME'; 
break;
case 143:
 this.$ = 'ANY'; 
break;
case 144:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 145:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 148:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 149:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 150:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 151:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 152:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 154: case 162:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 163:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 165: case 166:
 this.$ = {temporary:true}; 
break;
case 168:
 this.$ = {ifnotexists: true}; 
break;
case 169:
 this.$ = {columns: $$[$0]}; 
break;
case 170:
 this.$ = {as: $$[$0]} 
break;
case 171:
 this.$ = [$$[$0]];
break;
case 173:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 174:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 175:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 176:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 177:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 179:
this.$ = {primarykey:true};
break;
case 180:
this.$ = {notnull:true};
break;
case 181:
this.$ = null;
break;
case 182:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 183:
this.$ = [$$[$0]];
break;
case 185:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 186:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,131:$V1,135:$V2,136:$V3,141:$V4,160:$V5,161:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,131:$V1,135:$V2,136:$V3,141:$V4,160:$V5,161:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,35:[1,23],37:[2,22]},{35:[1,24]},{36:25,44:$V9},{37:[1,27]},{142:28,143:[2,164],147:[1,29],148:[1,30]},{143:[1,31]},{143:[1,32]},{32:[1,33],33:35,34:[1,34],42:$Va,44:$Vb,54:37,80:36,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:71,37:[1,72]},{36:73,44:$V9},{36:74,44:$V9},{132:[1,75]},o($Vv,[2,32],{45:[1,76]}),{36:77,44:$V9},{143:[1,78]},{143:[2,165]},{143:[2,166]},{36:80,44:$V9,149:[1,79]},{36:81,44:$V9},{33:82,42:$Va,44:$Vb,54:37,80:36,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{33:83,42:$Va,44:$Vb,54:37,80:36,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($Vw,[2,21],{41:$Vx}),o($Vy,[2,73]),o($Vy,[2,75],{81:[1,85],83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($VQ,[2,82]),o($VQ,[2,83]),o($VQ,[2,84]),o($VQ,[2,85]),o($VQ,[2,86]),o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),{42:[1,103]},o($VQ,$VR,{42:[1,104],45:[1,105]}),{42:$Va,44:$Vb,54:106,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:107,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:108,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($VQ,[2,78]),o($VQ,[2,104]),o($VQ,[2,105]),o($VQ,[2,106]),o($VQ,[2,107]),o($VQ,[2,108]),{44:[1,109]},{44:[1,110]},o($VQ,[2,112]),{42:[1,111]},{42:[2,94]},{42:[2,95]},{42:[2,96]},{42:[2,97]},{42:[2,98]},{42:[2,99]},{42:[2,100]},o($VS,[2,43],{26:112,57:[1,113]}),{36:115,38:114,40:116,42:$VT,44:$V9},{37:[2,23]},{42:[1,119],137:[1,118]},{44:$VU,84:122,133:120,134:121},{44:[1,124]},o($V8,[2,150],{57:[1,125]}),{44:[2,167],144:126,149:[1,127]},{108:[1,128]},o($V8,[2,186]),{162:[1,129],164:[1,130]},o($Vw,[2,19],{41:$Vx}),o($Vw,[2,20],{41:$Vx}),{42:$Va,44:$Vb,54:37,80:131,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{44:[1,132]},{42:$Va,44:$Vb,54:133,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:134,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:135,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:136,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:137,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{34:$VV,42:$Va,44:$Vb,54:138,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,122:139,125:$Vu,129:$VW,130:$VX},{34:$VV,42:$Va,44:$Vb,54:143,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,122:144,125:$Vu,129:$VW,130:$VX},{34:$VV,42:$Va,44:$Vb,54:145,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,122:146,125:$Vu,129:$VW,130:$VX},{34:$VV,42:$Va,44:$Vb,54:147,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,122:148,125:$Vu,129:$VW,130:$VX},{34:$VV,42:$Va,44:$Vb,54:149,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,122:150,125:$Vu,129:$VW,130:$VX},{34:$VV,42:$Va,44:$Vb,54:151,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,122:152,125:$Vu,129:$VW,130:$VX},{42:$Va,44:$Vb,54:153,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:154,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:[1,155]},{126:[1,156]},{42:$Va,44:$Vb,54:157,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:158,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:159,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:161,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,102:160,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{44:[1,162],83:[1,163]},o([5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,70,71,74,75,77,79,81,116,117,118,119,120,121,123,124,125,126,127,128,131,135,136,141,160,161],[2,132],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD}),o($VY,[2,133],{83:$Vz,114:$VC,115:$VD}),{43:[1,164],83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP},o($VQ,[2,110]),o($VQ,[2,111]),{12:165,23:11,31:$V0},o($VZ,[2,45],{27:166,58:[1,167]}),{42:$Va,44:$Vb,54:168,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($V_,[2,24],{41:[1,169]}),o($V$,$V01,{39:170,46:172,47:173,44:$V11,48:$V21,50:$V31,51:$V41,52:$V51}),o($V$,[2,26]),{12:177,23:11,31:$V0},{42:[1,178]},{44:$VU,56:179,84:180},o($V8,[2,145],{41:[1,182],57:[1,181]}),o($V61,[2,146]),{120:[1,183]},o($V71,$VR,{45:[1,184]}),o($Vv,[2,31]),{42:$Va,44:$Vb,54:185,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{36:186,44:$V9},{125:[1,187]},{36:188,44:$V9},{163:[1,189]},{165:[1,190]},o($Vy,[2,72]),o($Vy,[2,74]),o($VY,[2,113],{83:$Vz,114:$VC,115:$VD}),o($VY,[2,114],{83:$Vz,114:$VC,115:$VD}),o($VQ,[2,115]),o($VQ,[2,116]),o($VQ,[2,117]),o($V81,[2,118],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,125:$VM,126:$VN}),{42:[1,191]},{42:[2,141]},{42:[2,142]},{42:[2,143]},o($V81,[2,119],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,125:$VM,126:$VN}),{42:[1,192]},o($V81,[2,120],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,125:$VM,126:$VN}),{42:[1,193]},o($V81,[2,121],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,125:$VM,126:$VN}),{42:[1,194]},o($V81,[2,122],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,125:$VM,126:$VN}),{42:[1,195]},o($V81,[2,123],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,125:$VM,126:$VN}),{42:[1,196]},o([5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,70,71,74,75,77,79,81,123,124,127,128,131,135,136,141,160,161],[2,130],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,125:$VM,126:$VN}),o([5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,70,71,74,75,77,79,81,124,131,135,136,141,160,161],[2,131],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,125:$VM,126:$VN,127:$VO,128:$VP}),{12:197,23:11,31:$V0,42:$Va,44:$Vb,54:161,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,102:198,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:[1,199]},o($V91,[2,139],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,125:$VM,126:$VN}),o($V91,[2,140],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,125:$VM,126:$VN}),{43:[1,200],83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP},{41:$Va1,43:[1,201]},o($Vb1,[2,102],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($VQ,$Vc1,{45:[1,203]}),o($VQ,[2,77]),o($VQ,[2,134]),{43:[1,204]},o($Vd1,[2,60],{28:205,71:[1,206]}),{59:[1,207]},o($VS,[2,44],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),{36:209,40:208,42:$VT,44:$V9},o($V_,[2,25],{47:173,46:210,48:$V21,50:$V31,51:$V41,52:$V51}),o($V$,[2,29]),o($Ve1,[2,34]),{48:[1,211]},{48:[2,37]},{48:[2,38]},{48:[2,39]},{43:[1,212]},{88:215,89:217,90:216,91:218,92:220,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,138:213,139:214,140:$Vf1},{41:$Vg1,43:[1,221]},o($Vh1,[2,161]),{42:$Va,44:$Vb,54:223,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{44:$VU,84:122,134:224},{42:$Va,44:$Vb,54:225,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{44:[1,226]},o($V8,[2,149],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),{42:[1,227]},{108:[1,228]},o($V8,[2,185]),{44:[1,229]},{44:$Vi1,151:230},{12:232,23:11,31:$V0},{12:233,23:11,31:$V0},{12:234,23:11,31:$V0},{12:235,23:11,31:$V0},{12:236,23:11,31:$V0},{12:237,23:11,31:$V0},{43:[1,238]},{41:$Va1,43:[1,239]},{12:240,23:11,31:$V0,42:$Va,44:$Vb,54:161,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,102:241,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($VQ,[2,93]),o($VQ,[2,101]),{42:$Va,44:$Vb,54:242,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{44:$Vj1,83:[1,244]},o($VQ,[2,109]),o($Vk1,[2,68],{29:245,77:[1,246]}),{59:[1,247]},{42:$Va,44:$Vb,54:253,60:248,62:249,63:$Vl1,65:$Vm1,66:$Vn1,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($V$,[2,27]),o($V$,$V01,{44:$V11}),o($Ve1,[2,33]),{36:254,44:$V9},{44:[1,255]},{41:$Vo1,43:[1,256]},o($Vb1,[2,153]),o($Vb1,[2,155]),o($Vb1,[2,156]),o($Vb1,[2,157]),o($Vb1,[2,158]),o($Vb1,[2,159]),o($Vb1,[2,160]),{137:[1,258]},{44:$VU,84:259},o($V8,[2,144],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($V61,[2,147]),o($V61,[2,148],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($V71,$Vc1,{45:[1,260]}),{44:$Vi1,81:[1,263],145:261,150:262,151:264},{44:[2,168]},o($V8,[2,187]),o($V8,[2,188]),{44:[1,267],152:265,154:[1,266]},{43:[1,268]},{43:[1,269]},{43:[1,270]},{43:[1,271]},{43:[1,272]},{43:[1,273]},o($VQ,[2,135]),o($VQ,[2,137]),{43:[1,274]},{41:$Va1,43:[1,275]},o($Vb1,[2,103],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($VQ,[2,79]),o($VQ,[2,76]),o($Vp1,[2,55],{30:276,68:[1,277],69:[1,278],70:[1,279]}),{42:$Va,44:$Vb,54:280,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:283,72:281,73:282,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($VZ,[2,53],{61:284,41:$Vq1,67:[1,286]}),o($Vr1,[2,47]),{64:[1,287]},{42:[1,288]},{42:[1,289]},o($Vr1,[2,52],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($Ve1,[2,42],{49:290,53:[1,291],55:[1,292]}),o($V$,[2,28]),o($V8,[2,151]),{88:215,89:217,90:216,91:218,92:220,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,139:293,140:$Vf1},{42:[1,294]},o($Vh1,[2,162]),{44:$Vj1},{43:[2,181],146:295},{41:[1,296],43:[2,169]},{12:297,23:11,31:$V0},o($Vb1,[2,171]),o($Vs1,[2,178],{153:298,125:[1,300],156:[1,299]}),o($Vs1,[2,174]),o($Vt1,[2,177],{42:[1,301]}),o($VQ,[2,124]),o($VQ,[2,125]),o($VQ,[2,126]),o($VQ,[2,127]),o($VQ,[2,128]),o($VQ,[2,129]),o($VQ,[2,136]),o($VQ,[2,138]),o($Vp1,[2,18]),{12:302,23:11,31:$V0,34:[1,303]},{12:304,23:11,31:$V0},{12:305,23:11,31:$V0},o($Vk1,[2,70],{78:306,79:[1,307],83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($Vd1,[2,61],{41:[1,308]}),o($Vu1,[2,62]),o($Vu1,[2,64],{74:[1,309],75:[1,310],83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($VZ,[2,46]),{42:$Va,44:$Vb,54:253,62:311,63:$Vl1,65:$Vm1,66:$Vn1,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:312,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:[1,313]},{42:$Va,44:$Vb,54:253,60:314,62:249,63:$Vl1,65:$Vm1,66:$Vn1,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:253,60:315,62:249,63:$Vl1,65:$Vm1,66:$Vn1,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($Ve1,[2,35]),{42:$Va,44:$Vb,54:316,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{44:$VU,56:317,84:180},o($Vb1,[2,154]),{88:215,89:217,90:216,91:218,92:220,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,109:$Vq,110:$Vr,111:$Vs,138:318,139:214,140:$Vf1},{43:[1,319]},{44:$Vi1,151:320},{43:[2,170]},o($Vs1,[2,173]),{157:[1,321]},{107:[1,322]},{155:[1,323]},o($Vp1,[2,56]),{12:324,23:11,31:$V0},o($Vp1,[2,58]),o($Vp1,[2,59]),o($Vk1,[2,69]),{42:$Va,44:$Vb,54:325,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{42:$Va,44:$Vb,54:283,73:326,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},o($Vu1,[2,65]),{76:[1,327]},o($Vr1,[2,48]),o($VZ,[2,54],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),{42:$Va,44:$Vb,54:253,60:328,62:249,63:$Vl1,65:$Vm1,66:$Vn1,82:42,83:$Vc,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:49,95:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,101:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,113:$Vt,125:$Vu},{41:$Vq1,43:[1,329]},{41:$Vq1,43:[1,330]},o($Ve1,[2,40],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($Ve1,[2,41],{41:$Vg1}),{41:$Vo1,43:[1,331]},o($V8,[2,163]),o($Vb1,[2,172]),o($Vs1,[2,179]),o($Vs1,[2,180]),{43:[1,333],45:[1,332]},o($Vp1,[2,57]),o($Vk1,[2,71],{83:$Vz,112:$VA,113:$VB,114:$VC,115:$VD,116:$VE,117:$VF,118:$VG,119:$VH,120:$VI,121:$VJ,123:$VK,124:$VL,125:$VM,126:$VN,127:$VO,128:$VP}),o($Vu1,[2,63]),o($Vu1,[2,66],{74:[1,334]}),{41:$Vq1,43:[1,335]},o($Vr1,[2,50]),o($Vr1,[2,51]),o($V8,[2,152]),{155:[1,336]},o($Vt1,[2,176]),o($Vu1,[2,67]),o($Vr1,[2,49]),{43:[1,337]},o($Vt1,[2,175])],
defaultActions: {19:[2,1],29:[2,165],30:[2,166],64:[2,94],65:[2,95],66:[2,96],67:[2,97],68:[2,98],69:[2,99],70:[2,100],73:[2,23],140:[2,141],141:[2,142],142:[2,143],174:[2,37],175:[2,38],176:[2,39],228:[2,168],297:[2,170]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 34
break;
case 2:return 161
break;
case 3:return 123
break;
case 4:return 130
break;
case 5:return 'ANTI'
break;
case 6:return 81
break;
case 7:return 74
break;
case 8:return 99
break;
case 9:return 127
break;
case 10:return 128
break;
case 11:return 59
break;
case 12:return 141
break;
case 13:return 75
break;
case 14:return "COUNT"
break;
case 15:return 66
break;
case 16:return 135
break;
case 17:return 74
break;
case 18:return 32
break;
case 19:return 160
break;
case 20:return 69
break;
case 21:return 108
break;
case 22:return 9
break;
case 23:return 105
break;
case 24:return 100
break;
case 25:return 37
break;
case 26:return 58
break;
case 27:return 63
break;
case 28:return 67
break;
case 29:return 149
break;
case 30:return 126
break;
case 31:return 52
break;
case 32:return 136
break;
case 33:return 70
break;
case 34:return 35
break;
case 35:return 48
break;
case 36:return 157
break;
case 37:return 101
break;
case 38:return 50
break;
case 39:return 77
break;
case 40:return "MAX"
break;
case 41:return "MIN"
break;
case 42:return 76
break;
case 43:return 125
break;
case 44:return 107
break;
case 45:return 53
break;
case 46:return 79
break;
case 47:return 124
break;
case 48:return 71
break;
case 49:return 11
break;
case 50:return 156
break;
case 51:return 10
break;
case 52:return 51
break;
case 53:return 65
break;
case 54:return 31
break;
case 55:return 132
break;
case 56:return 64
break;
case 57:return 129
break;
case 58:return "SUM"
break;
case 59:return 143
break;
case 60:return 104
break;
case 61:return 68
break;
case 62:return 131
break;
case 63:return 55
break;
case 64:return 137
break;
case 65:return 57
break;
case 66:return 112
break;
case 67:return 113
break;
case 68:return 83
break;
case 69:return 114
break;
case 70:return 115
break;
case 71:return 117
break;
case 72:return 116
break;
case 73:return 119
break;
case 74:return 121
break;
case 75:return 118
break;
case 76:return 120
break;
case 77:return 121
break;
case 78:return 42
break;
case 79:return 43
break;
case 80:return 45
break;
case 81:return 41
break;
case 82:return 110
break;
case 83:return 7
break;
case 84:return 109
break;
case 85:return 111
break;
case 86:return 44
break;
case 87:return 103
break;
case 88:return 106
break;
case 89:return 5
break;
case 90:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:ANTI\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}