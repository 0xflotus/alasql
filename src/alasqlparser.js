/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,119,123,124,129,148,149],$V8=[5,7,31,119,123,124,129,148,149],$V9=[1,26],$Va=[1,53],$Vb=[1,50],$Vc=[1,54],$Vd=[1,64],$Ve=[1,65],$Vf=[1,66],$Vg=[1,67],$Vh=[1,68],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,58],$Vm=[1,59],$Vn=[1,63],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,52],$Vs=[1,51],$Vt=[5,7,31,37,41,42,43,44,48,50,51,52,53,55,57,58,68,69,75,119,120,123,124,125,129,148,149,150,152],$Vu=[35,37],$Vv=[1,82],$Vw=[35,37,41],$Vx=[1,86],$Vy=[1,84],$Vz=[1,85],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,72,73,75,77,79,81,107,108,109,110,111,112,113,114,115,116,117,119,123,124,129,148,149],$VK=[2,79],$VL=[5,7,31,43,58,68,69,75,119,123,124,129,148,149],$VM=[1,110],$VN=[1,116],$VO=[5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,72,73,75,77,79,110,111,112,113,114,115,116,117,119,123,124,129,148,149],$VP=[5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,72,73,75,77,79,107,108,110,111,112,113,114,115,116,117,119,123,124,129,148,149],$VQ=[5,7,31,43,68,69,75,119,123,124,129,148,149],$VR=[5,7,31,43,57,58,68,69,75,119,123,124,129,148,149],$VS=[5,7,31,41,43,57,58,68,69,75,119,123,124,129,148,149],$VT=[2,30],$VU=[1,149],$VV=[2,36],$VW=[1,152],$VX=[1,153],$VY=[1,154],$VZ=[5,7,31,41,57,119,123,124,129,148,149],$V_=[5,7,31,41,43,48,50,51,52,57,58,68,69,75,114,119,123,124,129,148,149],$V$=[2,78],$V01=[5,7,31,43,68,75,119,123,124,129,148,149],$V11=[5,7,31,43,48,50,51,52,57,58,68,69,75,119,123,124,129,148,149],$V21=[1,187],$V31=[1,190],$V41=[5,7,31,41,43,48,50,51,52,57,58,68,69,75,119,123,124,129,148,149],$V51=[1,199],$V61=[1,200],$V71=[5,7,31,43,68,119,123,124,129,148,149],$V81=[1,207],$V91=[1,208],$Va1=[1,209],$Vb1=[1,214],$Vc1=[41,43],$Vd1=[5,7,31,43,119,123,124,129,148,149],$Ve1=[1,232],$Vf1=[5,7,31,41,43,67,68,69,75,119,123,124,129,148,149],$Vg1=[5,7,31,41,43,119,123,124,129,148,149],$Vh1=[5,7,31,41,43,118,119,123,124,129,144,148,149],$Vi1=[5,7,31,41,43,68,75,119,123,124,129,148,149];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"ResultColumns":33,"ALL":34,"INTO":35,"Table":36,"FROM":37,"FromTablesList":38,"JoinTablesList":39,"FromTable":40,"COMMA":41,"LPAR":42,"RPAR":43,"LITERAL":44,"DOT":45,"JoinTable":46,"JoinMode":47,"JOIN":48,"OnClause":49,"LEFT":50,"RIGHT":51,"INNER":52,"ON":53,"Expression":54,"USING":55,"ColumnsList":56,"WHERE":57,"GROUP":58,"BY":59,"GroupExpressionsList":60,"HavingClause":61,"GroupExpression":62,"GROUPING":63,"SETS":64,"ROLLUP":65,"CUBE":66,"HAVING":67,"UNION":68,"ORDER":69,"OrderExpressionsList":70,"OrderExpression":71,"DIRECTION":72,"COLLATE":73,"NOCASE":74,"LIMIT":75,"OffsetClause":76,"OFFSET":77,"ResultColumn":78,"AS":79,"Star":80,"STAR":81,"Column":82,"AggrValue":83,"FuncValue":84,"Op":85,"NumValue":86,"LogicValue":87,"StringValue":88,"NullValue":89,"ParamValue":90,"ExistsValue":91,"Aggregator":92,"SUM":93,"COUNT":94,"MIN":95,"MAX":96,"AVG":97,"NUMBER":98,"TRUE":99,"FALSE":100,"STRING":101,"NULL":102,"EXISTS":103,"DOLLAR":104,"COLON":105,"QUESTION":106,"PLUS":107,"MINUS":108,"SLASH":109,"GT":110,"GE":111,"LT":112,"LE":113,"EQ":114,"NE":115,"AND":116,"OR":117,"NOT":118,"UPDATE":119,"SET":120,"SetColumnsList":121,"SetColumn":122,"DELETE":123,"INSERT":124,"VALUES":125,"ValuesList":126,"Value":127,"DateValue":128,"CREATE":129,"TemporaryClause":130,"TABLE":131,"IfNotExists":132,"CreateTableDefClause":133,"ConstraintsClause":134,"TEMPORARY":135,"TEMP":136,"IF":137,"ColumnDefList":138,"ColumnDef":139,"ColumnTypeName":140,"ColumnConstraint":141,"ColumnConstraints":142,"SignedNumber":143,"PRIMARY":144,"KEY":145,"ConstraintsList":146,"Constraint":147,"DROP":148,"ALTER":149,"RENAME":150,"TO":151,"ADD":152,"COLUMN":153,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",34:"ALL",35:"INTO",37:"FROM",41:"COMMA",42:"LPAR",43:"RPAR",44:"LITERAL",45:"DOT",48:"JOIN",50:"LEFT",51:"RIGHT",52:"INNER",53:"ON",55:"USING",57:"WHERE",58:"GROUP",59:"BY",63:"GROUPING",64:"SETS",65:"ROLLUP",66:"CUBE",67:"HAVING",68:"UNION",69:"ORDER",72:"DIRECTION",73:"COLLATE",74:"NOCASE",75:"LIMIT",77:"OFFSET",79:"AS",81:"STAR",93:"SUM",94:"COUNT",95:"MIN",96:"MAX",97:"AVG",98:"NUMBER",99:"TRUE",100:"FALSE",101:"STRING",102:"NULL",103:"EXISTS",104:"DOLLAR",105:"COLON",106:"QUESTION",107:"PLUS",108:"MINUS",109:"SLASH",110:"GT",111:"GE",112:"LT",113:"LE",114:"EQ",115:"NE",116:"AND",117:"OR",118:"NOT",119:"UPDATE",120:"SET",123:"DELETE",124:"INSERT",125:"VALUES",128:"DateValue",129:"CREATE",131:"TABLE",135:"TEMPORARY",136:"TEMP",137:"IF",142:"ColumnConstraints",143:"SignedNumber",144:"PRIMARY",145:"KEY",148:"DROP",149:"ALTER",150:"RENAME",151:"TO",152:"ADD",153:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,3],[23,3],[23,2],[24,0],[24,2],[25,2],[25,3],[38,1],[38,3],[40,4],[40,2],[40,1],[36,3],[36,1],[39,2],[39,1],[46,4],[47,0],[47,1],[47,1],[47,1],[49,2],[49,2],[49,0],[26,0],[26,2],[27,0],[27,4],[60,1],[60,3],[62,5],[62,4],[62,4],[62,1],[61,0],[61,2],[30,0],[30,2],[30,3],[28,0],[28,3],[70,1],[70,3],[71,1],[71,2],[71,3],[71,4],[29,0],[29,3],[76,0],[76,2],[33,3],[33,1],[78,3],[78,1],[80,5],[80,3],[80,1],[82,5],[82,3],[82,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[83,4],[92,1],[92,1],[92,1],[92,1],[92,1],[84,4],[86,1],[87,1],[87,1],[88,1],[89,1],[91,4],[90,2],[90,2],[90,1],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,2],[85,2],[85,3],[14,6],[14,4],[121,1],[121,3],[122,3],[15,5],[15,3],[13,7],[13,10],[126,1],[126,3],[127,1],[127,1],[127,1],[127,1],[127,1],[127,1],[56,1],[56,3],[16,9],[130,0],[130,1],[130,1],[132,0],[132,3],[133,1],[133,2],[138,1],[138,3],[139,3],[139,2],[140,6],[140,4],[140,1],[141,0],[141,2],[141,2],[134,0],[146,3],[146,1],[147,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 26: case 34: case 47: case 60: case 71: case 124: case 131: case 139:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 30: case 52: case 73: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 92: case 93: case 94: case 95: case 96:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    $$[$0-7].exists = yy.exists;
		    delete yy.exists;
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); 
break;
case 22: case 156:
this.$ = null
break;
case 23:
this.$ = $$[$0]
break;
case 24:
 this.$ = { from: $$[$0] }; 
break;
case 25:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 27: case 48: case 125:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 28:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 31:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 32:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 35:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 36:
this.$ = "INNER";
break;
case 37: case 38: case 39:
this.$ = $$[$0];
break;
case 40:
 this.$ = {on: $$[$0]}; 
break;
case 41:
 this.$ = {using: $$[$0]}; 
break;
case 42: case 43: case 45: case 53: case 55: case 58: case 66: case 68: case 142: case 145:
 this.$ = null; 
break;
case 44:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 46:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 49:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 50:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 51:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 54:
 this.$ = {having:$$[$0]}
break;
case 56:
 this.$ = {union: $$[$0]} ; 
break;
case 57:
 this.$ = {unionall: $$[$0]} ; 
break;
case 59:
 this.$ = {order:$$[$0]}
break;
case 61:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 62:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 63:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 64:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 65:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 67:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 69:
 this.$ = {offset:$$[$0]}
break;
case 70: case 150:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 72:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 74:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 75:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 76:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 77:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 78:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 79:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 91:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 97:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], expression: $$[$0-1]}); 
break;
case 98:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 99:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 100:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 101:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 102:
 this.$ = new yy.NullValue({value:null}); 
break;
case 103:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsnum:yy.exists.length}); 
			yy.exists.push($$[$0-1]); 
		
break;
case 104: case 105:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 106:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
			console.log(yy.question);
		
break;
case 107:
 this.$ = new yy.Op({left:$$[$0-2], op:'+' , right:$$[$0]}); 
break;
case 108:
 this.$ = new yy.Op({left:$$[$0-2], op:'-' , right:$$[$0]}); 
break;
case 109:
 this.$ = new yy.Op({left:$$[$0-2], op:'*' , right:$$[$0]}); 
break;
case 110:
 this.$ = new yy.Op({left:$$[$0-2], op:'/' , right:$$[$0]}); 
break;
case 111:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 112:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 113:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 114:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 115:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 116:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 117:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 118:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 119:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 120:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 121:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 122:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 123:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 126:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 127:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 128:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 129:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 130:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 132: case 140:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 141:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 143: case 144:
 this.$ = {temporary:true}; 
break;
case 146:
 this.$ = {ifnotexists: true}; 
break;
case 147:
 this.$ = {columns: $$[$0]}; 
break;
case 148:
 this.$ = {as: $$[$0]} 
break;
case 149:
 this.$ = [$$[$0]];
break;
case 151:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 152:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 153:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 154:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 155:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 157:
this.$ = {primarykey:true};
break;
case 158:
this.$ = {notnull:true};
break;
case 159:
this.$ = null;
break;
case 160:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 161:
this.$ = [$$[$0]];
break;
case 163:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 164:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,119:$V1,123:$V2,124:$V3,129:$V4,148:$V5,149:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,119:$V1,123:$V2,124:$V3,129:$V4,148:$V5,149:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,35:[1,23],37:[2,22]},{35:[1,24]},{36:25,44:$V9},{37:[1,27]},{130:28,131:[2,142],135:[1,29],136:[1,30]},{131:[1,31]},{131:[1,32]},{32:[1,33],33:35,34:[1,34],42:$Va,44:$Vb,54:37,78:36,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:69,37:[1,70]},{36:71,44:$V9},{36:72,44:$V9},{120:[1,73]},o($Vt,[2,32],{45:[1,74]}),{36:75,44:$V9},{131:[1,76]},{131:[2,143]},{131:[2,144]},{36:78,44:$V9,137:[1,77]},{36:79,44:$V9},{33:80,42:$Va,44:$Vb,54:37,78:36,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{33:81,42:$Va,44:$Vb,54:37,78:36,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},o($Vu,[2,21],{41:$Vv}),o($Vw,[2,71]),o($Vw,[2,73],{79:[1,83],81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,83]),o($VJ,[2,84]),o($VJ,[2,85]),o($VJ,[2,86]),o($VJ,[2,87]),o($VJ,[2,88]),o($VJ,[2,89]),o($VJ,[2,90]),{42:[1,96]},o($VJ,$VK,{42:[1,97],45:[1,98]}),{42:$Va,44:$Vb,54:99,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:100,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:101,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},o($VJ,[2,76]),o($VJ,[2,98]),o($VJ,[2,99]),o($VJ,[2,100]),o($VJ,[2,101]),o($VJ,[2,102]),{44:[1,102]},{44:[1,103]},o($VJ,[2,106]),{42:[1,104]},{42:[2,92]},{42:[2,93]},{42:[2,94]},{42:[2,95]},{42:[2,96]},o($VL,[2,43],{26:105,57:[1,106]}),{36:108,38:107,40:109,42:$VM,44:$V9},{37:[2,23]},{42:[1,112],125:[1,111]},{44:$VN,82:115,121:113,122:114},{44:[1,117]},o($V8,[2,128],{57:[1,118]}),{44:[2,145],132:119,137:[1,120]},{103:[1,121]},o($V8,[2,164]),{150:[1,122],152:[1,123]},o($Vu,[2,19],{41:$Vv}),o($Vu,[2,20],{41:$Vv}),{42:$Va,44:$Vb,54:37,78:124,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{44:[1,125]},{42:$Va,44:$Vb,54:126,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:127,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:128,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:129,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:130,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:131,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:132,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:133,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:134,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:135,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:136,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:137,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:138,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:139,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{44:[1,140],81:[1,141]},o($VO,[2,119],{81:$Vx,107:$Vy,108:$Vz,109:$VA}),o($VP,[2,120],{81:$Vx,109:$VA}),{43:[1,142],81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI},o($VJ,[2,104]),o($VJ,[2,105]),{12:143,23:11,31:$V0},o($VQ,[2,45],{27:144,58:[1,145]}),{42:$Va,44:$Vb,54:146,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},o($VR,[2,24],{41:[1,147]}),o($VS,$VT,{39:148,46:150,47:151,44:$VU,48:$VV,50:$VW,51:$VX,52:$VY}),o($VS,[2,26]),{12:155,23:11,31:$V0},{42:[1,156]},{44:$VN,56:157,82:158},o($V8,[2,123],{41:[1,160],57:[1,159]}),o($VZ,[2,124]),{114:[1,161]},o($V_,$VK,{45:[1,162]}),o($Vt,[2,31]),{42:$Va,44:$Vb,54:163,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{36:164,44:$V9},{118:[1,165]},{36:166,44:$V9},{151:[1,167]},{153:[1,168]},o($Vw,[2,70]),o($Vw,[2,72]),o($VP,[2,107],{81:$Vx,109:$VA}),o($VP,[2,108],{81:$Vx,109:$VA}),o($VJ,[2,109]),o($VJ,[2,110]),o($VO,[2,111],{81:$Vx,107:$Vy,108:$Vz,109:$VA}),o($VO,[2,112],{81:$Vx,107:$Vy,108:$Vz,109:$VA}),o($VO,[2,113],{81:$Vx,107:$Vy,108:$Vz,109:$VA}),o($VO,[2,114],{81:$Vx,107:$Vy,108:$Vz,109:$VA}),o($VO,[2,115],{81:$Vx,107:$Vy,108:$Vz,109:$VA}),o($VO,[2,116],{81:$Vx,107:$Vy,108:$Vz,109:$VA}),o([5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,72,73,75,77,79,116,117,119,123,124,129,148,149],[2,117],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG}),o([5,7,31,35,37,41,43,48,50,51,52,57,58,67,68,69,72,73,75,77,79,117,119,123,124,129,148,149],[2,118],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH}),{43:[1,169],81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI},{43:[1,170],81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI},o($VJ,$V$,{45:[1,171]}),o($VJ,[2,75]),o($VJ,[2,121]),{43:[1,172]},o($V01,[2,58],{28:173,69:[1,174]}),{59:[1,175]},o($VL,[2,44],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),{36:177,40:176,42:$VM,44:$V9},o($VR,[2,25],{47:151,46:178,48:$VV,50:$VW,51:$VX,52:$VY}),o($VS,[2,29]),o($V11,[2,34]),{48:[1,179]},{48:[2,37]},{48:[2,38]},{48:[2,39]},{43:[1,180]},{86:183,87:185,88:184,89:186,90:188,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,104:$Vo,105:$Vp,106:$Vq,126:181,127:182,128:$V21},{41:$V31,43:[1,189]},o($V41,[2,139]),{42:$Va,44:$Vb,54:191,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{44:$VN,82:115,122:192},{42:$Va,44:$Vb,54:193,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{44:[1,194]},o($V8,[2,127],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),{42:[1,195]},{103:[1,196]},o($V8,[2,163]),{44:[1,197]},{44:$V51,139:198},o($VJ,[2,91]),o($VJ,[2,97]),{44:$V61,81:[1,201]},o($VJ,[2,103]),o($V71,[2,66],{29:202,75:[1,203]}),{59:[1,204]},{42:$Va,44:$Vb,54:210,60:205,62:206,63:$V81,65:$V91,66:$Va1,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},o($VS,[2,27]),o($VS,$VT,{44:$VU}),o($V11,[2,33]),{36:211,44:$V9},{44:[1,212]},{41:$Vb1,43:[1,213]},o($Vc1,[2,131]),o($Vc1,[2,133]),o($Vc1,[2,134]),o($Vc1,[2,135]),o($Vc1,[2,136]),o($Vc1,[2,137]),o($Vc1,[2,138]),{125:[1,215]},{44:$VN,82:216},o($V8,[2,122],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($VZ,[2,125]),o($VZ,[2,126],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($V_,$V$,{45:[1,217]}),{44:$V51,79:[1,220],133:218,138:219,139:221},{44:[2,146]},o($V8,[2,165]),o($V8,[2,166]),{44:[1,224],140:222,142:[1,223]},o($VJ,[2,77]),o($VJ,[2,74]),o($Vd1,[2,55],{30:225,68:[1,226]}),{42:$Va,44:$Vb,54:227,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:230,70:228,71:229,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},o($VQ,[2,53],{61:231,41:$Ve1,67:[1,233]}),o($Vf1,[2,47]),{64:[1,234]},{42:[1,235]},{42:[1,236]},o($Vf1,[2,52],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($V11,[2,42],{49:237,53:[1,238],55:[1,239]}),o($VS,[2,28]),o($V8,[2,129]),{86:183,87:185,88:184,89:186,90:188,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,104:$Vo,105:$Vp,106:$Vq,127:240,128:$V21},{42:[1,241]},o($V41,[2,140]),{44:$V61},{43:[2,159],134:242},{41:[1,243],43:[2,147]},{12:244,23:11,31:$V0},o($Vc1,[2,149]),o($Vg1,[2,156],{141:245,118:[1,247],144:[1,246]}),o($Vg1,[2,152]),o($Vh1,[2,155],{42:[1,248]}),o($Vd1,[2,18]),{12:249,23:11,31:$V0,34:[1,250]},o($V71,[2,68],{76:251,77:[1,252],81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($V01,[2,59],{41:[1,253]}),o($Vi1,[2,60]),o($Vi1,[2,62],{72:[1,254],73:[1,255],81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($VQ,[2,46]),{42:$Va,44:$Vb,54:210,62:256,63:$V81,65:$V91,66:$Va1,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:257,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:[1,258]},{42:$Va,44:$Vb,54:210,60:259,62:206,63:$V81,65:$V91,66:$Va1,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:210,60:260,62:206,63:$V81,65:$V91,66:$Va1,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},o($V11,[2,35]),{42:$Va,44:$Vb,54:261,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{44:$VN,56:262,82:158},o($Vc1,[2,132]),{86:183,87:185,88:184,89:186,90:188,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,104:$Vo,105:$Vp,106:$Vq,126:263,127:182,128:$V21},{43:[1,264]},{44:$V51,139:265},{43:[2,148]},o($Vg1,[2,151]),{145:[1,266]},{102:[1,267]},{143:[1,268]},o($Vd1,[2,56]),{12:269,23:11,31:$V0},o($V71,[2,67]),{42:$Va,44:$Vb,54:270,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{42:$Va,44:$Vb,54:230,71:271,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},o($Vi1,[2,63]),{74:[1,272]},o($Vf1,[2,48]),o($VQ,[2,54],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),{42:$Va,44:$Vb,54:210,60:273,62:206,63:$V81,65:$V91,66:$Va1,80:42,81:$Vc,82:41,83:38,84:39,85:40,86:43,87:44,88:45,89:46,90:47,91:48,92:49,93:$Vd,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr,118:$Vs},{41:$Ve1,43:[1,274]},{41:$Ve1,43:[1,275]},o($V11,[2,40],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($V11,[2,41],{41:$V31}),{41:$Vb1,43:[1,276]},o($V8,[2,141]),o($Vc1,[2,150]),o($Vg1,[2,157]),o($Vg1,[2,158]),{43:[1,278],45:[1,277]},o($Vd1,[2,57]),o($V71,[2,69],{81:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB,111:$VC,112:$VD,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI}),o($Vi1,[2,61]),o($Vi1,[2,64],{72:[1,279]}),{41:$Ve1,43:[1,280]},o($Vf1,[2,50]),o($Vf1,[2,51]),o($V8,[2,130]),{143:[1,281]},o($Vh1,[2,154]),o($Vi1,[2,65]),o($Vf1,[2,49]),{43:[1,282]},o($Vh1,[2,153])],
defaultActions: {19:[2,1],29:[2,143],30:[2,144],64:[2,92],65:[2,93],66:[2,94],67:[2,95],68:[2,96],71:[2,23],152:[2,37],153:[2,38],154:[2,39],196:[2,146],244:[2,148]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 34
break;
case 2:return 149
break;
case 3:return 116
break;
case 4:return 'ANTI'
break;
case 5:return 79
break;
case 6:return 72
break;
case 7:return 97
break;
case 8:return 59
break;
case 9:return 129
break;
case 10:return 73
break;
case 11:return "COUNT"
break;
case 12:return 66
break;
case 13:return 123
break;
case 14:return 72
break;
case 15:return 32
break;
case 16:return 148
break;
case 17:return 103
break;
case 18:return 9
break;
case 19:return 100
break;
case 20:return 37
break;
case 21:return 58
break;
case 22:return 63
break;
case 23:return 67
break;
case 24:return 137
break;
case 25:return 52
break;
case 26:return 124
break;
case 27:return 35
break;
case 28:return 48
break;
case 29:return 145
break;
case 30:return 50
break;
case 31:return 75
break;
case 32:return "MAX"
break;
case 33:return "MIN"
break;
case 34:return 74
break;
case 35:return 118
break;
case 36:return 102
break;
case 37:return 53
break;
case 38:return 77
break;
case 39:return 117
break;
case 40:return 69
break;
case 41:return 11
break;
case 42:return 144
break;
case 43:return 10
break;
case 44:return 51
break;
case 45:return 65
break;
case 46:return 31
break;
case 47:return 120
break;
case 48:return 64
break;
case 49:return "SUM"
break;
case 50:return 131
break;
case 51:return 99
break;
case 52:return 68
break;
case 53:return 119
break;
case 54:return 55
break;
case 55:return 125
break;
case 56:return 57
break;
case 57:return 107
break;
case 58:return 108
break;
case 59:return 81
break;
case 60:return 109
break;
case 61:return 111
break;
case 62:return 110
break;
case 63:return 113
break;
case 64:return 115
break;
case 65:return 112
break;
case 66:return 114
break;
case 67:return 115
break;
case 68:return 42
break;
case 69:return 43
break;
case 70:return 45
break;
case 71:return 41
break;
case 72:return 105
break;
case 73:return 7
break;
case 74:return 104
break;
case 75:return 106
break;
case 76:return 44
break;
case 77:return 98
break;
case 78:return 101
break;
case 79:return 5
break;
case 80:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}