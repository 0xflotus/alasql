/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,135,139,140,145,164,165],$V8=[5,7,31,135,139,140,145,164,165],$V9=[1,26],$Va=[45,47,86,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,116,129],$Vb=[2,23],$Vc=[1,36],$Vd=[5,7,31,40,44,45,46,47,51,53,54,55,56,58,60,61,71,72,73,74,80,135,136,139,140,141,145,164,165,166,168],$Ve=[1,68],$Vf=[1,65],$Vg=[1,69],$Vh=[1,79],$Vi=[1,80],$Vj=[1,81],$Vk=[1,82],$Vl=[1,83],$Vm=[1,84],$Vn=[1,85],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,78],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,67],$Vy=[1,66],$Vz=[5,7,31,46,61,71,72,73,74,80,135,139,140,145,164,165],$VA=[1,92],$VB=[1,98],$VC=[38,40],$VD=[1,108],$VE=[38,40,44],$VF=[1,113],$VG=[1,110],$VH=[1,111],$VI=[1,112],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[1,123],$VS=[1,124],$VT=[1,126],$VU=[1,125],$VV=[1,127],$VW=[1,128],$VX=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,86,114,115,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,145,164,165],$VY=[2,83],$VZ=[5,7,31,46,71,72,73,74,80,135,139,140,145,164,165],$V_=[5,7,31,46,60,61,71,72,73,74,80,135,139,140,145,164,165],$V$=[5,7,31,44,46,60,61,71,72,73,74,80,135,139,140,145,164,165],$V01=[2,32],$V11=[1,143],$V21=[2,38],$V31=[1,146],$V41=[1,147],$V51=[1,148],$V61=[5,7,31,44,60,135,139,140,145,164,165],$V71=[5,7,31,44,46,51,53,54,55,60,61,71,72,73,74,80,123,135,139,140,145,164,165],$V81=[35,133,134],$V91=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,114,115,116,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,145,164,165],$Va1=[5,7,31,46,71,72,73,80,135,139,140,145,164,165],$Vb1=[5,7,31,46,51,53,54,55,60,61,71,72,73,74,80,135,139,140,145,164,165],$Vc1=[1,209],$Vd1=[1,212],$Ve1=[5,7,31,44,46,51,53,54,55,60,61,71,72,73,74,80,135,139,140,145,164,165],$Vf1=[1,221],$Vg1=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,119,120,121,122,123,124,127,128,131,132,135,139,140,145,164,165],$Vh1=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,128,131,132,135,139,140,145,164,165],$Vi1=[1,228],$Vj1=[44,46],$Vk1=[2,82],$Vl1=[5,7,31,46,71,72,73,135,139,140,145,164,165],$Vm1=[1,236],$Vn1=[1,237],$Vo1=[1,238],$Vp1=[1,243],$Vq1=[1,261],$Vr1=[5,7,31,46,135,139,140,145,164,165],$Vs1=[1,272],$Vt1=[5,7,31,44,46,70,71,72,73,74,80,135,139,140,145,164,165],$Vu1=[5,7,31,44,46,135,139,140,145,164,165],$Vv1=[5,7,31,44,46,129,135,139,140,145,160,164,165],$Vw1=[5,7,31,44,46,71,72,73,80,135,139,140,145,164,165];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"TopClause":33,"ResultColumns":34,"ALL":35,"TOP":36,"NumValue":37,"INTO":38,"Table":39,"FROM":40,"FromTablesList":41,"JoinTablesList":42,"FromTable":43,"COMMA":44,"LPAR":45,"RPAR":46,"LITERAL":47,"DOT":48,"JoinTable":49,"JoinMode":50,"JOIN":51,"OnClause":52,"LEFT":53,"RIGHT":54,"INNER":55,"ON":56,"Expression":57,"USING":58,"ColumnsList":59,"WHERE":60,"GROUP":61,"BY":62,"GroupExpressionsList":63,"HavingClause":64,"GroupExpression":65,"GROUPING":66,"SETS":67,"ROLLUP":68,"CUBE":69,"HAVING":70,"UNION":71,"EXCEPT":72,"INTERSECT":73,"ORDER":74,"OrderExpressionsList":75,"OrderExpression":76,"DIRECTION":77,"COLLATE":78,"NOCASE":79,"LIMIT":80,"OffsetClause":81,"OFFSET":82,"ResultColumn":83,"AS":84,"Star":85,"STAR":86,"Column":87,"AggrValue":88,"FuncValue":89,"Op":90,"LogicValue":91,"StringValue":92,"NullValue":93,"ParamValue":94,"ExistsValue":95,"Aggregator":96,"SUM":97,"COUNT":98,"MIN":99,"MAX":100,"AVG":101,"FIRST":102,"LAST":103,"ExprList":104,"NUMBER":105,"TRUE":106,"FALSE":107,"STRING":108,"NULL":109,"EXISTS":110,"DOLLAR":111,"COLON":112,"QUESTION":113,"LIKE":114,"PLUS":115,"MINUS":116,"SLASH":117,"PERCENT":118,"GT":119,"GE":120,"LT":121,"LE":122,"EQ":123,"NE":124,"CondOp":125,"AllSome":126,"AND":127,"OR":128,"NOT":129,"IN":130,"BETWEEN":131,"NOT_BETWEEN":132,"SOME":133,"ANY":134,"UPDATE":135,"SET":136,"SetColumnsList":137,"SetColumn":138,"DELETE":139,"INSERT":140,"VALUES":141,"ValuesList":142,"Value":143,"DateValue":144,"CREATE":145,"TemporaryClause":146,"TABLE":147,"IfNotExists":148,"CreateTableDefClause":149,"ConstraintsClause":150,"TEMPORARY":151,"TEMP":152,"IF":153,"ColumnDefList":154,"ColumnDef":155,"ColumnTypeName":156,"ColumnConstraint":157,"ColumnConstraints":158,"SignedNumber":159,"PRIMARY":160,"KEY":161,"ConstraintsList":162,"Constraint":163,"DROP":164,"ALTER":165,"RENAME":166,"TO":167,"ADD":168,"COLUMN":169,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",35:"ALL",36:"TOP",38:"INTO",40:"FROM",44:"COMMA",45:"LPAR",46:"RPAR",47:"LITERAL",48:"DOT",51:"JOIN",53:"LEFT",54:"RIGHT",55:"INNER",56:"ON",58:"USING",60:"WHERE",61:"GROUP",62:"BY",66:"GROUPING",67:"SETS",68:"ROLLUP",69:"CUBE",70:"HAVING",71:"UNION",72:"EXCEPT",73:"INTERSECT",74:"ORDER",77:"DIRECTION",78:"COLLATE",79:"NOCASE",80:"LIMIT",82:"OFFSET",84:"AS",86:"STAR",97:"SUM",98:"COUNT",99:"MIN",100:"MAX",101:"AVG",102:"FIRST",103:"LAST",105:"NUMBER",106:"TRUE",107:"FALSE",108:"STRING",109:"NULL",110:"EXISTS",111:"DOLLAR",112:"COLON",113:"QUESTION",114:"LIKE",115:"PLUS",116:"MINUS",117:"SLASH",118:"PERCENT",119:"GT",120:"GE",121:"LT",122:"LE",123:"EQ",124:"NE",127:"AND",128:"OR",129:"NOT",130:"IN",131:"BETWEEN",132:"NOT_BETWEEN",133:"SOME",134:"ANY",135:"UPDATE",136:"SET",139:"DELETE",140:"INSERT",141:"VALUES",144:"DateValue",145:"CREATE",147:"TABLE",151:"TEMPORARY",152:"TEMP",153:"IF",158:"ColumnConstraints",159:"SignedNumber",160:"PRIMARY",161:"KEY",164:"DROP",165:"ALTER",166:"RENAME",167:"TO",168:"ADD",169:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,4],[23,4],[23,3],[33,2],[33,0],[24,0],[24,2],[25,2],[25,3],[41,1],[41,3],[43,4],[43,2],[43,1],[39,3],[39,1],[42,2],[42,1],[49,4],[50,0],[50,1],[50,1],[50,1],[52,2],[52,2],[52,0],[26,0],[26,2],[27,0],[27,4],[63,1],[63,3],[65,5],[65,4],[65,4],[65,1],[64,0],[64,2],[30,0],[30,2],[30,3],[30,2],[30,2],[28,0],[28,3],[75,1],[75,3],[76,1],[76,2],[76,3],[76,4],[29,0],[29,3],[81,0],[81,2],[34,3],[34,1],[83,3],[83,1],[85,5],[85,3],[85,1],[87,5],[87,3],[87,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[88,4],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[89,4],[89,3],[104,1],[104,3],[37,1],[91,1],[91,1],[92,1],[93,1],[95,4],[94,2],[94,2],[94,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,6],[90,6],[90,3],[90,3],[90,2],[90,2],[90,3],[90,5],[90,6],[90,5],[90,6],[90,3],[90,3],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[126,1],[126,1],[126,1],[14,6],[14,4],[137,1],[137,3],[138,3],[15,5],[15,3],[13,7],[13,10],[142,1],[142,3],[143,1],[143,1],[143,1],[143,1],[143,1],[143,1],[59,1],[59,3],[16,9],[146,0],[146,1],[146,1],[148,0],[148,3],[149,1],[149,2],[154,1],[154,3],[155,3],[155,2],[156,6],[156,4],[156,1],[157,0],[157,2],[157,2],[150,0],[162,3],[162,1],[163,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 28: case 36: case 49: case 64: case 75: case 105: case 152: case 159: case 167:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 32: case 54: case 77: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 141: case 142: case 143: case 144: case 145: case 146:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 22:
 this.$ = {top: $$[$0]}; 
break;
case 23: case 44: case 45: case 47: case 55: case 57: case 62: case 70: case 72: case 170: case 173: case 194:
 this.$ = null; 
break;
case 24: case 184:
this.$ = null
break;
case 25:
this.$ = $$[$0]
break;
case 26:
 this.$ = { from: $$[$0] }; 
break;
case 27:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 29: case 50: case 153:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 30:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 31:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 33:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 34:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 35:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 37:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 38:
this.$ = "INNER";
break;
case 39: case 40: case 41:
this.$ = $$[$0];
break;
case 42:
 this.$ = {on: $$[$0]}; 
break;
case 43:
 this.$ = {using: $$[$0]}; 
break;
case 46:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 48:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 51:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 52:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 53:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 56:
 this.$ = {having:$$[$0]}
break;
case 58:
 this.$ = {union: $$[$0]} ; 
break;
case 59:
 this.$ = {unionall: $$[$0]} ; 
break;
case 60:
 this.$ = {except: $$[$0]} ; 
break;
case 61:
 this.$ = {intersect: $$[$0]} ; 
break;
case 63:
 this.$ = {order:$$[$0]}
break;
case 65:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 66:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 67:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 68:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 69:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 71:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 73:
 this.$ = {offset:$$[$0]}
break;
case 74: case 178:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 76:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 78:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 79:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 80:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 81:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 82:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 83:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 95:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 103:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 104:
 this.$ = new yy.FuncValue({funcid: $$[$0-2]}); 
break;
case 106:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 107:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 108:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 109:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 110:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 111:
 this.$ = new yy.NullValue({value:null}); 
break;
case 112:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 113: case 114:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 115:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
			console.log(yy.question);
		
break;
case 116:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 117:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 118:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 119:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 120:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 121:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 122:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 123:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 124:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 125:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 126:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 127:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 128:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 129:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 130:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 131:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 132:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 133:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 134:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 135:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 136:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 137:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 138:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 139:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 140:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 147:
 this.$ = 'ALL'; 
break;
case 148:
 this.$ = 'SOME'; 
break;
case 149:
 this.$ = 'ANY'; 
break;
case 150:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 151:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 154:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 155:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 156:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 157:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 158:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 160: case 168:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 169:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 171: case 172:
 this.$ = {temporary:true}; 
break;
case 174:
 this.$ = {ifnotexists: true}; 
break;
case 175:
 this.$ = {columns: $$[$0]}; 
break;
case 176:
 this.$ = {as: $$[$0]} 
break;
case 177:
 this.$ = [$$[$0]];
break;
case 179:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 180:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 181:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 182:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 183:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 185:
this.$ = {primarykey:true};
break;
case 186:
this.$ = {notnull:true};
break;
case 187:
this.$ = null;
break;
case 188:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 189:
this.$ = [$$[$0]];
break;
case 191:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 192:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 193:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,135:$V1,139:$V2,140:$V3,145:$V4,164:$V5,165:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,135:$V1,139:$V2,140:$V3,145:$V4,164:$V5,165:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,38:[1,23],40:[2,24]},{38:[1,24]},{39:25,47:$V9},{40:[1,27]},{146:28,147:[2,170],151:[1,29],152:[1,30]},{147:[1,31]},{147:[1,32]},o($Va,$Vb,{33:35,32:[1,33],35:[1,34],36:$Vc}),{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:37,40:[1,38]},{39:39,47:$V9},{39:40,47:$V9},{136:[1,41]},o($Vd,[2,34],{48:[1,42]}),{39:43,47:$V9},{147:[1,44]},{147:[2,171]},{147:[2,172]},{39:46,47:$V9,153:[1,45]},{39:47,47:$V9},o($Va,$Vb,{33:48,36:$Vc}),o($Va,$Vb,{33:49,36:$Vc}),{34:50,37:58,45:$Ve,47:$Vf,57:52,83:51,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:86,105:$Vo},o($Vz,[2,45],{26:87,60:[1,88]}),{39:90,41:89,43:91,45:$VA,47:$V9},{40:[2,25]},{45:[1,94],141:[1,93]},{47:$VB,87:97,137:95,138:96},{47:[1,99]},o($V8,[2,156],{60:[1,100]}),{47:[2,173],148:101,153:[1,102]},{110:[1,103]},o($V8,[2,192]),{166:[1,104],168:[1,105]},{34:106,37:58,45:$Ve,47:$Vf,57:52,83:51,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{34:107,37:58,45:$Ve,47:$Vf,57:52,83:51,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VC,[2,21],{44:$VD}),o($VE,[2,75]),o($VE,[2,77],{125:122,84:[1,109],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,[2,84]),o($VX,[2,85]),o($VX,[2,86]),o($VX,[2,87]),o($VX,[2,88]),o($VX,[2,89]),o($VX,[2,90]),o($VX,[2,91]),o($VX,[2,92]),o($VX,[2,93]),o($VX,[2,94]),{45:[1,129]},o($VX,$VY,{45:[1,130],48:[1,131]}),{37:58,45:$Ve,47:$Vf,57:132,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:133,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:134,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VX,[2,80]),o([5,7,31,38,40,44,45,46,47,51,53,54,55,60,61,70,71,72,73,74,77,78,80,82,84,86,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,145,164,165],[2,107]),o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110]),o($VX,[2,111]),{47:[1,135]},{47:[1,136]},o($VX,[2,115]),{45:[1,137]},{45:[2,96]},{45:[2,97]},{45:[2,98]},{45:[2,99]},{45:[2,100]},{45:[2,101]},{45:[2,102]},o($Va,[2,22]),o($VZ,[2,47],{27:138,61:[1,139]}),{37:58,45:$Ve,47:$Vf,57:140,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($V_,[2,26],{44:[1,141]}),o($V$,$V01,{42:142,49:144,50:145,47:$V11,51:$V21,53:$V31,54:$V41,55:$V51}),o($V$,[2,28]),{12:149,23:11,31:$V0},{45:[1,150]},{47:$VB,59:151,87:152},o($V8,[2,151],{44:[1,154],60:[1,153]}),o($V61,[2,152]),{123:[1,155]},o($V71,$VY,{48:[1,156]}),o($Vd,[2,33]),{37:58,45:$Ve,47:$Vf,57:157,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{39:158,47:$V9},{129:[1,159]},{39:160,47:$V9},{167:[1,161]},{169:[1,162]},o($VC,[2,19],{44:$VD}),o($VC,[2,20],{44:$VD}),{37:58,45:$Ve,47:$Vf,57:52,83:163,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:[1,164]},{37:58,45:$Ve,47:$Vf,57:165,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:166,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:167,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:168,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:169,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:170,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($V81,[2,141],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:171,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V81,[2,142],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:172,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V81,[2,143],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:173,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V81,[2,144],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:174,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V81,[2,145],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:175,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V81,[2,146],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:176,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),{35:[1,178],126:177,133:[1,179],134:[1,180]},{37:58,45:$Ve,47:$Vf,57:181,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:182,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{45:[1,183]},{130:[1,184]},{37:58,45:$Ve,47:$Vf,57:185,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:186,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:187,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,46:[1,189],47:$Vf,57:190,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:188,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:[1,191],86:[1,192]},o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,145,164,165],[2,132],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK}),o($V91,[2,133],{125:122,86:$VF,117:$VJ,118:$VK}),{46:[1,193],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,125:122,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW},o($VX,[2,113]),o($VX,[2,114]),{12:194,23:11,31:$V0},o($Va1,[2,62],{28:195,74:[1,196]}),{62:[1,197]},o($Vz,[2,46],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),{39:199,43:198,45:$VA,47:$V9},o($V_,[2,27],{50:145,49:200,51:$V21,53:$V31,54:$V41,55:$V51}),o($V$,[2,31]),o($Vb1,[2,36]),{51:[1,201]},{51:[2,39]},{51:[2,40]},{51:[2,41]},{46:[1,202]},{37:205,91:207,92:206,93:208,94:210,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,111:$Vu,112:$Vv,113:$Vw,142:203,143:204,144:$Vc1},{44:$Vd1,46:[1,211]},o($Ve1,[2,167]),{37:58,45:$Ve,47:$Vf,57:213,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:$VB,87:97,138:214},{37:58,45:$Ve,47:$Vf,57:215,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:[1,216]},o($V8,[2,155],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),{45:[1,217]},{110:[1,218]},o($V8,[2,191]),{47:[1,219]},{47:$Vf1,155:220},o($VE,[2,74]),o($VE,[2,76]),o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,114,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,145,164,165],[2,116],{125:122,86:$VF,115:$VH,116:$VI,117:$VJ,118:$VK}),o($V91,[2,117],{125:122,86:$VF,117:$VJ,118:$VK}),o($V91,[2,118],{125:122,86:$VF,117:$VJ,118:$VK}),o($VX,[2,119],{125:122}),o($VX,[2,120],{125:122}),o($VX,[2,121],{125:122}),o($Vg1,[2,122],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vg1,[2,123],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vg1,[2,124],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vg1,[2,125],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vg1,[2,126],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vg1,[2,127],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),{45:[1,222]},{45:[2,147]},{45:[2,148]},{45:[2,149]},o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,127,128,131,132,135,139,140,145,164,165],[2,130],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,129:$VT,130:$VU}),o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,128,135,139,140,145,164,165],[2,131],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,129:$VT,130:$VU,131:$VV,132:$VW}),{12:223,23:11,31:$V0,37:58,45:$Ve,47:$Vf,57:190,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:224,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{45:[1,225]},o($Vh1,[2,139],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,129:$VT,130:$VU}),o($Vh1,[2,140],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,129:$VT,130:$VU}),{46:[1,226],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,125:122,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW},{44:$Vi1,46:[1,227]},o($VX,[2,104]),o($Vj1,[2,105],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,$Vk1,{48:[1,229]}),o($VX,[2,79]),o($VX,[2,134]),{46:[1,230]},o($Vl1,[2,70],{29:231,80:[1,232]}),{62:[1,233]},{37:58,45:$Ve,47:$Vf,57:239,63:234,65:235,66:$Vm1,68:$Vn1,69:$Vo1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($V$,[2,29]),o($V$,$V01,{47:$V11}),o($Vb1,[2,35]),{39:240,47:$V9},{47:[1,241]},{44:$Vp1,46:[1,242]},o($Vj1,[2,159]),o($Vj1,[2,161]),o($Vj1,[2,162]),o($Vj1,[2,163]),o($Vj1,[2,164]),o($Vj1,[2,165]),o($Vj1,[2,166]),{141:[1,244]},{47:$VB,87:245},o($V8,[2,150],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($V61,[2,153]),o($V61,[2,154],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($V71,$Vk1,{48:[1,246]}),{47:$Vf1,84:[1,249],149:247,154:248,155:250},{47:[2,174]},o($V8,[2,193]),o($V8,[2,194]),{47:[1,253],156:251,158:[1,252]},{12:254,23:11,31:$V0,37:58,45:$Ve,47:$Vf,57:190,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:255,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{46:[1,256]},{44:$Vi1,46:[1,257]},{12:258,23:11,31:$V0,37:58,45:$Ve,47:$Vf,57:190,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:259,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VX,[2,95]),o($VX,[2,103]),{37:58,45:$Ve,47:$Vf,57:260,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:$Vq1,86:[1,262]},o($VX,[2,112]),o($Vr1,[2,57],{30:263,71:[1,264],72:[1,265],73:[1,266]}),{37:267,105:$Vo},{37:58,45:$Ve,47:$Vf,57:270,75:268,76:269,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VZ,[2,55],{64:271,44:$Vs1,70:[1,273]}),o($Vt1,[2,49]),{67:[1,274]},{45:[1,275]},{45:[1,276]},o($Vt1,[2,54],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($Vb1,[2,44],{52:277,56:[1,278],58:[1,279]}),o($V$,[2,30]),o($V8,[2,157]),{37:205,91:207,92:206,93:208,94:210,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,111:$Vu,112:$Vv,113:$Vw,143:280,144:$Vc1},{45:[1,281]},o($Ve1,[2,168]),{47:$Vq1},{46:[2,187],150:282},{44:[1,283],46:[2,175]},{12:284,23:11,31:$V0},o($Vj1,[2,177]),o($Vu1,[2,184],{157:285,129:[1,287],160:[1,286]}),o($Vu1,[2,180]),o($Vv1,[2,183],{45:[1,288]}),{46:[1,289]},{44:$Vi1,46:[1,290]},o($VX,[2,135]),o($VX,[2,137]),{46:[1,291]},{44:$Vi1,46:[1,292]},o($Vj1,[2,106],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,[2,81]),o($VX,[2,78]),o($Vr1,[2,18]),{12:293,23:11,31:$V0,35:[1,294]},{12:295,23:11,31:$V0},{12:296,23:11,31:$V0},o($Vl1,[2,72],{81:297,82:[1,298]}),o($Va1,[2,63],{44:[1,299]}),o($Vw1,[2,64]),o($Vw1,[2,66],{125:122,77:[1,300],78:[1,301],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VZ,[2,48]),{37:58,45:$Ve,47:$Vf,57:239,65:302,66:$Vm1,68:$Vn1,69:$Vo1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:303,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{45:[1,304]},{37:58,45:$Ve,47:$Vf,57:239,63:305,65:235,66:$Vm1,68:$Vn1,69:$Vo1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:239,63:306,65:235,66:$Vm1,68:$Vn1,69:$Vo1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($Vb1,[2,37]),{37:58,45:$Ve,47:$Vf,57:307,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:$VB,59:308,87:152},o($Vj1,[2,160]),{37:205,91:207,92:206,93:208,94:210,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,111:$Vu,112:$Vv,113:$Vw,142:309,143:204,144:$Vc1},{46:[1,310]},{47:$Vf1,155:311},{46:[2,176]},o($Vu1,[2,179]),{161:[1,312]},{109:[1,313]},{159:[1,314]},o($VX,[2,128]),o($VX,[2,129]),o($VX,[2,136]),o($VX,[2,138]),o($Vr1,[2,58]),{12:315,23:11,31:$V0},o($Vr1,[2,60]),o($Vr1,[2,61]),o($Vl1,[2,71]),{37:316,105:$Vo},{37:58,45:$Ve,47:$Vf,57:270,76:317,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($Vw1,[2,67]),{79:[1,318]},o($Vt1,[2,50]),o($VZ,[2,56],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),{37:58,45:$Ve,47:$Vf,57:239,63:319,65:235,66:$Vm1,68:$Vn1,69:$Vo1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{44:$Vs1,46:[1,320]},{44:$Vs1,46:[1,321]},o($Vb1,[2,42],{125:122,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($Vb1,[2,43],{44:$Vd1}),{44:$Vp1,46:[1,322]},o($V8,[2,169]),o($Vj1,[2,178]),o($Vu1,[2,185]),o($Vu1,[2,186]),{46:[1,324],48:[1,323]},o($Vr1,[2,59]),o($Vl1,[2,73]),o($Vw1,[2,65]),o($Vw1,[2,68],{77:[1,325]}),{44:$Vs1,46:[1,326]},o($Vt1,[2,52]),o($Vt1,[2,53]),o($V8,[2,158]),{159:[1,327]},o($Vv1,[2,182]),o($Vw1,[2,69]),o($Vt1,[2,51]),{46:[1,328]},o($Vv1,[2,181])],
defaultActions: {19:[2,1],29:[2,171],30:[2,172],39:[2,25],79:[2,96],80:[2,97],81:[2,98],82:[2,99],83:[2,100],84:[2,101],85:[2,102],146:[2,39],147:[2,40],148:[2,41],178:[2,147],179:[2,148],180:[2,149],218:[2,174],284:[2,176]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 35
break;
case 2:return 165
break;
case 3:return 127
break;
case 4:return 134
break;
case 5:return 'ANTI'
break;
case 6:return 84
break;
case 7:return 77
break;
case 8:return 101
break;
case 9:return 131
break;
case 10:return 132
break;
case 11:return 62
break;
case 12:return 145
break;
case 13:return 78
break;
case 14:return "COUNT"
break;
case 15:return 69
break;
case 16:return 139
break;
case 17:return 77
break;
case 18:return 32
break;
case 19:return 164
break;
case 20:return 72
break;
case 21:return 110
break;
case 22:return 9
break;
case 23:return 107
break;
case 24:return 102
break;
case 25:return 40
break;
case 26:return 61
break;
case 27:return 66
break;
case 28:return 70
break;
case 29:return 153
break;
case 30:return 130
break;
case 31:return 55
break;
case 32:return 140
break;
case 33:return 73
break;
case 34:return 38
break;
case 35:return 51
break;
case 36:return 161
break;
case 37:return 103
break;
case 38:return 53
break;
case 39:return 114
break;
case 40:return 80
break;
case 41:return "MAX"
break;
case 42:return "MIN"
break;
case 43:return 79
break;
case 44:return 129
break;
case 45:return 109
break;
case 46:return 56
break;
case 47:return 82
break;
case 48:return 128
break;
case 49:return 74
break;
case 50:return 11
break;
case 51:return 160
break;
case 52:return 10
break;
case 53:return 166
break;
case 54:return 54
break;
case 55:return 68
break;
case 56:return 31
break;
case 57:return 136
break;
case 58:return 67
break;
case 59:return 133
break;
case 60:return "SUM"
break;
case 61:return 147
break;
case 62:return 167
break;
case 63:return 36
break;
case 64:return 106
break;
case 65:return 71
break;
case 66:return 135
break;
case 67:return 58
break;
case 68:return 141
break;
case 69:return 60
break;
case 70:return 115
break;
case 71:return 116
break;
case 72:return 86
break;
case 73:return 117
break;
case 74:return 118
break;
case 75:return 120
break;
case 76:return 119
break;
case 77:return 122
break;
case 78:return 124
break;
case 79:return 121
break;
case 80:return 123
break;
case 81:return 124
break;
case 82:return 45
break;
case 83:return 46
break;
case 84:return 48
break;
case 85:return 44
break;
case 86:return 112
break;
case 87:return 7
break;
case 88:return 111
break;
case 89:return 113
break;
case 90:return 47
break;
case 91:return 105
break;
case 92:return 108
break;
case 93:return 5
break;
case 94:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:ANTI\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}