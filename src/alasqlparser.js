/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,9],$V1=[2,8],$V2=[1,24],$V3=[1,23],$V4=[1,18],$V5=[1,20],$V6=[1,17],$V7=[1,19],$V8=[1,16],$V9=[1,22],$Va=[8,9,48,54,77,78,88,89,90,91,97],$Vb=[1,43],$Vc=[1,44],$Vd=[4,5,53,101,103,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,141,154],$Ve=[2,30],$Vf=[1,50],$Vg=[8,9,54,77,78,88,89,90,91,97],$Vh=[4,5,8,9,39,46,48,52,53,54,55,57,60,64,65,66,67,68,69,70,71,72,73,75,77,78,87,88,89,90,91,94,95,97,103,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,161,166,168,187,190,195,199,200,201,203,205,207],$Vi=[4,5,8,9,39,48,52,53,54,55,60,64,65,66,67,68,69,70,71,72,73,75,77,78,88,89,90,91,97,161,166,168,201,203,205,207],$Vj=[1,90],$Vk=[1,92],$Vl=[1,91],$Vm=[1,102],$Vn=[1,103],$Vo=[1,104],$Vp=[1,105],$Vq=[1,106],$Vr=[1,107],$Vs=[1,108],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,100],$Vy=[1,97],$Vz=[1,98],$VA=[1,99],$VB=[1,101],$VC=[1,89],$VD=[1,88],$VE=[4,5],$VF=[8,9,54,78,88,89,90,91,97],$VG=[1,128],$VH=[8,9,46,48,54,77,78,88,89,90,91,97],$VI=[1,138],$VJ=[8,9,46,48,52,54,77,78,88,89,90,91,97],$VK=[1,143],$VL=[1,140],$VM=[1,141],$VN=[1,142],$VO=[1,144],$VP=[1,145],$VQ=[1,146],$VR=[1,147],$VS=[1,148],$VT=[1,149],$VU=[1,150],$VV=[1,151],$VW=[1,153],$VX=[1,154],$VY=[1,156],$VZ=[1,155],$V_=[1,157],$V$=[1,158],$V01=[8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,103,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157],$V11=[2,114],$V21=[1,160],$V31=[8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,103,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,168,187,190,199,200],$V41=[4,5,8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,103,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,168,187,190,199,200],$V51=[1,171],$V61=[1,183],$V71=[8,9,54,88,89,90,91,97],$V81=[8,9,52,54,77,78,88,89,90,91,97],$V91=[2,61],$Va1=[1,195],$Vb1=[1,196],$Vc1=[1,197],$Vd1=[1,199],$Ve1=[1,198],$Vf1=[1,200],$Vg1=[1,201],$Vh1=[1,202],$Vi1=[1,203],$Vj1=[8,9,52,54,60,64,65,66,67,68,69,70,71,72,77,78,88,89,90,91,97],$Vk1=[8,9,52,77],$Vl1=[8,9,52,54,60,64,65,66,67,68,69,70,71,72,77,78,88,89,90,91,97,148],$Vm1=[43,158,159],$Vn1=[8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,134,136,137,138,139,140,141,144,145,146,147,148,149,152,153,154,155,156,157],$Vo1=[2,160],$Vp1=[1,249],$Vq1=[134,136,138],$Vr1=[1,260],$Vs1=[1,264],$Vt1=[8,9,54,88,89,90,97],$Vu1=[8,9,54,60,64,65,66,67,68,69,70,71,72,77,78,88,89,90,91,97],$Vv1=[8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,134,136,137,138,144,145,146,147,148,149,152,153,156,157],$Vw1=[8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,134,136,137,138,153,156,157],$Vx1=[1,288],$Vy1=[52,54],$Vz1=[2,113],$VA1=[1,307],$VB1=[8,9,54,88,89,90],$VC1=[1,316],$VD1=[1,317],$VE1=[1,318],$VF1=[8,9,52,54],$VG1=[1,346],$VH1=[1,345],$VI1=[1,341],$VJ1=[1,342],$VK1=[1,343],$VL1=[1,344],$VM1=[8,9,52,54,154,168,187,190,199,200],$VN1=[1,349],$VO1=[8,9,52],$VP1=[8,9,54],$VQ1=[1,366],$VR1=[8,9,52,54,87,88,89,90,91,97],$VS1=[8,9,54,60,64,65,66,67,68,69,70,71,72,73,75,77,78,88,89,90,91,97],$VT1=[187,190],$VU1=[2,232],$VV1=[1,404],$VW1=[8,9,52,54,88,89,90,97];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"main":6,"Statements":7,"EOF":8,"SEMICOLON":9,"Statement":10,"ExplainStatement":11,"EXPLAIN":12,"QUERY":13,"PLAN":14,"AlterTable":15,"CreateDatabase":16,"CreateIndex":17,"CreateTable":18,"Delete":19,"DropDatabase":20,"DropIndex":21,"DropTable":22,"Insert":23,"Select":24,"UseDatabase":25,"Update":26,"WithSelectClause":27,"WITH":28,"WithTables":29,"RECURSIVE":30,"SelectClause":31,"IntoClause":32,"FromClause":33,"WhereClause":34,"GroupClause":35,"OrderClause":36,"LimitClause":37,"UnionClause":38,"SELECT":39,"DISTINCT":40,"TopClause":41,"ResultColumns":42,"ALL":43,"TOP":44,"NumValue":45,"INTO":46,"Table":47,"FROM":48,"FromTablesList":49,"FromTable":50,"JoinTablesList":51,"COMMA":52,"LPAR":53,"RPAR":54,"AS":55,"ParamValue":56,"DOT":57,"JoinTable":58,"JoinMode":59,"JOIN":60,"JoinTableAs":61,"OnClause":62,"JoinModeMode":63,"NATURAL":64,"INNER":65,"LEFT":66,"OUTER":67,"RIGHT":68,"FULL":69,"SEMI":70,"ANTI":71,"CROSS":72,"ON":73,"Expression":74,"USING":75,"ColumnsList":76,"WHERE":77,"GROUP":78,"BY":79,"GroupExpressionsList":80,"HavingClause":81,"GroupExpression":82,"GROUPING":83,"SETS":84,"ROLLUP":85,"CUBE":86,"HAVING":87,"UNION":88,"EXCEPT":89,"INTERSECT":90,"ORDER":91,"OrderExpressionsList":92,"OrderExpression":93,"DIRECTION":94,"COLLATE":95,"NOCASE":96,"LIMIT":97,"OffsetClause":98,"OFFSET":99,"ResultColumn":100,"NUMBER":101,"Star":102,"STAR":103,"Column":104,"AggrValue":105,"FuncValue":106,"Op":107,"LogicValue":108,"StringValue":109,"NullValue":110,"ExistsValue":111,"CaseValue":112,"PrimitiveValue":113,"Aggregator":114,"SUM":115,"COUNT":116,"MIN":117,"MAX":118,"AVG":119,"FIRST":120,"LAST":121,"ExprList":122,"TRUE":123,"FALSE":124,"STRING":125,"NULL":126,"EXISTS":127,"DOLLAR":128,"COLON":129,"QUESTION":130,"CASE":131,"WhensList":132,"ElseClause":133,"END":134,"When":135,"WHEN":136,"THEN":137,"ELSE":138,"LIKE":139,"PLUS":140,"MINUS":141,"SLASH":142,"PERCENT":143,"GT":144,"GE":145,"LT":146,"LE":147,"EQ":148,"NE":149,"CondOp":150,"AllSome":151,"AND":152,"OR":153,"NOT":154,"IN":155,"BETWEEN":156,"NOT_BETWEEN":157,"SOME":158,"ANY":159,"UPDATE":160,"SET":161,"SetColumnsList":162,"SetColumn":163,"DELETE":164,"INSERT":165,"VALUES":166,"ValuesListsList":167,"DEFAULT":168,"ValuesList":169,"Value":170,"DateValue":171,"CREATE":172,"TemporaryClause":173,"TABLE":174,"IfNotExists":175,"CreateTableDefClause":176,"TEMPORARY":177,"TEMP":178,"IF":179,"ColumnDefsList":180,"ConstraintsList":181,"Constraint":182,"ConstraintName":183,"PrimaryKey":184,"ForeignKey":185,"CONSTRAINT":186,"PRIMARY":187,"KEY":188,"ColsList":189,"FOREIGN":190,"REFERENCES":191,"ColumnDef":192,"ColumnTypeName":193,"ColumnConstraintsClause":194,"ColumnConstraints":195,"SignedNumber":196,"ColumnConstraintsList":197,"ColumnConstraint":198,"AUTO_INCREMENT":199,"IDENTITY":200,"DROP":201,"ALTER":202,"RENAME":203,"TO":204,"ADD":205,"COLUMN":206,"MODIFY":207,"DATABASE":208,"USE":209,"INDEX":210,"UNIQUE":211,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",8:"EOF",9:"SEMICOLON",12:"EXPLAIN",13:"QUERY",14:"PLAN",28:"WITH",30:"RECURSIVE",39:"SELECT",40:"DISTINCT",43:"ALL",44:"TOP",46:"INTO",48:"FROM",52:"COMMA",53:"LPAR",54:"RPAR",55:"AS",57:"DOT",60:"JOIN",64:"NATURAL",65:"INNER",66:"LEFT",67:"OUTER",68:"RIGHT",69:"FULL",70:"SEMI",71:"ANTI",72:"CROSS",73:"ON",75:"USING",77:"WHERE",78:"GROUP",79:"BY",83:"GROUPING",84:"SETS",85:"ROLLUP",86:"CUBE",87:"HAVING",88:"UNION",89:"EXCEPT",90:"INTERSECT",91:"ORDER",94:"DIRECTION",95:"COLLATE",96:"NOCASE",97:"LIMIT",99:"OFFSET",101:"NUMBER",103:"STAR",115:"SUM",116:"COUNT",117:"MIN",118:"MAX",119:"AVG",120:"FIRST",121:"LAST",123:"TRUE",124:"FALSE",125:"STRING",126:"NULL",127:"EXISTS",128:"DOLLAR",129:"COLON",130:"QUESTION",131:"CASE",134:"END",136:"WHEN",137:"THEN",138:"ELSE",139:"LIKE",140:"PLUS",141:"MINUS",142:"SLASH",143:"PERCENT",144:"GT",145:"GE",146:"LT",147:"LE",148:"EQ",149:"NE",152:"AND",153:"OR",154:"NOT",155:"IN",156:"BETWEEN",157:"NOT_BETWEEN",158:"SOME",159:"ANY",160:"UPDATE",161:"SET",164:"DELETE",165:"INSERT",166:"VALUES",168:"DEFAULT",171:"DateValue",172:"CREATE",174:"TABLE",177:"TEMPORARY",178:"TEMP",179:"IF",186:"CONSTRAINT",187:"PRIMARY",188:"KEY",190:"FOREIGN",191:"REFERENCES",195:"ColumnConstraints",196:"SignedNumber",199:"AUTO_INCREMENT",200:"IDENTITY",201:"DROP",202:"ALTER",203:"RENAME",204:"TO",205:"ADD",206:"COLUMN",207:"MODIFY",208:"DATABASE",209:"USE",210:"INDEX",211:"UNIQUE"},
productions_: [0,[3,1],[3,1],[6,2],[7,3],[7,1],[11,2],[11,4],[10,0],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[27,3],[27,4],[27,1],[29,0],[24,8],[31,4],[31,4],[31,3],[41,2],[41,0],[32,0],[32,2],[33,2],[33,3],[33,0],[49,1],[49,3],[50,4],[50,5],[50,3],[50,2],[50,3],[50,1],[50,2],[50,3],[50,1],[47,3],[47,1],[51,2],[51,1],[58,4],[61,1],[61,2],[61,3],[61,2],[61,3],[61,4],[61,5],[59,1],[59,2],[63,0],[63,1],[63,1],[63,2],[63,1],[63,2],[63,1],[63,2],[63,1],[63,1],[63,1],[62,2],[62,2],[62,0],[34,0],[34,2],[35,0],[35,4],[80,1],[80,3],[82,5],[82,4],[82,4],[82,1],[81,0],[81,2],[38,0],[38,2],[38,3],[38,2],[38,2],[36,0],[36,3],[92,1],[92,3],[93,1],[93,2],[93,3],[93,4],[37,0],[37,3],[98,0],[98,2],[42,3],[42,1],[100,3],[100,3],[100,1],[102,5],[102,3],[102,1],[104,5],[104,3],[104,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[105,4],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[106,4],[106,3],[122,1],[122,3],[45,1],[108,1],[108,1],[109,1],[110,1],[111,4],[56,2],[56,2],[56,1],[112,5],[112,4],[132,2],[132,1],[135,4],[133,2],[133,0],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,6],[107,6],[107,3],[107,3],[107,2],[107,2],[107,3],[107,5],[107,6],[107,5],[107,6],[107,3],[107,3],[150,1],[150,1],[150,1],[150,1],[150,1],[150,1],[151,1],[151,1],[151,1],[26,6],[26,4],[162,1],[162,3],[163,3],[19,5],[19,3],[23,5],[23,5],[23,8],[23,4],[23,7],[167,3],[167,5],[169,1],[169,3],[170,1],[170,1],[170,1],[170,1],[170,1],[170,1],[76,1],[76,3],[18,8],[173,0],[173,1],[173,1],[175,0],[175,3],[176,3],[176,1],[176,2],[181,1],[181,3],[182,2],[182,2],[183,0],[183,2],[184,5],[185,10],[189,1],[189,3],[180,1],[180,3],[192,3],[192,2],[193,6],[193,4],[193,1],[194,0],[194,1],[197,2],[197,1],[198,2],[198,7],[198,1],[198,6],[198,2],[198,2],[22,5],[22,3],[15,6],[15,6],[15,6],[15,6],[16,3],[25,3],[25,2],[20,3],[17,8],[17,9],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0].toLowerCase(); 
break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 4:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 5: case 36: case 50: case 79: case 94: case 105: case 143: case 157: case 197: case 209: case 217: case 236:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 7:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 8: case 30: case 35: case 74: case 75: case 77: case 85: case 87: case 92: case 100: case 102: case 220: case 223:
 this.$ = null; 
break;
case 21: case 22: case 43: case 84: case 108: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 159: case 186: case 187: case 188: case 189: case 190: case 191: case 233: case 246: case 248:
 this.$ = $$[$0]; 
break;
case 23:
 this.$ = $$[$0];
break;
case 25:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 26:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 27:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 28:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 29:
 this.$ = {top: $$[$0]}; 
break;
case 31: case 245:
this.$ = null
break;
case 32:
this.$ = {into: $$[$0]} 
break;
case 33:
 this.$ = { from: $$[$0] }; 
break;
case 34:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 37: case 80: case 198: case 237:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 38:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 39:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 40:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 41:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 42:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 44:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 45:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 46:
 this.$ = $$[$0]; $$[$0].as = 'delault'; 
break;
case 47:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 48:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 49:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 51:
 this.$ = new yy.Join($$[$0-3]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 52:
 this.$ = {table: $$[$0]}; 
break;
case 53:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 54:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 55:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 56:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 57:
 this.$ = {select: $$[$0-3], as: $$[$0]} ; 
break;
case 58:
 this.$ = {select: $$[$0-4], as: $$[$0] } ; 
break;
case 59:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 60:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 61: case 62:
 this.$ = "INNER"; 
break;
case 63: case 64:
 this.$ = "LEFT"; 
break;
case 65: case 66:
 this.$ = "RIGHT"; 
break;
case 67: case 68:
 this.$ = "OUTER"; 
break;
case 69:
 this.$ = "SEMI"; 
break;
case 70:
 this.$ = "ANTI"; 
break;
case 71:
 this.$ = "CROSS"; 
break;
case 72:
 this.$ = {on: $$[$0]}; 
break;
case 73:
 this.$ = {using: $$[$0]}; 
break;
case 76:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 78:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 81:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 82:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 83:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 86:
 this.$ = {having:$$[$0]}
break;
case 88:
 this.$ = {union: $$[$0]} ; 
break;
case 89:
 this.$ = {unionall: $$[$0]} ; 
break;
case 90:
 this.$ = {except: $$[$0]} ; 
break;
case 91:
 this.$ = {intersect: $$[$0]} ; 
break;
case 93:
 this.$ = {order:$$[$0]}
break;
case 95:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 96:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 97:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 98:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 99:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 101:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 103:
 this.$ = {offset:$$[$0]}
break;
case 104: case 229: case 239:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 106: case 107:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 109:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 110:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 111:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 112:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 113:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 114:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 133:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 134:
 this.$ = "SUM"; 
break;
case 135:
 this.$ = "COUNT"; 
break;
case 136:
 this.$ = "MIN"; 
break;
case 137:
 this.$ = "MAX"; 
break;
case 138:
 this.$ = "AVG"; 
break;
case 139:
 this.$ = "FIRST"; 
break;
case 140:
 this.$ = "LAST"; 
break;
case 141:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 142:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 144:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 145:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 146:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 147:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 148:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 149:
 this.$ = new yy.NullValue({value:null}); 
break;
case 150:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 151: case 152:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 153:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 154:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 155:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 156:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 158:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 160:
this.$ = null; 
break;
case 161:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 162:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 163:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 164:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 165:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 166:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 167:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 168:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 169:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 170:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 171:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 172:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 173:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 174:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 175:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 176:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 177:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 178:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 179:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 180:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 181:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 182:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 183:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 184:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 185:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 192:
 this.$ = 'ALL'; 
break;
case 193:
 this.$ = 'SOME'; 
break;
case 194:
 this.$ = 'ANY'; 
break;
case 195:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 196:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 199:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 200:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 201:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 202:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 203:
 this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; 
break;
case 204:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 205:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 206:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 207:
 this.$ = [$$[$0-1]]; 
break;
case 208:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 210: case 218:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 219:
 
			this.$ = new yy.CreateTable({table:$$[$0-3]}); 
			yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-4]); 
			yy.extend(this.$,$$[$0-1]); 
		
break;
case 221: case 222:
 this.$ = {temporary:true}; 
break;
case 224:
 this.$ = {ifnotexists: true}; 
break;
case 225:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 226:
 this.$ = {columns: $$[$0]}; 
break;
case 227:
 this.$ = {as: $$[$0]} 
break;
case 228: case 238:
 this.$ = [$$[$0]];
break;
case 230: case 231:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 232:
 this.$ = null 
break;
case 234:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 235:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-6], fktableid: $$[$0-3], fkcolumns: $$[$0-1]}; 
break;
case 240:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 241:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 242:
 this.$ = {dbtypeid: $$[$0-5].toUpperCase(), dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 243:
 this.$ = {dbtypeid: $$[$0-3].toUpperCase(), dbsize: $$[$0-1]} 
break;
case 244:
 this.$ = {dbtypeid: $$[$0].toUpperCase()} 
break;
case 247:
 yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];
break;
case 249:
this.$ = {primarykey:true};
break;
case 250:
this.$ = {foreignkey:{tableid:$$[$0-3], columnid: $$[$0-1]}};
break;
case 251:
this.$ = {auto_increment:true};
break;
case 252:
 this.$ = {identity: [$$[$0-3],$$[$0-1]]} 
break;
case 253:
this.$ = {default:$$[$0]};
break;
case 254:
this.$ = {notnull:true};
break;
case 255:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 256:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 257:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
case 258:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 259:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 260:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});
break;
case 261:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0] });
break;
case 262: case 263:
 this.$ = new yy.UseDatabase({databaseid: $$[$0] });
break;
case 264:
 this.$ = new yy.DropDatabase({databaseid: $$[$0] });
break;
case 265:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})
break;
case 266:
 this.$ = new yy.CreateIndex({indexid:$$[$0-6], table:$$[$0-4], columns:$$[$0-2], unique:true})
break;
case 267:
 this.$ = new yy.DropIndex({indexid:$$[$0]});
break;
}
},
table: [o($V0,$V1,{6:1,7:2,10:3,15:4,16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,31:21,39:$V2,160:$V3,164:$V4,165:$V5,172:$V6,201:$V7,202:$V8,209:$V9}),{1:[3]},{8:[1,25],9:[1,26]},o($V0,[2,5]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),{174:[1,27]},{173:31,174:[2,220],177:[1,32],178:[1,33],208:[1,28],210:[1,29],211:[1,30]},{48:[1,34]},{174:[1,37],208:[1,35],210:[1,36]},{46:[1,38]},o($Va,[2,31],{32:39,46:[1,40]}),{3:42,4:$Vb,5:$Vc,208:[1,41]},{3:46,4:$Vb,5:$Vc,47:45},o($Vd,$Ve,{41:49,40:[1,47],43:[1,48],44:$Vf}),{1:[2,3]},o($V0,$V1,{15:4,16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,31:21,10:51,39:$V2,160:$V3,164:$V4,165:$V5,172:$V6,201:$V7,202:$V8,209:$V9}),{3:46,4:$Vb,5:$Vc,47:52},{3:53,4:$Vb,5:$Vc},{3:54,4:$Vb,5:$Vc},{210:[1,55]},{174:[1,56]},{174:[2,221]},{174:[2,222]},{3:46,4:$Vb,5:$Vc,47:57},{3:58,4:$Vb,5:$Vc},{3:59,4:$Vb,5:$Vc},{3:46,4:$Vb,5:$Vc,47:61,179:[1,60]},{3:46,4:$Vb,5:$Vc,47:62},o($Vg,[2,35],{33:63,48:[1,64]}),{3:46,4:$Vb,5:$Vc,47:65},{3:66,4:$Vb,5:$Vc},o($V0,[2,263]),o($Vh,[2,1]),o($Vh,[2,2]),{161:[1,67]},o($Vi,[2,48],{57:[1,68]}),o($Vd,$Ve,{41:69,44:$Vf}),o($Vd,$Ve,{41:70,44:$Vf}),{3:87,4:$Vb,5:$Vc,42:71,45:79,53:$Vj,56:83,74:73,100:72,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{45:109,101:$Vk},o($V0,[2,4]),{201:[1,113],203:[1,110],205:[1,111],207:[1,112]},o($V0,[2,261]),{73:[1,114]},{3:115,4:$Vb,5:$Vc},o($VE,[2,223],{175:116,179:[1,117]}),o($V0,[2,201],{77:[1,118]}),o($V0,[2,264]),o($V0,[2,267]),{127:[1,119]},o($V0,[2,256]),{24:123,31:21,39:$V2,53:[1,122],166:[1,120],168:[1,121]},o($VF,[2,75],{34:124,77:[1,125]}),{3:46,4:$Vb,5:$Vc,47:129,49:126,50:127,53:$VG,56:130,128:$Vy,129:$Vz,130:$VA},o($Va,[2,32]),o($V0,[2,262]),{3:134,4:$Vb,5:$Vc,104:133,162:131,163:132},{3:135,4:$Vb,5:$Vc},{3:87,4:$Vb,5:$Vc,42:136,45:79,53:$Vj,56:83,74:73,100:72,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,42:137,45:79,53:$Vj,56:83,74:73,100:72,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($VH,[2,28],{52:$VI}),o($VJ,[2,105]),o($VJ,[2,108],{150:152,55:[1,139],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V01,[2,115]),o($V01,[2,116]),o($V01,[2,117]),o($V01,[2,118]),o($V01,[2,119]),o($V01,[2,120]),o($V01,[2,121]),o($V01,[2,122]),o($V01,[2,123]),o($V01,[2,124]),o($V01,[2,125]),o($V01,[2,126]),{53:[1,159]},o($V01,$V11,{53:$V21,57:[1,161]}),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:162,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:163,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:164,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V01,[2,111]),o([4,5,8,9,46,48,52,53,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,99,101,103,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,168,187,190,199,200],[2,145]),o($V31,[2,146]),o($V31,[2,147]),o($V31,[2,148]),o($V31,[2,149]),{3:165,4:$Vb,5:$Vc},{3:166,4:$Vb,5:$Vc},o($V41,[2,153]),{53:[1,167]},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:168,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:169,135:170,136:$V51,141:$VC,154:$VD},{53:[2,134]},{53:[2,135]},{53:[2,136]},{53:[2,137]},{53:[2,138]},{53:[2,139]},{53:[2,140]},o($Vd,[2,29]),{204:[1,172]},{206:[1,173]},{206:[1,174]},{206:[1,175]},{3:46,4:$Vb,5:$Vc,47:176},{73:[1,177]},{3:46,4:$Vb,5:$Vc,47:178},{154:[1,179]},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:180,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:46,4:$Vb,5:$Vc,47:181},{53:$V61,167:182},{166:[1,184]},{3:134,4:$Vb,5:$Vc,76:185,104:186},o($V0,[2,205]),o($V71,[2,77],{35:187,78:[1,188]}),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:189,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($Vg,[2,33],{52:[1,190]}),o($V81,[2,36],{51:191,58:192,59:193,63:194,60:$V91,64:$Va1,65:$Vb1,66:$Vc1,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1}),{24:204,31:21,39:$V2},o($Vj1,[2,43],{3:205,4:$Vb,5:$Vc,55:[1,206]}),o($Vj1,[2,46],{3:207,4:$Vb,5:$Vc,55:[1,208]}),o($V0,[2,196],{52:[1,210],77:[1,209]}),o($Vk1,[2,197]),{148:[1,211]},o($Vl1,$V11,{57:[1,212]}),o($Vi,[2,47]),o($VH,[2,26],{52:$VI}),o($VH,[2,27],{52:$VI}),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:73,100:213,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:214,4:$Vb,5:$Vc,101:[1,215]},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:216,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:217,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:218,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:219,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:220,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:221,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($Vm1,[2,186],{105:74,106:75,107:76,104:77,102:78,45:79,108:80,109:81,110:82,56:83,111:84,112:85,114:86,3:87,74:222,4:$Vb,5:$Vc,53:$Vj,101:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vm1,[2,187],{105:74,106:75,107:76,104:77,102:78,45:79,108:80,109:81,110:82,56:83,111:84,112:85,114:86,3:87,74:223,4:$Vb,5:$Vc,53:$Vj,101:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vm1,[2,188],{105:74,106:75,107:76,104:77,102:78,45:79,108:80,109:81,110:82,56:83,111:84,112:85,114:86,3:87,74:224,4:$Vb,5:$Vc,53:$Vj,101:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vm1,[2,189],{105:74,106:75,107:76,104:77,102:78,45:79,108:80,109:81,110:82,56:83,111:84,112:85,114:86,3:87,74:225,4:$Vb,5:$Vc,53:$Vj,101:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vm1,[2,190],{105:74,106:75,107:76,104:77,102:78,45:79,108:80,109:81,110:82,56:83,111:84,112:85,114:86,3:87,74:226,4:$Vb,5:$Vc,53:$Vj,101:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vm1,[2,191],{105:74,106:75,107:76,104:77,102:78,45:79,108:80,109:81,110:82,56:83,111:84,112:85,114:86,3:87,74:227,4:$Vb,5:$Vc,53:$Vj,101:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),{43:[1,229],151:228,158:[1,230],159:[1,231]},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:232,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:233,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{53:[1,234]},{155:[1,235]},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:236,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:237,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:238,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,54:[1,240],56:83,74:241,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:239,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:242,4:$Vb,5:$Vc,103:[1,243]},o([8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,134,136,137,138,144,145,146,147,148,149,152,153,154,155,156,157],[2,177],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP}),o($Vn1,[2,178],{150:152,103:$VK,142:$VO,143:$VP}),{54:[1,244],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:152,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},o($V41,[2,151]),o($V41,[2,152]),{24:245,31:21,39:$V2},{103:$VK,132:246,135:170,136:$V51,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:152,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},{133:247,134:$Vo1,135:248,136:$V51,138:$Vp1},o($Vq1,[2,157]),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:250,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:251,4:$Vb,5:$Vc},{3:253,4:$Vb,5:$Vc,192:252},{3:253,4:$Vb,5:$Vc,192:254},{3:255,4:$Vb,5:$Vc},{53:[1,256]},{3:46,4:$Vb,5:$Vc,47:257},{53:[1,258]},{127:[1,259]},o($V0,[2,200],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V0,[2,255]),o($V0,[2,202],{52:$Vr1}),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:262,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD,169:261},o($V0,[2,203]),{52:$Vs1,54:[1,263]},o($Vj1,[2,217]),o($Vt1,[2,92],{36:265,91:[1,266]}),{79:[1,267]},o($VF,[2,76],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),{3:46,4:$Vb,5:$Vc,47:129,50:268,53:$VG,56:130,128:$Vy,129:$Vz,130:$VA},o($Vg,[2,34],{59:193,63:194,58:269,60:$V91,64:$Va1,65:$Vb1,66:$Vc1,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1}),o($Vu1,[2,50]),{60:[1,270]},{60:[2,59]},{60:$V91,63:271,65:$Vb1,66:$Vc1,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},{60:[2,62]},{60:[2,63],67:[1,272]},{60:[2,65],67:[1,273]},{60:[2,67]},{67:[1,274]},{60:[2,69]},{60:[2,70]},{60:[2,71]},{54:[1,275]},o($Vj1,[2,41]),{3:276,4:$Vb,5:$Vc},o($Vj1,[2,44]),{3:277,4:$Vb,5:$Vc},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:278,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:134,4:$Vb,5:$Vc,104:133,163:279},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:280,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:281,4:$Vb,5:$Vc},o($VJ,[2,104]),o($VJ,[2,106]),o($VJ,[2,107]),o([8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,134,136,137,138,139,144,145,146,147,148,149,152,153,154,155,156,157],[2,161],{150:152,103:$VK,140:$VM,141:$VN,142:$VO,143:$VP}),o($Vn1,[2,162],{150:152,103:$VK,142:$VO,143:$VP}),o($Vn1,[2,163],{150:152,103:$VK,142:$VO,143:$VP}),o($V01,[2,164],{150:152}),o($V01,[2,165],{150:152}),o($V01,[2,166],{150:152}),o($Vv1,[2,167],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vv1,[2,168],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vv1,[2,169],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vv1,[2,170],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vv1,[2,171],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vv1,[2,172],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),{53:[1,282]},{53:[2,192]},{53:[2,193]},{53:[2,194]},o([8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,134,136,137,138,152,153,156,157],[2,175],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,154:$VY,155:$VZ}),o([8,9,46,48,52,54,55,60,64,65,66,67,68,69,70,71,72,77,78,87,88,89,90,91,94,95,97,134,136,137,138,153],[2,176],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,154:$VY,155:$VZ,156:$V_,157:$V$}),{3:87,4:$Vb,5:$Vc,24:283,31:21,39:$V2,45:79,53:$Vj,56:83,74:241,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:284,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{53:[1,285]},o($Vw1,[2,184],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,154:$VY,155:$VZ}),o($Vw1,[2,185],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,154:$VY,155:$VZ}),{54:[1,286],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:152,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},{52:$Vx1,54:[1,287]},o($V31,[2,142]),o($Vy1,[2,143],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V01,$Vz1,{57:[1,289]}),o($V01,[2,110]),o($V01,[2,179]),{54:[1,290]},{133:291,134:$Vo1,135:248,136:$V51,138:$Vp1},{134:[1,292]},o($Vq1,[2,156]),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:293,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{103:$VK,137:[1,294],139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:152,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},o($V0,[2,257]),o($V0,[2,258]),{4:[1,297],193:295,195:[1,296]},o($V0,[2,259]),o($V0,[2,260]),{3:299,4:$Vb,5:$Vc,189:298},{53:[1,300]},{3:253,4:$Vb,5:$Vc,55:[1,303],176:301,180:302,192:304},o($VE,[2,224]),{53:[1,305]},{52:$VA1,54:[1,306]},o($Vy1,[2,209],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),{24:309,31:21,39:$V2,166:[1,308]},{3:134,4:$Vb,5:$Vc,104:310},o($VB1,[2,100],{37:311,97:[1,312]}),{79:[1,313]},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:319,80:314,82:315,83:$VC1,85:$VD1,86:$VE1,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V81,[2,37]),o($Vu1,[2,49]),{3:46,4:$Vb,5:$Vc,47:321,53:[1,323],56:322,61:320,128:$Vy,129:$Vz,130:$VA},{60:[2,60]},{60:[2,64]},{60:[2,66]},{60:[2,68]},o($Vj1,[2,40],{3:324,4:$Vb,5:$Vc,55:[1,325]}),o($Vj1,[2,42]),o($Vj1,[2,45]),o($V0,[2,195],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vk1,[2,198]),o($Vk1,[2,199],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vl1,$Vz1,{57:[1,326]}),{3:87,4:$Vb,5:$Vc,24:327,31:21,39:$V2,45:79,53:$Vj,56:83,74:241,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:328,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{54:[1,329]},{52:$Vx1,54:[1,330]},{3:87,4:$Vb,5:$Vc,24:331,31:21,39:$V2,45:79,53:$Vj,56:83,74:241,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:332,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V01,[2,133]),o($V31,[2,141]),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:333,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:334,4:$Vb,5:$Vc,103:[1,335]},o($V01,[2,150]),{134:[1,336]},o($V01,[2,155]),{103:$VK,134:[2,159],139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:152,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:337,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($VF1,[2,245],{194:338,197:339,198:340,154:$VG1,168:$VH1,187:$VI1,190:$VJ1,199:$VK1,200:$VL1}),o($VF1,[2,241]),o($VM1,[2,244],{53:[1,347]}),{52:$VN1,54:[1,348]},o($Vy1,[2,236]),{3:299,4:$Vb,5:$Vc,189:350},{54:[1,351]},{52:[1,352],54:[2,226]},{24:353,31:21,39:$V2},o($Vy1,[2,238]),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:262,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD,169:354},o($VO1,[2,207]),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:355,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{53:$V61,167:356},o($V0,[2,206]),o($Vj1,[2,218]),o($VP1,[2,87],{38:357,88:[1,358],89:[1,359],90:[1,360]}),{45:361,101:$Vk},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:364,92:362,93:363,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V71,[2,85],{81:365,52:$VQ1,87:[1,367]}),o($VR1,[2,79]),{84:[1,368]},{53:[1,369]},{53:[1,370]},o($VR1,[2,84],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vu1,[2,74],{62:371,73:[1,372],75:[1,373]}),o($VS1,[2,52],{3:374,4:$Vb,5:$Vc,55:[1,375]}),{3:376,4:$Vb,5:$Vc,55:[1,377]},{24:378,31:21,39:$V2},o($Vj1,[2,38]),{3:379,4:$Vb,5:$Vc},{3:334,4:$Vb,5:$Vc},{54:[1,380]},{52:$Vx1,54:[1,381]},o($V01,[2,180]),o($V01,[2,182]),{54:[1,382]},{52:$Vx1,54:[1,383]},o($Vy1,[2,144],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V01,[2,112]),o($V01,[2,109]),o($V01,[2,154]),o($Vq1,[2,158],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($VF1,[2,240]),o($VF1,[2,246],{198:384,154:$VG1,168:$VH1,187:$VI1,190:$VJ1,199:$VK1,200:$VL1}),o($VM1,[2,248]),{188:[1,385]},{188:[1,386]},o($VM1,[2,251]),{53:[1,387]},{3:395,4:$Vb,5:$Vc,45:389,56:393,101:$Vk,106:394,108:391,109:390,110:392,113:388,123:$Vt,124:$Vu,125:$Vv,126:$Vw,128:$Vy,129:$Vz,130:$VA},{126:[1,396]},{196:[1,397]},o($V0,[2,265]),{3:398,4:$Vb,5:$Vc},{52:$VN1,54:[1,399]},o($V0,[2,219]),o($VT1,$VU1,{3:253,181:400,192:401,182:402,183:403,4:$Vb,5:$Vc,186:$VV1}),{54:[2,227]},{52:$VA1,54:[1,405]},o($Vy1,[2,210],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V0,[2,204],{52:$Vr1}),o($VP1,[2,25]),{24:406,31:21,39:$V2,43:[1,407]},{24:408,31:21,39:$V2},{24:409,31:21,39:$V2},o($VB1,[2,102],{98:410,99:[1,411]}),o($Vt1,[2,93],{52:[1,412]}),o($VW1,[2,94]),o($VW1,[2,96],{150:152,94:[1,413],95:[1,414],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V71,[2,78]),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:319,82:415,83:$VC1,85:$VD1,86:$VE1,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:416,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{53:[1,417]},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:319,80:418,82:315,83:$VC1,85:$VD1,86:$VE1,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:319,80:419,82:315,83:$VC1,85:$VD1,86:$VE1,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($Vu1,[2,51]),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:420,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{3:134,4:$Vb,5:$Vc,76:421,104:186},o($VS1,[2,53]),{3:422,4:$Vb,5:$Vc},o($VS1,[2,55]),{3:423,4:$Vb,5:$Vc},{54:[1,424]},o($Vj1,[2,39]),o($V01,[2,173]),o($V01,[2,174]),o($V01,[2,181]),o($V01,[2,183]),o($VM1,[2,247]),o($VM1,[2,249]),{191:[1,425]},{45:426,101:$Vk},o($VM1,[2,253]),o($VM1,[2,127]),o($VM1,[2,128]),o($VM1,[2,129]),o($VM1,[2,130]),o($VM1,[2,131]),o($VM1,[2,132]),{53:$V21},o($VM1,[2,254]),{54:[1,428],57:[1,427]},o($Vy1,[2,237]),o($V0,[2,266]),{52:[1,429],54:[2,225]},o($Vy1,[2,239]),o($Vy1,[2,228]),{184:430,185:431,187:[1,432],190:[1,433]},{3:434,4:$Vb,5:$Vc},o($VO1,[2,208]),o($VP1,[2,88]),{24:435,31:21,39:$V2},o($VP1,[2,90]),o($VP1,[2,91]),o($VB1,[2,101]),{45:436,101:$Vk},{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:364,93:437,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($VW1,[2,97]),{96:[1,438]},o($VR1,[2,80]),o($V71,[2,86],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),{3:87,4:$Vb,5:$Vc,45:79,53:$Vj,56:83,74:319,80:439,82:315,83:$VC1,85:$VD1,86:$VE1,101:$Vk,102:78,103:$Vl,104:77,105:74,106:75,107:76,108:80,109:81,110:82,111:84,112:85,114:86,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:$VQ1,54:[1,440]},{52:$VQ1,54:[1,441]},o($Vu1,[2,72],{150:152,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vu1,[2,73],{52:$Vs1}),o($VS1,[2,54]),o($VS1,[2,56]),{3:442,4:$Vb,5:$Vc,55:[1,443]},{3:444,4:$Vb,5:$Vc},{52:[1,445]},{196:[1,446]},o($VM1,[2,243]),o($VT1,$VU1,{183:403,182:447,186:$VV1}),o($Vy1,[2,230]),o($Vy1,[2,231]),{188:[1,448]},{188:[1,449]},o($VT1,[2,233]),o($VP1,[2,89]),o($VB1,[2,103]),o($VW1,[2,95]),o($VW1,[2,98],{94:[1,450]}),{52:$VQ1,54:[1,451]},o($VR1,[2,82]),o($VR1,[2,83]),o($VS1,[2,57]),{3:452,4:$Vb,5:$Vc},{53:[1,453]},{45:454,101:$Vk},{54:[1,455]},o($Vy1,[2,229]),{53:[1,456]},{53:[1,457]},o($VW1,[2,99]),o($VR1,[2,81]),o($VS1,[2,58]),{3:458,4:$Vb,5:$Vc},{54:[1,459]},o($VM1,[2,242]),{3:299,4:$Vb,5:$Vc,189:460},{3:299,4:$Vb,5:$Vc,189:461},{54:[1,462]},o($VM1,[2,252]),{52:$VN1,54:[1,463]},{52:$VN1,54:[1,464]},o($VM1,[2,250]),o($Vy1,[2,234]),{191:[1,465]},{3:466,4:$Vb,5:$Vc},{53:[1,467]},{3:299,4:$Vb,5:$Vc,189:468},{52:$VN1,54:[1,469]},o($Vy1,[2,235])],
defaultActions: {25:[2,3],32:[2,221],33:[2,222],102:[2,134],103:[2,135],104:[2,136],105:[2,137],106:[2,138],107:[2,139],108:[2,140],194:[2,59],196:[2,62],199:[2,67],201:[2,69],202:[2,70],203:[2,71],229:[2,192],230:[2,193],231:[2,194],271:[2,60],272:[2,64],273:[2,66],274:[2,68],353:[2,227]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5
break;
case 1:/* skip whitespace */
break;
case 2:return 205
break;
case 3:return 43
break;
case 4:return 202
break;
case 5:return 152
break;
case 6:return 71
break;
case 7:return 159
break;
case 8:return 55
break;
case 9:return 94
break;
case 10:return 199
break;
case 11:return 119
break;
case 12:return 156
break;
case 13:return 157
break;
case 14:return 79
break;
case 15:return "CASE"
break;
case 16:return 95
break;
case 17:return "COLUMN"
break;
case 18:return "CONSTRAINT"
break;
case 19:return "COUNT"
break;
case 20:return 172
break;
case 21:return "CROSS"
break;
case 22:return 86
break;
case 23:return 208
break;
case 24:return 168
break;
case 25:return 164
break;
case 26:return 94
break;
case 27:return 40
break;
case 28:return 201
break;
case 29:return 134
break;
case 30:return 138
break;
case 31:return 89
break;
case 32:return 127
break;
case 33:return 12
break;
case 34:return 124
break;
case 35:return 120
break;
case 36:return 190
break;
case 37:return 48
break;
case 38:return 78
break;
case 39:return 83
break;
case 40:return 87
break;
case 41:return 179
break;
case 42:return 200
break;
case 43:return 155
break;
case 44:return 210
break;
case 45:return 65
break;
case 46:return 165
break;
case 47:return 90
break;
case 48:return 46
break;
case 49:return 60
break;
case 50:return 188
break;
case 51:return 121
break;
case 52:return 66
break;
case 53:return 139
break;
case 54:return 97
break;
case 55:return "MAX"
break;
case 56:return "MIN"
break;
case 57:return "MODIFY"
break;
case 58:return 64
break;
case 59:return 96
break;
case 60:return 154
break;
case 61:return 126
break;
case 62:return 73
break;
case 63:return 99
break;
case 64:return 153
break;
case 65:return 91
break;
case 66:return 67
break;
case 67:return 14
break;
case 68:return 187
break;
case 69:return 13
break;
case 70:return 191
break;
case 71:return 203
break;
case 72:return 68
break;
case 73:return 85
break;
case 74:return 39
break;
case 75:return 70
break;
case 76:return 161
break;
case 77:return 84
break;
case 78:return 158
break;
case 79:return "SUM"
break;
case 80:return 174
break;
case 81:return 137
break;
case 82:return 204
break;
case 83:return 44
break;
case 84:return 123
break;
case 85:return 88
break;
case 86:return 160
break;
case 87:return 209
break;
case 88:return 75
break;
case 89:return 166
break;
case 90:return 136
break;
case 91:return 77
break;
case 92:return 101
break;
case 93:return 140
break;
case 94:return 141
break;
case 95:return 103
break;
case 96:return 142
break;
case 97:return 143
break;
case 98:return 145
break;
case 99:return 144
break;
case 100:return 147
break;
case 101:return 149
break;
case 102:return 146
break;
case 103:return 148
break;
case 104:return 149
break;
case 105:return 53
break;
case 106:return 54
break;
case 107:return 57
break;
case 108:return 52
break;
case 109:return 129
break;
case 110:return 9
break;
case 111:return 128
break;
case 112:return 130
break;
case 113:return 4
break;
case 114:return 125
break;
case 115:return 125
break;
case 116:return 8
break;
case 117:return 'INVALID'
break;
}
},
rules: [/^(?:\[([^\]])*\])/i,/^(?:\s+)/i,/^(?:ADD\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AUTO_INCREMENT\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DATABASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:REFERENCES\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}