/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,9],$V1=[2,8],$V2=[1,15],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,45],$V8=[1,40],$V9=[1,34],$Va=[1,36],$Vb=[1,33],$Vc=[1,35],$Vd=[1,32],$Ve=[1,39],$Vf=[1,38],$Vg=[1,41],$Vh=[1,42],$Vi=[1,44],$Vj=[1,43],$Vk=[8,9,64,70,93,94,104,105,106,107,113],$Vl=[1,71],$Vm=[1,72],$Vn=[4,5,69,117,119,131,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,157,170],$Vo=[2,46],$Vp=[1,88],$Vq=[8,9,70,93,94,104,105,106,107,113],$Vr=[4,5,8,9,55,62,64,68,69,70,71,73,76,80,81,82,83,84,85,86,87,88,89,91,93,94,103,104,105,106,107,110,111,113,117,119,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,169,170,171,172,173,177,182,184,203,206,211,215,216,217,219,221,223,235],$Vs=[4,5,8,9,55,64,68,69,70,71,76,80,81,82,83,84,85,86,87,88,89,91,93,94,104,105,106,107,113,177,182,184,217,219,221,223],$Vt=[1,119],$Vu=[1,142],$Vv=[1,143],$Vw=[1,153],$Vx=[1,154],$Vy=[1,155],$Vz=[1,156],$VA=[1,157],$VB=[1,158],$VC=[1,159],$VD=[1,144],$VE=[1,145],$VF=[1,146],$VG=[1,147],$VH=[1,151],$VI=[1,148],$VJ=[1,149],$VK=[1,150],$VL=[1,152],$VM=[1,141],$VN=[1,140],$VO=[4,5],$VP=[8,9,69,71],$VQ=[8,9,70,94,104,105,106,107,113],$VR=[1,182],$VS=[8,9,62,64,70,93,94,104,105,106,107,113],$VT=[1,200],$VU=[8,9,62,64,68,70,93,94,104,105,106,107,113],$VV=[1,207],$VW=[1,204],$VX=[1,205],$VY=[1,206],$VZ=[1,208],$V_=[1,209],$V$=[1,210],$V01=[1,211],$V11=[1,212],$V21=[1,213],$V31=[1,214],$V41=[1,215],$V51=[1,217],$V61=[1,218],$V71=[1,220],$V81=[1,219],$V91=[1,221],$Va1=[1,222],$Vb1=[4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,119,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,169,170,171,172,173],$Vc1=[2,132],$Vd1=[1,224],$Ve1=[4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,119,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,169,170,171,172,173,184,203,206,215,216],$Vf1=[1,235],$Vg1=[1,251],$Vh1=[8,9,70,104,105,106,107,113],$Vi1=[8,9,68,70,93,94,104,105,106,107,113],$Vj1=[2,77],$Vk1=[1,263],$Vl1=[1,264],$Vm1=[1,265],$Vn1=[1,267],$Vo1=[1,266],$Vp1=[1,268],$Vq1=[1,269],$Vr1=[1,270],$Vs1=[1,271],$Vt1=[8,9,68,70,76,80,81,82,83,84,85,86,87,88,93,94,104,105,106,107,113],$Vu1=[8,9,68,93],$Vv1=[8,9,68,70,76,80,81,82,83,84,85,86,87,88,93,94,104,105,106,107,113,164],$Vw1=[59,174,175],$Vx1=[4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,150,152,153,154,155,156,157,160,161,162,163,164,165,168,169,170,171,172,173],$Vy1=[2,178],$Vz1=[1,322],$VA1=[150,152,154],$VB1=[1,334],$VC1=[68,70],$VD1=[1,335],$VE1=[1,339],$VF1=[8,9,70,104,105,106,113],$VG1=[8,9,70,76,80,81,82,83,84,85,86,87,88,93,94,104,105,106,107,113],$VH1=[4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,150,152,153,154,160,161,162,163,164,165,168,169,172,173],$VI1=[4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,150,152,153,154,169,172,173],$VJ1=[1,367],$VK1=[2,131],$VL1=[1,387],$VM1=[8,9,70,104,105,106],$VN1=[1,396],$VO1=[1,397],$VP1=[1,398],$VQ1=[8,9,68,70],$VR1=[1,426],$VS1=[1,425],$VT1=[1,421],$VU1=[1,422],$VV1=[1,423],$VW1=[1,424],$VX1=[8,9,68,70,170,184,203,206,215,216],$VY1=[8,9,68],$VZ1=[8,9,70],$V_1=[1,446],$V$1=[8,9,68,70,103,104,105,106,107,113],$V02=[8,9,70,76,80,81,82,83,84,85,86,87,88,89,91,93,94,104,105,106,107,113],$V12=[203,206],$V22=[2,250],$V32=[1,483],$V42=[8,9,68,70,104,105,106,113];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"main":6,"Statements":7,"EOF":8,"SEMICOLON":9,"Statement":10,"ExplainStatement":11,"EXPLAIN":12,"QUERY":13,"PLAN":14,"AlterTable":15,"CreateDatabase":16,"CreateIndex":17,"CreateTable":18,"CreateView":19,"Delete":20,"DropDatabase":21,"DropIndex":22,"DropTable":23,"DropView":24,"Insert":25,"RenameTable":26,"Select":27,"ShowCreateTable":28,"ShowColumns":29,"ShowDatabases":30,"ShowIndex":31,"ShowTables":32,"BeginTransaction":33,"CommitTransaction":34,"RollbackTransaction":35,"EndTransaction":36,"UseDatabase":37,"Update":38,"DeclareCursor":39,"OpenCursor":40,"FetchCursor":41,"CloseCursor":42,"WithSelectClause":43,"WITH":44,"WithTables":45,"RECURSIVE":46,"SelectClause":47,"IntoClause":48,"FromClause":49,"WhereClause":50,"GroupClause":51,"OrderClause":52,"LimitClause":53,"UnionClause":54,"SELECT":55,"DISTINCT":56,"TopClause":57,"ResultColumns":58,"ALL":59,"TOP":60,"NumValue":61,"INTO":62,"Table":63,"FROM":64,"FromTablesList":65,"FromTable":66,"JoinTablesList":67,"COMMA":68,"LPAR":69,"RPAR":70,"AS":71,"ParamValue":72,"DOT":73,"JoinTable":74,"JoinMode":75,"JOIN":76,"JoinTableAs":77,"OnClause":78,"JoinModeMode":79,"NATURAL":80,"INNER":81,"LEFT":82,"OUTER":83,"RIGHT":84,"FULL":85,"SEMI":86,"ANTI":87,"CROSS":88,"ON":89,"Expression":90,"USING":91,"ColumnsList":92,"WHERE":93,"GROUP":94,"BY":95,"GroupExpressionsList":96,"HavingClause":97,"GroupExpression":98,"GROUPING":99,"SETS":100,"ROLLUP":101,"CUBE":102,"HAVING":103,"UNION":104,"EXCEPT":105,"INTERSECT":106,"ORDER":107,"OrderExpressionsList":108,"OrderExpression":109,"DIRECTION":110,"COLLATE":111,"NOCASE":112,"LIMIT":113,"OffsetClause":114,"OFFSET":115,"ResultColumn":116,"NUMBER":117,"Star":118,"STAR":119,"Column":120,"AggrValue":121,"FuncValue":122,"Op":123,"LogicValue":124,"StringValue":125,"NullValue":126,"ExistsValue":127,"CaseValue":128,"PrimitiveValue":129,"Aggregator":130,"SUM":131,"COUNT":132,"MIN":133,"MAX":134,"AVG":135,"FIRST":136,"LAST":137,"ExprList":138,"TRUE":139,"FALSE":140,"STRING":141,"NULL":142,"EXISTS":143,"DOLLAR":144,"COLON":145,"QUESTION":146,"CASE":147,"WhensList":148,"ElseClause":149,"END":150,"When":151,"WHEN":152,"THEN":153,"ELSE":154,"LIKE":155,"PLUS":156,"MINUS":157,"SLASH":158,"PERCENT":159,"GT":160,"GE":161,"LT":162,"LE":163,"EQ":164,"NE":165,"CondOp":166,"AllSome":167,"AND":168,"OR":169,"NOT":170,"IN":171,"BETWEEN":172,"NOT_BETWEEN":173,"SOME":174,"ANY":175,"UPDATE":176,"SET":177,"SetColumnsList":178,"SetColumn":179,"DELETE":180,"INSERT":181,"VALUES":182,"ValuesListsList":183,"DEFAULT":184,"ValuesList":185,"Value":186,"DateValue":187,"CREATE":188,"TemporaryClause":189,"TABLE":190,"IfNotExists":191,"CreateTableDefClause":192,"TEMPORARY":193,"TEMP":194,"IF":195,"ColumnDefsList":196,"ConstraintsList":197,"Constraint":198,"ConstraintName":199,"PrimaryKey":200,"ForeignKey":201,"CONSTRAINT":202,"PRIMARY":203,"KEY":204,"ColsList":205,"FOREIGN":206,"REFERENCES":207,"ColumnDef":208,"ColumnTypeName":209,"ColumnConstraintsClause":210,"ColumnConstraints":211,"SignedNumber":212,"ColumnConstraintsList":213,"ColumnConstraint":214,"AUTO_INCREMENT":215,"IDENTITY":216,"DROP":217,"ALTER":218,"RENAME":219,"TO":220,"ADD":221,"COLUMN":222,"MODIFY":223,"DATABASE":224,"USE":225,"INDEX":226,"UNIQUE":227,"SHOW":228,"DATABASES":229,"TABLES":230,"COLUMNS":231,"VIEW":232,"View":233,"DECLARE":234,"CURSOR":235,"FOR":236,"OPEN":237,"CLOSE":238,"FETCH":239,"FetchDirection":240,"NEXT":241,"PRIOR":242,"ABSOLUTE":243,"RELATIVE":244,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",8:"EOF",9:"SEMICOLON",12:"EXPLAIN",13:"QUERY",14:"PLAN",26:"RenameTable",33:"BeginTransaction",34:"CommitTransaction",35:"RollbackTransaction",36:"EndTransaction",44:"WITH",46:"RECURSIVE",55:"SELECT",56:"DISTINCT",59:"ALL",60:"TOP",62:"INTO",64:"FROM",68:"COMMA",69:"LPAR",70:"RPAR",71:"AS",73:"DOT",76:"JOIN",80:"NATURAL",81:"INNER",82:"LEFT",83:"OUTER",84:"RIGHT",85:"FULL",86:"SEMI",87:"ANTI",88:"CROSS",89:"ON",91:"USING",93:"WHERE",94:"GROUP",95:"BY",99:"GROUPING",100:"SETS",101:"ROLLUP",102:"CUBE",103:"HAVING",104:"UNION",105:"EXCEPT",106:"INTERSECT",107:"ORDER",110:"DIRECTION",111:"COLLATE",112:"NOCASE",113:"LIMIT",115:"OFFSET",117:"NUMBER",119:"STAR",131:"SUM",132:"COUNT",133:"MIN",134:"MAX",135:"AVG",136:"FIRST",137:"LAST",139:"TRUE",140:"FALSE",141:"STRING",142:"NULL",143:"EXISTS",144:"DOLLAR",145:"COLON",146:"QUESTION",147:"CASE",150:"END",152:"WHEN",153:"THEN",154:"ELSE",155:"LIKE",156:"PLUS",157:"MINUS",158:"SLASH",159:"PERCENT",160:"GT",161:"GE",162:"LT",163:"LE",164:"EQ",165:"NE",168:"AND",169:"OR",170:"NOT",171:"IN",172:"BETWEEN",173:"NOT_BETWEEN",174:"SOME",175:"ANY",176:"UPDATE",177:"SET",180:"DELETE",181:"INSERT",182:"VALUES",184:"DEFAULT",187:"DateValue",188:"CREATE",190:"TABLE",193:"TEMPORARY",194:"TEMP",195:"IF",202:"CONSTRAINT",203:"PRIMARY",204:"KEY",206:"FOREIGN",207:"REFERENCES",211:"ColumnConstraints",212:"SignedNumber",215:"AUTO_INCREMENT",216:"IDENTITY",217:"DROP",218:"ALTER",219:"RENAME",220:"TO",221:"ADD",222:"COLUMN",223:"MODIFY",224:"DATABASE",225:"USE",226:"INDEX",227:"UNIQUE",228:"SHOW",229:"DATABASES",230:"TABLES",231:"COLUMNS",232:"VIEW",234:"DECLARE",235:"CURSOR",236:"FOR",237:"OPEN",238:"CLOSE",239:"FETCH",241:"NEXT",242:"PRIOR",243:"ABSOLUTE",244:"RELATIVE"},
productions_: [0,[3,1],[3,1],[6,2],[7,3],[7,1],[11,2],[11,4],[10,0],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[43,3],[43,4],[43,1],[45,0],[27,8],[47,4],[47,4],[47,3],[57,2],[57,0],[48,0],[48,2],[49,2],[49,3],[49,0],[65,1],[65,3],[66,4],[66,5],[66,3],[66,2],[66,3],[66,1],[66,2],[66,3],[66,1],[63,3],[63,1],[67,2],[67,1],[74,4],[77,1],[77,2],[77,3],[77,2],[77,3],[77,4],[77,5],[75,1],[75,2],[79,0],[79,1],[79,1],[79,2],[79,1],[79,2],[79,1],[79,2],[79,1],[79,1],[79,1],[78,2],[78,2],[78,0],[50,0],[50,2],[51,0],[51,4],[96,1],[96,3],[98,5],[98,4],[98,4],[98,1],[97,0],[97,2],[54,0],[54,2],[54,3],[54,2],[54,2],[52,0],[52,3],[108,1],[108,3],[109,1],[109,2],[109,3],[109,4],[53,0],[53,3],[114,0],[114,2],[58,3],[58,1],[116,3],[116,2],[116,3],[116,2],[116,1],[118,5],[118,3],[118,1],[120,5],[120,3],[120,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[129,1],[129,1],[129,1],[129,1],[129,1],[129,1],[121,4],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[122,4],[122,3],[138,1],[138,3],[61,1],[124,1],[124,1],[125,1],[126,1],[127,4],[72,2],[72,2],[72,1],[128,5],[128,4],[148,2],[148,1],[151,4],[149,2],[149,0],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,3],[123,6],[123,6],[123,3],[123,3],[123,2],[123,2],[123,3],[123,5],[123,6],[123,5],[123,6],[123,3],[123,3],[166,1],[166,1],[166,1],[166,1],[166,1],[166,1],[167,1],[167,1],[167,1],[38,6],[38,4],[178,1],[178,3],[179,3],[20,5],[20,3],[25,5],[25,5],[25,8],[25,4],[25,7],[183,3],[183,5],[185,1],[185,3],[186,1],[186,1],[186,1],[186,1],[186,1],[186,1],[92,1],[92,3],[18,8],[189,0],[189,1],[189,1],[191,0],[191,3],[192,3],[192,1],[192,2],[197,1],[197,3],[198,2],[198,2],[199,0],[199,2],[200,5],[201,10],[205,1],[205,3],[196,1],[196,3],[208,3],[208,2],[209,6],[209,4],[209,1],[210,0],[210,1],[213,2],[213,1],[214,2],[214,7],[214,1],[214,6],[214,2],[214,2],[23,5],[23,3],[15,6],[15,6],[15,6],[15,6],[16,3],[37,3],[37,2],[21,3],[17,8],[17,9],[22,3],[30,2],[30,4],[32,2],[32,4],[32,4],[32,6],[29,4],[29,6],[31,4],[31,6],[28,4],[28,6],[19,5],[19,8],[24,3],[233,1],[233,3],[39,5],[40,2],[42,2],[41,4],[240,1],[240,1],[240,1],[240,1],[240,2],[240,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 37: case 38: case 59: case 100: case 126: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 177: case 204: case 205: case 206: case 207: case 208: case 209: case 251: case 264: case 266:
 this.$ = $$[$0]; 
break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 4:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 5: case 52: case 66: case 95: case 110: case 121: case 161: case 175: case 215: case 227: case 235: case 254:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 7:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 8: case 46: case 51: case 90: case 91: case 93: case 101: case 103: case 108: case 116: case 118: case 238: case 241:
 this.$ = null; 
break;
case 39:
 this.$ = $$[$0];
break;
case 41:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 42:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 43:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 44:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 45:
 this.$ = {top: $$[$0]}; 
break;
case 47: case 263:
this.$ = null
break;
case 48:
this.$ = {into: $$[$0]} 
break;
case 49:
 this.$ = { from: $$[$0] }; 
break;
case 50:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 53: case 96: case 216: case 255:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 54:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 55:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 56:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 57:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 58:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 60:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 61:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 62:
 this.$ = $$[$0]; $$[$0].as = 'delault'; 
break;
case 63:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 64:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 65:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 67:
 this.$ = new yy.Join($$[$0-3]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 68:
 this.$ = {table: $$[$0]}; 
break;
case 69:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 70:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 71:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 72:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 73:
 this.$ = {select: $$[$0-3], as: $$[$0]} ; 
break;
case 74:
 this.$ = {select: $$[$0-4], as: $$[$0] } ; 
break;
case 75:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 76:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 77: case 78:
 this.$ = "INNER"; 
break;
case 79: case 80:
 this.$ = "LEFT"; 
break;
case 81: case 82:
 this.$ = "RIGHT"; 
break;
case 83: case 84:
 this.$ = "OUTER"; 
break;
case 85:
 this.$ = "SEMI"; 
break;
case 86:
 this.$ = "ANTI"; 
break;
case 87:
 this.$ = "CROSS"; 
break;
case 88:
 this.$ = {on: $$[$0]}; 
break;
case 89:
 this.$ = {using: $$[$0]}; 
break;
case 92:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 94:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 97:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 98:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 99:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 102:
 this.$ = {having:$$[$0]}
break;
case 104:
 this.$ = {union: $$[$0]} ; 
break;
case 105:
 this.$ = {unionall: $$[$0]} ; 
break;
case 106:
 this.$ = {except: $$[$0]} ; 
break;
case 107:
 this.$ = {intersect: $$[$0]} ; 
break;
case 109:
 this.$ = {order:$$[$0]}
break;
case 111:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 112:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 113:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 114:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 115:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 117:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 119:
 this.$ = {offset:$$[$0]}
break;
case 120: case 247: case 257:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 122: case 124:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 123: case 125:
 $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];
break;
case 127:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 128:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 129:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 130:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 131:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 132:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 151:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 152:
 this.$ = "SUM"; 
break;
case 153:
 this.$ = "COUNT"; 
break;
case 154:
 this.$ = "MIN"; 
break;
case 155:
 this.$ = "MAX"; 
break;
case 156:
 this.$ = "AVG"; 
break;
case 157:
 this.$ = "FIRST"; 
break;
case 158:
 this.$ = "LAST"; 
break;
case 159:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 160:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 162:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 163:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 164:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 165:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 166:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 167:
 this.$ = new yy.NullValue({value:null}); 
break;
case 168:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 169: case 170:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 171:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 172:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 173:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 174:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 176:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 178:
this.$ = null; 
break;
case 179:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 180:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 181:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 182:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 183:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 184:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 185:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 186:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 187:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 188:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 189:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 190:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 191:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 192:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 193:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 194:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 195:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 196:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 197:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 198:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 199:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 200:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 201:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 202:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 203:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 210:
 this.$ = 'ALL'; 
break;
case 211:
 this.$ = 'SOME'; 
break;
case 212:
 this.$ = 'ANY'; 
break;
case 213:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 214:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 217:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 218:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 219:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 220:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 221:
 this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; 
break;
case 222:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 223:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 224:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 225:
 this.$ = [$$[$0-1]]; 
break;
case 226:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 228: case 236:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 237:
 
			this.$ = new yy.CreateTable({table:$$[$0-3]}); 
			yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-4]); 
			yy.extend(this.$,$$[$0-1]); 
		
break;
case 239: case 240:
 this.$ = {temporary:true}; 
break;
case 242:
 this.$ = {ifnotexists: true}; 
break;
case 243:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 244:
 this.$ = {columns: $$[$0]}; 
break;
case 245:
 this.$ = {as: $$[$0]} 
break;
case 246: case 256:
 this.$ = [$$[$0]];
break;
case 248: case 249:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 250:
 this.$ = null 
break;
case 252:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 253:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-6], fktableid: $$[$0-3], fkcolumns: $$[$0-1]}; 
break;
case 258:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 259:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 260:
 this.$ = {dbtypeid: $$[$0-5].toUpperCase(), dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 261:
 this.$ = {dbtypeid: $$[$0-3].toUpperCase(), dbsize: $$[$0-1]} 
break;
case 262:
 this.$ = {dbtypeid: $$[$0].toUpperCase()} 
break;
case 265:
 yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];
break;
case 267:
this.$ = {primarykey:true};
break;
case 268:
this.$ = {foreignkey:{tableid:$$[$0-3], columnid: $$[$0-1]}};
break;
case 269:
this.$ = {auto_increment:true};
break;
case 270:
 this.$ = {identity: [$$[$0-3],$$[$0-1]]} 
break;
case 271:
this.$ = {default:$$[$0]};
break;
case 272:
this.$ = {notnull:true};
break;
case 273:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 274:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 275:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
case 276:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 277:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 278:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});
break;
case 279:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0] });
break;
case 280: case 281:
 this.$ = new yy.UseDatabase({databaseid: $$[$0] });
break;
case 282:
 this.$ = new yy.DropDatabase({databaseid: $$[$0] });
break;
case 283:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})
break;
case 284:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})
break;
case 285:
 this.$ = new yy.DropIndex({indexid:$$[$0]});
break;
case 286:
 this.$ = new yy.ShowDatabases();
break;
case 287:
 this.$ = new yy.ShowDatabases({like:$$[$0]});
break;
case 288:
 this.$ = new yy.ShowTables();
break;
case 289:
 this.$ = new yy.ShowTables({like:$$[$0]});
break;
case 290:
 this.$ = new yy.ShowTables({databaseid: $$[$0]});
break;
case 291:
 this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});
break;
case 292:
 this.$ = new yy.ShowColumns({table: $$[$0]});
break;
case 293:
 this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});
break;
case 294:
 this.$ = new yy.ShowIndex({table: $$[$0]});
break;
case 295:
 this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});
break;
case 296:
 this.$ = new yy.ShowCreateTable({table: $$[$0]});
break;
case 297:
 this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});
break;
case 298:
 this.$ = new yy.CreateView({view:$$[$0-2], select: $$[$0]}); 
break;
case 299:
 this.$ = new yy.CreateView({view:$$[$0-5], columns: $$[$0-3], select: $$[$0-3]}); 
break;
case 300:
 this.$ = new yy.DropView({view:$$[$0-1]}); 
break;
case 301:
 this.$ = new yy.View({viewid: $$[$0]}); 
break;
case 302:
 this.$ = new yy.View({databaseid:$$[$0-2], viewid: $$[$0]}); 
break;
case 303:
 this.$ = new yy.DeclareCursor({cursorid:$$[$0-3], select:$$[$0]}); 
break;
case 304:
 this.$ = new yy.OpenCursor({cursorid:$$[$0]}); 
break;
case 305:
 this.$ = new yy.CloseCursor({cursorid:$$[$0]}); 
break;
case 306:
 this.$ = new yy.FetchCursor({cursorid:$$[$0]}); yy.extend(this.$,$$[$0-2]); 
break;
case 307:
 this.$ = {direction: 'NEXT'}; 
break;
case 308:
 this.$ = {direction: 'PRIOR'}; 
break;
case 309:
 this.$ = {direction: 'FIRST'}; 
break;
case 310:
 this.$ = {direction: 'LAST'}; 
break;
case 311:
 this.$ = {direction: 'ABSOLUTE', num:$$[$0]}; 
break;
case 312:
 this.$ = {direction: 'RELATIVE', num:$$[$0]}; 
break;
}
},
table: [o($V0,$V1,{6:1,7:2,10:3,15:4,16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,27:16,28:17,29:18,30:19,31:20,32:21,37:26,38:27,39:28,40:29,41:30,42:31,47:37,26:$V2,33:$V3,34:$V4,35:$V5,36:$V6,55:$V7,176:$V8,180:$V9,181:$Va,188:$Vb,217:$Vc,218:$Vd,225:$Ve,228:$Vf,234:$Vg,237:$Vh,238:$Vi,239:$Vj}),{1:[3]},{8:[1,46],9:[1,47]},o($V0,[2,5]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),o($V0,[2,34]),o($V0,[2,35]),o($V0,[2,36]),{190:[1,48]},{189:52,190:[2,238],193:[1,54],194:[1,55],224:[1,49],226:[1,50],227:[1,51],232:[1,53]},{64:[1,56]},{190:[1,59],224:[1,57],226:[1,58],232:[1,60]},{62:[1,61]},o($Vk,[2,47],{48:62,62:[1,63]}),{188:[1,64],226:[1,67],229:[1,66],230:[1,68],231:[1,65]},{3:70,4:$Vl,5:$Vm,224:[1,69]},{3:74,4:$Vl,5:$Vm,63:73},{3:75,4:$Vl,5:$Vm},{3:76,4:$Vl,5:$Vm},{136:[1,80],137:[1,81],240:77,241:[1,78],242:[1,79],243:[1,82],244:[1,83]},{3:84,4:$Vl,5:$Vm},o($Vn,$Vo,{57:87,56:[1,85],59:[1,86],60:$Vp}),{1:[2,3]},o($V0,$V1,{15:4,16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,27:16,28:17,29:18,30:19,31:20,32:21,37:26,38:27,39:28,40:29,41:30,42:31,47:37,10:89,26:$V2,33:$V3,34:$V4,35:$V5,36:$V6,55:$V7,176:$V8,180:$V9,181:$Va,188:$Vb,217:$Vc,218:$Vd,225:$Ve,228:$Vf,234:$Vg,237:$Vh,238:$Vi,239:$Vj}),{3:74,4:$Vl,5:$Vm,63:90},{3:91,4:$Vl,5:$Vm},{3:92,4:$Vl,5:$Vm},{226:[1,93]},{190:[1,94]},{3:96,4:$Vl,5:$Vm,233:95},{190:[2,239]},{190:[2,240]},{3:74,4:$Vl,5:$Vm,63:97},{3:98,4:$Vl,5:$Vm},{3:99,4:$Vl,5:$Vm},{3:74,4:$Vl,5:$Vm,63:101,195:[1,100]},{3:96,4:$Vl,5:$Vm,233:102},{3:74,4:$Vl,5:$Vm,63:103},o($Vq,[2,51],{49:104,64:[1,105]}),{3:74,4:$Vl,5:$Vm,63:106},{190:[1,107]},{64:[1,108]},o($V0,[2,286],{155:[1,109]}),{64:[1,110]},o($V0,[2,288],{64:[1,112],155:[1,111]}),{3:113,4:$Vl,5:$Vm},o($V0,[2,281]),o($Vr,[2,1]),o($Vr,[2,2]),{177:[1,114]},o($Vs,[2,64],{73:[1,115]}),{235:[1,116]},o($V0,[2,304]),{64:[1,117]},{64:[2,307]},{64:[2,308]},{64:[2,309]},{64:[2,310]},{61:118,117:$Vt},{61:120,117:$Vt},o($V0,[2,305]),o($Vn,$Vo,{57:121,60:$Vp}),o($Vn,$Vo,{57:122,60:$Vp}),{3:139,4:$Vl,5:$Vm,58:123,61:131,69:$Vu,72:135,90:125,116:124,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{61:160,117:$Vt},o($V0,[2,4]),{217:[1,164],219:[1,161],221:[1,162],223:[1,163]},o($V0,[2,279]),{89:[1,165]},{3:166,4:$Vl,5:$Vm},o($VO,[2,241],{191:167,195:[1,168]}),{69:[1,170],71:[1,169]},o($VP,[2,301],{73:[1,171]}),o($V0,[2,219],{93:[1,172]}),o($V0,[2,282]),o($V0,[2,285]),{143:[1,173]},o($V0,[2,274]),o($V0,[2,300]),{27:177,47:37,55:$V7,69:[1,176],182:[1,174],184:[1,175]},o($VQ,[2,91],{50:178,93:[1,179]}),{3:74,4:$Vl,5:$Vm,63:183,65:180,66:181,69:$VR,72:184,144:$VI,145:$VJ,146:$VK},o($Vk,[2,48]),{3:74,4:$Vl,5:$Vm,63:185},{3:74,4:$Vl,5:$Vm,63:186},{125:187,141:$VF},{3:74,4:$Vl,5:$Vm,63:188},{125:189,141:$VF},{3:190,4:$Vl,5:$Vm},o($V0,[2,280]),{3:194,4:$Vl,5:$Vm,120:193,178:191,179:192},{3:195,4:$Vl,5:$Vm},{236:[1,196]},{3:197,4:$Vl,5:$Vm},{64:[2,311]},o([4,5,8,9,62,64,68,69,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,115,117,119,131,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,169,170,171,172,173,184,203,206,215,216],[2,163]),{64:[2,312]},{3:139,4:$Vl,5:$Vm,58:198,61:131,69:$Vu,72:135,90:125,116:124,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,58:199,61:131,69:$Vu,72:135,90:125,116:124,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($VS,[2,44],{68:$VT}),o($VU,[2,121]),o($VU,[2,126],{3:202,166:216,4:$Vl,5:$Vm,71:[1,201],117:[1,203],119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($Vb1,[2,133]),o($Vb1,[2,134]),o($Vb1,[2,135]),o($Vb1,[2,136]),o($Vb1,[2,137]),o($Vb1,[2,138]),o($Vb1,[2,139]),o($Vb1,[2,140]),o($Vb1,[2,141]),o($Vb1,[2,142]),o($Vb1,[2,143]),o($Vb1,[2,144]),{69:[1,223]},o($Vb1,$Vc1,{69:$Vd1,73:[1,225]}),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:226,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:227,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:228,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($Vb1,[2,129]),o($Ve1,[2,164]),o($Ve1,[2,165]),o($Ve1,[2,166]),o($Ve1,[2,167]),{3:229,4:$Vl,5:$Vm},{3:230,4:$Vl,5:$Vm},o($Ve1,[2,171]),{69:[1,231]},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:232,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,148:233,151:234,152:$Vf1,157:$VM,170:$VN},{69:[2,152]},{69:[2,153]},{69:[2,154]},{69:[2,155]},{69:[2,156]},{69:[2,157]},{69:[2,158]},o($Vn,[2,45]),{220:[1,236]},{222:[1,237]},{222:[1,238]},{222:[1,239]},{3:74,4:$Vl,5:$Vm,63:240},{89:[1,241]},{3:74,4:$Vl,5:$Vm,63:242},{170:[1,243]},{27:244,47:37,55:$V7},{3:246,4:$Vl,5:$Vm,205:245},{3:247,4:$Vl,5:$Vm},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:248,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:74,4:$Vl,5:$Vm,63:249},{69:$Vg1,183:250},{182:[1,252]},{3:194,4:$Vl,5:$Vm,92:253,120:254},o($V0,[2,223]),o($Vh1,[2,93],{51:255,94:[1,256]}),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:257,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($Vq,[2,49],{68:[1,258]}),o($Vi1,[2,52],{67:259,74:260,75:261,79:262,76:$Vj1,80:$Vk1,81:$Vl1,82:$Vm1,83:$Vn1,84:$Vo1,85:$Vp1,86:$Vq1,87:$Vr1,88:$Vs1}),{27:272,47:37,55:$V7},o($Vt1,[2,59],{3:273,4:$Vl,5:$Vm,71:[1,274]}),o($Vt1,[2,62],{3:275,4:$Vl,5:$Vm,71:[1,276]}),o($V0,[2,296],{64:[1,277]}),o($V0,[2,292],{64:[1,278]}),o($V0,[2,287]),o($V0,[2,294],{64:[1,279]}),o($V0,[2,289]),o($V0,[2,290],{155:[1,280]}),o($V0,[2,214],{68:[1,282],93:[1,281]}),o($Vu1,[2,215]),{164:[1,283]},o($Vv1,$Vc1,{73:[1,284]}),o($Vs,[2,63]),{27:285,47:37,55:$V7},o($V0,[2,306]),o($VS,[2,42],{68:$VT}),o($VS,[2,43],{68:$VT}),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:125,116:286,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:287,4:$Vl,5:$Vm,117:[1,288]},o($VU,[2,123]),o($VU,[2,125]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:289,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:290,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:291,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:292,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:293,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:294,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($Vw1,[2,204],{121:126,122:127,123:128,120:129,118:130,61:131,124:132,125:133,126:134,72:135,127:136,128:137,130:138,3:139,90:295,4:$Vl,5:$Vm,69:$Vu,117:$Vt,119:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN}),o($Vw1,[2,205],{121:126,122:127,123:128,120:129,118:130,61:131,124:132,125:133,126:134,72:135,127:136,128:137,130:138,3:139,90:296,4:$Vl,5:$Vm,69:$Vu,117:$Vt,119:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN}),o($Vw1,[2,206],{121:126,122:127,123:128,120:129,118:130,61:131,124:132,125:133,126:134,72:135,127:136,128:137,130:138,3:139,90:297,4:$Vl,5:$Vm,69:$Vu,117:$Vt,119:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN}),o($Vw1,[2,207],{121:126,122:127,123:128,120:129,118:130,61:131,124:132,125:133,126:134,72:135,127:136,128:137,130:138,3:139,90:298,4:$Vl,5:$Vm,69:$Vu,117:$Vt,119:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN}),o($Vw1,[2,208],{121:126,122:127,123:128,120:129,118:130,61:131,124:132,125:133,126:134,72:135,127:136,128:137,130:138,3:139,90:299,4:$Vl,5:$Vm,69:$Vu,117:$Vt,119:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN}),o($Vw1,[2,209],{121:126,122:127,123:128,120:129,118:130,61:131,124:132,125:133,126:134,72:135,127:136,128:137,130:138,3:139,90:300,4:$Vl,5:$Vm,69:$Vu,117:$Vt,119:$Vv,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN}),{59:[1,302],167:301,174:[1,303],175:[1,304]},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:305,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:306,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{69:[1,307]},{171:[1,308]},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:309,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:310,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:311,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,70:[1,313],72:135,90:314,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,138:312,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:315,4:$Vl,5:$Vm,119:[1,316]},o([4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,150,152,153,154,160,161,162,163,164,165,168,169,170,171,172,173],[2,195],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_}),o($Vx1,[2,196],{166:216,119:$VV,158:$VZ,159:$V_}),{70:[1,317],119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,166:216,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1},o($Ve1,[2,169]),o($Ve1,[2,170]),{27:318,47:37,55:$V7},{119:$VV,148:319,151:234,152:$Vf1,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,166:216,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1},{149:320,150:$Vy1,151:321,152:$Vf1,154:$Vz1},o($VA1,[2,175]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:323,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:324,4:$Vl,5:$Vm},{3:326,4:$Vl,5:$Vm,208:325},{3:326,4:$Vl,5:$Vm,208:327},{3:328,4:$Vl,5:$Vm},{69:[1,329]},{3:74,4:$Vl,5:$Vm,63:330},{69:[1,331]},{143:[1,332]},o($V0,[2,298]),{68:$VB1,70:[1,333]},o($VC1,[2,254]),o($VP,[2,302]),o($V0,[2,218],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($V0,[2,273]),o($V0,[2,220],{68:$VD1}),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:337,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN,185:336},o($V0,[2,221]),{68:$VE1,70:[1,338]},o($Vt1,[2,235]),o($VF1,[2,108],{52:340,107:[1,341]}),{95:[1,342]},o($VQ,[2,92],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),{3:74,4:$Vl,5:$Vm,63:183,66:343,69:$VR,72:184,144:$VI,145:$VJ,146:$VK},o($Vq,[2,50],{75:261,79:262,74:344,76:$Vj1,80:$Vk1,81:$Vl1,82:$Vm1,83:$Vn1,84:$Vo1,85:$Vp1,86:$Vq1,87:$Vr1,88:$Vs1}),o($VG1,[2,66]),{76:[1,345]},{76:[2,75]},{76:$Vj1,79:346,81:$Vl1,82:$Vm1,83:$Vn1,84:$Vo1,85:$Vp1,86:$Vq1,87:$Vr1,88:$Vs1},{76:[2,78]},{76:[2,79],83:[1,347]},{76:[2,81],83:[1,348]},{76:[2,83]},{83:[1,349]},{76:[2,85]},{76:[2,86]},{76:[2,87]},{70:[1,350]},o($Vt1,[2,57]),{3:351,4:$Vl,5:$Vm},o($Vt1,[2,60]),{3:352,4:$Vl,5:$Vm},{3:353,4:$Vl,5:$Vm},{3:354,4:$Vl,5:$Vm},{3:355,4:$Vl,5:$Vm},{125:356,141:$VF},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:357,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:194,4:$Vl,5:$Vm,120:193,179:358},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:359,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:360,4:$Vl,5:$Vm},o($V0,[2,303]),o($VU,[2,120]),o($VU,[2,122]),o($VU,[2,124]),o([4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,150,152,153,154,155,160,161,162,163,164,165,168,169,170,171,172,173],[2,179],{166:216,119:$VV,156:$VX,157:$VY,158:$VZ,159:$V_}),o($Vx1,[2,180],{166:216,119:$VV,158:$VZ,159:$V_}),o($Vx1,[2,181],{166:216,119:$VV,158:$VZ,159:$V_}),o($Vb1,[2,182],{166:216}),o($Vb1,[2,183],{166:216}),o($Vb1,[2,184],{166:216}),o($VH1,[2,185],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,170:$V71,171:$V81}),o($VH1,[2,186],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,170:$V71,171:$V81}),o($VH1,[2,187],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,170:$V71,171:$V81}),o($VH1,[2,188],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,170:$V71,171:$V81}),o($VH1,[2,189],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,170:$V71,171:$V81}),o($VH1,[2,190],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,170:$V71,171:$V81}),{69:[1,361]},{69:[2,210]},{69:[2,211]},{69:[2,212]},o([4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,150,152,153,154,168,169,172,173],[2,193],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,170:$V71,171:$V81}),o([4,5,8,9,62,64,68,70,71,76,80,81,82,83,84,85,86,87,88,93,94,103,104,105,106,107,110,111,113,117,150,152,153,154,169],[2,194],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,170:$V71,171:$V81,172:$V91,173:$Va1}),{3:139,4:$Vl,5:$Vm,27:362,47:37,55:$V7,61:131,69:$Vu,72:135,90:314,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,138:363,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{69:[1,364]},o($VI1,[2,202],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,170:$V71,171:$V81}),o($VI1,[2,203],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,170:$V71,171:$V81}),{70:[1,365],119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,166:216,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1},{68:$VJ1,70:[1,366]},o($Ve1,[2,160]),o($VC1,[2,161],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($Vb1,$VK1,{73:[1,368]}),o($Vb1,[2,128]),o($Vb1,[2,197]),{70:[1,369]},{149:370,150:$Vy1,151:321,152:$Vf1,154:$Vz1},{150:[1,371]},o($VA1,[2,174]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:372,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{119:$VV,153:[1,373],155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,166:216,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1},o($V0,[2,275]),o($V0,[2,276]),{4:[1,376],209:374,211:[1,375]},o($V0,[2,277]),o($V0,[2,278]),{3:246,4:$Vl,5:$Vm,205:377},{69:[1,378]},{3:326,4:$Vl,5:$Vm,71:[1,381],192:379,196:380,208:382},o($VO,[2,242]),{71:[1,383]},{3:384,4:$Vl,5:$Vm},{69:[1,385]},{68:$VL1,70:[1,386]},o($VC1,[2,227],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),{27:389,47:37,55:$V7,182:[1,388]},{3:194,4:$Vl,5:$Vm,120:390},o($VM1,[2,116],{53:391,113:[1,392]}),{95:[1,393]},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:399,96:394,98:395,99:$VN1,101:$VO1,102:$VP1,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($Vi1,[2,53]),o($VG1,[2,65]),{3:74,4:$Vl,5:$Vm,63:401,69:[1,403],72:402,77:400,144:$VI,145:$VJ,146:$VK},{76:[2,76]},{76:[2,80]},{76:[2,82]},{76:[2,84]},o($Vt1,[2,56],{3:404,4:$Vl,5:$Vm,71:[1,405]}),o($Vt1,[2,58]),o($Vt1,[2,61]),o($V0,[2,297]),o($V0,[2,293]),o($V0,[2,295]),o($V0,[2,291]),o($V0,[2,213],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($Vu1,[2,216]),o($Vu1,[2,217],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($Vv1,$VK1,{73:[1,406]}),{3:139,4:$Vl,5:$Vm,27:407,47:37,55:$V7,61:131,69:$Vu,72:135,90:314,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,138:408,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{70:[1,409]},{68:$VJ1,70:[1,410]},{3:139,4:$Vl,5:$Vm,27:411,47:37,55:$V7,61:131,69:$Vu,72:135,90:314,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,138:412,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($Vb1,[2,151]),o($Ve1,[2,159]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:413,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:414,4:$Vl,5:$Vm,119:[1,415]},o($Vb1,[2,168]),{150:[1,416]},o($Vb1,[2,173]),{119:$VV,150:[2,177],155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,166:216,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:417,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($VQ1,[2,263],{210:418,213:419,214:420,170:$VR1,184:$VS1,203:$VT1,206:$VU1,215:$VV1,216:$VW1}),o($VQ1,[2,259]),o($VX1,[2,262],{69:[1,427]}),{68:$VB1,70:[1,428]},{3:246,4:$Vl,5:$Vm,205:429},{70:[1,430]},{68:[1,431],70:[2,244]},{27:432,47:37,55:$V7},o($VC1,[2,256]),{27:433,47:37,55:$V7},o($VC1,[2,255]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:337,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN,185:434},o($VY1,[2,225]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:435,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{69:$Vg1,183:436},o($V0,[2,224]),o($Vt1,[2,236]),o($VZ1,[2,103],{54:437,104:[1,438],105:[1,439],106:[1,440]}),{61:441,117:$Vt},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:444,108:442,109:443,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($Vh1,[2,101],{97:445,68:$V_1,103:[1,447]}),o($V$1,[2,95]),{100:[1,448]},{69:[1,449]},{69:[1,450]},o($V$1,[2,100],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($VG1,[2,90],{78:451,89:[1,452],91:[1,453]}),o($V02,[2,68],{3:454,4:$Vl,5:$Vm,71:[1,455]}),{3:456,4:$Vl,5:$Vm,71:[1,457]},{27:458,47:37,55:$V7},o($Vt1,[2,54]),{3:459,4:$Vl,5:$Vm},{3:414,4:$Vl,5:$Vm},{70:[1,460]},{68:$VJ1,70:[1,461]},o($Vb1,[2,198]),o($Vb1,[2,200]),{70:[1,462]},{68:$VJ1,70:[1,463]},o($VC1,[2,162],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($Vb1,[2,130]),o($Vb1,[2,127]),o($Vb1,[2,172]),o($VA1,[2,176],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($VQ1,[2,258]),o($VQ1,[2,264],{214:464,170:$VR1,184:$VS1,203:$VT1,206:$VU1,215:$VV1,216:$VW1}),o($VX1,[2,266]),{204:[1,465]},{204:[1,466]},o($VX1,[2,269]),{69:[1,467]},{3:475,4:$Vl,5:$Vm,61:469,72:473,117:$Vt,122:474,124:471,125:470,126:472,129:468,139:$VD,140:$VE,141:$VF,142:$VG,144:$VI,145:$VJ,146:$VK},{142:[1,476]},{212:[1,477]},o($V0,[2,283]),{68:$VB1,70:[1,478]},o($V0,[2,237]),o($V12,$V22,{3:326,197:479,208:480,198:481,199:482,4:$Vl,5:$Vm,202:$V32}),{70:[2,245]},o($V0,[2,299]),{68:$VL1,70:[1,484]},o($VC1,[2,228],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($V0,[2,222],{68:$VD1}),o($VZ1,[2,41]),{27:485,47:37,55:$V7,59:[1,486]},{27:487,47:37,55:$V7},{27:488,47:37,55:$V7},o($VM1,[2,118],{114:489,115:[1,490]}),o($VF1,[2,109],{68:[1,491]}),o($V42,[2,110]),o($V42,[2,112],{166:216,110:[1,492],111:[1,493],119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($Vh1,[2,94]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:399,98:494,99:$VN1,101:$VO1,102:$VP1,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:495,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{69:[1,496]},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:399,96:497,98:395,99:$VN1,101:$VO1,102:$VP1,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:399,96:498,98:395,99:$VN1,101:$VO1,102:$VP1,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($VG1,[2,67]),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:499,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{3:194,4:$Vl,5:$Vm,92:500,120:254},o($V02,[2,69]),{3:501,4:$Vl,5:$Vm},o($V02,[2,71]),{3:502,4:$Vl,5:$Vm},{70:[1,503]},o($Vt1,[2,55]),o($Vb1,[2,191]),o($Vb1,[2,192]),o($Vb1,[2,199]),o($Vb1,[2,201]),o($VX1,[2,265]),o($VX1,[2,267]),{207:[1,504]},{61:505,117:$Vt},o($VX1,[2,271]),o($VX1,[2,145]),o($VX1,[2,146]),o($VX1,[2,147]),o($VX1,[2,148]),o($VX1,[2,149]),o($VX1,[2,150]),{69:$Vd1},o($VX1,[2,272]),{70:[1,507],73:[1,506]},o($V0,[2,284]),{68:[1,508],70:[2,243]},o($VC1,[2,257]),o($VC1,[2,246]),{200:509,201:510,203:[1,511],206:[1,512]},{3:513,4:$Vl,5:$Vm},o($VY1,[2,226]),o($VZ1,[2,104]),{27:514,47:37,55:$V7},o($VZ1,[2,106]),o($VZ1,[2,107]),o($VM1,[2,117]),{61:515,117:$Vt},{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:444,109:516,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},o($V42,[2,113]),{112:[1,517]},o($V$1,[2,96]),o($Vh1,[2,102],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),{3:139,4:$Vl,5:$Vm,61:131,69:$Vu,72:135,90:399,96:518,98:395,99:$VN1,101:$VO1,102:$VP1,117:$Vt,118:130,119:$Vv,120:129,121:126,122:127,123:128,124:132,125:133,126:134,127:136,128:137,130:138,131:$Vw,132:$Vx,133:$Vy,134:$Vz,135:$VA,136:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,143:$VH,144:$VI,145:$VJ,146:$VK,147:$VL,157:$VM,170:$VN},{68:$V_1,70:[1,519]},{68:$V_1,70:[1,520]},o($VG1,[2,88],{166:216,119:$VV,155:$VW,156:$VX,157:$VY,158:$VZ,159:$V_,160:$V$,161:$V01,162:$V11,163:$V21,164:$V31,165:$V41,168:$V51,169:$V61,170:$V71,171:$V81,172:$V91,173:$Va1}),o($VG1,[2,89],{68:$VE1}),o($V02,[2,70]),o($V02,[2,72]),{3:521,4:$Vl,5:$Vm,71:[1,522]},{3:523,4:$Vl,5:$Vm},{68:[1,524]},{212:[1,525]},o($VX1,[2,261]),o($V12,$V22,{199:482,198:526,202:$V32}),o($VC1,[2,248]),o($VC1,[2,249]),{204:[1,527]},{204:[1,528]},o($V12,[2,251]),o($VZ1,[2,105]),o($VM1,[2,119]),o($V42,[2,111]),o($V42,[2,114],{110:[1,529]}),{68:$V_1,70:[1,530]},o($V$1,[2,98]),o($V$1,[2,99]),o($V02,[2,73]),{3:531,4:$Vl,5:$Vm},{69:[1,532]},{61:533,117:$Vt},{70:[1,534]},o($VC1,[2,247]),{69:[1,535]},{69:[1,536]},o($V42,[2,115]),o($V$1,[2,97]),o($V02,[2,74]),{3:537,4:$Vl,5:$Vm},{70:[1,538]},o($VX1,[2,260]),{3:246,4:$Vl,5:$Vm,205:539},{3:246,4:$Vl,5:$Vm,205:540},{70:[1,541]},o($VX1,[2,270]),{68:$VB1,70:[1,542]},{68:$VB1,70:[1,543]},o($VX1,[2,268]),o($VC1,[2,252]),{207:[1,544]},{3:545,4:$Vl,5:$Vm},{69:[1,546]},{3:246,4:$Vl,5:$Vm,205:547},{68:$VB1,70:[1,548]},o($VC1,[2,253])],
defaultActions: {46:[2,3],54:[2,239],55:[2,240],78:[2,307],79:[2,308],80:[2,309],81:[2,310],118:[2,311],120:[2,312],153:[2,152],154:[2,153],155:[2,154],156:[2,155],157:[2,156],158:[2,157],159:[2,158],262:[2,75],264:[2,78],267:[2,83],269:[2,85],270:[2,86],271:[2,87],302:[2,210],303:[2,211],304:[2,212],346:[2,76],347:[2,80],348:[2,82],349:[2,84],432:[2,245]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5
break;
case 1:return 141
break;
case 2:return 141
break;
case 3:/* skip whitespace */
break;
case 4:return 243
break;
case 5:return 221
break;
case 6:return 59
break;
case 7:return 218
break;
case 8:return 168
break;
case 9:return 87
break;
case 10:return 175
break;
case 11:return 71
break;
case 12:return 110
break;
case 13:return 215
break;
case 14:return 135
break;
case 15:return 172
break;
case 16:return 173
break;
case 17:return 95
break;
case 18:return 147
break;
case 19:return 238
break;
case 20:return 111
break;
case 21:return "COLUMN"
break;
case 22:return "COLUMNS"
break;
case 23:return "CONSTRAINT"
break;
case 24:return "COUNT"
break;
case 25:return "CURSOR"
break;
case 26:return 188
break;
case 27:return "CROSS"
break;
case 28:return 102
break;
case 29:return 224
break;
case 30:return 229
break;
case 31:return 234
break;
case 32:return 184
break;
case 33:return 180
break;
case 34:return 110
break;
case 35:return 56
break;
case 36:return 217
break;
case 37:return 150
break;
case 38:return 154
break;
case 39:return 105
break;
case 40:return 143
break;
case 41:return 12
break;
case 42:return 140
break;
case 43:return 239
break;
case 44:return 136
break;
case 45:return 206
break;
case 46:return 64
break;
case 47:return 94
break;
case 48:return 99
break;
case 49:return 103
break;
case 50:return 195
break;
case 51:return 216
break;
case 52:return 171
break;
case 53:return 226
break;
case 54:return 81
break;
case 55:return 181
break;
case 56:return 106
break;
case 57:return 62
break;
case 58:return 76
break;
case 59:return 204
break;
case 60:return 137
break;
case 61:return 82
break;
case 62:return 155
break;
case 63:return 113
break;
case 64:return "MAX"
break;
case 65:return "MIN"
break;
case 66:return "MODIFY"
break;
case 67:return 80
break;
case 68:return 241
break;
case 69:return 112
break;
case 70:return 170
break;
case 71:return 142
break;
case 72:return 89
break;
case 73:return 115
break;
case 74:return 237
break;
case 75:return 169
break;
case 76:return 107
break;
case 77:return 83
break;
case 78:return 14
break;
case 79:return 203
break;
case 80:return 242
break;
case 81:return 13
break;
case 82:return 207
break;
case 83:return 244
break;
case 84:return 219
break;
case 85:return 84
break;
case 86:return 101
break;
case 87:return 229
break;
case 88:return 55
break;
case 89:return 86
break;
case 90:return 177
break;
case 91:return 100
break;
case 92:return 228
break;
case 93:return 174
break;
case 94:return "SUM"
break;
case 95:return 190
break;
case 96:return 230
break;
case 97:return 153
break;
case 98:return 220
break;
case 99:return 60
break;
case 100:return 'TRAN'
break;
case 101:return 'TRANSACTION'
break;
case 102:return 139
break;
case 103:return 104
break;
case 104:return 227
break;
case 105:return 176
break;
case 106:return 225
break;
case 107:return 91
break;
case 108:return 182
break;
case 109:return 232
break;
case 110:return 152
break;
case 111:return 93
break;
case 112:return 117
break;
case 113:return 156
break;
case 114:return 157
break;
case 115:return 119
break;
case 116:return 158
break;
case 117:return 159
break;
case 118:return 161
break;
case 119:return 160
break;
case 120:return 163
break;
case 121:return 165
break;
case 122:return 162
break;
case 123:return 164
break;
case 124:return 165
break;
case 125:return 69
break;
case 126:return 70
break;
case 127:return 73
break;
case 128:return 68
break;
case 129:return 145
break;
case 130:return 9
break;
case 131:return 144
break;
case 132:return 146
break;
case 133:return 4
break;
case 134:return 8
break;
case 135:return 'INVALID'
break;
}
},
rules: [/^(?:\[([^\]])*\])/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:\s+)/i,/^(?:ABSOLUTE\b)/i,/^(?:ADD\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AUTO_INCREMENT\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:CLOSE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:COUNT\b)/i,/^(?:CURSOR\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DATABASE\b)/i,/^(?:DATABASES\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FETCH\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NEXT\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OPEN\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIOR\b)/i,/^(?:QUERY\b)/i,/^(?:REFERENCES\b)/i,/^(?:RELATIVE\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SCHEMAS\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHOW\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLES\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRAN\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}