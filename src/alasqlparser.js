/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,30,111,115,116,121,141,142],$V8=[5,7,30,111,115,116,121,141,142],$V9=[1,26],$Va=[1,51],$Vb=[1,48],$Vc=[1,52],$Vd=[1,58],$Ve=[1,59],$Vf=[1,60],$Vg=[1,61],$Vh=[1,62],$Vi=[1,53],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,50],$Vo=[1,49],$Vp=[5,7,30,36,40,41,42,43,47,49,50,51,52,54,56,57,67,73,111,112,115,116,117,121,141,142,143,145],$Vq=[34,36],$Vr=[1,76],$Vs=[34,36,40],$Vt=[1,80],$Vu=[1,78],$Vv=[1,79],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[5,7,30,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,79,99,100,101,102,103,104,105,106,107,108,109,111,115,116,121,141,142],$VG=[2,76],$VH=[5,7,30,42,57,67,73,111,115,116,121,141,142],$VI=[1,101],$VJ=[1,107],$VK=[5,7,30,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,102,103,104,105,106,107,108,109,111,115,116,121,141,142],$VL=[5,7,30,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,99,100,102,103,104,105,106,107,108,109,111,115,116,121,141,142],$VM=[5,7,30,42,67,73,111,115,116,121,141,142],$VN=[5,7,30,42,56,57,67,73,111,115,116,121,141,142],$VO=[5,7,30,40,42,56,57,67,73,111,115,116,121,141,142],$VP=[2,30],$VQ=[1,139],$VR=[2,36],$VS=[1,142],$VT=[1,143],$VU=[1,144],$VV=[5,7,30,40,56,111,115,116,121,141,142],$VW=[5,7,30,40,42,47,49,50,51,56,57,67,73,106,111,115,116,121,141,142],$VX=[2,75],$VY=[5,7,30,42,73,111,115,116,121,141,142],$VZ=[5,7,30,42,47,49,50,51,56,57,67,73,111,115,116,121,141,142],$V_=[1,176],$V$=[1,178],$V01=[5,7,30,40,42,47,49,50,51,56,57,67,73,111,115,116,121,141,142],$V11=[1,187],$V21=[1,188],$V31=[5,7,30,42,111,115,116,121,141,142],$V41=[1,195],$V51=[1,196],$V61=[1,197],$V71=[1,202],$V81=[40,42],$V91=[1,218],$Va1=[5,7,30,40,42,66,67,73,111,115,116,121,141,142],$Vb1=[5,7,30,40,42,111,115,116,121,141,142],$Vc1=[5,7,30,40,42,110,111,115,116,121,137,141,142],$Vd1=[5,7,30,40,42,73,111,115,116,121,141,142];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"SELECT":30,"DISTINCT":31,"ResultColumns":32,"ALL":33,"INTO":34,"Table":35,"FROM":36,"FromTablesList":37,"JoinTablesList":38,"FromTable":39,"COMMA":40,"LPAR":41,"RPAR":42,"LITERAL":43,"DOT":44,"JoinTable":45,"JoinMode":46,"JOIN":47,"OnClause":48,"LEFT":49,"RIGHT":50,"INNER":51,"ON":52,"Expression":53,"USING":54,"ColumnsList":55,"WHERE":56,"GROUP":57,"BY":58,"GroupExpressionsList":59,"HavingClause":60,"GroupExpression":61,"GROUPING":62,"SETS":63,"ROLLUP":64,"CUBE":65,"HAVING":66,"ORDER":67,"OrderExpressionsList":68,"OrderExpression":69,"DIRECTION":70,"COLLATE":71,"NOCASE":72,"LIMIT":73,"OffsetClause":74,"OFFSET":75,"ResultColumn":76,"AS":77,"Star":78,"STAR":79,"Column":80,"AggrValue":81,"FuncValue":82,"Op":83,"NumValue":84,"LogicValue":85,"StringValue":86,"NullValue":87,"Aggregator":88,"SUM":89,"COUNT":90,"MIN":91,"MAX":92,"AVG":93,"NUMBER":94,"TRUE":95,"FALSE":96,"STRING":97,"NULL":98,"PLUS":99,"MINUS":100,"SLASH":101,"GT":102,"GE":103,"LT":104,"LE":105,"EQ":106,"NE":107,"AND":108,"OR":109,"NOT":110,"UPDATE":111,"SET":112,"SetColumnsList":113,"SetColumn":114,"DELETE":115,"INSERT":116,"VALUES":117,"ValuesList":118,"Value":119,"DateValue":120,"CREATE":121,"TemporaryClause":122,"TABLE":123,"IfNotExists":124,"CreateTableDefClause":125,"ConstraintsClause":126,"TEMPORARY":127,"TEMP":128,"IF":129,"EXISTS":130,"ColumnDefList":131,"ColumnDef":132,"ColumnTypeName":133,"ColumnConstraint":134,"ColumnConstraints":135,"SignedNumber":136,"PRIMARY":137,"KEY":138,"ConstraintsList":139,"Constraint":140,"DROP":141,"ALTER":142,"RENAME":143,"TO":144,"ADD":145,"COLUMN":146,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",30:"SELECT",31:"DISTINCT",33:"ALL",34:"INTO",36:"FROM",40:"COMMA",41:"LPAR",42:"RPAR",43:"LITERAL",44:"DOT",47:"JOIN",49:"LEFT",50:"RIGHT",51:"INNER",52:"ON",54:"USING",56:"WHERE",57:"GROUP",58:"BY",62:"GROUPING",63:"SETS",64:"ROLLUP",65:"CUBE",66:"HAVING",67:"ORDER",70:"DIRECTION",71:"COLLATE",72:"NOCASE",73:"LIMIT",75:"OFFSET",77:"AS",79:"STAR",89:"SUM",90:"COUNT",91:"MIN",92:"MAX",93:"AVG",94:"NUMBER",95:"TRUE",96:"FALSE",97:"STRING",98:"NULL",99:"PLUS",100:"MINUS",101:"SLASH",102:"GT",103:"GE",104:"LT",105:"LE",106:"EQ",107:"NE",108:"AND",109:"OR",110:"NOT",111:"UPDATE",112:"SET",115:"DELETE",116:"INSERT",117:"VALUES",120:"DateValue",121:"CREATE",123:"TABLE",127:"TEMPORARY",128:"TEMP",129:"IF",130:"EXISTS",135:"ColumnConstraints",136:"SignedNumber",137:"PRIMARY",138:"KEY",141:"DROP",142:"ALTER",143:"RENAME",144:"TO",145:"ADD",146:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,7],[23,3],[23,3],[23,2],[24,0],[24,2],[25,2],[25,3],[37,1],[37,3],[39,4],[39,2],[39,1],[35,3],[35,1],[38,2],[38,1],[45,4],[46,0],[46,1],[46,1],[46,1],[48,2],[48,2],[48,0],[26,0],[26,2],[27,0],[27,4],[59,1],[59,3],[61,5],[61,4],[61,4],[61,1],[60,0],[60,2],[28,0],[28,3],[68,1],[68,3],[69,1],[69,2],[69,3],[69,4],[29,0],[29,3],[74,0],[74,2],[32,3],[32,1],[76,3],[76,1],[78,5],[78,3],[78,1],[80,5],[80,3],[80,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[81,4],[88,1],[88,1],[88,1],[88,1],[88,1],[82,4],[84,1],[85,1],[85,1],[86,1],[87,1],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,2],[83,2],[83,3],[14,6],[14,4],[113,1],[113,3],[114,3],[15,5],[15,3],[13,7],[13,10],[118,1],[118,3],[119,1],[119,1],[119,1],[119,1],[119,1],[55,1],[55,3],[16,9],[122,0],[122,1],[122,1],[124,0],[124,3],[125,1],[125,2],[131,1],[131,3],[132,3],[132,2],[133,6],[133,4],[133,1],[134,0],[134,2],[134,2],[126,0],[139,3],[139,1],[140,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 26: case 34: case 47: case 57: case 68: case 115: case 122: case 129:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 30: case 52: case 70: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 87: case 88: case 89: case 90: case 91:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
  yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);yy.extend(this.$,$$[$0]); this.$ = $$[$0-6]; 
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); 
break;
case 22: case 146:
this.$ = null
break;
case 23:
this.$ = $$[$0]
break;
case 24:
 this.$ = { from: $$[$0] }; 
break;
case 25:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 27: case 48: case 116:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 28:
 this.$ = new yy.SubQuery({select:$$[$0-2]}); this.$.as = $$[$0-2] 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 31:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 32:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 35:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 36:
this.$ = "INNER";
break;
case 37: case 38: case 39:
this.$ = $$[$0];
break;
case 40:
 this.$ = {on: $$[$0]}; 
break;
case 41:
 this.$ = {using: $$[$0]}; 
break;
case 42: case 43: case 45: case 53: case 55: case 63: case 65: case 132: case 135:
 this.$ = null; 
break;
case 44:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 46:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 49:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 50:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 51:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 54:
 this.$ = {having:$$[$0]}
break;
case 56:
 this.$ = {order:$$[$0]}
break;
case 58:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 59:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 60:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 61:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 62:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 64:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 66:
 this.$ = {offset:$$[$0]}
break;
case 67: case 140:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 69:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 71:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 72:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 73:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 74:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 75:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 76:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 86:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 92:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], expression: $$[$0-1]}); 
break;
case 93:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 94:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 95:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 96:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 97:
 this.$ = new yy.NullValue({value:null}); 
break;
case 98:
 this.$ = new yy.Op({left:$$[$0-2], op:'+' , right:$$[$0]}); 
break;
case 99:
 this.$ = new yy.Op({left:$$[$0-2], op:'-' , right:$$[$0]}); 
break;
case 100:
 this.$ = new yy.Op({left:$$[$0-2], op:'*' , right:$$[$0]}); 
break;
case 101:
 this.$ = new yy.Op({left:$$[$0-2], op:'/' , right:$$[$0]}); 
break;
case 102:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 103:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 104:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 105:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 106:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 107:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 108:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 109:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 110:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 111:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 112:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 113:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 114:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 117:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 118:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 119:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 120:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 121:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 123: case 130:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 131:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 133: case 134:
 this.$ = {temporary:true}; 
break;
case 136:
 this.$ = {ifnotexists: true}; 
break;
case 137:
 this.$ = {columns: $$[$0]}; 
break;
case 138:
 this.$ = {as: $$[$0]} 
break;
case 139:
 this.$ = [$$[$0]];
break;
case 141:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 142:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 143:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 144:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 145:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 147:
this.$ = {primarykey:true};
break;
case 148:
this.$ = {notnull:true};
break;
case 149:
this.$ = null;
break;
case 150:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 151:
this.$ = [$$[$0]];
break;
case 153:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 154:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V0,111:$V1,115:$V2,116:$V3,121:$V4,141:$V5,142:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,30:$V0,111:$V1,115:$V2,116:$V3,121:$V4,141:$V5,142:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,34:[1,23],36:[2,22]},{34:[1,24]},{35:25,43:$V9},{36:[1,27]},{122:28,123:[2,132],127:[1,29],128:[1,30]},{123:[1,31]},{123:[1,32]},{31:[1,33],32:35,33:[1,34],41:$Va,43:$Vb,53:37,76:36,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:63,36:[1,64]},{35:65,43:$V9},{35:66,43:$V9},{112:[1,67]},o($Vp,[2,32],{44:[1,68]}),{35:69,43:$V9},{123:[1,70]},{123:[2,133]},{123:[2,134]},{35:72,43:$V9,129:[1,71]},{35:73,43:$V9},{32:74,41:$Va,43:$Vb,53:37,76:36,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{32:75,41:$Va,43:$Vb,53:37,76:36,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},o($Vq,[2,21],{40:$Vr}),o($Vs,[2,68]),o($Vs,[2,70],{77:[1,77],79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($VF,[2,77]),o($VF,[2,78]),o($VF,[2,79]),o($VF,[2,80]),o($VF,[2,81]),o($VF,[2,82]),o($VF,[2,83]),o($VF,[2,84]),o($VF,[2,85]),{41:[1,90]},o($VF,$VG,{41:[1,91],44:[1,92]}),{41:$Va,43:$Vb,53:93,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:94,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:95,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},o($VF,[2,73]),o($VF,[2,93]),o($VF,[2,94]),o($VF,[2,95]),o($VF,[2,96]),o($VF,[2,97]),{41:[2,87]},{41:[2,88]},{41:[2,89]},{41:[2,90]},{41:[2,91]},o($VH,[2,43],{26:96,56:[1,97]}),{35:99,37:98,39:100,41:$VI,43:$V9},{36:[2,23]},{41:[1,103],117:[1,102]},{43:$VJ,80:106,113:104,114:105},{43:[1,108]},o($V8,[2,119],{56:[1,109]}),{43:[2,135],124:110,129:[1,111]},{130:[1,112]},o($V8,[2,154]),{143:[1,113],145:[1,114]},o($Vq,[2,19],{40:$Vr}),o($Vq,[2,20],{40:$Vr}),{41:$Va,43:$Vb,53:37,76:115,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{43:[1,116]},{41:$Va,43:$Vb,53:117,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:118,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:119,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:120,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:121,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:122,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:123,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:124,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:125,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:126,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:127,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:128,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:129,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:130,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{43:[1,131],79:[1,132]},o($VK,[2,110],{79:$Vt,99:$Vu,100:$Vv,101:$Vw}),o($VL,[2,111],{79:$Vt,101:$Vw}),{42:[1,133],79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE},o($VM,[2,45],{27:134,57:[1,135]}),{41:$Va,43:$Vb,53:136,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},o($VN,[2,24],{40:[1,137]}),o($VO,$VP,{38:138,45:140,46:141,43:$VQ,47:$VR,49:$VS,50:$VT,51:$VU}),o($VO,[2,26]),{12:145,23:11,30:$V0},{41:[1,146]},{43:$VJ,55:147,80:148},o($V8,[2,114],{40:[1,150],56:[1,149]}),o($VV,[2,115]),{106:[1,151]},o($VW,$VG,{44:[1,152]}),o($Vp,[2,31]),{41:$Va,43:$Vb,53:153,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{35:154,43:$V9},{110:[1,155]},{35:156,43:$V9},{144:[1,157]},{146:[1,158]},o($Vs,[2,67]),o($Vs,[2,69]),o($VL,[2,98],{79:$Vt,101:$Vw}),o($VL,[2,99],{79:$Vt,101:$Vw}),o($VF,[2,100]),o($VF,[2,101]),o($VK,[2,102],{79:$Vt,99:$Vu,100:$Vv,101:$Vw}),o($VK,[2,103],{79:$Vt,99:$Vu,100:$Vv,101:$Vw}),o($VK,[2,104],{79:$Vt,99:$Vu,100:$Vv,101:$Vw}),o($VK,[2,105],{79:$Vt,99:$Vu,100:$Vv,101:$Vw}),o($VK,[2,106],{79:$Vt,99:$Vu,100:$Vv,101:$Vw}),o($VK,[2,107],{79:$Vt,99:$Vu,100:$Vv,101:$Vw}),o([5,7,30,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,108,109,111,115,116,121,141,142],[2,108],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC}),o([5,7,30,34,36,40,42,47,49,50,51,56,57,66,67,70,71,73,75,77,109,111,115,116,121,141,142],[2,109],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD}),{42:[1,159],79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE},{42:[1,160],79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE},o($VF,$VX,{44:[1,161]}),o($VF,[2,72]),o($VF,[2,112]),o($VY,[2,55],{28:162,67:[1,163]}),{58:[1,164]},o($VH,[2,44],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),{35:166,39:165,41:$VI,43:$V9},o($VN,[2,25],{46:141,45:167,47:$VR,49:$VS,50:$VT,51:$VU}),o($VO,[2,29]),o($VZ,[2,34]),{47:[1,168]},{47:[2,37]},{47:[2,38]},{47:[2,39]},{42:[1,169]},{84:172,85:174,86:173,87:175,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,118:170,119:171,120:$V_},{40:$V$,42:[1,177]},o($V01,[2,129]),{41:$Va,43:$Vb,53:179,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{43:$VJ,80:106,114:180},{41:$Va,43:$Vb,53:181,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{43:[1,182]},o($V8,[2,118],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),{41:[1,183]},{130:[1,184]},o($V8,[2,153]),{43:[1,185]},{43:$V11,132:186},o($VF,[2,86]),o($VF,[2,92]),{43:$V21,79:[1,189]},o($V31,[2,63],{29:190,73:[1,191]}),{58:[1,192]},{41:$Va,43:$Vb,53:198,59:193,61:194,62:$V41,64:$V51,65:$V61,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},o($VO,[2,27]),o($VO,$VP,{43:$VQ}),o($VZ,[2,33]),{35:199,43:$V9},{43:[1,200]},{40:$V71,42:[1,201]},o($V81,[2,122]),o($V81,[2,124]),o($V81,[2,125]),o($V81,[2,126]),o($V81,[2,127]),o($V81,[2,128]),{117:[1,203]},{43:$VJ,80:204},o($V8,[2,113],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($VV,[2,116]),o($VV,[2,117],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($VW,$VX,{44:[1,205]}),{43:$V11,77:[1,208],125:206,131:207,132:209},{43:[2,136]},o($V8,[2,155]),o($V8,[2,156]),{43:[1,212],133:210,135:[1,211]},o($VF,[2,74]),o($VF,[2,71]),o($V31,[2,18]),{41:$Va,43:$Vb,53:213,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:216,68:214,69:215,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},o($VM,[2,53],{60:217,40:$V91,66:[1,219]}),o($Va1,[2,47]),{63:[1,220]},{41:[1,221]},{41:[1,222]},o($Va1,[2,52],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($VZ,[2,42],{48:223,52:[1,224],54:[1,225]}),o($VO,[2,28]),o($V8,[2,120]),{84:172,85:174,86:173,87:175,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,119:226,120:$V_},{41:[1,227]},o($V01,[2,130]),{43:$V21},{42:[2,149],126:228},{40:[1,229],42:[2,137]},{12:230,23:11,30:$V0},o($V81,[2,139]),o($Vb1,[2,146],{134:231,110:[1,233],137:[1,232]}),o($Vb1,[2,142]),o($Vc1,[2,145],{41:[1,234]}),o($V31,[2,65],{74:235,75:[1,236],79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($VY,[2,56],{40:[1,237]}),o($Vd1,[2,57]),o($Vd1,[2,59],{70:[1,238],71:[1,239],79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($VM,[2,46]),{41:$Va,43:$Vb,53:198,61:240,62:$V41,64:$V51,65:$V61,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:241,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:[1,242]},{41:$Va,43:$Vb,53:198,59:243,61:194,62:$V41,64:$V51,65:$V61,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:198,59:244,61:194,62:$V41,64:$V51,65:$V61,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},o($VZ,[2,35]),{41:$Va,43:$Vb,53:245,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{43:$VJ,55:246,80:148},o($V81,[2,123]),{84:172,85:174,86:173,87:175,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,118:247,119:171,120:$V_},{42:[1,248]},{43:$V11,132:249},{42:[2,138]},o($Vb1,[2,141]),{138:[1,250]},{98:[1,251]},{136:[1,252]},o($V31,[2,64]),{41:$Va,43:$Vb,53:253,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{41:$Va,43:$Vb,53:216,69:254,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},o($Vd1,[2,60]),{72:[1,255]},o($Va1,[2,48]),o($VM,[2,54],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),{41:$Va,43:$Vb,53:198,59:256,61:194,62:$V41,64:$V51,65:$V61,78:42,79:$Vc,80:41,81:38,82:39,83:40,84:43,85:44,86:45,87:46,88:47,89:$Vd,90:$Ve,91:$Vf,92:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,100:$Vn,110:$Vo},{40:$V91,42:[1,257]},{40:$V91,42:[1,258]},o($VZ,[2,40],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($VZ,[2,41],{40:$V$}),{40:$V71,42:[1,259]},o($V8,[2,131]),o($V81,[2,140]),o($Vb1,[2,147]),o($Vb1,[2,148]),{42:[1,261],44:[1,260]},o($V31,[2,66],{79:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:$VC,108:$VD,109:$VE}),o($Vd1,[2,58]),o($Vd1,[2,61],{70:[1,262]}),{40:$V91,42:[1,263]},o($Va1,[2,50]),o($Va1,[2,51]),o($V8,[2,121]),{136:[1,264]},o($Vc1,[2,144]),o($Vd1,[2,62]),o($Va1,[2,49]),{42:[1,265]},o($Vc1,[2,143])],
defaultActions: {19:[2,1],29:[2,133],30:[2,134],58:[2,87],59:[2,88],60:[2,89],61:[2,90],62:[2,91],65:[2,23],142:[2,37],143:[2,38],144:[2,39],184:[2,136],230:[2,138]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 33
break;
case 2:return 142
break;
case 3:return 108
break;
case 4:return 'ANTI'
break;
case 5:return 77
break;
case 6:return 70
break;
case 7:return 93
break;
case 8:return 58
break;
case 9:return 121
break;
case 10:return 71
break;
case 11:return "COUNT"
break;
case 12:return 65
break;
case 13:return 115
break;
case 14:return 70
break;
case 15:return 31
break;
case 16:return 141
break;
case 17:return 130
break;
case 18:return 9
break;
case 19:return 96
break;
case 20:return 36
break;
case 21:return 57
break;
case 22:return 62
break;
case 23:return 66
break;
case 24:return 129
break;
case 25:return 51
break;
case 26:return 116
break;
case 27:return 34
break;
case 28:return 47
break;
case 29:return 138
break;
case 30:return 49
break;
case 31:return 73
break;
case 32:return "MAX"
break;
case 33:return "MIN"
break;
case 34:return 72
break;
case 35:return 110
break;
case 36:return 98
break;
case 37:return 52
break;
case 38:return 75
break;
case 39:return 109
break;
case 40:return 67
break;
case 41:return 11
break;
case 42:return 137
break;
case 43:return 10
break;
case 44:return 50
break;
case 45:return 64
break;
case 46:return 30
break;
case 47:return 112
break;
case 48:return 63
break;
case 49:return "SUM"
break;
case 50:return 123
break;
case 51:return 95
break;
case 52:return 111
break;
case 53:return 54
break;
case 54:return 117
break;
case 55:return 56
break;
case 56:return 99
break;
case 57:return 100
break;
case 58:return 79
break;
case 59:return 101
break;
case 60:return 103
break;
case 61:return 102
break;
case 62:return 105
break;
case 63:return 107
break;
case 64:return 104
break;
case 65:return 106
break;
case 66:return 107
break;
case 67:return 41
break;
case 68:return 42
break;
case 69:return 44
break;
case 70:return 40
break;
case 71:return 7
break;
case 72:return 43
break;
case 73:return 94
break;
case 74:return 97
break;
case 75:return 5
break;
case 76:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TRUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}