/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,9],$V1=[2,8],$V2=[1,8],$V3=[1,14],$V4=[1,15],$V5=[1,17],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,39],$Vb=[1,38],$Vc=[1,32],$Vd=[1,34],$Ve=[1,31],$Vf=[1,33],$Vg=[1,30],$Vh=[1,37],$Vi=[1,36],$Vj=[8,9,62,68,91,92,102,103,104,105,111],$Vk=[1,64],$Vl=[1,65],$Vm=[4,5,67,115,117,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,155,168],$Vn=[2,44],$Vo=[1,71],$Vp=[8,9,68,91,92,102,103,104,105,111],$Vq=[4,5,8,9,53,60,62,66,67,68,69,71,74,78,79,80,81,82,83,84,85,86,87,89,91,92,101,102,103,104,105,108,109,111,115,117,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,170,171,175,180,182,201,204,209,213,214,215,217,219,221],$Vr=[4,5,8,9,53,62,66,67,68,69,74,78,79,80,81,82,83,84,85,86,87,89,91,92,102,103,104,105,111,175,180,182,215,217,219,221],$Vs=[1,119],$Vt=[1,121],$Vu=[1,120],$Vv=[1,131],$Vw=[1,132],$Vx=[1,133],$Vy=[1,134],$Vz=[1,135],$VA=[1,136],$VB=[1,137],$VC=[1,122],$VD=[1,123],$VE=[1,124],$VF=[1,125],$VG=[1,129],$VH=[1,126],$VI=[1,127],$VJ=[1,128],$VK=[1,130],$VL=[1,118],$VM=[1,117],$VN=[4,5],$VO=[67,69],$VP=[8,9,68,92,102,103,104,105,111],$VQ=[1,160],$VR=[8,9,60,62,68,91,92,102,103,104,105,111],$VS=[1,176],$VT=[8,9,60,62,66,68,91,92,102,103,104,105,111],$VU=[1,183],$VV=[1,180],$VW=[1,181],$VX=[1,182],$VY=[1,184],$VZ=[1,185],$V_=[1,186],$V$=[1,187],$V01=[1,188],$V11=[1,189],$V21=[1,190],$V31=[1,191],$V41=[1,193],$V51=[1,194],$V61=[1,196],$V71=[1,195],$V81=[1,197],$V91=[1,198],$Va1=[4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,117,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,170,171],$Vb1=[2,130],$Vc1=[1,200],$Vd1=[4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,117,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,170,171,182,201,204,213,214],$Ve1=[1,211],$Vf1=[1,227],$Vg1=[8,9,68,102,103,104,105,111],$Vh1=[8,9,66,68,91,92,102,103,104,105,111],$Vi1=[2,75],$Vj1=[1,239],$Vk1=[1,240],$Vl1=[1,241],$Vm1=[1,243],$Vn1=[1,242],$Vo1=[1,244],$Vp1=[1,245],$Vq1=[1,246],$Vr1=[1,247],$Vs1=[8,9,66,68,74,78,79,80,81,82,83,84,85,86,91,92,102,103,104,105,111],$Vt1=[8,9,66,91],$Vu1=[8,9,66,68,74,78,79,80,81,82,83,84,85,86,91,92,102,103,104,105,111,162],$Vv1=[57,172,173],$Vw1=[4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,148,150,151,152,153,154,155,158,159,160,161,162,163,166,167,168,169,170,171],$Vx1=[2,176],$Vy1=[1,297],$Vz1=[148,150,152],$VA1=[1,309],$VB1=[66,68],$VC1=[1,310],$VD1=[1,314],$VE1=[8,9,68,102,103,104,111],$VF1=[8,9,68,74,78,79,80,81,82,83,84,85,86,91,92,102,103,104,105,111],$VG1=[4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,148,150,151,152,158,159,160,161,162,163,166,167,170,171],$VH1=[4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,148,150,151,152,167,170,171],$VI1=[1,342],$VJ1=[2,129],$VK1=[1,362],$VL1=[8,9,68,102,103,104],$VM1=[1,371],$VN1=[1,372],$VO1=[1,373],$VP1=[8,9,66,68],$VQ1=[1,401],$VR1=[1,400],$VS1=[1,396],$VT1=[1,397],$VU1=[1,398],$VV1=[1,399],$VW1=[8,9,66,68,168,182,201,204,213,214],$VX1=[8,9,66],$VY1=[8,9,68],$VZ1=[1,421],$V_1=[8,9,66,68,101,102,103,104,105,111],$V$1=[8,9,68,74,78,79,80,81,82,83,84,85,86,87,89,91,92,102,103,104,105,111],$V02=[201,204],$V12=[2,248],$V22=[1,458],$V32=[8,9,66,68,102,103,104,111];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"main":6,"Statements":7,"EOF":8,"SEMICOLON":9,"Statement":10,"ExplainStatement":11,"EXPLAIN":12,"QUERY":13,"PLAN":14,"AlterTable":15,"CreateDatabase":16,"CreateIndex":17,"CreateTable":18,"CreateTrigger":19,"CreateView":20,"Delete":21,"DropDatabase":22,"DropIndex":23,"DropTable":24,"DropTrigger":25,"DropView":26,"Insert":27,"RenameTable":28,"Select":29,"ShowCreateTable":30,"ShowColumns":31,"ShowDatabases":32,"ShowIndex":33,"ShowTables":34,"BeginTransaction":35,"CommitTransaction":36,"RollbackTransaction":37,"EndTransaction":38,"UseDatabase":39,"Update":40,"WithSelectClause":41,"WITH":42,"WithTables":43,"RECURSIVE":44,"SelectClause":45,"IntoClause":46,"FromClause":47,"WhereClause":48,"GroupClause":49,"OrderClause":50,"LimitClause":51,"UnionClause":52,"SELECT":53,"DISTINCT":54,"TopClause":55,"ResultColumns":56,"ALL":57,"TOP":58,"NumValue":59,"INTO":60,"Table":61,"FROM":62,"FromTablesList":63,"FromTable":64,"JoinTablesList":65,"COMMA":66,"LPAR":67,"RPAR":68,"AS":69,"ParamValue":70,"DOT":71,"JoinTable":72,"JoinMode":73,"JOIN":74,"JoinTableAs":75,"OnClause":76,"JoinModeMode":77,"NATURAL":78,"INNER":79,"LEFT":80,"OUTER":81,"RIGHT":82,"FULL":83,"SEMI":84,"ANTI":85,"CROSS":86,"ON":87,"Expression":88,"USING":89,"ColumnsList":90,"WHERE":91,"GROUP":92,"BY":93,"GroupExpressionsList":94,"HavingClause":95,"GroupExpression":96,"GROUPING":97,"SETS":98,"ROLLUP":99,"CUBE":100,"HAVING":101,"UNION":102,"EXCEPT":103,"INTERSECT":104,"ORDER":105,"OrderExpressionsList":106,"OrderExpression":107,"DIRECTION":108,"COLLATE":109,"NOCASE":110,"LIMIT":111,"OffsetClause":112,"OFFSET":113,"ResultColumn":114,"NUMBER":115,"Star":116,"STAR":117,"Column":118,"AggrValue":119,"FuncValue":120,"Op":121,"LogicValue":122,"StringValue":123,"NullValue":124,"ExistsValue":125,"CaseValue":126,"PrimitiveValue":127,"Aggregator":128,"SUM":129,"COUNT":130,"MIN":131,"MAX":132,"AVG":133,"FIRST":134,"LAST":135,"ExprList":136,"TRUE":137,"FALSE":138,"STRING":139,"NULL":140,"EXISTS":141,"DOLLAR":142,"COLON":143,"QUESTION":144,"CASE":145,"WhensList":146,"ElseClause":147,"END":148,"When":149,"WHEN":150,"THEN":151,"ELSE":152,"LIKE":153,"PLUS":154,"MINUS":155,"SLASH":156,"PERCENT":157,"GT":158,"GE":159,"LT":160,"LE":161,"EQ":162,"NE":163,"CondOp":164,"AllSome":165,"AND":166,"OR":167,"NOT":168,"IN":169,"BETWEEN":170,"NOT_BETWEEN":171,"SOME":172,"ANY":173,"UPDATE":174,"SET":175,"SetColumnsList":176,"SetColumn":177,"DELETE":178,"INSERT":179,"VALUES":180,"ValuesListsList":181,"DEFAULT":182,"ValuesList":183,"Value":184,"DateValue":185,"CREATE":186,"TemporaryClause":187,"TABLE":188,"IfNotExists":189,"CreateTableDefClause":190,"TEMPORARY":191,"TEMP":192,"IF":193,"ColumnDefsList":194,"ConstraintsList":195,"Constraint":196,"ConstraintName":197,"PrimaryKey":198,"ForeignKey":199,"CONSTRAINT":200,"PRIMARY":201,"KEY":202,"ColsList":203,"FOREIGN":204,"REFERENCES":205,"ColumnDef":206,"ColumnTypeName":207,"ColumnConstraintsClause":208,"ColumnConstraints":209,"SignedNumber":210,"ColumnConstraintsList":211,"ColumnConstraint":212,"AUTO_INCREMENT":213,"IDENTITY":214,"DROP":215,"ALTER":216,"RENAME":217,"TO":218,"ADD":219,"COLUMN":220,"MODIFY":221,"DATABASE":222,"USE":223,"INDEX":224,"UNIQUE":225,"SHOW":226,"DATABASES":227,"TABLES":228,"COLUMNS":229,"VIEW":230,"View":231,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",8:"EOF",9:"SEMICOLON",12:"EXPLAIN",13:"QUERY",14:"PLAN",19:"CreateTrigger",25:"DropTrigger",26:"DropView",28:"RenameTable",35:"BeginTransaction",36:"CommitTransaction",37:"RollbackTransaction",38:"EndTransaction",42:"WITH",44:"RECURSIVE",53:"SELECT",54:"DISTINCT",57:"ALL",58:"TOP",60:"INTO",62:"FROM",66:"COMMA",67:"LPAR",68:"RPAR",69:"AS",71:"DOT",74:"JOIN",78:"NATURAL",79:"INNER",80:"LEFT",81:"OUTER",82:"RIGHT",83:"FULL",84:"SEMI",85:"ANTI",86:"CROSS",87:"ON",89:"USING",91:"WHERE",92:"GROUP",93:"BY",97:"GROUPING",98:"SETS",99:"ROLLUP",100:"CUBE",101:"HAVING",102:"UNION",103:"EXCEPT",104:"INTERSECT",105:"ORDER",108:"DIRECTION",109:"COLLATE",110:"NOCASE",111:"LIMIT",113:"OFFSET",115:"NUMBER",117:"STAR",129:"SUM",130:"COUNT",131:"MIN",132:"MAX",133:"AVG",134:"FIRST",135:"LAST",137:"TRUE",138:"FALSE",139:"STRING",140:"NULL",141:"EXISTS",142:"DOLLAR",143:"COLON",144:"QUESTION",145:"CASE",148:"END",150:"WHEN",151:"THEN",152:"ELSE",153:"LIKE",154:"PLUS",155:"MINUS",156:"SLASH",157:"PERCENT",158:"GT",159:"GE",160:"LT",161:"LE",162:"EQ",163:"NE",166:"AND",167:"OR",168:"NOT",169:"IN",170:"BETWEEN",171:"NOT_BETWEEN",172:"SOME",173:"ANY",174:"UPDATE",175:"SET",178:"DELETE",179:"INSERT",180:"VALUES",182:"DEFAULT",185:"DateValue",186:"CREATE",188:"TABLE",191:"TEMPORARY",192:"TEMP",193:"IF",200:"CONSTRAINT",201:"PRIMARY",202:"KEY",204:"FOREIGN",205:"REFERENCES",209:"ColumnConstraints",210:"SignedNumber",213:"AUTO_INCREMENT",214:"IDENTITY",215:"DROP",216:"ALTER",217:"RENAME",218:"TO",219:"ADD",220:"COLUMN",221:"MODIFY",222:"DATABASE",223:"USE",224:"INDEX",225:"UNIQUE",226:"SHOW",227:"DATABASES",228:"TABLES",229:"COLUMNS",230:"VIEW"},
productions_: [0,[3,1],[3,1],[6,2],[7,3],[7,1],[11,2],[11,4],[10,0],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[41,3],[41,4],[41,1],[43,0],[29,8],[45,4],[45,4],[45,3],[55,2],[55,0],[46,0],[46,2],[47,2],[47,3],[47,0],[63,1],[63,3],[64,4],[64,5],[64,3],[64,2],[64,3],[64,1],[64,2],[64,3],[64,1],[61,3],[61,1],[65,2],[65,1],[72,4],[75,1],[75,2],[75,3],[75,2],[75,3],[75,4],[75,5],[73,1],[73,2],[77,0],[77,1],[77,1],[77,2],[77,1],[77,2],[77,1],[77,2],[77,1],[77,1],[77,1],[76,2],[76,2],[76,0],[48,0],[48,2],[49,0],[49,4],[94,1],[94,3],[96,5],[96,4],[96,4],[96,1],[95,0],[95,2],[52,0],[52,2],[52,3],[52,2],[52,2],[50,0],[50,3],[106,1],[106,3],[107,1],[107,2],[107,3],[107,4],[51,0],[51,3],[112,0],[112,2],[56,3],[56,1],[114,3],[114,2],[114,3],[114,2],[114,1],[116,5],[116,3],[116,1],[118,5],[118,3],[118,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[127,1],[127,1],[127,1],[127,1],[127,1],[127,1],[119,4],[128,1],[128,1],[128,1],[128,1],[128,1],[128,1],[128,1],[120,4],[120,3],[136,1],[136,3],[59,1],[122,1],[122,1],[123,1],[124,1],[125,4],[70,2],[70,2],[70,1],[126,5],[126,4],[146,2],[146,1],[149,4],[147,2],[147,0],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,6],[121,6],[121,3],[121,3],[121,2],[121,2],[121,3],[121,5],[121,6],[121,5],[121,6],[121,3],[121,3],[164,1],[164,1],[164,1],[164,1],[164,1],[164,1],[165,1],[165,1],[165,1],[40,6],[40,4],[176,1],[176,3],[177,3],[21,5],[21,3],[27,5],[27,5],[27,8],[27,4],[27,7],[181,3],[181,5],[183,1],[183,3],[184,1],[184,1],[184,1],[184,1],[184,1],[184,1],[90,1],[90,3],[18,8],[187,0],[187,1],[187,1],[189,0],[189,3],[190,3],[190,1],[190,2],[195,1],[195,3],[196,2],[196,2],[197,0],[197,2],[198,5],[199,10],[203,1],[203,3],[194,1],[194,3],[206,3],[206,2],[207,6],[207,4],[207,1],[208,0],[208,1],[211,2],[211,1],[212,2],[212,7],[212,1],[212,6],[212,2],[212,2],[24,5],[24,3],[15,6],[15,6],[15,6],[15,6],[16,3],[39,3],[39,2],[22,3],[17,8],[17,9],[23,3],[32,2],[32,4],[34,2],[34,4],[34,4],[34,6],[31,4],[31,6],[33,4],[33,6],[30,4],[30,6],[20,5],[20,8],[231,1],[231,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 35: case 36: case 57: case 98: case 124: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 175: case 202: case 203: case 204: case 205: case 206: case 207: case 249: case 262: case 264:
 this.$ = $$[$0]; 
break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 4:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 5: case 50: case 64: case 93: case 108: case 119: case 159: case 173: case 213: case 225: case 233: case 252:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 7:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 8: case 44: case 49: case 88: case 89: case 91: case 99: case 101: case 106: case 114: case 116: case 236: case 239:
 this.$ = null; 
break;
case 37:
 this.$ = $$[$0];
break;
case 39:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 40:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 41:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 42:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 43:
 this.$ = {top: $$[$0]}; 
break;
case 45: case 261:
this.$ = null
break;
case 46:
this.$ = {into: $$[$0]} 
break;
case 47:
 this.$ = { from: $$[$0] }; 
break;
case 48:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 51: case 94: case 214: case 253:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 52:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 53:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 54:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 55:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 56:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 58:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 59:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 60:
 this.$ = $$[$0]; $$[$0].as = 'delault'; 
break;
case 61:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 62:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 63:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 65:
 this.$ = new yy.Join($$[$0-3]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 66:
 this.$ = {table: $$[$0]}; 
break;
case 67:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 68:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 69:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 70:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 71:
 this.$ = {select: $$[$0-3], as: $$[$0]} ; 
break;
case 72:
 this.$ = {select: $$[$0-4], as: $$[$0] } ; 
break;
case 73:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 74:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 75: case 76:
 this.$ = "INNER"; 
break;
case 77: case 78:
 this.$ = "LEFT"; 
break;
case 79: case 80:
 this.$ = "RIGHT"; 
break;
case 81: case 82:
 this.$ = "OUTER"; 
break;
case 83:
 this.$ = "SEMI"; 
break;
case 84:
 this.$ = "ANTI"; 
break;
case 85:
 this.$ = "CROSS"; 
break;
case 86:
 this.$ = {on: $$[$0]}; 
break;
case 87:
 this.$ = {using: $$[$0]}; 
break;
case 90:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 92:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 95:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 96:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 97:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 100:
 this.$ = {having:$$[$0]}
break;
case 102:
 this.$ = {union: $$[$0]} ; 
break;
case 103:
 this.$ = {unionall: $$[$0]} ; 
break;
case 104:
 this.$ = {except: $$[$0]} ; 
break;
case 105:
 this.$ = {intersect: $$[$0]} ; 
break;
case 107:
 this.$ = {order:$$[$0]}
break;
case 109:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 110:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 111:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 112:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 113:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 115:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 117:
 this.$ = {offset:$$[$0]}
break;
case 118: case 245: case 255:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 120: case 122:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 121: case 123:
 $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];
break;
case 125:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 126:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 127:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 128:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 129:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 130:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 149:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 150:
 this.$ = "SUM"; 
break;
case 151:
 this.$ = "COUNT"; 
break;
case 152:
 this.$ = "MIN"; 
break;
case 153:
 this.$ = "MAX"; 
break;
case 154:
 this.$ = "AVG"; 
break;
case 155:
 this.$ = "FIRST"; 
break;
case 156:
 this.$ = "LAST"; 
break;
case 157:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 158:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 160:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 161:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 162:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 163:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 164:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 165:
 this.$ = new yy.NullValue({value:null}); 
break;
case 166:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 167: case 168:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 169:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 170:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 171:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 172:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 174:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 176:
this.$ = null; 
break;
case 177:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 178:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 179:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 180:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 181:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 182:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 183:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 184:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 185:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 186:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 187:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 188:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 189:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 190:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 191:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 192:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 193:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 194:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 195:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 196:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 197:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 198:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 199:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 200:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 201:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 208:
 this.$ = 'ALL'; 
break;
case 209:
 this.$ = 'SOME'; 
break;
case 210:
 this.$ = 'ANY'; 
break;
case 211:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 212:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 215:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 216:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 217:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 218:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 219:
 this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; 
break;
case 220:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 221:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 222:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 223:
 this.$ = [$$[$0-1]]; 
break;
case 224:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 226: case 234:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 235:
 
			this.$ = new yy.CreateTable({table:$$[$0-3]}); 
			yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-4]); 
			yy.extend(this.$,$$[$0-1]); 
		
break;
case 237: case 238:
 this.$ = {temporary:true}; 
break;
case 240:
 this.$ = {ifnotexists: true}; 
break;
case 241:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 242:
 this.$ = {columns: $$[$0]}; 
break;
case 243:
 this.$ = {as: $$[$0]} 
break;
case 244: case 254:
 this.$ = [$$[$0]];
break;
case 246: case 247:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 248:
 this.$ = null 
break;
case 250:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 251:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-6], fktableid: $$[$0-3], fkcolumns: $$[$0-1]}; 
break;
case 256:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 257:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 258:
 this.$ = {dbtypeid: $$[$0-5].toUpperCase(), dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 259:
 this.$ = {dbtypeid: $$[$0-3].toUpperCase(), dbsize: $$[$0-1]} 
break;
case 260:
 this.$ = {dbtypeid: $$[$0].toUpperCase()} 
break;
case 263:
 yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];
break;
case 265:
this.$ = {primarykey:true};
break;
case 266:
this.$ = {foreignkey:{tableid:$$[$0-3], columnid: $$[$0-1]}};
break;
case 267:
this.$ = {auto_increment:true};
break;
case 268:
 this.$ = {identity: [$$[$0-3],$$[$0-1]]} 
break;
case 269:
this.$ = {default:$$[$0]};
break;
case 270:
this.$ = {notnull:true};
break;
case 271:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 272:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 273:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
case 274:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 275:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 276:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});
break;
case 277:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0] });
break;
case 278: case 279:
 this.$ = new yy.UseDatabase({databaseid: $$[$0] });
break;
case 280:
 this.$ = new yy.DropDatabase({databaseid: $$[$0] });
break;
case 281:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})
break;
case 282:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})
break;
case 283:
 this.$ = new yy.DropIndex({indexid:$$[$0]});
break;
case 284:
 this.$ = new yy.ShowDatabases();
break;
case 285:
 this.$ = new yy.ShowDatabases({like:$$[$0]});
break;
case 286:
 this.$ = new yy.ShowTables();
break;
case 287:
 this.$ = new yy.ShowTables({like:$$[$0]});
break;
case 288:
 this.$ = new yy.ShowTables({databaseid: $$[$0]});
break;
case 289:
 this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});
break;
case 290:
 this.$ = new yy.ShowColumns({table: $$[$0]});
break;
case 291:
 this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});
break;
case 292:
 this.$ = new yy.ShowIndex({table: $$[$0]});
break;
case 293:
 this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});
break;
case 294:
 this.$ = new yy.ShowCreateTable({table: $$[$0]});
break;
case 295:
 this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});
break;
case 296:
 this.$ = new yy.CreateView({view:$$[$0-2], select: $$[$0]}); 
break;
case 297:
 this.$ = new yy.CreateView({view:$$[$0-5], columns: $$[$0-3], select: $$[$0-3]}); 
break;
case 298:
 this.$ = new yy.View({viewid: $$[$0]}); 
break;
case 299:
 this.$ = new yy.View({databaseid:$$[$0-2], viewid: $$[$0]}); 
break;
}
},
table: [o($V0,$V1,{6:1,7:2,10:3,15:4,16:5,17:6,18:7,20:9,21:10,22:11,23:12,24:13,27:16,29:18,30:19,31:20,32:21,33:22,34:23,39:28,40:29,45:35,19:$V2,25:$V3,26:$V4,28:$V5,35:$V6,36:$V7,37:$V8,38:$V9,53:$Va,174:$Vb,178:$Vc,179:$Vd,186:$Ve,215:$Vf,216:$Vg,223:$Vh,226:$Vi}),{1:[3]},{8:[1,40],9:[1,41]},o($V0,[2,5]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),o($V0,[2,34]),{188:[1,42]},{187:46,188:[2,236],191:[1,48],192:[1,49],222:[1,43],224:[1,44],225:[1,45],230:[1,47]},{62:[1,50]},{188:[1,53],222:[1,51],224:[1,52]},{60:[1,54]},o($Vj,[2,45],{46:55,60:[1,56]}),{186:[1,57],224:[1,60],227:[1,59],228:[1,61],229:[1,58]},{3:63,4:$Vk,5:$Vl,222:[1,62]},{3:67,4:$Vk,5:$Vl,61:66},o($Vm,$Vn,{55:70,54:[1,68],57:[1,69],58:$Vo}),{1:[2,3]},o($V0,$V1,{15:4,16:5,17:6,18:7,20:9,21:10,22:11,23:12,24:13,27:16,29:18,30:19,31:20,32:21,33:22,34:23,39:28,40:29,45:35,10:72,19:$V2,25:$V3,26:$V4,28:$V5,35:$V6,36:$V7,37:$V8,38:$V9,53:$Va,174:$Vb,178:$Vc,179:$Vd,186:$Ve,215:$Vf,216:$Vg,223:$Vh,226:$Vi}),{3:67,4:$Vk,5:$Vl,61:73},{3:74,4:$Vk,5:$Vl},{3:75,4:$Vk,5:$Vl},{224:[1,76]},{188:[1,77]},{3:79,4:$Vk,5:$Vl,231:78},{188:[2,237]},{188:[2,238]},{3:67,4:$Vk,5:$Vl,61:80},{3:81,4:$Vk,5:$Vl},{3:82,4:$Vk,5:$Vl},{3:67,4:$Vk,5:$Vl,61:84,193:[1,83]},{3:67,4:$Vk,5:$Vl,61:85},o($Vp,[2,49],{47:86,62:[1,87]}),{3:67,4:$Vk,5:$Vl,61:88},{188:[1,89]},{62:[1,90]},o($V0,[2,284],{153:[1,91]}),{62:[1,92]},o($V0,[2,286],{62:[1,94],153:[1,93]}),{3:95,4:$Vk,5:$Vl},o($V0,[2,279]),o($Vq,[2,1]),o($Vq,[2,2]),{175:[1,96]},o($Vr,[2,62],{71:[1,97]}),o($Vm,$Vn,{55:98,58:$Vo}),o($Vm,$Vn,{55:99,58:$Vo}),{3:116,4:$Vk,5:$Vl,56:100,59:108,67:$Vs,70:112,88:102,114:101,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{59:138,115:$Vt},o($V0,[2,4]),{215:[1,142],217:[1,139],219:[1,140],221:[1,141]},o($V0,[2,277]),{87:[1,143]},{3:144,4:$Vk,5:$Vl},o($VN,[2,239],{189:145,193:[1,146]}),{67:[1,148],69:[1,147]},o($VO,[2,298],{71:[1,149]}),o($V0,[2,217],{91:[1,150]}),o($V0,[2,280]),o($V0,[2,283]),{141:[1,151]},o($V0,[2,272]),{29:155,45:35,53:$Va,67:[1,154],180:[1,152],182:[1,153]},o($VP,[2,89],{48:156,91:[1,157]}),{3:67,4:$Vk,5:$Vl,61:161,63:158,64:159,67:$VQ,70:162,142:$VH,143:$VI,144:$VJ},o($Vj,[2,46]),{3:67,4:$Vk,5:$Vl,61:163},{3:67,4:$Vk,5:$Vl,61:164},{123:165,139:$VE},{3:67,4:$Vk,5:$Vl,61:166},{123:167,139:$VE},{3:168,4:$Vk,5:$Vl},o($V0,[2,278]),{3:172,4:$Vk,5:$Vl,118:171,176:169,177:170},{3:173,4:$Vk,5:$Vl},{3:116,4:$Vk,5:$Vl,56:174,59:108,67:$Vs,70:112,88:102,114:101,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,56:175,59:108,67:$Vs,70:112,88:102,114:101,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($VR,[2,42],{66:$VS}),o($VT,[2,119]),o($VT,[2,124],{3:178,164:192,4:$Vk,5:$Vl,69:[1,177],115:[1,179],117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($Va1,[2,131]),o($Va1,[2,132]),o($Va1,[2,133]),o($Va1,[2,134]),o($Va1,[2,135]),o($Va1,[2,136]),o($Va1,[2,137]),o($Va1,[2,138]),o($Va1,[2,139]),o($Va1,[2,140]),o($Va1,[2,141]),o($Va1,[2,142]),{67:[1,199]},o($Va1,$Vb1,{67:$Vc1,71:[1,201]}),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:202,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:203,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:204,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($Va1,[2,127]),o([4,5,8,9,60,62,66,67,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,113,115,117,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,166,167,168,169,170,171,182,201,204,213,214],[2,161]),o($Vd1,[2,162]),o($Vd1,[2,163]),o($Vd1,[2,164]),o($Vd1,[2,165]),{3:205,4:$Vk,5:$Vl},{3:206,4:$Vk,5:$Vl},o($Vd1,[2,169]),{67:[1,207]},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:208,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,146:209,149:210,150:$Ve1,155:$VL,168:$VM},{67:[2,150]},{67:[2,151]},{67:[2,152]},{67:[2,153]},{67:[2,154]},{67:[2,155]},{67:[2,156]},o($Vm,[2,43]),{218:[1,212]},{220:[1,213]},{220:[1,214]},{220:[1,215]},{3:67,4:$Vk,5:$Vl,61:216},{87:[1,217]},{3:67,4:$Vk,5:$Vl,61:218},{168:[1,219]},{29:220,45:35,53:$Va},{3:222,4:$Vk,5:$Vl,203:221},{3:223,4:$Vk,5:$Vl},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:224,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:67,4:$Vk,5:$Vl,61:225},{67:$Vf1,181:226},{180:[1,228]},{3:172,4:$Vk,5:$Vl,90:229,118:230},o($V0,[2,221]),o($Vg1,[2,91],{49:231,92:[1,232]}),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:233,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($Vp,[2,47],{66:[1,234]}),o($Vh1,[2,50],{65:235,72:236,73:237,77:238,74:$Vi1,78:$Vj1,79:$Vk1,80:$Vl1,81:$Vm1,82:$Vn1,83:$Vo1,84:$Vp1,85:$Vq1,86:$Vr1}),{29:248,45:35,53:$Va},o($Vs1,[2,57],{3:249,4:$Vk,5:$Vl,69:[1,250]}),o($Vs1,[2,60],{3:251,4:$Vk,5:$Vl,69:[1,252]}),o($V0,[2,294],{62:[1,253]}),o($V0,[2,290],{62:[1,254]}),o($V0,[2,285]),o($V0,[2,292],{62:[1,255]}),o($V0,[2,287]),o($V0,[2,288],{153:[1,256]}),o($V0,[2,212],{66:[1,258],91:[1,257]}),o($Vt1,[2,213]),{162:[1,259]},o($Vu1,$Vb1,{71:[1,260]}),o($Vr,[2,61]),o($VR,[2,40],{66:$VS}),o($VR,[2,41],{66:$VS}),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:102,114:261,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:262,4:$Vk,5:$Vl,115:[1,263]},o($VT,[2,121]),o($VT,[2,123]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:264,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:265,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:266,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:267,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:268,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:269,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($Vv1,[2,202],{119:103,120:104,121:105,118:106,116:107,59:108,122:109,123:110,124:111,70:112,125:113,126:114,128:115,3:116,88:270,4:$Vk,5:$Vl,67:$Vs,115:$Vt,117:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM}),o($Vv1,[2,203],{119:103,120:104,121:105,118:106,116:107,59:108,122:109,123:110,124:111,70:112,125:113,126:114,128:115,3:116,88:271,4:$Vk,5:$Vl,67:$Vs,115:$Vt,117:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM}),o($Vv1,[2,204],{119:103,120:104,121:105,118:106,116:107,59:108,122:109,123:110,124:111,70:112,125:113,126:114,128:115,3:116,88:272,4:$Vk,5:$Vl,67:$Vs,115:$Vt,117:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM}),o($Vv1,[2,205],{119:103,120:104,121:105,118:106,116:107,59:108,122:109,123:110,124:111,70:112,125:113,126:114,128:115,3:116,88:273,4:$Vk,5:$Vl,67:$Vs,115:$Vt,117:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM}),o($Vv1,[2,206],{119:103,120:104,121:105,118:106,116:107,59:108,122:109,123:110,124:111,70:112,125:113,126:114,128:115,3:116,88:274,4:$Vk,5:$Vl,67:$Vs,115:$Vt,117:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM}),o($Vv1,[2,207],{119:103,120:104,121:105,118:106,116:107,59:108,122:109,123:110,124:111,70:112,125:113,126:114,128:115,3:116,88:275,4:$Vk,5:$Vl,67:$Vs,115:$Vt,117:$Vu,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM}),{57:[1,277],165:276,172:[1,278],173:[1,279]},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:280,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:281,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{67:[1,282]},{169:[1,283]},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:284,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:285,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:286,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,68:[1,288],70:112,88:289,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,136:287,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:290,4:$Vk,5:$Vl,117:[1,291]},o([4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,148,150,151,152,158,159,160,161,162,163,166,167,168,169,170,171],[2,193],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ}),o($Vw1,[2,194],{164:192,117:$VU,156:$VY,157:$VZ}),{68:[1,292],117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,164:192,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91},o($Vd1,[2,167]),o($Vd1,[2,168]),{29:293,45:35,53:$Va},{117:$VU,146:294,149:210,150:$Ve1,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,164:192,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91},{147:295,148:$Vx1,149:296,150:$Ve1,152:$Vy1},o($Vz1,[2,173]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:298,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:299,4:$Vk,5:$Vl},{3:301,4:$Vk,5:$Vl,206:300},{3:301,4:$Vk,5:$Vl,206:302},{3:303,4:$Vk,5:$Vl},{67:[1,304]},{3:67,4:$Vk,5:$Vl,61:305},{67:[1,306]},{141:[1,307]},o($V0,[2,296]),{66:$VA1,68:[1,308]},o($VB1,[2,252]),o($VO,[2,299]),o($V0,[2,216],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($V0,[2,271]),o($V0,[2,218],{66:$VC1}),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:312,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM,183:311},o($V0,[2,219]),{66:$VD1,68:[1,313]},o($Vs1,[2,233]),o($VE1,[2,106],{50:315,105:[1,316]}),{93:[1,317]},o($VP,[2,90],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),{3:67,4:$Vk,5:$Vl,61:161,64:318,67:$VQ,70:162,142:$VH,143:$VI,144:$VJ},o($Vp,[2,48],{73:237,77:238,72:319,74:$Vi1,78:$Vj1,79:$Vk1,80:$Vl1,81:$Vm1,82:$Vn1,83:$Vo1,84:$Vp1,85:$Vq1,86:$Vr1}),o($VF1,[2,64]),{74:[1,320]},{74:[2,73]},{74:$Vi1,77:321,79:$Vk1,80:$Vl1,81:$Vm1,82:$Vn1,83:$Vo1,84:$Vp1,85:$Vq1,86:$Vr1},{74:[2,76]},{74:[2,77],81:[1,322]},{74:[2,79],81:[1,323]},{74:[2,81]},{81:[1,324]},{74:[2,83]},{74:[2,84]},{74:[2,85]},{68:[1,325]},o($Vs1,[2,55]),{3:326,4:$Vk,5:$Vl},o($Vs1,[2,58]),{3:327,4:$Vk,5:$Vl},{3:328,4:$Vk,5:$Vl},{3:329,4:$Vk,5:$Vl},{3:330,4:$Vk,5:$Vl},{123:331,139:$VE},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:332,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:172,4:$Vk,5:$Vl,118:171,177:333},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:334,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:335,4:$Vk,5:$Vl},o($VT,[2,118]),o($VT,[2,120]),o($VT,[2,122]),o([4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,148,150,151,152,153,158,159,160,161,162,163,166,167,168,169,170,171],[2,177],{164:192,117:$VU,154:$VW,155:$VX,156:$VY,157:$VZ}),o($Vw1,[2,178],{164:192,117:$VU,156:$VY,157:$VZ}),o($Vw1,[2,179],{164:192,117:$VU,156:$VY,157:$VZ}),o($Va1,[2,180],{164:192}),o($Va1,[2,181],{164:192}),o($Va1,[2,182],{164:192}),o($VG1,[2,183],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,168:$V61,169:$V71}),o($VG1,[2,184],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,168:$V61,169:$V71}),o($VG1,[2,185],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,168:$V61,169:$V71}),o($VG1,[2,186],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,168:$V61,169:$V71}),o($VG1,[2,187],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,168:$V61,169:$V71}),o($VG1,[2,188],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,168:$V61,169:$V71}),{67:[1,336]},{67:[2,208]},{67:[2,209]},{67:[2,210]},o([4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,148,150,151,152,166,167,170,171],[2,191],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,168:$V61,169:$V71}),o([4,5,8,9,60,62,66,68,69,74,78,79,80,81,82,83,84,85,86,91,92,101,102,103,104,105,108,109,111,115,148,150,151,152,167],[2,192],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,168:$V61,169:$V71,170:$V81,171:$V91}),{3:116,4:$Vk,5:$Vl,29:337,45:35,53:$Va,59:108,67:$Vs,70:112,88:289,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,136:338,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{67:[1,339]},o($VH1,[2,200],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,168:$V61,169:$V71}),o($VH1,[2,201],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,168:$V61,169:$V71}),{68:[1,340],117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,164:192,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91},{66:$VI1,68:[1,341]},o($Vd1,[2,158]),o($VB1,[2,159],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($Va1,$VJ1,{71:[1,343]}),o($Va1,[2,126]),o($Va1,[2,195]),{68:[1,344]},{147:345,148:$Vx1,149:296,150:$Ve1,152:$Vy1},{148:[1,346]},o($Vz1,[2,172]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:347,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{117:$VU,151:[1,348],153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,164:192,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91},o($V0,[2,273]),o($V0,[2,274]),{4:[1,351],207:349,209:[1,350]},o($V0,[2,275]),o($V0,[2,276]),{3:222,4:$Vk,5:$Vl,203:352},{67:[1,353]},{3:301,4:$Vk,5:$Vl,69:[1,356],190:354,194:355,206:357},o($VN,[2,240]),{69:[1,358]},{3:359,4:$Vk,5:$Vl},{67:[1,360]},{66:$VK1,68:[1,361]},o($VB1,[2,225],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),{29:364,45:35,53:$Va,180:[1,363]},{3:172,4:$Vk,5:$Vl,118:365},o($VL1,[2,114],{51:366,111:[1,367]}),{93:[1,368]},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:374,94:369,96:370,97:$VM1,99:$VN1,100:$VO1,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($Vh1,[2,51]),o($VF1,[2,63]),{3:67,4:$Vk,5:$Vl,61:376,67:[1,378],70:377,75:375,142:$VH,143:$VI,144:$VJ},{74:[2,74]},{74:[2,78]},{74:[2,80]},{74:[2,82]},o($Vs1,[2,54],{3:379,4:$Vk,5:$Vl,69:[1,380]}),o($Vs1,[2,56]),o($Vs1,[2,59]),o($V0,[2,295]),o($V0,[2,291]),o($V0,[2,293]),o($V0,[2,289]),o($V0,[2,211],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($Vt1,[2,214]),o($Vt1,[2,215],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($Vu1,$VJ1,{71:[1,381]}),{3:116,4:$Vk,5:$Vl,29:382,45:35,53:$Va,59:108,67:$Vs,70:112,88:289,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,136:383,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{68:[1,384]},{66:$VI1,68:[1,385]},{3:116,4:$Vk,5:$Vl,29:386,45:35,53:$Va,59:108,67:$Vs,70:112,88:289,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,136:387,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($Va1,[2,149]),o($Vd1,[2,157]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:388,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:389,4:$Vk,5:$Vl,117:[1,390]},o($Va1,[2,166]),{148:[1,391]},o($Va1,[2,171]),{117:$VU,148:[2,175],153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,164:192,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:392,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($VP1,[2,261],{208:393,211:394,212:395,168:$VQ1,182:$VR1,201:$VS1,204:$VT1,213:$VU1,214:$VV1}),o($VP1,[2,257]),o($VW1,[2,260],{67:[1,402]}),{66:$VA1,68:[1,403]},{3:222,4:$Vk,5:$Vl,203:404},{68:[1,405]},{66:[1,406],68:[2,242]},{29:407,45:35,53:$Va},o($VB1,[2,254]),{29:408,45:35,53:$Va},o($VB1,[2,253]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:312,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM,183:409},o($VX1,[2,223]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:410,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{67:$Vf1,181:411},o($V0,[2,222]),o($Vs1,[2,234]),o($VY1,[2,101],{52:412,102:[1,413],103:[1,414],104:[1,415]}),{59:416,115:$Vt},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:419,106:417,107:418,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($Vg1,[2,99],{95:420,66:$VZ1,101:[1,422]}),o($V_1,[2,93]),{98:[1,423]},{67:[1,424]},{67:[1,425]},o($V_1,[2,98],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($VF1,[2,88],{76:426,87:[1,427],89:[1,428]}),o($V$1,[2,66],{3:429,4:$Vk,5:$Vl,69:[1,430]}),{3:431,4:$Vk,5:$Vl,69:[1,432]},{29:433,45:35,53:$Va},o($Vs1,[2,52]),{3:434,4:$Vk,5:$Vl},{3:389,4:$Vk,5:$Vl},{68:[1,435]},{66:$VI1,68:[1,436]},o($Va1,[2,196]),o($Va1,[2,198]),{68:[1,437]},{66:$VI1,68:[1,438]},o($VB1,[2,160],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($Va1,[2,128]),o($Va1,[2,125]),o($Va1,[2,170]),o($Vz1,[2,174],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($VP1,[2,256]),o($VP1,[2,262],{212:439,168:$VQ1,182:$VR1,201:$VS1,204:$VT1,213:$VU1,214:$VV1}),o($VW1,[2,264]),{202:[1,440]},{202:[1,441]},o($VW1,[2,267]),{67:[1,442]},{3:450,4:$Vk,5:$Vl,59:444,70:448,115:$Vt,120:449,122:446,123:445,124:447,127:443,137:$VC,138:$VD,139:$VE,140:$VF,142:$VH,143:$VI,144:$VJ},{140:[1,451]},{210:[1,452]},o($V0,[2,281]),{66:$VA1,68:[1,453]},o($V0,[2,235]),o($V02,$V12,{3:301,195:454,206:455,196:456,197:457,4:$Vk,5:$Vl,200:$V22}),{68:[2,243]},o($V0,[2,297]),{66:$VK1,68:[1,459]},o($VB1,[2,226],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($V0,[2,220],{66:$VC1}),o($VY1,[2,39]),{29:460,45:35,53:$Va,57:[1,461]},{29:462,45:35,53:$Va},{29:463,45:35,53:$Va},o($VL1,[2,116],{112:464,113:[1,465]}),o($VE1,[2,107],{66:[1,466]}),o($V32,[2,108]),o($V32,[2,110],{164:192,108:[1,467],109:[1,468],117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($Vg1,[2,92]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:374,96:469,97:$VM1,99:$VN1,100:$VO1,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:470,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{67:[1,471]},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:374,94:472,96:370,97:$VM1,99:$VN1,100:$VO1,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:374,94:473,96:370,97:$VM1,99:$VN1,100:$VO1,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($VF1,[2,65]),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:474,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{3:172,4:$Vk,5:$Vl,90:475,118:230},o($V$1,[2,67]),{3:476,4:$Vk,5:$Vl},o($V$1,[2,69]),{3:477,4:$Vk,5:$Vl},{68:[1,478]},o($Vs1,[2,53]),o($Va1,[2,189]),o($Va1,[2,190]),o($Va1,[2,197]),o($Va1,[2,199]),o($VW1,[2,263]),o($VW1,[2,265]),{205:[1,479]},{59:480,115:$Vt},o($VW1,[2,269]),o($VW1,[2,143]),o($VW1,[2,144]),o($VW1,[2,145]),o($VW1,[2,146]),o($VW1,[2,147]),o($VW1,[2,148]),{67:$Vc1},o($VW1,[2,270]),{68:[1,482],71:[1,481]},o($V0,[2,282]),{66:[1,483],68:[2,241]},o($VB1,[2,255]),o($VB1,[2,244]),{198:484,199:485,201:[1,486],204:[1,487]},{3:488,4:$Vk,5:$Vl},o($VX1,[2,224]),o($VY1,[2,102]),{29:489,45:35,53:$Va},o($VY1,[2,104]),o($VY1,[2,105]),o($VL1,[2,115]),{59:490,115:$Vt},{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:419,107:491,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},o($V32,[2,111]),{110:[1,492]},o($V_1,[2,94]),o($Vg1,[2,100],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),{3:116,4:$Vk,5:$Vl,59:108,67:$Vs,70:112,88:374,94:493,96:370,97:$VM1,99:$VN1,100:$VO1,115:$Vt,116:107,117:$Vu,118:106,119:103,120:104,121:105,122:109,123:110,124:111,125:113,126:114,128:115,129:$Vv,130:$Vw,131:$Vx,132:$Vy,133:$Vz,134:$VA,135:$VB,137:$VC,138:$VD,139:$VE,140:$VF,141:$VG,142:$VH,143:$VI,144:$VJ,145:$VK,155:$VL,168:$VM},{66:$VZ1,68:[1,494]},{66:$VZ1,68:[1,495]},o($VF1,[2,86],{164:192,117:$VU,153:$VV,154:$VW,155:$VX,156:$VY,157:$VZ,158:$V_,159:$V$,160:$V01,161:$V11,162:$V21,163:$V31,166:$V41,167:$V51,168:$V61,169:$V71,170:$V81,171:$V91}),o($VF1,[2,87],{66:$VD1}),o($V$1,[2,68]),o($V$1,[2,70]),{3:496,4:$Vk,5:$Vl,69:[1,497]},{3:498,4:$Vk,5:$Vl},{66:[1,499]},{210:[1,500]},o($VW1,[2,259]),o($V02,$V12,{197:457,196:501,200:$V22}),o($VB1,[2,246]),o($VB1,[2,247]),{202:[1,502]},{202:[1,503]},o($V02,[2,249]),o($VY1,[2,103]),o($VL1,[2,117]),o($V32,[2,109]),o($V32,[2,112],{108:[1,504]}),{66:$VZ1,68:[1,505]},o($V_1,[2,96]),o($V_1,[2,97]),o($V$1,[2,71]),{3:506,4:$Vk,5:$Vl},{67:[1,507]},{59:508,115:$Vt},{68:[1,509]},o($VB1,[2,245]),{67:[1,510]},{67:[1,511]},o($V32,[2,113]),o($V_1,[2,95]),o($V$1,[2,72]),{3:512,4:$Vk,5:$Vl},{68:[1,513]},o($VW1,[2,258]),{3:222,4:$Vk,5:$Vl,203:514},{3:222,4:$Vk,5:$Vl,203:515},{68:[1,516]},o($VW1,[2,268]),{66:$VA1,68:[1,517]},{66:$VA1,68:[1,518]},o($VW1,[2,266]),o($VB1,[2,250]),{205:[1,519]},{3:520,4:$Vk,5:$Vl},{67:[1,521]},{3:222,4:$Vk,5:$Vl,203:522},{66:$VA1,68:[1,523]},o($VB1,[2,251])],
defaultActions: {40:[2,3],48:[2,237],49:[2,238],131:[2,150],132:[2,151],133:[2,152],134:[2,153],135:[2,154],136:[2,155],137:[2,156],238:[2,73],240:[2,76],243:[2,81],245:[2,83],246:[2,84],247:[2,85],277:[2,208],278:[2,209],279:[2,210],321:[2,74],322:[2,78],323:[2,80],324:[2,82],407:[2,243]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5
break;
case 1:return 139
break;
case 2:return 139
break;
case 3:/* skip whitespace */
break;
case 4:return 219
break;
case 5:return 57
break;
case 6:return 216
break;
case 7:return 166
break;
case 8:return 85
break;
case 9:return 173
break;
case 10:return 69
break;
case 11:return 108
break;
case 12:return 213
break;
case 13:return 133
break;
case 14:return 170
break;
case 15:return 171
break;
case 16:return 93
break;
case 17:return "CASE"
break;
case 18:return 109
break;
case 19:return "COLUMN"
break;
case 20:return "COLUMNS"
break;
case 21:return "CONSTRAINT"
break;
case 22:return "COUNT"
break;
case 23:return 186
break;
case 24:return "CROSS"
break;
case 25:return 100
break;
case 26:return 222
break;
case 27:return 227
break;
case 28:return 182
break;
case 29:return 178
break;
case 30:return 108
break;
case 31:return 54
break;
case 32:return 215
break;
case 33:return 148
break;
case 34:return 152
break;
case 35:return 103
break;
case 36:return 141
break;
case 37:return 12
break;
case 38:return 138
break;
case 39:return 134
break;
case 40:return 204
break;
case 41:return 62
break;
case 42:return 92
break;
case 43:return 97
break;
case 44:return 101
break;
case 45:return 193
break;
case 46:return 214
break;
case 47:return 169
break;
case 48:return 224
break;
case 49:return 79
break;
case 50:return 179
break;
case 51:return 104
break;
case 52:return 60
break;
case 53:return 74
break;
case 54:return 202
break;
case 55:return 135
break;
case 56:return 80
break;
case 57:return 153
break;
case 58:return 111
break;
case 59:return "MAX"
break;
case 60:return "MIN"
break;
case 61:return "MODIFY"
break;
case 62:return 78
break;
case 63:return 110
break;
case 64:return 168
break;
case 65:return 140
break;
case 66:return 87
break;
case 67:return 113
break;
case 68:return 167
break;
case 69:return 105
break;
case 70:return 81
break;
case 71:return 14
break;
case 72:return 201
break;
case 73:return 13
break;
case 74:return 205
break;
case 75:return 217
break;
case 76:return 82
break;
case 77:return 99
break;
case 78:return 227
break;
case 79:return 53
break;
case 80:return 84
break;
case 81:return 175
break;
case 82:return 98
break;
case 83:return 226
break;
case 84:return 172
break;
case 85:return "SUM"
break;
case 86:return 188
break;
case 87:return 228
break;
case 88:return 151
break;
case 89:return 218
break;
case 90:return 58
break;
case 91:return 'TRAN'
break;
case 92:return 'TRANSACTION'
break;
case 93:return 137
break;
case 94:return 102
break;
case 95:return 225
break;
case 96:return 174
break;
case 97:return 223
break;
case 98:return 89
break;
case 99:return 180
break;
case 100:return 230
break;
case 101:return 150
break;
case 102:return 91
break;
case 103:return 115
break;
case 104:return 154
break;
case 105:return 155
break;
case 106:return 117
break;
case 107:return 156
break;
case 108:return 157
break;
case 109:return 159
break;
case 110:return 158
break;
case 111:return 161
break;
case 112:return 163
break;
case 113:return 160
break;
case 114:return 162
break;
case 115:return 163
break;
case 116:return 67
break;
case 117:return 68
break;
case 118:return 71
break;
case 119:return 66
break;
case 120:return 143
break;
case 121:return 9
break;
case 122:return 142
break;
case 123:return 144
break;
case 124:return 4
break;
case 125:return 8
break;
case 126:return 'INVALID'
break;
}
},
rules: [/^(?:\[([^\]])*\])/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:\s+)/i,/^(?:ADD\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AUTO_INCREMENT\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DATABASE\b)/i,/^(?:DATABASES\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:REFERENCES\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SCHEMAS\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHOW\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLES\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRAN\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}