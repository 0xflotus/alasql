/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,151,155,156,162,187,188],$V8=[5,7,31,151,155,156,162,187,188],$V9=[5,7,31,40,46,67,68,78,79,80,81,87,151,155,156,162,187,188],$Va=[1,26],$Vb=[45,47,91,92,95,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,132,145],$Vc=[2,23],$Vd=[1,36],$Ve=[5,7,31,46,67,68,78,79,80,81,87,151,155,156,162,187,188],$Vf=[5,7,31,40,44,45,46,47,48,53,55,56,57,58,59,60,61,62,63,65,67,68,78,79,80,81,87,151,152,155,156,157,162,187,188,189,191],$Vg=[1,69],$Vh=[1,66],$Vi=[1,70],$Vj=[1,72],$Vk=[1,71],$Vl=[1,82],$Vm=[1,83],$Vn=[1,84],$Vo=[1,85],$Vp=[1,86],$Vq=[1,87],$Vr=[1,88],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,80],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,81],$VB=[1,68],$VC=[1,67],$VD=[5,7,31,46,68,78,79,80,81,87,151,155,156,162,187,188],$VE=[1,94],$VF=[1,103],$VG=[5,7,31,38,40,46,67,68,78,79,80,81,87,151,155,156,162,187,188],$VH=[1,113],$VI=[5,7,31,38,40,44,46,67,68,78,79,80,81,87,151,155,156,162,187,188],$VJ=[1,118],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,128],$VW=[1,129],$VX=[1,131],$VY=[1,130],$VZ=[1,132],$V_=[1,133],$V$=[5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,95,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,143,144,145,146,147,148,151,155,156,162,187,188],$V01=[2,99],$V11=[1,137],$V21=[5,7,31,38,40,44,46,47,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,95,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,143,144,145,146,147,148,151,155,156,162,187,188],$V31=[1,148],$V41=[5,7,31,46,78,79,80,81,87,151,155,156,162,187,188],$V51=[5,7,31,44,46,67,68,78,79,80,81,87,151,155,156,162,187,188],$V61=[2,43],$V71=[1,156],$V81=[1,157],$V91=[1,159],$Va1=[1,158],$Vb1=[1,160],$Vc1=[1,161],$Vd1=[1,162],$Ve1=[1,163],$Vf1=[5,7,31,44,46,53,55,56,57,58,59,60,61,62,67,68,78,79,80,81,87,151,155,156,162,187,188],$Vg1=[1,170],$Vh1=[5,7,31,44,67,151,155,156,162,187,188],$Vi1=[5,7,31,44,46,53,55,56,57,58,59,60,61,62,67,68,78,79,80,81,87,139,151,155,156,162,187,188],$Vj1=[35,149,150],$Vk1=[5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,125,127,128,129,130,131,132,135,136,137,138,139,140,143,144,145,146,147,148,151,155,156,162,187,188],$Vl1=[2,139],$Vm1=[1,222],$Vn1=[125,127,129],$Vo1=[5,7,31,46,78,79,80,87,151,155,156,162,187,188],$Vp1=[5,7,31,46,53,55,56,57,58,59,60,61,62,67,68,78,79,80,81,87,151,155,156,162,187,188],$Vq1=[1,236],$Vr1=[1,240],$Vs1=[1,249],$Vt1=[5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,125,127,128,129,135,136,137,138,139,140,143,144,147,148,151,155,156,162,187,188],$Vu1=[5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,125,127,128,129,144,147,148,151,155,156,162,187,188],$Vv1=[1,257],$Vw1=[44,46],$Vx1=[2,96],$Vy1=[5,7,31,46,78,79,80,151,155,156,162,187,188],$Vz1=[1,270],$VA1=[1,271],$VB1=[1,272],$VC1=[1,279],$VD1=[1,299],$VE1=[5,7,31,46,151,155,156,162,187,188],$VF1=[1,312],$VG1=[5,7,31,44,46,77,78,79,80,81,87,151,155,156,162,187,188],$VH1=[5,7,31,44,151,155,156,162,187,188],$VI1=[5,7,31,44,46,151,155,156,162,187,188],$VJ1=[5,7,31,44,46,145,151,155,156,162,177,180,187,188],$VK1=[5,7,31,44,46,78,79,80,87,151,155,156,162,187,188],$VL1=[177,180],$VM1=[2,210],$VN1=[1,357],$VO1=[1,390],$VP1=[1,394];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"TopClause":33,"ResultColumns":34,"ALL":35,"TOP":36,"NumValue":37,"INTO":38,"Table":39,"FROM":40,"FromTablesList":41,"FromTable":42,"JoinTablesList":43,"COMMA":44,"LPAR":45,"RPAR":46,"LITERAL":47,"AS":48,"ParamValue":49,"DOT":50,"JoinTable":51,"JoinMode":52,"JOIN":53,"OnClause":54,"INNER":55,"LEFT":56,"OUTER":57,"RIGHT":58,"FULL":59,"SEMI":60,"ANTI":61,"CROSS":62,"ON":63,"Expression":64,"USING":65,"ColumnsList":66,"WHERE":67,"GROUP":68,"BY":69,"GroupExpressionsList":70,"HavingClause":71,"GroupExpression":72,"GROUPING":73,"SETS":74,"ROLLUP":75,"CUBE":76,"HAVING":77,"UNION":78,"EXCEPT":79,"INTERSECT":80,"ORDER":81,"OrderExpressionsList":82,"OrderExpression":83,"DIRECTION":84,"COLLATE":85,"NOCASE":86,"LIMIT":87,"OffsetClause":88,"OFFSET":89,"ResultColumn":90,"LBRA":91,"NUMBER":92,"RBRA":93,"Star":94,"STAR":95,"Column":96,"AggrValue":97,"FuncValue":98,"Op":99,"LogicValue":100,"StringValue":101,"NullValue":102,"ExistsValue":103,"CaseValue":104,"Aggregator":105,"SUM":106,"COUNT":107,"MIN":108,"MAX":109,"AVG":110,"FIRST":111,"LAST":112,"ExprList":113,"TRUE":114,"FALSE":115,"STRING":116,"NULL":117,"EXISTS":118,"DOLLAR":119,"COLON":120,"QUESTION":121,"CASE":122,"WhensList":123,"ElseClause":124,"END":125,"When":126,"WHEN":127,"THEN":128,"ELSE":129,"LIKE":130,"PLUS":131,"MINUS":132,"SLASH":133,"PERCENT":134,"GT":135,"GE":136,"LT":137,"LE":138,"EQ":139,"NE":140,"CondOp":141,"AllSome":142,"AND":143,"OR":144,"NOT":145,"IN":146,"BETWEEN":147,"NOT_BETWEEN":148,"SOME":149,"ANY":150,"UPDATE":151,"SET":152,"SetColumnsList":153,"SetColumn":154,"DELETE":155,"INSERT":156,"VALUES":157,"ValuesListsList":158,"ValuesList":159,"Value":160,"DateValue":161,"CREATE":162,"TemporaryClause":163,"TABLE":164,"IfNotExists":165,"CreateTableDefClause":166,"TEMPORARY":167,"TEMP":168,"IF":169,"ColumnDefsList":170,"ConstraintsList":171,"Constraint":172,"ConstraintName":173,"PrimaryKey":174,"ForeignKey":175,"CONSTRAINT":176,"PRIMARY":177,"KEY":178,"ColsList":179,"FOREIGN":180,"REFERENCES":181,"ColumnDef":182,"ColumnTypeName":183,"ColumnConstraint":184,"ColumnConstraints":185,"SignedNumber":186,"DROP":187,"ALTER":188,"RENAME":189,"TO":190,"ADD":191,"COLUMN":192,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",35:"ALL",36:"TOP",38:"INTO",40:"FROM",44:"COMMA",45:"LPAR",46:"RPAR",47:"LITERAL",48:"AS",50:"DOT",53:"JOIN",55:"INNER",56:"LEFT",57:"OUTER",58:"RIGHT",59:"FULL",60:"SEMI",61:"ANTI",62:"CROSS",63:"ON",65:"USING",67:"WHERE",68:"GROUP",69:"BY",73:"GROUPING",74:"SETS",75:"ROLLUP",76:"CUBE",77:"HAVING",78:"UNION",79:"EXCEPT",80:"INTERSECT",81:"ORDER",84:"DIRECTION",85:"COLLATE",86:"NOCASE",87:"LIMIT",89:"OFFSET",91:"LBRA",92:"NUMBER",93:"RBRA",95:"STAR",106:"SUM",107:"COUNT",108:"MIN",109:"MAX",110:"AVG",111:"FIRST",112:"LAST",114:"TRUE",115:"FALSE",116:"STRING",117:"NULL",118:"EXISTS",119:"DOLLAR",120:"COLON",121:"QUESTION",122:"CASE",125:"END",127:"WHEN",128:"THEN",129:"ELSE",130:"LIKE",131:"PLUS",132:"MINUS",133:"SLASH",134:"PERCENT",135:"GT",136:"GE",137:"LT",138:"LE",139:"EQ",140:"NE",143:"AND",144:"OR",145:"NOT",146:"IN",147:"BETWEEN",148:"NOT_BETWEEN",149:"SOME",150:"ANY",151:"UPDATE",152:"SET",155:"DELETE",156:"INSERT",157:"VALUES",161:"DateValue",162:"CREATE",164:"TABLE",167:"TEMPORARY",168:"TEMP",169:"IF",176:"CONSTRAINT",177:"PRIMARY",178:"KEY",180:"FOREIGN",181:"REFERENCES",185:"ColumnConstraints",186:"SignedNumber",187:"DROP",188:"ALTER",189:"RENAME",190:"TO",191:"ADD",192:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,4],[23,4],[23,3],[33,2],[33,0],[24,0],[24,2],[25,2],[25,3],[25,0],[41,1],[41,3],[42,4],[42,5],[42,2],[42,3],[42,1],[42,2],[42,3],[39,3],[39,1],[43,2],[43,1],[51,4],[52,0],[52,1],[52,1],[52,2],[52,1],[52,2],[52,1],[52,2],[52,1],[52,1],[52,1],[54,2],[54,2],[54,0],[26,0],[26,2],[27,0],[27,4],[70,1],[70,3],[72,5],[72,4],[72,4],[72,1],[71,0],[71,2],[30,0],[30,2],[30,3],[30,2],[30,2],[28,0],[28,3],[82,1],[82,3],[83,1],[83,2],[83,3],[83,4],[29,0],[29,3],[88,0],[88,2],[34,3],[34,1],[90,3],[90,5],[90,3],[90,1],[94,5],[94,3],[94,1],[96,5],[96,3],[96,4],[96,3],[96,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[97,4],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[98,4],[98,3],[113,1],[113,3],[37,1],[100,1],[100,1],[101,1],[102,1],[103,4],[49,2],[49,2],[49,1],[104,5],[104,4],[123,2],[123,1],[126,4],[124,2],[124,0],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,3],[99,6],[99,6],[99,3],[99,3],[99,2],[99,2],[99,3],[99,5],[99,6],[99,5],[99,6],[99,3],[99,3],[141,1],[141,1],[141,1],[141,1],[141,1],[141,1],[142,1],[142,1],[142,1],[14,6],[14,4],[153,1],[153,3],[154,3],[15,5],[15,3],[13,5],[13,8],[13,4],[13,7],[158,3],[158,5],[159,1],[159,3],[160,1],[160,1],[160,1],[160,1],[160,1],[160,1],[66,1],[66,3],[16,8],[163,0],[163,1],[163,1],[165,0],[165,3],[166,3],[166,1],[166,2],[171,1],[171,3],[172,2],[172,2],[173,0],[173,2],[174,5],[175,10],[179,1],[179,3],[170,1],[170,3],[182,3],[182,2],[183,6],[183,4],[183,1],[184,0],[184,2],[184,7],[184,2],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3: case 185:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 29: case 41: case 61: case 76: case 87: case 122: case 136: case 176: case 187: case 195:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 35: case 66: case 91: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 138: case 165: case 166: case 167: case 168: case 169: case 170:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 22:
 this.$ = {top: $$[$0]}; 
break;
case 23: case 28: case 56: case 57: case 59: case 67: case 69: case 74: case 82: case 84: case 198: case 201: case 230:
 this.$ = null; 
break;
case 24: case 223:
this.$ = null
break;
case 25:
this.$ = $$[$0]
break;
case 26:
 this.$ = { from: $$[$0] }; 
break;
case 27:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 30: case 62: case 177:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 31:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 32:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 34:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 36:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 37:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 38:
 this.$ = new yy.Table({databaseid: $$[$0-2].toLowerCase(), tableid:$$[$0].toLowerCase()});
break;
case 39:
 this.$ = new yy.Table({tableid: $$[$0].toLowerCase()});
break;
case 40:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 42:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 43: case 44:
 this.$ = "INNER"; 
break;
case 45: case 46:
 this.$ = "LEFT"; 
break;
case 47: case 48:
 this.$ = "RIGHT"; 
break;
case 49: case 50:
 this.$ = "OUTER"; 
break;
case 51:
 this.$ = "SEMI"; 
break;
case 52:
 this.$ = "ANTI"; 
break;
case 53:
 
			this.$ = "INNER"; 
			// this.$ = "CROSS"; // TODO: Change in code
		
break;
case 54:
 this.$ = {on: $$[$0]}; 
break;
case 55:
 this.$ = {using: $$[$0]}; 
break;
case 58:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 60:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 63:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 64:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 65:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 68:
 this.$ = {having:$$[$0]}
break;
case 70:
 this.$ = {union: $$[$0]} ; 
break;
case 71:
 this.$ = {unionall: $$[$0]} ; 
break;
case 72:
 this.$ = {except: $$[$0]} ; 
break;
case 73:
 this.$ = {intersect: $$[$0]} ; 
break;
case 75:
 this.$ = {order:$$[$0]}
break;
case 77:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 78:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 79:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 80:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 81:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 83:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 85:
 this.$ = {offset:$$[$0]}
break;
case 86: case 207: case 217:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 88:
 $$[$0-2].as = $$[$0].toLowerCase(); this.$ = $$[$0-2];
break;
case 89:
 $$[$0-4].as = $$[$0-1]; this.$ = $$[$0-4];
break;
case 90:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 92:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2].toLowerCase(), databaseid:$$[$0-4]}); 
break;
case 93:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2].toLowerCase()}); 
break;
case 94:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 95:
 this.$ = new yy.Column({columnid: $$[$0].toLowerCase(), tableid: $$[$0-2].toLowerCase(), databaseid:$$[$0-4].toLowerCase()});
break;
case 96:
 this.$ = new yy.Column({columnid: $$[$0].toLowerCase(), tableid: $$[$0-2].toLowerCase()});
break;
case 97:
 this.$ = new yy.Column({columnid: $$[$0-1], tableid: $$[$0-3].toLowerCase()});
break;
case 98:
 this.$ = new yy.Column({columnid: $$[$0-1]});
break;
case 99:
 this.$ = new yy.Column({columnid: $$[$0].toLowerCase()});
break;
case 112:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 113:
 this.$ = "SUM"; 
break;
case 114:
 this.$ = "COUNT"; 
break;
case 115:
 this.$ = "MIN"; 
break;
case 116:
 this.$ = "MAX"; 
break;
case 117:
 this.$ = "AVG"; 
break;
case 118:
 this.$ = "FIRST"; 
break;
case 119:
 this.$ = "LAST"; 
break;
case 120:
 this.$ = new yy.FuncValue({funcid: "_"+$$[$0-3].toLowerCase(), args: $$[$0-1]}); 
break;
case 121:
 this.$ = new yy.FuncValue({ funcid: "_"+$$[$0-2].toLowerCase() }) 
break;
case 123:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 124:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 125:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 126:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 127:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 128:
 this.$ = new yy.NullValue({value:null}); 
break;
case 129:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 130: case 131:
 this.$ = new yy.ParamValue({param: $$[$0].toLowerCase()}); 
break;
case 132:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 133:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 134:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 135:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 137:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 139:
this.$ = null; 
break;
case 140:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 141:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 142:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 143:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 144:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 145:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 146:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 147:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 148:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 149:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 150:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 151:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 152:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 153:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 154:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 155:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 156:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 157:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 158:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 159:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 160:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 161:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 162:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 163:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 164:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 171:
 this.$ = 'ALL'; 
break;
case 172:
 this.$ = 'SOME'; 
break;
case 173:
 this.$ = 'ANY'; 
break;
case 174:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 175:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 178:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 179:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 180:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 181:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 182:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 183:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 184:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 186:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 188: case 196:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 197:
 
			this.$ = new yy.CreateTable({table:$$[$0-3]}); 
			yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-4]); 
			yy.extend(this.$,$$[$0-1]); 
			yy.extend(this.$,$$[$0]);
		
break;
case 199: case 200:
 this.$ = {temporary:true}; 
break;
case 202:
 this.$ = {ifnotexists: true}; 
break;
case 203:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 204:
 this.$ = {columns: $$[$0]}; 
break;
case 205:
 this.$ = {as: $$[$0]} 
break;
case 206: case 216:
 this.$ = [$$[$0]];
break;
case 208: case 209:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 210:
 this.$ = null 
break;
case 211:
 this.$ = $$[$0].toLowerCase(); 
break;
case 212:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 213:
 this.$ = {type: 'FOREIGN KEY', column: $$[$0-6].toLowerCase(), tableid: $$[$0-7].toLowerCase(), columns: $$[$0-4]}; 
break;
case 214:
 this.$ = [$$[$0].toLowerCase()]; 
break;
case 215:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0].toLowerCase()); 
break;
case 218:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2].toLowerCase()}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 219:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1].toLowerCase()}); yy.extend(this.$,$$[$0]); 
break;
case 220:
 this.$ = {dbtypeid: $$[$0-5].toUpperCase(), dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 221:
 this.$ = {dbtypeid: $$[$0-3].toUpperCase(), dbsize: $$[$0-1]} 
break;
case 222:
 this.$ = {dbtypeid: $$[$0].toUpperCase()} 
break;
case 224:
this.$ = {primarykey:true};
break;
case 225:
this.$ = {foreignkey:{tableid:$$[$0-3].toLowerCase(), columnid: $$[$0-1].toLowerCase()}};
break;
case 226:
this.$ = {notnull:true};
break;
case 227:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 228:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 229:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0].toLowerCase()});
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,151:$V1,155:$V2,156:$V3,162:$V4,187:$V5,188:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,151:$V1,155:$V2,156:$V3,162:$V4,187:$V5,188:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),o($V9,[2,24],{24:22,38:[1,23]}),{38:[1,24]},{39:25,47:$Va},{40:[1,27]},{163:28,164:[2,198],167:[1,29],168:[1,30]},{164:[1,31]},{164:[1,32]},o($Vb,$Vc,{33:35,32:[1,33],35:[1,34],36:$Vd}),{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),o($Ve,[2,28],{25:37,40:[1,38]}),{39:39,47:$Va},{39:40,47:$Va},{152:[1,41]},o($Vf,[2,39],{50:[1,42]}),{39:43,47:$Va},{164:[1,44]},{164:[2,199]},{164:[2,200]},{39:46,47:$Va,169:[1,45]},{39:47,47:$Va},o($Vb,$Vc,{33:48,36:$Vd}),o($Vb,$Vc,{33:49,36:$Vd}),{34:50,37:58,45:$Vg,47:$Vh,49:62,64:52,90:51,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:89,92:$Vj},o($VD,[2,57],{26:90,67:[1,91]}),{39:95,41:92,42:93,45:$VE,47:$Va,49:96,119:$Vx,120:$Vy,121:$Vz},o($V9,[2,25]),{12:99,23:11,31:$V0,45:[1,98],157:[1,97]},{47:$VF,91:$Vi,96:102,153:100,154:101},{47:[1,104]},o($V8,[2,180],{67:[1,105]}),{47:[2,201],165:106,169:[1,107]},{118:[1,108]},o($V8,[2,228]),{189:[1,109],191:[1,110]},{34:111,37:58,45:$Vg,47:$Vh,49:62,64:52,90:51,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{34:112,37:58,45:$Vg,47:$Vh,49:62,64:52,90:51,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($VG,[2,21],{44:$VH}),o($VI,[2,87]),o($VI,[2,91],{141:127,48:[1,114],95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($V$,[2,100]),o($V$,[2,101]),o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($V$,[2,109]),o($V$,[2,110]),o($V$,[2,111]),{45:[1,134]},o($V$,$V01,{45:[1,135],50:[1,136],91:$V11}),{37:58,45:$Vg,47:$Vh,49:62,64:138,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:139,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:140,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{92:[1,141]},o($V$,[2,94]),o([5,7,31,38,40,44,45,46,47,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,89,91,92,95,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,143,144,145,146,147,148,151,155,156,162,187,188],[2,124]),o($V$,[2,125]),o($V$,[2,126]),o($V$,[2,127]),o($V$,[2,128]),{47:[1,142]},{47:[1,143]},o($V21,[2,132]),{45:[1,144]},{37:58,45:$Vg,47:$Vh,49:62,64:145,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,123:146,126:147,127:$V31,132:$VB,145:$VC},{45:[2,113]},{45:[2,114]},{45:[2,115]},{45:[2,116]},{45:[2,117]},{45:[2,118]},{45:[2,119]},o($Vb,[2,22]),o($V41,[2,59],{27:149,68:[1,150]}),{37:58,45:$Vg,47:$Vh,49:62,64:151,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($Ve,[2,26],{44:[1,152]}),o($V51,[2,29],{43:153,51:154,52:155,53:$V61,55:$V71,56:$V81,57:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),{12:164,23:11,31:$V0},o($Vf1,[2,35],{47:[1,165],48:[1,166]}),{47:[1,167],48:[1,168]},{45:$Vg1,158:169},{47:$VF,66:171,91:$Vi,96:172},o($V8,[2,183]),o($V8,[2,175],{44:[1,174],67:[1,173]}),o($Vh1,[2,176]),{139:[1,175]},o($Vi1,$V01,{50:[1,176],91:$V11}),o($Vf,[2,38]),{37:58,45:$Vg,47:$Vh,49:62,64:177,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{39:178,47:$Va},{145:[1,179]},{39:180,47:$Va},{190:[1,181]},{192:[1,182]},o($VG,[2,19],{44:$VH}),o($VG,[2,20],{44:$VH}),{37:58,45:$Vg,47:$Vh,49:62,64:52,90:183,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{47:[1,184],91:[1,185],92:[1,186]},{37:58,45:$Vg,47:$Vh,49:62,64:187,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:188,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:189,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:190,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:191,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:192,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($Vj1,[2,165],{97:53,98:54,99:55,96:56,94:57,37:58,100:59,101:60,102:61,49:62,103:63,104:64,105:65,64:193,45:$Vg,47:$Vh,91:$Vi,92:$Vj,95:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC}),o($Vj1,[2,166],{97:53,98:54,99:55,96:56,94:57,37:58,100:59,101:60,102:61,49:62,103:63,104:64,105:65,64:194,45:$Vg,47:$Vh,91:$Vi,92:$Vj,95:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC}),o($Vj1,[2,167],{97:53,98:54,99:55,96:56,94:57,37:58,100:59,101:60,102:61,49:62,103:63,104:64,105:65,64:195,45:$Vg,47:$Vh,91:$Vi,92:$Vj,95:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC}),o($Vj1,[2,168],{97:53,98:54,99:55,96:56,94:57,37:58,100:59,101:60,102:61,49:62,103:63,104:64,105:65,64:196,45:$Vg,47:$Vh,91:$Vi,92:$Vj,95:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC}),o($Vj1,[2,169],{97:53,98:54,99:55,96:56,94:57,37:58,100:59,101:60,102:61,49:62,103:63,104:64,105:65,64:197,45:$Vg,47:$Vh,91:$Vi,92:$Vj,95:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC}),o($Vj1,[2,170],{97:53,98:54,99:55,96:56,94:57,37:58,100:59,101:60,102:61,49:62,103:63,104:64,105:65,64:198,45:$Vg,47:$Vh,91:$Vi,92:$Vj,95:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC}),{35:[1,200],142:199,149:[1,201],150:[1,202]},{37:58,45:$Vg,47:$Vh,49:62,64:203,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:204,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{45:[1,205]},{146:[1,206]},{37:58,45:$Vg,47:$Vh,49:62,64:207,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:208,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:209,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,46:[1,211],47:$Vh,49:62,64:212,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:210,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{47:[1,213],95:[1,214]},{92:[1,215]},o([5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,125,127,128,129,135,136,137,138,139,140,143,144,145,146,147,148,151,155,156,162,187,188],[2,156],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO}),o($Vk1,[2,157],{141:127,95:$VJ,133:$VN,134:$VO}),{46:[1,216],95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,141:127,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_},{93:[1,217]},o($V21,[2,130]),o($V21,[2,131]),{12:218,23:11,31:$V0},{95:$VJ,123:219,126:147,127:$V31,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,141:127,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_},{124:220,125:$Vl1,126:221,127:$V31,129:$Vm1},o($Vn1,[2,136]),{37:58,45:$Vg,47:$Vh,49:62,64:223,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($Vo1,[2,74],{28:224,81:[1,225]}),{69:[1,226]},o($VD,[2,58],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),{39:95,42:227,45:$VE,47:$Va,49:96,119:$Vx,120:$Vy,121:$Vz},o($Ve,[2,27],{52:155,51:228,53:$V61,55:$V71,56:$V81,57:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),o($Vp1,[2,41]),{53:[1,229]},{53:[2,44]},{53:[2,45],57:[1,230]},{53:[2,47],57:[1,231]},{53:[2,49]},{57:[1,232]},{53:[2,51]},{53:[2,52]},{53:[2,53]},{46:[1,233]},o($Vf1,[2,33]),{47:[1,234]},o($Vf1,[2,36]),{47:[1,235]},o($V8,[2,181],{44:$Vq1}),{37:58,45:$Vg,47:$Vh,49:62,64:238,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC,159:237},{44:$Vr1,46:[1,239]},o($Vf1,[2,195]),{37:58,45:$Vg,47:$Vh,49:62,64:241,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{47:$VF,91:$Vi,96:102,154:242},{37:58,45:$Vg,47:$Vh,49:62,64:243,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{47:[1,244]},o($V8,[2,179],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),{45:[1,245]},{118:[1,246]},o($V8,[2,227]),{47:[1,247]},{47:$Vs1,182:248},o($VI,[2,86]),o($VI,[2,88]),{92:[1,250]},o($VI,[2,90]),o([5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,125,127,128,129,130,135,136,137,138,139,140,143,144,145,146,147,148,151,155,156,162,187,188],[2,140],{141:127,95:$VJ,131:$VL,132:$VM,133:$VN,134:$VO}),o($Vk1,[2,141],{141:127,95:$VJ,133:$VN,134:$VO}),o($Vk1,[2,142],{141:127,95:$VJ,133:$VN,134:$VO}),o($V$,[2,143],{141:127}),o($V$,[2,144],{141:127}),o($V$,[2,145],{141:127}),o($Vt1,[2,146],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,145:$VX,146:$VY}),o($Vt1,[2,147],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,145:$VX,146:$VY}),o($Vt1,[2,148],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,145:$VX,146:$VY}),o($Vt1,[2,149],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,145:$VX,146:$VY}),o($Vt1,[2,150],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,145:$VX,146:$VY}),o($Vt1,[2,151],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,145:$VX,146:$VY}),{45:[1,251]},{45:[2,171]},{45:[2,172]},{45:[2,173]},o([5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,125,127,128,129,143,144,147,148,151,155,156,162,187,188],[2,154],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,145:$VX,146:$VY}),o([5,7,31,38,40,44,46,48,53,55,56,57,58,59,60,61,62,67,68,77,78,79,80,81,84,85,87,125,127,128,129,144,151,155,156,162,187,188],[2,155],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,145:$VX,146:$VY,147:$VZ,148:$V_}),{12:252,23:11,31:$V0,37:58,45:$Vg,47:$Vh,49:62,64:212,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:253,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{45:[1,254]},o($Vu1,[2,163],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,145:$VX,146:$VY}),o($Vu1,[2,164],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,145:$VX,146:$VY}),{46:[1,255],95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,141:127,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_},{44:$Vv1,46:[1,256]},o($V$,[2,121]),o($Vw1,[2,122],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($V$,$Vx1,{50:[1,258]}),o($V$,[2,93]),{93:[1,259]},o($V$,[2,158]),o($V$,[2,98]),{46:[1,260]},{124:261,125:$Vl1,126:221,127:$V31,129:$Vm1},{125:[1,262]},o($Vn1,[2,135]),{37:58,45:$Vg,47:$Vh,49:62,64:263,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{95:$VJ,128:[1,264],130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,141:127,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_},o($Vy1,[2,82],{29:265,87:[1,266]}),{69:[1,267]},{37:58,45:$Vg,47:$Vh,49:62,64:273,70:268,72:269,73:$Vz1,75:$VA1,76:$VB1,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($V51,[2,30]),o($Vp1,[2,40]),{39:274,47:$Va},{53:[2,46]},{53:[2,48]},{53:[2,50]},{47:[1,275],48:[1,276]},o($Vf1,[2,34]),o($Vf1,[2,37]),{45:[1,277]},{44:$VC1,46:[1,278]},o($Vw1,[2,187],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),{12:281,23:11,31:$V0,157:[1,280]},{47:$VF,91:$Vi,96:282},o($V8,[2,174],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($Vh1,[2,177]),o($Vh1,[2,178],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($Vi1,$Vx1,{50:[1,283]}),{47:$Vs1,48:[1,286],166:284,170:285,182:287},{47:[2,202]},o($V8,[2,229]),o($V8,[2,230]),{47:[1,290],183:288,185:[1,289]},{93:[1,291]},{12:292,23:11,31:$V0,37:58,45:$Vg,47:$Vh,49:62,64:212,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:293,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{46:[1,294]},{44:$Vv1,46:[1,295]},{12:296,23:11,31:$V0,37:58,45:$Vg,47:$Vh,49:62,64:212,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:297,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($V$,[2,112]),o($V$,[2,120]),{37:58,45:$Vg,47:$Vh,49:62,64:298,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{47:$VD1,95:[1,300]},o($V$,[2,97]),o($V$,[2,129]),{125:[1,301]},o($V$,[2,134]),{95:$VJ,125:[2,138],130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,141:127,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_},{37:58,45:$Vg,47:$Vh,49:62,64:302,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($VE1,[2,69],{30:303,78:[1,304],79:[1,305],80:[1,306]}),{37:307,92:$Vj},{37:58,45:$Vg,47:$Vh,49:62,64:310,82:308,83:309,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($V41,[2,67],{71:311,44:$VF1,77:[1,313]}),o($VG1,[2,61]),{74:[1,314]},{45:[1,315]},{45:[1,316]},o($VG1,[2,66],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($Vp1,[2,56],{54:317,63:[1,318],65:[1,319]}),o($Vf1,[2,31]),{47:[1,320]},{37:58,45:$Vg,47:$Vh,49:62,64:238,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC,159:321},o($VH1,[2,185]),{37:58,45:$Vg,47:$Vh,49:62,64:322,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{45:$Vg1,158:323},o($V8,[2,184]),o($Vf1,[2,196]),{47:$VD1},{46:[1,324]},{44:[1,325],46:[2,204]},{12:326,23:11,31:$V0},o($Vw1,[2,216]),o($VI1,[2,223],{184:327,145:[1,330],177:[1,328],180:[1,329]}),o($VI1,[2,219]),o($VJ1,[2,222],{45:[1,331]}),o($VI,[2,89]),{46:[1,332]},{44:$Vv1,46:[1,333]},o($V$,[2,159]),o($V$,[2,161]),{46:[1,334]},{44:$Vv1,46:[1,335]},o($Vw1,[2,123],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($V$,[2,95]),o($V$,[2,92]),o($V$,[2,133]),o($Vn1,[2,137],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($VE1,[2,18]),{12:336,23:11,31:$V0,35:[1,337]},{12:338,23:11,31:$V0},{12:339,23:11,31:$V0},o($Vy1,[2,84],{88:340,89:[1,341]}),o($Vo1,[2,75],{44:[1,342]}),o($VK1,[2,76]),o($VK1,[2,78],{141:127,84:[1,343],85:[1,344],95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($V41,[2,60]),{37:58,45:$Vg,47:$Vh,49:62,64:273,72:345,73:$Vz1,75:$VA1,76:$VB1,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:346,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{45:[1,347]},{37:58,45:$Vg,47:$Vh,49:62,64:273,70:348,72:269,73:$Vz1,75:$VA1,76:$VB1,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{37:58,45:$Vg,47:$Vh,49:62,64:273,70:349,72:269,73:$Vz1,75:$VA1,76:$VB1,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($Vp1,[2,42]),{37:58,45:$Vg,47:$Vh,49:62,64:350,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{47:$VF,66:351,91:$Vi,96:172},o($Vf1,[2,32]),{44:$VC1,46:[1,352]},o($Vw1,[2,188],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($V8,[2,182],{44:$Vq1}),o($V8,[2,197]),o($VL1,$VM1,{171:353,182:354,172:355,173:356,47:$Vs1,176:$VN1}),{46:[2,205]},o($VI1,[2,218]),{178:[1,358]},{178:[1,359]},{117:[1,360]},{186:[1,361]},o($V$,[2,152]),o($V$,[2,153]),o($V$,[2,160]),o($V$,[2,162]),o($VE1,[2,70]),{12:362,23:11,31:$V0},o($VE1,[2,72]),o($VE1,[2,73]),o($Vy1,[2,83]),{37:363,92:$Vj},{37:58,45:$Vg,47:$Vh,49:62,64:310,83:364,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},o($VK1,[2,79]),{86:[1,365]},o($VG1,[2,62]),o($V41,[2,68],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),{37:58,45:$Vg,47:$Vh,49:62,64:273,70:366,72:269,73:$Vz1,75:$VA1,76:$VB1,91:$Vi,92:$Vj,94:57,95:$Vk,96:56,97:53,98:54,99:55,100:59,101:60,102:61,103:63,104:64,105:65,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy,121:$Vz,122:$VA,132:$VB,145:$VC},{44:$VF1,46:[1,367]},{44:$VF1,46:[1,368]},o($Vp1,[2,54],{141:127,95:$VJ,130:$VK,131:$VL,132:$VM,133:$VN,134:$VO,135:$VP,136:$VQ,137:$VR,138:$VS,139:$VT,140:$VU,143:$VV,144:$VW,145:$VX,146:$VY,147:$VZ,148:$V_}),o($Vp1,[2,55],{44:$Vr1}),o($VH1,[2,186]),{44:[1,369],46:[2,203]},o($Vw1,[2,217]),o($Vw1,[2,206]),{174:370,175:371,177:[1,372],180:[1,373]},{47:[1,374]},o($VI1,[2,224]),{181:[1,375]},o($VI1,[2,226]),{46:[1,377],50:[1,376]},o($VE1,[2,71]),o($Vy1,[2,85]),o($VK1,[2,77]),o($VK1,[2,80],{84:[1,378]}),{44:$VF1,46:[1,379]},o($VG1,[2,64]),o($VG1,[2,65]),o($VL1,$VM1,{173:356,172:380,176:$VN1}),o($Vw1,[2,208]),o($Vw1,[2,209]),{178:[1,381]},{178:[1,382]},o($VL1,[2,211]),{47:[1,383]},{186:[1,384]},o($VJ1,[2,221]),o($VK1,[2,81]),o($VG1,[2,63]),o($Vw1,[2,207]),{45:[1,385]},{45:[1,386]},{45:[1,387]},{46:[1,388]},{47:$VO1,179:389},{47:[1,391]},{47:[1,392]},o($VJ1,[2,220]),{44:$VP1,46:[1,393]},o($Vw1,[2,214]),{46:[1,395]},{46:[1,396]},o($Vw1,[2,212]),{47:[1,397]},{181:[1,398]},o($VI1,[2,225]),o($Vw1,[2,215]),{47:[1,399]},{45:[1,400]},{47:$VO1,179:401},{44:$VP1,46:[1,402]},o($Vw1,[2,213])],
defaultActions: {19:[2,1],29:[2,199],30:[2,200],82:[2,113],83:[2,114],84:[2,115],85:[2,116],86:[2,117],87:[2,118],88:[2,119],156:[2,44],159:[2,49],161:[2,51],162:[2,52],163:[2,53],200:[2,171],201:[2,172],202:[2,173],230:[2,46],231:[2,48],232:[2,50],246:[2,202],326:[2,205]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 35
break;
case 2:return 188
break;
case 3:return 143
break;
case 4:return 61
break;
case 5:return 150
break;
case 6:return 48
break;
case 7:return 84
break;
case 8:return 110
break;
case 9:return 147
break;
case 10:return 148
break;
case 11:return 69
break;
case 12:return "CASE"
break;
case 13:return 85
break;
case 14:return "CONSTRAINT"
break;
case 15:return "COUNT"
break;
case 16:return 162
break;
case 17:return "CROSS"
break;
case 18:return 76
break;
case 19:return 155
break;
case 20:return 84
break;
case 21:return 32
break;
case 22:return 187
break;
case 23:return 125
break;
case 24:return 129
break;
case 25:return 79
break;
case 26:return 118
break;
case 27:return 9
break;
case 28:return 115
break;
case 29:return 111
break;
case 30:return 180
break;
case 31:return 40
break;
case 32:return 68
break;
case 33:return 73
break;
case 34:return 77
break;
case 35:return 169
break;
case 36:return 146
break;
case 37:return 55
break;
case 38:return 156
break;
case 39:return 80
break;
case 40:return 38
break;
case 41:return 53
break;
case 42:return 178
break;
case 43:return 112
break;
case 44:return 56
break;
case 45:return 130
break;
case 46:return 87
break;
case 47:return "MAX"
break;
case 48:return "MIN"
break;
case 49:return 86
break;
case 50:return 145
break;
case 51:return 117
break;
case 52:return 63
break;
case 53:return 89
break;
case 54:return 144
break;
case 55:return 81
break;
case 56:return 57
break;
case 57:return 11
break;
case 58:return 177
break;
case 59:return 10
break;
case 60:return 181
break;
case 61:return 189
break;
case 62:return 58
break;
case 63:return 75
break;
case 64:return 31
break;
case 65:return 60
break;
case 66:return 152
break;
case 67:return 74
break;
case 68:return 149
break;
case 69:return "SUM"
break;
case 70:return 164
break;
case 71:return 128
break;
case 72:return 190
break;
case 73:return 36
break;
case 74:return 114
break;
case 75:return 78
break;
case 76:return 151
break;
case 77:return 65
break;
case 78:return 157
break;
case 79:return 127
break;
case 80:return 67
break;
case 81:return 92
break;
case 82:return 131
break;
case 83:return 132
break;
case 84:return 95
break;
case 85:return 133
break;
case 86:return 134
break;
case 87:return 136
break;
case 88:return 135
break;
case 89:return 138
break;
case 90:return 140
break;
case 91:return 137
break;
case 92:return 139
break;
case 93:return 140
break;
case 94:return 45
break;
case 95:return 46
break;
case 96:return 91
break;
case 97:return 93
break;
case 98:return 50
break;
case 99:return 44
break;
case 100:return 120
break;
case 101:return 7
break;
case 102:return 119
break;
case 103:return 121
break;
case 104:return 47
break;
case 105:return 116
break;
case 106:return 116
break;
case 107:return 5
break;
case 108:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:COLLATE\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:REFERENCES\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}