/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,149,153,154,160,179,180],$V8=[5,7,31,149,153,154,160,179,180],$V9=[1,26],$Va=[45,47,91,103,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,130,143],$Vb=[2,23],$Vc=[1,36],$Vd=[5,7,31,40,44,45,46,47,51,53,54,55,56,57,58,59,60,61,63,65,66,76,77,78,79,85,149,150,153,154,155,160,179,180,181,183],$Ve=[1,69],$Vf=[1,66],$Vg=[1,70],$Vh=[1,81],$Vi=[1,82],$Vj=[1,83],$Vk=[1,84],$Vl=[1,85],$Vm=[1,86],$Vn=[1,87],$Vo=[1,71],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,79],$Vu=[1,76],$Vv=[1,77],$Vw=[1,78],$Vx=[1,80],$Vy=[1,68],$Vz=[1,67],$VA=[5,7,31,46,66,76,77,78,79,85,149,153,154,160,179,180],$VB=[1,94],$VC=[1,101],$VD=[38,40],$VE=[1,111],$VF=[38,40,44],$VG=[1,116],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[1,117],$VL=[1,118],$VM=[1,119],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,126],$VT=[1,127],$VU=[1,129],$VV=[1,128],$VW=[1,130],$VX=[1,131],$VY=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,91,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,142,143,144,145,146,149,153,154,160,179,180],$VZ=[2,88],$V_=[1,144],$V$=[5,7,31,46,76,77,78,79,85,149,153,154,160,179,180],$V01=[5,7,31,46,65,66,76,77,78,79,85,149,153,154,160,179,180],$V11=[5,7,31,44,46,65,66,76,77,78,79,85,149,153,154,160,179,180],$V21=[2,32],$V31=[1,150],$V41=[2,38],$V51=[1,153],$V61=[1,154],$V71=[1,155],$V81=[1,156],$V91=[1,157],$Va1=[1,158],$Vb1=[1,159],$Vc1=[1,160],$Vd1=[1,163],$Ve1=[5,7,31,44,65,149,153,154,160,179,180],$Vf1=[5,7,31,44,46,51,53,54,55,56,57,58,59,60,65,66,76,77,78,79,85,137,149,153,154,160,179,180],$Vg1=[35,147,148],$Vh1=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,123,125,126,127,128,129,130,133,134,135,136,137,138,141,142,143,144,145,146,149,153,154,160,179,180],$Vi1=[2,128],$Vj1=[1,211],$Vk1=[123,125,127],$Vl1=[5,7,31,46,76,77,78,85,149,153,154,160,179,180],$Vm1=[5,7,31,46,51,53,54,55,56,57,58,59,60,65,66,76,77,78,79,85,149,153,154,160,179,180],$Vn1=[1,222],$Vo1=[1,226],$Vp1=[5,7,31,44,46,51,53,54,55,56,57,58,59,60,65,66,76,77,78,79,85,149,153,154,160,179,180],$Vq1=[1,235],$Vr1=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,123,125,126,127,133,134,135,136,137,138,141,142,145,146,149,153,154,160,179,180],$Vs1=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,123,125,126,127,142,145,146,149,153,154,160,179,180],$Vt1=[1,242],$Vu1=[44,46],$Vv1=[2,87],$Vw1=[5,7,31,46,76,77,78,149,153,154,160,179,180],$Vx1=[1,254],$Vy1=[1,255],$Vz1=[1,256],$VA1=[1,262],$VB1=[1,281],$VC1=[5,7,31,46,149,153,154,160,179,180],$VD1=[1,294],$VE1=[5,7,31,44,46,75,76,77,78,79,85,149,153,154,160,179,180],$VF1=[5,7,31,44,149,153,154,160,179,180],$VG1=[5,7,31,44,46,149,153,154,160,179,180],$VH1=[5,7,31,44,46,143,149,153,154,160,175,179,180],$VI1=[5,7,31,44,46,76,77,78,85,149,153,154,160,179,180];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"TopClause":33,"ResultColumns":34,"ALL":35,"TOP":36,"NumValue":37,"INTO":38,"Table":39,"FROM":40,"FromTablesList":41,"JoinTablesList":42,"FromTable":43,"COMMA":44,"LPAR":45,"RPAR":46,"LITERAL":47,"DOT":48,"JoinTable":49,"JoinMode":50,"JOIN":51,"OnClause":52,"INNER":53,"LEFT":54,"RIGHT":55,"FULL":56,"OUTER":57,"SEMI":58,"ANTI":59,"CROSS":60,"ON":61,"Expression":62,"USING":63,"ColumnsList":64,"WHERE":65,"GROUP":66,"BY":67,"GroupExpressionsList":68,"HavingClause":69,"GroupExpression":70,"GROUPING":71,"SETS":72,"ROLLUP":73,"CUBE":74,"HAVING":75,"UNION":76,"EXCEPT":77,"INTERSECT":78,"ORDER":79,"OrderExpressionsList":80,"OrderExpression":81,"DIRECTION":82,"COLLATE":83,"NOCASE":84,"LIMIT":85,"OffsetClause":86,"OFFSET":87,"ResultColumn":88,"AS":89,"Star":90,"STAR":91,"Column":92,"AggrValue":93,"FuncValue":94,"Op":95,"LogicValue":96,"StringValue":97,"NullValue":98,"ParamValue":99,"ExistsValue":100,"CaseValue":101,"Aggregator":102,"SUM":103,"COUNT":104,"MIN":105,"MAX":106,"AVG":107,"FIRST":108,"LAST":109,"ExprList":110,"NUMBER":111,"TRUE":112,"FALSE":113,"STRING":114,"NULL":115,"EXISTS":116,"DOLLAR":117,"COLON":118,"QUESTION":119,"CASE":120,"WhensList":121,"ElseClause":122,"END":123,"When":124,"WHEN":125,"THEN":126,"ELSE":127,"LIKE":128,"PLUS":129,"MINUS":130,"SLASH":131,"PERCENT":132,"GT":133,"GE":134,"LT":135,"LE":136,"EQ":137,"NE":138,"CondOp":139,"AllSome":140,"AND":141,"OR":142,"NOT":143,"IN":144,"BETWEEN":145,"NOT_BETWEEN":146,"SOME":147,"ANY":148,"UPDATE":149,"SET":150,"SetColumnsList":151,"SetColumn":152,"DELETE":153,"INSERT":154,"VALUES":155,"ValuesListsList":156,"ValuesList":157,"Value":158,"DateValue":159,"CREATE":160,"TemporaryClause":161,"TABLE":162,"IfNotExists":163,"CreateTableDefClause":164,"ConstraintsClause":165,"TEMPORARY":166,"TEMP":167,"IF":168,"ColumnDefList":169,"ColumnDef":170,"ColumnTypeName":171,"ColumnConstraint":172,"ColumnConstraints":173,"SignedNumber":174,"PRIMARY":175,"KEY":176,"ConstraintsList":177,"Constraint":178,"DROP":179,"ALTER":180,"RENAME":181,"TO":182,"ADD":183,"COLUMN":184,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",35:"ALL",36:"TOP",38:"INTO",40:"FROM",44:"COMMA",45:"LPAR",46:"RPAR",47:"LITERAL",48:"DOT",51:"JOIN",53:"INNER",54:"LEFT",55:"RIGHT",56:"FULL",57:"OUTER",58:"SEMI",59:"ANTI",60:"CROSS",61:"ON",63:"USING",65:"WHERE",66:"GROUP",67:"BY",71:"GROUPING",72:"SETS",73:"ROLLUP",74:"CUBE",75:"HAVING",76:"UNION",77:"EXCEPT",78:"INTERSECT",79:"ORDER",82:"DIRECTION",83:"COLLATE",84:"NOCASE",85:"LIMIT",87:"OFFSET",89:"AS",91:"STAR",103:"SUM",104:"COUNT",105:"MIN",106:"MAX",107:"AVG",108:"FIRST",109:"LAST",111:"NUMBER",112:"TRUE",113:"FALSE",114:"STRING",115:"NULL",116:"EXISTS",117:"DOLLAR",118:"COLON",119:"QUESTION",120:"CASE",123:"END",125:"WHEN",126:"THEN",127:"ELSE",128:"LIKE",129:"PLUS",130:"MINUS",131:"SLASH",132:"PERCENT",133:"GT",134:"GE",135:"LT",136:"LE",137:"EQ",138:"NE",141:"AND",142:"OR",143:"NOT",144:"IN",145:"BETWEEN",146:"NOT_BETWEEN",147:"SOME",148:"ANY",149:"UPDATE",150:"SET",153:"DELETE",154:"INSERT",155:"VALUES",159:"DateValue",160:"CREATE",162:"TABLE",166:"TEMPORARY",167:"TEMP",168:"IF",173:"ColumnConstraints",174:"SignedNumber",175:"PRIMARY",176:"KEY",179:"DROP",180:"ALTER",181:"RENAME",182:"TO",183:"ADD",184:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,4],[23,4],[23,3],[33,2],[33,0],[24,0],[24,2],[25,2],[25,3],[41,1],[41,3],[43,4],[43,2],[43,1],[39,3],[39,1],[42,2],[42,1],[49,4],[50,0],[50,1],[50,1],[50,1],[50,2],[50,1],[50,1],[50,1],[50,1],[52,2],[52,2],[52,0],[26,0],[26,2],[27,0],[27,4],[68,1],[68,3],[70,5],[70,4],[70,4],[70,1],[69,0],[69,2],[30,0],[30,2],[30,3],[30,2],[30,2],[28,0],[28,3],[80,1],[80,3],[81,1],[81,2],[81,3],[81,4],[29,0],[29,3],[86,0],[86,2],[34,3],[34,1],[88,3],[88,1],[90,5],[90,3],[90,1],[92,5],[92,3],[92,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[93,4],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[94,4],[94,3],[110,1],[110,3],[37,1],[96,1],[96,1],[97,1],[98,1],[100,4],[99,2],[99,2],[99,1],[101,5],[101,4],[121,2],[121,1],[124,4],[122,2],[122,0],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,6],[95,6],[95,3],[95,3],[95,2],[95,2],[95,3],[95,5],[95,6],[95,5],[95,6],[95,3],[95,3],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[140,1],[140,1],[140,1],[14,6],[14,4],[151,1],[151,3],[152,3],[15,5],[15,3],[13,5],[13,8],[13,4],[13,7],[156,3],[156,5],[157,1],[157,3],[158,1],[158,1],[158,1],[158,1],[158,1],[158,1],[64,1],[64,3],[16,9],[161,0],[161,1],[161,1],[163,0],[163,3],[164,1],[164,2],[169,1],[169,3],[170,3],[170,2],[171,6],[171,4],[171,1],[172,0],[172,2],[172,2],[165,0],[177,3],[177,1],[178,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3: case 174:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 28: case 36: case 54: case 69: case 80: case 111: case 125: case 165: case 176: case 184:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 32: case 59: case 82: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 127: case 154: case 155: case 156: case 157: case 158: case 159:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 22:
 this.$ = {top: $$[$0]}; 
break;
case 23: case 49: case 50: case 52: case 60: case 62: case 67: case 75: case 77: case 187: case 190: case 211:
 this.$ = null; 
break;
case 24: case 201:
this.$ = null
break;
case 25:
this.$ = $$[$0]
break;
case 26:
 this.$ = { from: $$[$0] }; 
break;
case 27:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 29: case 55: case 166:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 30:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 31:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 33:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 34:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 35:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 37:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 38: case 39: case 46:
 this.$ = "INNER"; 
break;
case 40:
 this.$ = "LEFT"; 
break;
case 41:
 this.$ = "RIGHT"; 
break;
case 42: case 43:
 this.$ = "OUTER"; 
break;
case 44:
 this.$ = "SEMI"; 
break;
case 45:
 this.$ = "ANTI"; 
break;
case 47:
 this.$ = {on: $$[$0]}; 
break;
case 48:
 this.$ = {using: $$[$0]}; 
break;
case 51:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 53:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 56:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 57:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 58:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 61:
 this.$ = {having:$$[$0]}
break;
case 63:
 this.$ = {union: $$[$0]} ; 
break;
case 64:
 this.$ = {unionall: $$[$0]} ; 
break;
case 65:
 this.$ = {except: $$[$0]} ; 
break;
case 66:
 this.$ = {intersect: $$[$0]} ; 
break;
case 68:
 this.$ = {order:$$[$0]}
break;
case 70:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 71:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 72:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 73:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 74:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 76:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 78:
 this.$ = {offset:$$[$0]}
break;
case 79: case 195:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 81:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 83:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 84:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 85:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 86:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 87:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 88:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 101:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 109:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 110:
 this.$ = new yy.FuncValue({funcid: $$[$0-2]}); 
break;
case 112:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 113:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 114:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 115:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 116:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 117:
 this.$ = new yy.NullValue({value:null}); 
break;
case 118:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 119: case 120:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 121:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 122:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 123:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 124:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 126:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 128:
this.$ = null; 
break;
case 129:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 130:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 131:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 132:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 133:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 134:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 135:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 136:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 137:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 138:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 139:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 140:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 141:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 142:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 143:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 144:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 145:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 146:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 147:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 148:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 149:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 150:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 151:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 152:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 153:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 160:
 this.$ = 'ALL'; 
break;
case 161:
 this.$ = 'SOME'; 
break;
case 162:
 this.$ = 'ANY'; 
break;
case 163:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 164:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 167:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 168:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 169:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 170:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 171:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 172:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 173:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 175:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 177: case 185:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 186:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 188: case 189:
 this.$ = {temporary:true}; 
break;
case 191:
 this.$ = {ifnotexists: true}; 
break;
case 192:
 this.$ = {columns: $$[$0]}; 
break;
case 193:
 this.$ = {as: $$[$0]} 
break;
case 194:
 this.$ = [$$[$0]];
break;
case 196:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 197:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 198:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 199:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 200:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 202:
this.$ = {primarykey:true};
break;
case 203:
this.$ = {notnull:true};
break;
case 204:
this.$ = null;
break;
case 205:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 206:
this.$ = [$$[$0]];
break;
case 208:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 209:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 210:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,149:$V1,153:$V2,154:$V3,160:$V4,179:$V5,180:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,149:$V1,153:$V2,154:$V3,160:$V4,179:$V5,180:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,38:[1,23],40:[2,24]},{38:[1,24]},{39:25,47:$V9},{40:[1,27]},{161:28,162:[2,187],166:[1,29],167:[1,30]},{162:[1,31]},{162:[1,32]},o($Va,$Vb,{33:35,32:[1,33],35:[1,34],36:$Vc}),{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:37,40:[1,38]},{39:39,47:$V9},{39:40,47:$V9},{150:[1,41]},o($Vd,[2,34],{48:[1,42]}),{39:43,47:$V9},{162:[1,44]},{162:[2,188]},{162:[2,189]},{39:46,47:$V9,168:[1,45]},{39:47,47:$V9},o($Va,$Vb,{33:48,36:$Vc}),o($Va,$Vb,{33:49,36:$Vc}),{34:50,37:58,45:$Ve,47:$Vf,62:52,88:51,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:88,111:$Vo},o($VA,[2,50],{26:89,65:[1,90]}),{39:92,41:91,43:93,45:$VB,47:$V9},{40:[2,25]},{12:97,23:11,31:$V0,45:[1,96],155:[1,95]},{47:$VC,92:100,151:98,152:99},{47:[1,102]},o($V8,[2,169],{65:[1,103]}),{47:[2,190],163:104,168:[1,105]},{116:[1,106]},o($V8,[2,209]),{181:[1,107],183:[1,108]},{34:109,37:58,45:$Ve,47:$Vf,62:52,88:51,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{34:110,37:58,45:$Ve,47:$Vf,62:52,88:51,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($VD,[2,21],{44:$VE}),o($VF,[2,80]),o($VF,[2,82],{139:125,89:[1,112],91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($VY,[2,89]),o($VY,[2,90]),o($VY,[2,91]),o($VY,[2,92]),o($VY,[2,93]),o($VY,[2,94]),o($VY,[2,95]),o($VY,[2,96]),o($VY,[2,97]),o($VY,[2,98]),o($VY,[2,99]),o($VY,[2,100]),{45:[1,132]},o($VY,$VZ,{45:[1,133],48:[1,134]}),{37:58,45:$Ve,47:$Vf,62:135,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:136,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:137,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($VY,[2,85]),o([5,7,31,38,40,44,45,46,47,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,87,89,91,103,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,123,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,142,143,144,145,146,149,153,154,160,179,180],[2,113]),o($VY,[2,114]),o($VY,[2,115]),o($VY,[2,116]),o($VY,[2,117]),{47:[1,138]},{47:[1,139]},o($VY,[2,121]),{45:[1,140]},{37:58,45:$Ve,47:$Vf,62:141,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:142,124:143,125:$V_,130:$Vy,143:$Vz},{45:[2,102]},{45:[2,103]},{45:[2,104]},{45:[2,105]},{45:[2,106]},{45:[2,107]},{45:[2,108]},o($Va,[2,22]),o($V$,[2,52],{27:145,66:[1,146]}),{37:58,45:$Ve,47:$Vf,62:147,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($V01,[2,26],{44:[1,148]}),o($V11,$V21,{42:149,49:151,50:152,47:$V31,51:$V41,53:$V51,54:$V61,55:$V71,56:$V81,57:$V91,58:$Va1,59:$Vb1,60:$Vc1}),o($V11,[2,28]),{12:161,23:11,31:$V0},{45:$Vd1,156:162},{47:$VC,64:164,92:165},o($V8,[2,172]),o($V8,[2,164],{44:[1,167],65:[1,166]}),o($Ve1,[2,165]),{137:[1,168]},o($Vf1,$VZ,{48:[1,169]}),o($Vd,[2,33]),{37:58,45:$Ve,47:$Vf,62:170,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{39:171,47:$V9},{143:[1,172]},{39:173,47:$V9},{182:[1,174]},{184:[1,175]},o($VD,[2,19],{44:$VE}),o($VD,[2,20],{44:$VE}),{37:58,45:$Ve,47:$Vf,62:52,88:176,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{47:[1,177]},{37:58,45:$Ve,47:$Vf,62:178,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:179,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:180,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:181,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:182,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:183,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($Vg1,[2,154],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,102:65,62:184,45:$Ve,47:$Vf,91:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz}),o($Vg1,[2,155],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,102:65,62:185,45:$Ve,47:$Vf,91:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz}),o($Vg1,[2,156],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,102:65,62:186,45:$Ve,47:$Vf,91:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz}),o($Vg1,[2,157],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,102:65,62:187,45:$Ve,47:$Vf,91:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz}),o($Vg1,[2,158],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,102:65,62:188,45:$Ve,47:$Vf,91:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz}),o($Vg1,[2,159],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,102:65,62:189,45:$Ve,47:$Vf,91:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz}),{35:[1,191],140:190,147:[1,192],148:[1,193]},{37:58,45:$Ve,47:$Vf,62:194,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:195,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{45:[1,196]},{144:[1,197]},{37:58,45:$Ve,47:$Vf,62:198,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:199,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:200,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,46:[1,202],47:$Vf,62:203,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:201,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{47:[1,204],91:[1,205]},o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,123,125,126,127,133,134,135,136,137,138,141,142,143,144,145,146,149,153,154,160,179,180],[2,145],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL}),o($Vh1,[2,146],{139:125,91:$VG,131:$VK,132:$VL}),{46:[1,206],91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,139:125,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX},o($VY,[2,119]),o($VY,[2,120]),{12:207,23:11,31:$V0},{91:$VG,121:208,124:143,125:$V_,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,139:125,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX},{122:209,123:$Vi1,124:210,125:$V_,127:$Vj1},o($Vk1,[2,125]),{37:58,45:$Ve,47:$Vf,62:212,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($Vl1,[2,67],{28:213,79:[1,214]}),{67:[1,215]},o($VA,[2,51],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),{39:217,43:216,45:$VB,47:$V9},o($V01,[2,27],{50:152,49:218,51:$V41,53:$V51,54:$V61,55:$V71,56:$V81,57:$V91,58:$Va1,59:$Vb1,60:$Vc1}),o($V11,[2,31]),o($Vm1,[2,36]),{51:[1,219]},{51:[2,39]},{51:[2,40]},{51:[2,41]},{57:[1,220]},{51:[2,43]},{51:[2,44]},{51:[2,45]},{51:[2,46]},{46:[1,221]},o($V8,[2,170],{44:$Vn1}),{37:58,45:$Ve,47:$Vf,62:224,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz,157:223},{44:$Vo1,46:[1,225]},o($Vp1,[2,184]),{37:58,45:$Ve,47:$Vf,62:227,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{47:$VC,92:100,152:228},{37:58,45:$Ve,47:$Vf,62:229,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{47:[1,230]},o($V8,[2,168],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),{45:[1,231]},{116:[1,232]},o($V8,[2,208]),{47:[1,233]},{47:$Vq1,170:234},o($VF,[2,79]),o($VF,[2,81]),o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,123,125,126,127,128,133,134,135,136,137,138,141,142,143,144,145,146,149,153,154,160,179,180],[2,129],{139:125,91:$VG,129:$VI,130:$VJ,131:$VK,132:$VL}),o($Vh1,[2,130],{139:125,91:$VG,131:$VK,132:$VL}),o($Vh1,[2,131],{139:125,91:$VG,131:$VK,132:$VL}),o($VY,[2,132],{139:125}),o($VY,[2,133],{139:125}),o($VY,[2,134],{139:125}),o($Vr1,[2,135],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,143:$VU,144:$VV}),o($Vr1,[2,136],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,143:$VU,144:$VV}),o($Vr1,[2,137],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,143:$VU,144:$VV}),o($Vr1,[2,138],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,143:$VU,144:$VV}),o($Vr1,[2,139],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,143:$VU,144:$VV}),o($Vr1,[2,140],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,143:$VU,144:$VV}),{45:[1,236]},{45:[2,160]},{45:[2,161]},{45:[2,162]},o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,123,125,126,127,141,142,145,146,149,153,154,160,179,180],[2,143],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,143:$VU,144:$VV}),o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,123,125,126,127,142,149,153,154,160,179,180],[2,144],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,143:$VU,144:$VV,145:$VW,146:$VX}),{12:237,23:11,31:$V0,37:58,45:$Ve,47:$Vf,62:203,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:238,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{45:[1,239]},o($Vs1,[2,152],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,143:$VU,144:$VV}),o($Vs1,[2,153],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,143:$VU,144:$VV}),{46:[1,240],91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,139:125,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX},{44:$Vt1,46:[1,241]},o($VY,[2,110]),o($Vu1,[2,111],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($VY,$Vv1,{48:[1,243]}),o($VY,[2,84]),o($VY,[2,147]),{46:[1,244]},{122:245,123:$Vi1,124:210,125:$V_,127:$Vj1},{123:[1,246]},o($Vk1,[2,124]),{37:58,45:$Ve,47:$Vf,62:247,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{91:$VG,126:[1,248],128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,139:125,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX},o($Vw1,[2,75],{29:249,85:[1,250]}),{67:[1,251]},{37:58,45:$Ve,47:$Vf,62:257,68:252,70:253,71:$Vx1,73:$Vy1,74:$Vz1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($V11,[2,29]),o($V11,$V21,{47:$V31}),o($Vm1,[2,35]),{39:258,47:$V9},{51:[2,42]},{47:[1,259]},{45:[1,260]},{44:$VA1,46:[1,261]},o($Vu1,[2,176],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),{12:264,23:11,31:$V0,155:[1,263]},{47:$VC,92:265},o($V8,[2,163],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($Ve1,[2,166]),o($Ve1,[2,167],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($Vf1,$Vv1,{48:[1,266]}),{47:$Vq1,89:[1,269],164:267,169:268,170:270},{47:[2,191]},o($V8,[2,210]),o($V8,[2,211]),{47:[1,273],171:271,173:[1,272]},{12:274,23:11,31:$V0,37:58,45:$Ve,47:$Vf,62:203,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:275,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{46:[1,276]},{44:$Vt1,46:[1,277]},{12:278,23:11,31:$V0,37:58,45:$Ve,47:$Vf,62:203,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:279,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($VY,[2,101]),o($VY,[2,109]),{37:58,45:$Ve,47:$Vf,62:280,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{47:$VB1,91:[1,282]},o($VY,[2,118]),{123:[1,283]},o($VY,[2,123]),{91:$VG,123:[2,127],128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,139:125,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX},{37:58,45:$Ve,47:$Vf,62:284,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($VC1,[2,62],{30:285,76:[1,286],77:[1,287],78:[1,288]}),{37:289,111:$Vo},{37:58,45:$Ve,47:$Vf,62:292,80:290,81:291,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($V$,[2,60],{69:293,44:$VD1,75:[1,295]}),o($VE1,[2,54]),{72:[1,296]},{45:[1,297]},{45:[1,298]},o($VE1,[2,59],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($Vm1,[2,49],{52:299,61:[1,300],63:[1,301]}),o($V11,[2,30]),{37:58,45:$Ve,47:$Vf,62:224,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz,157:302},o($VF1,[2,174]),{37:58,45:$Ve,47:$Vf,62:303,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{45:$Vd1,156:304},o($V8,[2,173]),o($Vp1,[2,185]),{47:$VB1},{46:[2,204],165:305},{44:[1,306],46:[2,192]},{12:307,23:11,31:$V0},o($Vu1,[2,194]),o($VG1,[2,201],{172:308,143:[1,310],175:[1,309]}),o($VG1,[2,197]),o($VH1,[2,200],{45:[1,311]}),{46:[1,312]},{44:$Vt1,46:[1,313]},o($VY,[2,148]),o($VY,[2,150]),{46:[1,314]},{44:$Vt1,46:[1,315]},o($Vu1,[2,112],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($VY,[2,86]),o($VY,[2,83]),o($VY,[2,122]),o($Vk1,[2,126],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($VC1,[2,18]),{12:316,23:11,31:$V0,35:[1,317]},{12:318,23:11,31:$V0},{12:319,23:11,31:$V0},o($Vw1,[2,77],{86:320,87:[1,321]}),o($Vl1,[2,68],{44:[1,322]}),o($VI1,[2,69]),o($VI1,[2,71],{139:125,82:[1,323],83:[1,324],91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($V$,[2,53]),{37:58,45:$Ve,47:$Vf,62:257,70:325,71:$Vx1,73:$Vy1,74:$Vz1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:326,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{45:[1,327]},{37:58,45:$Ve,47:$Vf,62:257,68:328,70:253,71:$Vx1,73:$Vy1,74:$Vz1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{37:58,45:$Ve,47:$Vf,62:257,68:329,70:253,71:$Vx1,73:$Vy1,74:$Vz1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($Vm1,[2,37]),{37:58,45:$Ve,47:$Vf,62:330,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{47:$VC,64:331,92:165},{44:$VA1,46:[1,332]},o($Vu1,[2,177],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($V8,[2,171],{44:$Vn1}),{46:[1,333]},{47:$Vq1,170:334},{46:[2,193]},o($VG1,[2,196]),{176:[1,335]},{115:[1,336]},{174:[1,337]},o($VY,[2,141]),o($VY,[2,142]),o($VY,[2,149]),o($VY,[2,151]),o($VC1,[2,63]),{12:338,23:11,31:$V0},o($VC1,[2,65]),o($VC1,[2,66]),o($Vw1,[2,76]),{37:339,111:$Vo},{37:58,45:$Ve,47:$Vf,62:292,81:340,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},o($VI1,[2,72]),{84:[1,341]},o($VE1,[2,55]),o($V$,[2,61],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),{37:58,45:$Ve,47:$Vf,62:257,68:342,70:253,71:$Vx1,73:$Vy1,74:$Vz1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:65,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv,119:$Vw,120:$Vx,130:$Vy,143:$Vz},{44:$VD1,46:[1,343]},{44:$VD1,46:[1,344]},o($Vm1,[2,47],{139:125,91:$VG,128:$VH,129:$VI,130:$VJ,131:$VK,132:$VL,133:$VM,134:$VN,135:$VO,136:$VP,137:$VQ,138:$VR,141:$VS,142:$VT,143:$VU,144:$VV,145:$VW,146:$VX}),o($Vm1,[2,48],{44:$Vo1}),o($VF1,[2,175]),o($V8,[2,186]),o($Vu1,[2,195]),o($VG1,[2,202]),o($VG1,[2,203]),{46:[1,346],48:[1,345]},o($VC1,[2,64]),o($Vw1,[2,78]),o($VI1,[2,70]),o($VI1,[2,73],{82:[1,347]}),{44:$VD1,46:[1,348]},o($VE1,[2,57]),o($VE1,[2,58]),{174:[1,349]},o($VH1,[2,199]),o($VI1,[2,74]),o($VE1,[2,56]),{46:[1,350]},o($VH1,[2,198])],
defaultActions: {19:[2,1],29:[2,188],30:[2,189],39:[2,25],81:[2,102],82:[2,103],83:[2,104],84:[2,105],85:[2,106],86:[2,107],87:[2,108],153:[2,39],154:[2,40],155:[2,41],157:[2,43],158:[2,44],159:[2,45],160:[2,46],191:[2,160],192:[2,161],193:[2,162],220:[2,42],232:[2,191],307:[2,193]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 35
break;
case 2:return 180
break;
case 3:return 141
break;
case 4:return 59
break;
case 5:return 148
break;
case 6:return 89
break;
case 7:return 82
break;
case 8:return 107
break;
case 9:return 145
break;
case 10:return 146
break;
case 11:return 67
break;
case 12:return "CASE"
break;
case 13:return 83
break;
case 14:return "COUNT"
break;
case 15:return 160
break;
case 16:return "CROSS"
break;
case 17:return 74
break;
case 18:return 153
break;
case 19:return 82
break;
case 20:return 32
break;
case 21:return 179
break;
case 22:return 123
break;
case 23:return 127
break;
case 24:return 77
break;
case 25:return 116
break;
case 26:return 9
break;
case 27:return 113
break;
case 28:return 108
break;
case 29:return 40
break;
case 30:return 66
break;
case 31:return 71
break;
case 32:return 75
break;
case 33:return 168
break;
case 34:return 144
break;
case 35:return 53
break;
case 36:return 154
break;
case 37:return 78
break;
case 38:return 38
break;
case 39:return 51
break;
case 40:return 176
break;
case 41:return 109
break;
case 42:return 54
break;
case 43:return 128
break;
case 44:return 85
break;
case 45:return "MAX"
break;
case 46:return "MIN"
break;
case 47:return 84
break;
case 48:return 143
break;
case 49:return 115
break;
case 50:return 61
break;
case 51:return 87
break;
case 52:return 142
break;
case 53:return 79
break;
case 54:return 57
break;
case 55:return 11
break;
case 56:return 175
break;
case 57:return 10
break;
case 58:return 181
break;
case 59:return 55
break;
case 60:return 73
break;
case 61:return 31
break;
case 62:return 58
break;
case 63:return 150
break;
case 64:return 72
break;
case 65:return 147
break;
case 66:return "SUM"
break;
case 67:return 162
break;
case 68:return 126
break;
case 69:return 182
break;
case 70:return 36
break;
case 71:return 112
break;
case 72:return 76
break;
case 73:return 149
break;
case 74:return 63
break;
case 75:return 155
break;
case 76:return 125
break;
case 77:return 65
break;
case 78:return 111
break;
case 79:return 129
break;
case 80:return 130
break;
case 81:return 91
break;
case 82:return 131
break;
case 83:return 132
break;
case 84:return 134
break;
case 85:return 133
break;
case 86:return 136
break;
case 87:return 138
break;
case 88:return 135
break;
case 89:return 137
break;
case 90:return 138
break;
case 91:return 45
break;
case 92:return 46
break;
case 93:return 48
break;
case 94:return 44
break;
case 95:return 118
break;
case 96:return 7
break;
case 97:return 117
break;
case 98:return 119
break;
case 99:return 47
break;
case 100:return 114
break;
case 101:return 114
break;
case 102:return 5
break;
case 103:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}