/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,140,144,145,151,170,171],$V8=[5,7,31,140,144,145,151,170,171],$V9=[1,26],$Va=[45,47,91,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,134],$Vb=[2,23],$Vc=[1,36],$Vd=[5,7,31,40,44,45,46,47,51,53,54,55,56,57,58,59,60,61,63,65,66,76,77,78,79,85,140,141,144,145,146,151,170,171,172,174],$Ve=[1,68],$Vf=[1,65],$Vg=[1,69],$Vh=[1,79],$Vi=[1,80],$Vj=[1,81],$Vk=[1,82],$Vl=[1,83],$Vm=[1,84],$Vn=[1,85],$Vo=[1,70],$Vp=[1,67],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,78],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,66],$Vz=[1,87],$VA=[5,7,31,46,66,76,77,78,79,85,140,144,145,151,170,171],$VB=[1,93],$VC=[1,100],$VD=[38,40],$VE=[1,110],$VF=[38,40,44],$VG=[1,115],$VH=[1,114],$VI=[1,112],$VJ=[1,113],$VK=[1,116],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,125],$VT=[1,126],$VU=[1,128],$VV=[1,127],$VW=[1,129],$VX=[1,130],$VY=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,91,111,120,121,122,123,124,125,126,127,128,129,132,133,134,135,136,137,140,144,145,151,170,171],$VZ=[2,88],$V_=[5,7,31,46,76,77,78,79,85,140,144,145,151,170,171],$V$=[5,7,31,46,65,66,76,77,78,79,85,140,144,145,151,170,171],$V01=[5,7,31,44,46,65,66,76,77,78,79,85,140,144,145,151,170,171],$V11=[2,32],$V21=[1,147],$V31=[2,38],$V41=[1,150],$V51=[1,151],$V61=[1,152],$V71=[1,153],$V81=[1,154],$V91=[1,155],$Va1=[1,156],$Vb1=[1,157],$Vc1=[1,160],$Vd1=[5,7,31,44,65,140,144,145,151,170,171],$Ve1=[5,7,31,44,46,51,53,54,55,56,57,58,59,60,65,66,76,77,78,79,85,128,140,144,145,151,170,171],$Vf1=[35,138,139],$Vg1=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,111,120,121,124,125,126,127,128,129,132,133,134,135,136,137,140,144,145,151,170,171],$Vh1=[2,113],$Vi1=[5,7,31,46,76,77,78,85,140,144,145,151,170,171],$Vj1=[5,7,31,46,51,53,54,55,56,57,58,59,60,65,66,76,77,78,79,85,140,144,145,151,170,171],$Vk1=[1,214],$Vl1=[1,221],$Vm1=[1,224],$Vn1=[5,7,31,44,46,51,53,54,55,56,57,58,59,60,65,66,76,77,78,79,85,140,144,145,151,170,171],$Vo1=[1,233],$Vp1=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,124,125,126,127,128,129,132,133,136,137,140,144,145,151,170,171],$Vq1=[5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,133,136,137,140,144,145,151,170,171],$Vr1=[1,240],$Vs1=[44,46],$Vt1=[2,87],$Vu1=[5,7,31,46,76,77,78,140,144,145,151,170,171],$Vv1=[1,248],$Vw1=[1,249],$Vx1=[1,250],$Vy1=[1,256],$Vz1=[1,275],$VA1=[5,7,31,46,140,144,145,151,170,171],$VB1=[1,286],$VC1=[5,7,31,44,46,75,76,77,78,79,85,140,144,145,151,170,171],$VD1=[5,7,31,44,140,144,145,151,170,171],$VE1=[5,7,31,44,46,140,144,145,151,170,171],$VF1=[5,7,31,44,46,134,140,144,145,151,166,170,171],$VG1=[5,7,31,44,46,76,77,78,85,140,144,145,151,170,171];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"TopClause":33,"ResultColumns":34,"ALL":35,"TOP":36,"NumValue":37,"INTO":38,"Table":39,"FROM":40,"FromTablesList":41,"JoinTablesList":42,"FromTable":43,"COMMA":44,"LPAR":45,"RPAR":46,"LITERAL":47,"DOT":48,"JoinTable":49,"JoinMode":50,"JOIN":51,"OnClause":52,"INNER":53,"LEFT":54,"RIGHT":55,"FULL":56,"OUTER":57,"SEMI":58,"ANTI":59,"CROSS":60,"ON":61,"Expression":62,"USING":63,"ColumnsList":64,"WHERE":65,"GROUP":66,"BY":67,"GroupExpressionsList":68,"HavingClause":69,"GroupExpression":70,"GROUPING":71,"SETS":72,"ROLLUP":73,"CUBE":74,"HAVING":75,"UNION":76,"EXCEPT":77,"INTERSECT":78,"ORDER":79,"OrderExpressionsList":80,"OrderExpression":81,"DIRECTION":82,"COLLATE":83,"NOCASE":84,"LIMIT":85,"OffsetClause":86,"OFFSET":87,"ResultColumn":88,"AS":89,"Star":90,"STAR":91,"Column":92,"AggrValue":93,"FuncValue":94,"Op":95,"LogicValue":96,"StringValue":97,"NullValue":98,"ParamValue":99,"ExistsValue":100,"Aggregator":101,"SUM":102,"COUNT":103,"MIN":104,"MAX":105,"AVG":106,"FIRST":107,"LAST":108,"ExprList":109,"NUMBER":110,"MINUS":111,"TRUE":112,"FALSE":113,"STRING":114,"NULL":115,"EXISTS":116,"DOLLAR":117,"COLON":118,"QUESTION":119,"LIKE":120,"PLUS":121,"SLASH":122,"PERCENT":123,"GT":124,"GE":125,"LT":126,"LE":127,"EQ":128,"NE":129,"CondOp":130,"AllSome":131,"AND":132,"OR":133,"NOT":134,"IN":135,"BETWEEN":136,"NOT_BETWEEN":137,"SOME":138,"ANY":139,"UPDATE":140,"SET":141,"SetColumnsList":142,"SetColumn":143,"DELETE":144,"INSERT":145,"VALUES":146,"ValuesListsList":147,"ValuesList":148,"Value":149,"DateValue":150,"CREATE":151,"TemporaryClause":152,"TABLE":153,"IfNotExists":154,"CreateTableDefClause":155,"ConstraintsClause":156,"TEMPORARY":157,"TEMP":158,"IF":159,"ColumnDefList":160,"ColumnDef":161,"ColumnTypeName":162,"ColumnConstraint":163,"ColumnConstraints":164,"SignedNumber":165,"PRIMARY":166,"KEY":167,"ConstraintsList":168,"Constraint":169,"DROP":170,"ALTER":171,"RENAME":172,"TO":173,"ADD":174,"COLUMN":175,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",35:"ALL",36:"TOP",38:"INTO",40:"FROM",44:"COMMA",45:"LPAR",46:"RPAR",47:"LITERAL",48:"DOT",51:"JOIN",53:"INNER",54:"LEFT",55:"RIGHT",56:"FULL",57:"OUTER",58:"SEMI",59:"ANTI",60:"CROSS",61:"ON",63:"USING",65:"WHERE",66:"GROUP",67:"BY",71:"GROUPING",72:"SETS",73:"ROLLUP",74:"CUBE",75:"HAVING",76:"UNION",77:"EXCEPT",78:"INTERSECT",79:"ORDER",82:"DIRECTION",83:"COLLATE",84:"NOCASE",85:"LIMIT",87:"OFFSET",89:"AS",91:"STAR",102:"SUM",103:"COUNT",104:"MIN",105:"MAX",106:"AVG",107:"FIRST",108:"LAST",110:"NUMBER",111:"MINUS",112:"TRUE",113:"FALSE",114:"STRING",115:"NULL",116:"EXISTS",117:"DOLLAR",118:"COLON",119:"QUESTION",120:"LIKE",121:"PLUS",122:"SLASH",123:"PERCENT",124:"GT",125:"GE",126:"LT",127:"LE",128:"EQ",129:"NE",132:"AND",133:"OR",134:"NOT",135:"IN",136:"BETWEEN",137:"NOT_BETWEEN",138:"SOME",139:"ANY",140:"UPDATE",141:"SET",144:"DELETE",145:"INSERT",146:"VALUES",150:"DateValue",151:"CREATE",153:"TABLE",157:"TEMPORARY",158:"TEMP",159:"IF",164:"ColumnConstraints",165:"SignedNumber",166:"PRIMARY",167:"KEY",170:"DROP",171:"ALTER",172:"RENAME",173:"TO",174:"ADD",175:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,4],[23,4],[23,3],[33,2],[33,0],[24,0],[24,2],[25,2],[25,3],[41,1],[41,3],[43,4],[43,2],[43,1],[39,3],[39,1],[42,2],[42,1],[49,4],[50,0],[50,1],[50,1],[50,1],[50,2],[50,1],[50,1],[50,1],[50,1],[52,2],[52,2],[52,0],[26,0],[26,2],[27,0],[27,4],[68,1],[68,3],[70,5],[70,4],[70,4],[70,1],[69,0],[69,2],[30,0],[30,2],[30,3],[30,2],[30,2],[28,0],[28,3],[80,1],[80,3],[81,1],[81,2],[81,3],[81,4],[29,0],[29,3],[86,0],[86,2],[34,3],[34,1],[88,3],[88,1],[90,5],[90,3],[90,1],[92,5],[92,3],[92,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[93,4],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[94,4],[94,3],[109,1],[109,3],[37,1],[37,2],[96,1],[96,1],[97,1],[98,1],[100,4],[99,2],[99,2],[99,1],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,6],[95,6],[95,3],[95,3],[95,2],[95,2],[95,3],[95,5],[95,6],[95,5],[95,6],[95,3],[95,3],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[131,1],[131,1],[131,1],[14,6],[14,4],[142,1],[142,3],[143,3],[15,5],[15,3],[13,5],[13,8],[13,4],[13,7],[147,3],[147,5],[148,1],[148,3],[149,1],[149,1],[149,1],[149,1],[149,1],[149,1],[64,1],[64,3],[16,9],[152,0],[152,1],[152,1],[154,0],[154,3],[155,1],[155,2],[160,1],[160,3],[161,3],[161,2],[162,6],[162,4],[162,1],[163,0],[163,2],[163,2],[156,0],[168,3],[168,1],[169,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3: case 167:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 28: case 36: case 54: case 69: case 80: case 110: case 158: case 169: case 177:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 32: case 59: case 82: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 147: case 148: case 149: case 150: case 151: case 152:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 22:
 this.$ = {top: $$[$0]}; 
break;
case 23: case 49: case 50: case 52: case 60: case 62: case 67: case 75: case 77: case 180: case 183: case 204:
 this.$ = null; 
break;
case 24: case 194:
this.$ = null
break;
case 25:
this.$ = $$[$0]
break;
case 26:
 this.$ = { from: $$[$0] }; 
break;
case 27:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 29: case 55: case 159:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 30:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 31:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 33:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 34:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 35:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 37:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 38: case 39: case 46:
 this.$ = "INNER"; 
break;
case 40:
 this.$ = "LEFT"; 
break;
case 41:
 this.$ = "RIGHT"; 
break;
case 42: case 43:
 this.$ = "OUTER"; 
break;
case 44:
 this.$ = "SEMI"; 
break;
case 45:
 this.$ = "ANTI"; 
break;
case 47:
 this.$ = {on: $$[$0]}; 
break;
case 48:
 this.$ = {using: $$[$0]}; 
break;
case 51:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 53:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 56:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 57:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 58:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 61:
 this.$ = {having:$$[$0]}
break;
case 63:
 this.$ = {union: $$[$0]} ; 
break;
case 64:
 this.$ = {unionall: $$[$0]} ; 
break;
case 65:
 this.$ = {except: $$[$0]} ; 
break;
case 66:
 this.$ = {intersect: $$[$0]} ; 
break;
case 68:
 this.$ = {order:$$[$0]}
break;
case 70:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 71:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 72:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 73:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 74:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 76:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 78:
 this.$ = {offset:$$[$0]}
break;
case 79: case 188:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 81:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 83:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 84:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 85:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 86:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 87:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 88:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 100:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 108:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 109:
 this.$ = new yy.FuncValue({funcid: $$[$0-2]}); 
break;
case 111:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 112:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 113:
 this.$ = new yy.NumValue({value:-$$[$0]}); 
break;
case 114:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 115:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 116:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 117:
 this.$ = new yy.NullValue({value:null}); 
break;
case 118:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 119: case 120:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 121:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 122:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 123:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 124:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 125:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 126:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 127:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 128:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 129:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 130:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 131:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 132:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 133:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 134:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 135:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 136:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 137:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 138:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 139:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 140:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 141:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 142:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 143:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 144:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 145:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 146:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 153:
 this.$ = 'ALL'; 
break;
case 154:
 this.$ = 'SOME'; 
break;
case 155:
 this.$ = 'ANY'; 
break;
case 156:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 157:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 160:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 161:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 162:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 163:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 164:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 165:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 166:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 168:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 170: case 178:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 179:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 181: case 182:
 this.$ = {temporary:true}; 
break;
case 184:
 this.$ = {ifnotexists: true}; 
break;
case 185:
 this.$ = {columns: $$[$0]}; 
break;
case 186:
 this.$ = {as: $$[$0]} 
break;
case 187:
 this.$ = [$$[$0]];
break;
case 189:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 190:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 191:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 192:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 193:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 195:
this.$ = {primarykey:true};
break;
case 196:
this.$ = {notnull:true};
break;
case 197:
this.$ = null;
break;
case 198:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 199:
this.$ = [$$[$0]];
break;
case 201:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 202:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 203:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,140:$V1,144:$V2,145:$V3,151:$V4,170:$V5,171:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,140:$V1,144:$V2,145:$V3,151:$V4,170:$V5,171:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,38:[1,23],40:[2,24]},{38:[1,24]},{39:25,47:$V9},{40:[1,27]},{152:28,153:[2,180],157:[1,29],158:[1,30]},{153:[1,31]},{153:[1,32]},o($Va,$Vb,{33:35,32:[1,33],35:[1,34],36:$Vc}),{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:37,40:[1,38]},{39:39,47:$V9},{39:40,47:$V9},{141:[1,41]},o($Vd,[2,34],{48:[1,42]}),{39:43,47:$V9},{153:[1,44]},{153:[2,181]},{153:[2,182]},{39:46,47:$V9,159:[1,45]},{39:47,47:$V9},o($Va,$Vb,{33:48,36:$Vc}),o($Va,$Vb,{33:49,36:$Vc}),{34:50,37:58,45:$Ve,47:$Vf,62:52,88:51,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:86,110:$Vo,111:$Vz},o($VA,[2,50],{26:88,65:[1,89]}),{39:91,41:90,43:92,45:$VB,47:$V9},{40:[2,25]},{12:96,23:11,31:$V0,45:[1,95],146:[1,94]},{47:$VC,92:99,142:97,143:98},{47:[1,101]},o($V8,[2,162],{65:[1,102]}),{47:[2,183],154:103,159:[1,104]},{116:[1,105]},o($V8,[2,202]),{172:[1,106],174:[1,107]},{34:108,37:58,45:$Ve,47:$Vf,62:52,88:51,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{34:109,37:58,45:$Ve,47:$Vf,62:52,88:51,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($VD,[2,21],{44:$VE}),o($VF,[2,80]),o($VF,[2,82],{130:124,89:[1,111],91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($VY,[2,89]),o($VY,[2,90]),o($VY,[2,91]),o($VY,[2,92]),o($VY,[2,93]),o($VY,[2,94]),o($VY,[2,95]),o($VY,[2,96]),o($VY,[2,97]),o($VY,[2,98]),o($VY,[2,99]),{45:[1,131]},o($VY,$VZ,{45:[1,132],48:[1,133]}),{37:58,45:$Ve,47:$Vf,62:134,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:135,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:[1,136],111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:137,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($VY,[2,85]),o([5,7,31,38,40,44,45,46,47,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,87,89,91,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,133,134,135,136,137,140,144,145,151,170,171],[2,112]),o($VY,[2,114]),o($VY,[2,115]),o($VY,[2,116]),o($VY,[2,117]),{47:[1,138]},{47:[1,139]},o($VY,[2,121]),{45:[1,140]},{45:[2,101]},{45:[2,102]},{45:[2,103]},{45:[2,104]},{45:[2,105]},{45:[2,106]},{45:[2,107]},o($Va,[2,22]),{110:[1,141]},o($V_,[2,52],{27:142,66:[1,143]}),{37:58,45:$Ve,47:$Vf,62:144,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($V$,[2,26],{44:[1,145]}),o($V01,$V11,{42:146,49:148,50:149,47:$V21,51:$V31,53:$V41,54:$V51,55:$V61,56:$V71,57:$V81,58:$V91,59:$Va1,60:$Vb1}),o($V01,[2,28]),{12:158,23:11,31:$V0},{45:$Vc1,147:159},{47:$VC,64:161,92:162},o($V8,[2,165]),o($V8,[2,157],{44:[1,164],65:[1,163]}),o($Vd1,[2,158]),{128:[1,165]},o($Ve1,$VZ,{48:[1,166]}),o($Vd,[2,33]),{37:58,45:$Ve,47:$Vf,62:167,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{39:168,47:$V9},{134:[1,169]},{39:170,47:$V9},{173:[1,171]},{175:[1,172]},o($VD,[2,19],{44:$VE}),o($VD,[2,20],{44:$VE}),{37:58,45:$Ve,47:$Vf,62:52,88:173,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{47:[1,174]},{37:58,45:$Ve,47:$Vf,62:175,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:176,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:177,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:178,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:179,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:180,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($Vf1,[2,147],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,62:181,45:$Ve,47:$Vf,91:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy}),o($Vf1,[2,148],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,62:182,45:$Ve,47:$Vf,91:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy}),o($Vf1,[2,149],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,62:183,45:$Ve,47:$Vf,91:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy}),o($Vf1,[2,150],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,62:184,45:$Ve,47:$Vf,91:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy}),o($Vf1,[2,151],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,62:185,45:$Ve,47:$Vf,91:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy}),o($Vf1,[2,152],{93:53,94:54,95:55,92:56,90:57,37:58,96:59,97:60,98:61,99:62,100:63,101:64,62:186,45:$Ve,47:$Vf,91:$Vg,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy}),{35:[1,188],131:187,138:[1,189],139:[1,190]},{37:58,45:$Ve,47:$Vf,62:191,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:192,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{45:[1,193]},{135:[1,194]},{37:58,45:$Ve,47:$Vf,62:195,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:196,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:197,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,46:[1,199],47:$Vf,62:200,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:198,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{47:[1,201],91:[1,202]},o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,124,125,126,127,128,129,132,133,134,135,136,137,140,144,145,151,170,171],[2,138],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL}),o($Vg1,[2,139],{130:124,91:$VG,122:$VK,123:$VL}),o($VY,$Vh1),{46:[1,203],91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,130:124,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX},o($VY,[2,119]),o($VY,[2,120]),{12:204,23:11,31:$V0},o([5,7,31,44,45,46,47,76,77,78,87,91,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,134,140,144,145,151,170,171],$Vh1),o($Vi1,[2,67],{28:205,79:[1,206]}),{67:[1,207]},o($VA,[2,51],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),{39:209,43:208,45:$VB,47:$V9},o($V$,[2,27],{50:149,49:210,51:$V31,53:$V41,54:$V51,55:$V61,56:$V71,57:$V81,58:$V91,59:$Va1,60:$Vb1}),o($V01,[2,31]),o($Vj1,[2,36]),{51:[1,211]},{51:[2,39]},{51:[2,40]},{51:[2,41]},{57:[1,212]},{51:[2,43]},{51:[2,44]},{51:[2,45]},{51:[2,46]},{46:[1,213]},o($V8,[2,163],{44:$Vk1}),{37:217,96:219,97:218,98:220,99:222,110:$Vo,111:$Vz,112:$Vq,113:$Vr,114:$Vs,115:$Vt,117:$Vv,118:$Vw,119:$Vx,148:215,149:216,150:$Vl1},{44:$Vm1,46:[1,223]},o($Vn1,[2,177]),{37:58,45:$Ve,47:$Vf,62:225,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{47:$VC,92:99,143:226},{37:58,45:$Ve,47:$Vf,62:227,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{47:[1,228]},o($V8,[2,161],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),{45:[1,229]},{116:[1,230]},o($V8,[2,201]),{47:[1,231]},{47:$Vo1,161:232},o($VF,[2,79]),o($VF,[2,81]),o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,120,124,125,126,127,128,129,132,133,134,135,136,137,140,144,145,151,170,171],[2,122],{130:124,91:$VG,111:$VH,121:$VJ,122:$VK,123:$VL}),o($Vg1,[2,123],{130:124,91:$VG,122:$VK,123:$VL}),o($Vg1,[2,124],{130:124,91:$VG,122:$VK,123:$VL}),o($VY,[2,125],{130:124}),o($VY,[2,126],{130:124}),o($VY,[2,127],{130:124}),o($Vp1,[2,128],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,134:$VU,135:$VV}),o($Vp1,[2,129],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,134:$VU,135:$VV}),o($Vp1,[2,130],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,134:$VU,135:$VV}),o($Vp1,[2,131],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,134:$VU,135:$VV}),o($Vp1,[2,132],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,134:$VU,135:$VV}),o($Vp1,[2,133],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,134:$VU,135:$VV}),{45:[1,234]},{45:[2,153]},{45:[2,154]},{45:[2,155]},o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,132,133,136,137,140,144,145,151,170,171],[2,136],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,134:$VU,135:$VV}),o([5,7,31,38,40,44,46,51,53,54,55,56,57,58,59,60,65,66,75,76,77,78,79,82,83,85,89,133,140,144,145,151,170,171],[2,137],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,134:$VU,135:$VV,136:$VW,137:$VX}),{12:235,23:11,31:$V0,37:58,45:$Ve,47:$Vf,62:200,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:236,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{45:[1,237]},o($Vq1,[2,145],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,134:$VU,135:$VV}),o($Vq1,[2,146],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,134:$VU,135:$VV}),{46:[1,238],91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,130:124,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX},{44:$Vr1,46:[1,239]},o($VY,[2,109]),o($Vs1,[2,110],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($VY,$Vt1,{48:[1,241]}),o($VY,[2,84]),o($VY,[2,140]),{46:[1,242]},o($Vu1,[2,75],{29:243,85:[1,244]}),{67:[1,245]},{37:58,45:$Ve,47:$Vf,62:251,68:246,70:247,71:$Vv1,73:$Vw1,74:$Vx1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($V01,[2,29]),o($V01,$V11,{47:$V21}),o($Vj1,[2,35]),{39:252,47:$V9},{51:[2,42]},{47:[1,253]},{45:[1,254]},{44:$Vy1,46:[1,255]},o($Vs1,[2,169]),o($Vs1,[2,171]),o($Vs1,[2,172]),o($Vs1,[2,173]),o($Vs1,[2,174]),o($Vs1,[2,175]),o($Vs1,[2,176]),{12:258,23:11,31:$V0,146:[1,257]},{47:$VC,92:259},o($V8,[2,156],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($Vd1,[2,159]),o($Vd1,[2,160],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($Ve1,$Vt1,{48:[1,260]}),{47:$Vo1,89:[1,263],155:261,160:262,161:264},{47:[2,184]},o($V8,[2,203]),o($V8,[2,204]),{47:[1,267],162:265,164:[1,266]},{12:268,23:11,31:$V0,37:58,45:$Ve,47:$Vf,62:200,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:269,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{46:[1,270]},{44:$Vr1,46:[1,271]},{12:272,23:11,31:$V0,37:58,45:$Ve,47:$Vf,62:200,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:273,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($VY,[2,100]),o($VY,[2,108]),{37:58,45:$Ve,47:$Vf,62:274,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{47:$Vz1,91:[1,276]},o($VY,[2,118]),o($VA1,[2,62],{30:277,76:[1,278],77:[1,279],78:[1,280]}),{37:281,110:$Vo,111:$Vz},{37:58,45:$Ve,47:$Vf,62:284,80:282,81:283,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($V_,[2,60],{69:285,44:$VB1,75:[1,287]}),o($VC1,[2,54]),{72:[1,288]},{45:[1,289]},{45:[1,290]},o($VC1,[2,59],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($Vj1,[2,49],{52:291,61:[1,292],63:[1,293]}),o($V01,[2,30]),{37:217,96:219,97:218,98:220,99:222,110:$Vo,111:$Vz,112:$Vq,113:$Vr,114:$Vs,115:$Vt,117:$Vv,118:$Vw,119:$Vx,148:294,149:216,150:$Vl1},o($VD1,[2,167]),{37:217,96:219,97:218,98:220,99:222,110:$Vo,111:$Vz,112:$Vq,113:$Vr,114:$Vs,115:$Vt,117:$Vv,118:$Vw,119:$Vx,149:295,150:$Vl1},{45:$Vc1,147:296},o($V8,[2,166]),o($Vn1,[2,178]),{47:$Vz1},{46:[2,197],156:297},{44:[1,298],46:[2,185]},{12:299,23:11,31:$V0},o($Vs1,[2,187]),o($VE1,[2,194],{163:300,134:[1,302],166:[1,301]}),o($VE1,[2,190]),o($VF1,[2,193],{45:[1,303]}),{46:[1,304]},{44:$Vr1,46:[1,305]},o($VY,[2,141]),o($VY,[2,143]),{46:[1,306]},{44:$Vr1,46:[1,307]},o($Vs1,[2,111],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($VY,[2,86]),o($VY,[2,83]),o($VA1,[2,18]),{12:308,23:11,31:$V0,35:[1,309]},{12:310,23:11,31:$V0},{12:311,23:11,31:$V0},o($Vu1,[2,77],{86:312,87:[1,313]}),o($Vi1,[2,68],{44:[1,314]}),o($VG1,[2,69]),o($VG1,[2,71],{130:124,82:[1,315],83:[1,316],91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($V_,[2,53]),{37:58,45:$Ve,47:$Vf,62:251,70:317,71:$Vv1,73:$Vw1,74:$Vx1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:318,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{45:[1,319]},{37:58,45:$Ve,47:$Vf,62:251,68:320,70:247,71:$Vv1,73:$Vw1,74:$Vx1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{37:58,45:$Ve,47:$Vf,62:251,68:321,70:247,71:$Vv1,73:$Vw1,74:$Vx1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($Vj1,[2,37]),{37:58,45:$Ve,47:$Vf,62:322,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{47:$VC,64:323,92:162},{44:$Vy1,46:[1,324]},o($Vs1,[2,170]),o($V8,[2,164],{44:$Vk1}),{46:[1,325]},{47:$Vo1,161:326},{46:[2,186]},o($VE1,[2,189]),{167:[1,327]},{115:[1,328]},{165:[1,329]},o($VY,[2,134]),o($VY,[2,135]),o($VY,[2,142]),o($VY,[2,144]),o($VA1,[2,63]),{12:330,23:11,31:$V0},o($VA1,[2,65]),o($VA1,[2,66]),o($Vu1,[2,76]),{37:331,110:$Vo,111:$Vz},{37:58,45:$Ve,47:$Vf,62:284,81:332,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},o($VG1,[2,72]),{84:[1,333]},o($VC1,[2,55]),o($V_,[2,61],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),{37:58,45:$Ve,47:$Vf,62:251,68:334,70:247,71:$Vv1,73:$Vw1,74:$Vx1,90:57,91:$Vg,92:56,93:53,94:54,95:55,96:59,97:60,98:61,99:62,100:63,101:64,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,134:$Vy},{44:$VB1,46:[1,335]},{44:$VB1,46:[1,336]},o($Vj1,[2,47],{130:124,91:$VG,111:$VH,120:$VI,121:$VJ,122:$VK,123:$VL,124:$VM,125:$VN,126:$VO,127:$VP,128:$VQ,129:$VR,132:$VS,133:$VT,134:$VU,135:$VV,136:$VW,137:$VX}),o($Vj1,[2,48],{44:$Vm1}),o($VD1,[2,168]),o($V8,[2,179]),o($Vs1,[2,188]),o($VE1,[2,195]),o($VE1,[2,196]),{46:[1,338],48:[1,337]},o($VA1,[2,64]),o($Vu1,[2,78]),o($VG1,[2,70]),o($VG1,[2,73],{82:[1,339]}),{44:$VB1,46:[1,340]},o($VC1,[2,57]),o($VC1,[2,58]),{165:[1,341]},o($VF1,[2,192]),o($VG1,[2,74]),o($VC1,[2,56]),{46:[1,342]},o($VF1,[2,191])],
defaultActions: {19:[2,1],29:[2,181],30:[2,182],39:[2,25],79:[2,101],80:[2,102],81:[2,103],82:[2,104],83:[2,105],84:[2,106],85:[2,107],150:[2,39],151:[2,40],152:[2,41],154:[2,43],155:[2,44],156:[2,45],157:[2,46],188:[2,153],189:[2,154],190:[2,155],212:[2,42],230:[2,184],299:[2,186]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 35
break;
case 2:return 171
break;
case 3:return 132
break;
case 4:return 59
break;
case 5:return 139
break;
case 6:return 89
break;
case 7:return 82
break;
case 8:return 106
break;
case 9:return 136
break;
case 10:return 137
break;
case 11:return 67
break;
case 12:return 151
break;
case 13:return 83
break;
case 14:return "COUNT"
break;
case 15:return "CROSS"
break;
case 16:return 74
break;
case 17:return 144
break;
case 18:return 82
break;
case 19:return 32
break;
case 20:return 170
break;
case 21:return 77
break;
case 22:return 116
break;
case 23:return 9
break;
case 24:return 113
break;
case 25:return 107
break;
case 26:return 40
break;
case 27:return 66
break;
case 28:return 71
break;
case 29:return 75
break;
case 30:return 159
break;
case 31:return 135
break;
case 32:return 53
break;
case 33:return 145
break;
case 34:return 78
break;
case 35:return 38
break;
case 36:return 51
break;
case 37:return 167
break;
case 38:return 108
break;
case 39:return 54
break;
case 40:return 120
break;
case 41:return 85
break;
case 42:return "MAX"
break;
case 43:return "MIN"
break;
case 44:return 84
break;
case 45:return 134
break;
case 46:return 115
break;
case 47:return 61
break;
case 48:return 87
break;
case 49:return 133
break;
case 50:return 79
break;
case 51:return 57
break;
case 52:return 11
break;
case 53:return 166
break;
case 54:return 10
break;
case 55:return 172
break;
case 56:return 55
break;
case 57:return 73
break;
case 58:return 31
break;
case 59:return 58
break;
case 60:return 141
break;
case 61:return 72
break;
case 62:return 138
break;
case 63:return "SUM"
break;
case 64:return 153
break;
case 65:return 173
break;
case 66:return 36
break;
case 67:return 112
break;
case 68:return 76
break;
case 69:return 140
break;
case 70:return 63
break;
case 71:return 146
break;
case 72:return 65
break;
case 73:return 110
break;
case 74:return 121
break;
case 75:return 111
break;
case 76:return 91
break;
case 77:return 122
break;
case 78:return 123
break;
case 79:return 125
break;
case 80:return 124
break;
case 81:return 127
break;
case 82:return 129
break;
case 83:return 126
break;
case 84:return 128
break;
case 85:return 129
break;
case 86:return 45
break;
case 87:return 46
break;
case 88:return 48
break;
case 89:return 44
break;
case 90:return 118
break;
case 91:return 7
break;
case 92:return 117
break;
case 93:return 119
break;
case 94:return 47
break;
case 95:return 114
break;
case 96:return 114
break;
case 97:return 5
break;
case 98:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}