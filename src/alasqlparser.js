/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,6],$V1=[2,6],$V2=[1,24],$V3=[1,23],$V4=[1,18],$V5=[1,20],$V6=[1,17],$V7=[1,19],$V8=[1,16],$V9=[1,22],$Va=[5,6,45,51,75,76,86,87,88,89,95],$Vb=[1,44],$Vc=[50,52,99,100,103,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,141,154],$Vd=[2,28],$Ve=[1,48],$Vf=[5,6,51,75,76,86,87,88,89,95],$Vg=[5,6,36,45,49,50,51,52,53,58,62,63,64,65,66,67,68,69,70,71,73,75,76,86,87,88,89,95,161,166,168,201,203,205,207],$Vh=[1,88],$Vi=[1,85],$Vj=[1,89],$Vk=[1,91],$Vl=[1,90],$Vm=[1,101],$Vn=[1,102],$Vo=[1,103],$Vp=[1,104],$Vq=[1,105],$Vr=[1,106],$Vs=[1,107],$Vt=[1,92],$Vu=[1,93],$Vv=[1,94],$Vw=[1,95],$Vx=[1,99],$Vy=[1,96],$Vz=[1,97],$VA=[1,98],$VB=[1,100],$VC=[1,87],$VD=[1,86],$VE=[5,6,51,76,86,87,88,89,95],$VF=[1,127],$VG=[1,133],$VH=[5,6,43,45,51,75,76,86,87,88,89,95],$VI=[1,137],$VJ=[5,6,43,45,49,51,75,76,86,87,88,89,95],$VK=[1,142],$VL=[1,139],$VM=[1,140],$VN=[1,141],$VO=[1,143],$VP=[1,144],$VQ=[1,145],$VR=[1,146],$VS=[1,147],$VT=[1,148],$VU=[1,149],$VV=[1,150],$VW=[1,152],$VX=[1,153],$VY=[1,155],$VZ=[1,154],$V_=[1,156],$V$=[1,157],$V01=[5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,103,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157],$V11=[2,116],$V21=[1,159],$V31=[1,161],$V41=[5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,103,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,168,187,190,199,200],$V51=[5,6,43,45,49,51,52,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,103,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,168,187,190,199,200],$V61=[1,172],$V71=[1,184],$V81=[5,6,51,86,87,88,89,95],$V91=[5,6,49,51,75,76,86,87,88,89,95],$Va1=[2,57],$Vb1=[1,196],$Vc1=[1,197],$Vd1=[1,198],$Ve1=[1,200],$Vf1=[1,199],$Vg1=[1,201],$Vh1=[1,202],$Vi1=[1,203],$Vj1=[1,204],$Vk1=[5,6,49,51,58,62,63,64,65,66,67,68,69,70,75,76,86,87,88,89,95],$Vl1=[5,6,49,75],$Vm1=[5,6,49,51,58,62,63,64,65,66,67,68,69,70,75,76,86,87,88,89,95,148],$Vn1=[40,158,159],$Vo1=[5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,134,136,137,138,139,140,141,144,145,146,147,148,149,152,153,154,155,156,157],$Vp1=[2,162],$Vq1=[1,253],$Vr1=[134,136,138],$Vs1=[1,257],$Vt1=[1,264],$Vu1=[1,268],$Vv1=[5,6,51,86,87,88,95],$Vw1=[5,6,51,58,62,63,64,65,66,67,68,69,70,75,76,86,87,88,89,95],$Vx1=[5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,134,136,137,138,144,145,146,147,148,149,152,153,156,157],$Vy1=[5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,134,136,137,138,153,156,157],$Vz1=[1,293],$VA1=[49,51],$VB1=[2,113],$VC1=[1,305],$VD1=[1,313],$VE1=[5,6,51,86,87,88],$VF1=[1,322],$VG1=[1,323],$VH1=[1,324],$VI1=[1,341],$VJ1=[5,6,49,51],$VK1=[1,353],$VL1=[1,352],$VM1=[1,348],$VN1=[1,349],$VO1=[1,350],$VP1=[1,351],$VQ1=[5,6,49,51,154,168,187,190,199,200],$VR1=[1,356],$VS1=[5,6,49],$VT1=[5,6,51],$VU1=[1,373],$VV1=[5,6,49,51,85,86,87,88,89,95],$VW1=[5,6,51,58,62,63,64,65,66,67,68,69,70,71,73,75,76,86,87,88,89,95],$VX1=[187,190],$VY1=[2,234],$VZ1=[1,411],$V_1=[5,6,49,51,86,87,88,95];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"SEMICOLON":6,"Statement":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"AlterTable":12,"CreateDatabase":13,"CreateIndex":14,"CreateTable":15,"Delete":16,"DropDatabase":17,"DropIndex":18,"DropTable":19,"Insert":20,"Select":21,"UseDatabase":22,"Update":23,"WithSelectClause":24,"WITH":25,"WithTables":26,"RECURSIVE":27,"SelectClause":28,"IntoClause":29,"FromClause":30,"WhereClause":31,"GroupClause":32,"OrderClause":33,"LimitClause":34,"UnionClause":35,"SELECT":36,"DISTINCT":37,"TopClause":38,"ResultColumns":39,"ALL":40,"TOP":41,"NumValue":42,"INTO":43,"Table":44,"FROM":45,"FromTablesList":46,"FromTable":47,"JoinTablesList":48,"COMMA":49,"LPAR":50,"RPAR":51,"LITERAL":52,"AS":53,"ParamValue":54,"DOT":55,"JoinTable":56,"JoinMode":57,"JOIN":58,"JoinTableAs":59,"OnClause":60,"JoinModeMode":61,"NATURAL":62,"INNER":63,"LEFT":64,"OUTER":65,"RIGHT":66,"FULL":67,"SEMI":68,"ANTI":69,"CROSS":70,"ON":71,"Expression":72,"USING":73,"ColumnsList":74,"WHERE":75,"GROUP":76,"BY":77,"GroupExpressionsList":78,"HavingClause":79,"GroupExpression":80,"GROUPING":81,"SETS":82,"ROLLUP":83,"CUBE":84,"HAVING":85,"UNION":86,"EXCEPT":87,"INTERSECT":88,"ORDER":89,"OrderExpressionsList":90,"OrderExpression":91,"DIRECTION":92,"COLLATE":93,"NOCASE":94,"LIMIT":95,"OffsetClause":96,"OFFSET":97,"ResultColumn":98,"LBRA":99,"NUMBER":100,"RBRA":101,"Star":102,"STAR":103,"Column":104,"AggrValue":105,"FuncValue":106,"Op":107,"LogicValue":108,"StringValue":109,"NullValue":110,"ExistsValue":111,"CaseValue":112,"PrimitiveValue":113,"Aggregator":114,"SUM":115,"COUNT":116,"MIN":117,"MAX":118,"AVG":119,"FIRST":120,"LAST":121,"ExprList":122,"TRUE":123,"FALSE":124,"STRING":125,"NULL":126,"EXISTS":127,"DOLLAR":128,"COLON":129,"QUESTION":130,"CASE":131,"WhensList":132,"ElseClause":133,"END":134,"When":135,"WHEN":136,"THEN":137,"ELSE":138,"LIKE":139,"PLUS":140,"MINUS":141,"SLASH":142,"PERCENT":143,"GT":144,"GE":145,"LT":146,"LE":147,"EQ":148,"NE":149,"CondOp":150,"AllSome":151,"AND":152,"OR":153,"NOT":154,"IN":155,"BETWEEN":156,"NOT_BETWEEN":157,"SOME":158,"ANY":159,"UPDATE":160,"SET":161,"SetColumnsList":162,"SetColumn":163,"DELETE":164,"INSERT":165,"VALUES":166,"ValuesListsList":167,"DEFAULT":168,"ValuesList":169,"Value":170,"DateValue":171,"CREATE":172,"TemporaryClause":173,"TABLE":174,"IfNotExists":175,"CreateTableDefClause":176,"TEMPORARY":177,"TEMP":178,"IF":179,"ColumnDefsList":180,"ConstraintsList":181,"Constraint":182,"ConstraintName":183,"PrimaryKey":184,"ForeignKey":185,"CONSTRAINT":186,"PRIMARY":187,"KEY":188,"ColsList":189,"FOREIGN":190,"REFERENCES":191,"ColumnDef":192,"ColumnTypeName":193,"ColumnConstraintsClause":194,"ColumnConstraints":195,"SignedNumber":196,"ColumnConstraintsList":197,"ColumnConstraint":198,"AUTO_INCREMENT":199,"IDENTITY":200,"DROP":201,"ALTER":202,"RENAME":203,"TO":204,"ADD":205,"COLUMN":206,"MODIFY":207,"DATABASE":208,"USE":209,"INDEX":210,"UNIQUE":211,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",25:"WITH",27:"RECURSIVE",36:"SELECT",37:"DISTINCT",40:"ALL",41:"TOP",43:"INTO",45:"FROM",49:"COMMA",50:"LPAR",51:"RPAR",52:"LITERAL",53:"AS",55:"DOT",58:"JOIN",62:"NATURAL",63:"INNER",64:"LEFT",65:"OUTER",66:"RIGHT",67:"FULL",68:"SEMI",69:"ANTI",70:"CROSS",71:"ON",73:"USING",75:"WHERE",76:"GROUP",77:"BY",81:"GROUPING",82:"SETS",83:"ROLLUP",84:"CUBE",85:"HAVING",86:"UNION",87:"EXCEPT",88:"INTERSECT",89:"ORDER",92:"DIRECTION",93:"COLLATE",94:"NOCASE",95:"LIMIT",97:"OFFSET",99:"LBRA",100:"NUMBER",101:"RBRA",103:"STAR",115:"SUM",116:"COUNT",117:"MIN",118:"MAX",119:"AVG",120:"FIRST",121:"LAST",123:"TRUE",124:"FALSE",125:"STRING",126:"NULL",127:"EXISTS",128:"DOLLAR",129:"COLON",130:"QUESTION",131:"CASE",134:"END",136:"WHEN",137:"THEN",138:"ELSE",139:"LIKE",140:"PLUS",141:"MINUS",142:"SLASH",143:"PERCENT",144:"GT",145:"GE",146:"LT",147:"LE",148:"EQ",149:"NE",152:"AND",153:"OR",154:"NOT",155:"IN",156:"BETWEEN",157:"NOT_BETWEEN",158:"SOME",159:"ANY",160:"UPDATE",161:"SET",164:"DELETE",165:"INSERT",166:"VALUES",168:"DEFAULT",171:"DateValue",172:"CREATE",174:"TABLE",177:"TEMPORARY",178:"TEMP",179:"IF",186:"CONSTRAINT",187:"PRIMARY",188:"KEY",190:"FOREIGN",191:"REFERENCES",195:"ColumnConstraints",196:"SignedNumber",199:"AUTO_INCREMENT",200:"IDENTITY",201:"DROP",202:"ALTER",203:"RENAME",204:"TO",205:"ADD",206:"COLUMN",207:"MODIFY",208:"DATABASE",209:"USE",210:"INDEX",211:"UNIQUE"},
productions_: [0,[3,2],[4,3],[4,1],[8,2],[8,4],[7,0],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[24,3],[24,4],[24,1],[26,0],[21,8],[28,4],[28,4],[28,3],[38,2],[38,0],[29,0],[29,2],[30,2],[30,3],[30,0],[46,1],[46,3],[47,4],[47,5],[47,3],[47,2],[47,3],[47,1],[47,2],[47,3],[47,1],[44,3],[44,1],[48,2],[48,1],[56,4],[59,1],[59,2],[59,3],[59,2],[59,3],[59,4],[59,5],[57,0],[57,1],[57,2],[61,0],[61,1],[61,1],[61,2],[61,1],[61,2],[61,1],[61,2],[61,1],[61,1],[61,1],[60,2],[60,2],[60,0],[31,0],[31,2],[32,0],[32,4],[78,1],[78,3],[80,5],[80,4],[80,4],[80,1],[79,0],[79,2],[35,0],[35,2],[35,3],[35,2],[35,2],[33,0],[33,3],[90,1],[90,3],[91,1],[91,2],[91,3],[91,4],[34,0],[34,3],[96,0],[96,2],[39,3],[39,1],[98,3],[98,5],[98,3],[98,1],[102,5],[102,3],[102,1],[104,5],[104,3],[104,4],[104,3],[104,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[105,4],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[106,4],[106,3],[122,1],[122,3],[42,1],[108,1],[108,1],[109,1],[110,1],[111,4],[54,2],[54,2],[54,1],[112,5],[112,4],[132,2],[132,1],[135,4],[133,2],[133,0],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,6],[107,6],[107,3],[107,3],[107,2],[107,2],[107,3],[107,5],[107,6],[107,5],[107,6],[107,3],[107,3],[150,1],[150,1],[150,1],[150,1],[150,1],[150,1],[151,1],[151,1],[151,1],[23,6],[23,4],[162,1],[162,3],[163,3],[16,5],[16,3],[20,5],[20,5],[20,8],[20,4],[20,7],[167,3],[167,5],[169,1],[169,3],[170,1],[170,1],[170,1],[170,1],[170,1],[170,1],[74,1],[74,3],[15,8],[173,0],[173,1],[173,1],[175,0],[175,3],[176,3],[176,1],[176,2],[181,1],[181,3],[182,2],[182,2],[183,0],[183,2],[184,5],[185,10],[189,1],[189,3],[180,1],[180,3],[192,3],[192,2],[193,6],[193,4],[193,1],[194,0],[194,1],[197,2],[197,1],[198,2],[198,7],[198,1],[198,6],[198,2],[198,2],[19,5],[19,3],[12,6],[12,6],[12,6],[12,6],[13,3],[22,3],[22,2],[17,3],[14,8],[14,9],[18,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 3: case 34: case 48: case 78: case 93: case 104: case 145: case 159: case 199: case 211: case 219:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 5:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 6: case 28: case 33: case 73: case 74: case 76: case 84: case 86: case 91: case 99: case 101: case 222: case 225:
 this.$ = null; 
break;
case 19: case 20: case 41: case 83: case 108: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 161: case 188: case 189: case 190: case 191: case 192: case 193: case 248: case 250:
 this.$ = $$[$0]; 
break;
case 21:
 this.$ = $$[$0];
break;
case 23:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 24:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 25:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 26:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 27:
 this.$ = {top: $$[$0]}; 
break;
case 29: case 247:
this.$ = null
break;
case 30:
this.$ = $$[$0]
break;
case 31:
 this.$ = { from: $$[$0] }; 
break;
case 32:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 35: case 79: case 200:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 36:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 37:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 38:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 39:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 40:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 42:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 43:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 44:
 this.$ = $$[$0]; $$[$0].as = 'delault'; 
break;
case 45:
 this.$ = new yy.Table({databaseid: $$[$0-2].toLowerCase(), tableid:$$[$0].toLowerCase()});
break;
case 46:
 this.$ = new yy.Table({tableid: $$[$0].toLowerCase()});
break;
case 47:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 49:
 this.$ = new yy.Join($$[$0-3]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 50:
 this.$ = {table: $$[$0]}; 
break;
case 51:
 this.$ = {table: $$[$0-1], as: $$[$0].toLowerCase() } ; 
break;
case 52:
 this.$ = {table: $$[$0-2], as: $$[$0].toLowerCase() } ; 
break;
case 53:
 this.$ = {param: $$[$0-1], as: $$[$0].toLowerCase() } ; 
break;
case 54:
 this.$ = {param: $$[$0-2], as: $$[$0].toLowerCase() } ; 
break;
case 55:
 this.$ = {select: $$[$0-3], as: $$[$0].toLowerCase() } ; 
break;
case 56:
 this.$ = {select: $$[$0-4], as: $$[$0].toLowerCase() } ; 
break;
case 57:
 this.$ = {joinmode: "INNER"}; 
break;
case 58:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 59:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 60: case 61:
 this.$ = "INNER"; 
break;
case 62: case 63:
 this.$ = "LEFT"; 
break;
case 64: case 65:
 this.$ = "RIGHT"; 
break;
case 66: case 67:
 this.$ = "OUTER"; 
break;
case 68:
 this.$ = "SEMI"; 
break;
case 69:
 this.$ = "ANTI"; 
break;
case 70:
 this.$ = "CROSS"; 
break;
case 71:
 this.$ = {on: $$[$0]}; 
break;
case 72:
 this.$ = {using: $$[$0]}; 
break;
case 75:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 77:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 80:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 81:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 82:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 85:
 this.$ = {having:$$[$0]}
break;
case 87:
 this.$ = {union: $$[$0]} ; 
break;
case 88:
 this.$ = {unionall: $$[$0]} ; 
break;
case 89:
 this.$ = {except: $$[$0]} ; 
break;
case 90:
 this.$ = {intersect: $$[$0]} ; 
break;
case 92:
 this.$ = {order:$$[$0]}
break;
case 94:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 95:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 96:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 97:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 98:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 100:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 102:
 this.$ = {offset:$$[$0]}
break;
case 103: case 231: case 241:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 105:
 $$[$0-2].as = $$[$0].toLowerCase(); this.$ = $$[$0-2];
break;
case 106:
 $$[$0-4].as = $$[$0-1]; this.$ = $$[$0-4];
break;
case 107:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 109:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2].toLowerCase(), databaseid:$$[$0-4]}); 
break;
case 110:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2].toLowerCase()}); 
break;
case 111:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 112:
 this.$ = new yy.Column({columnid: $$[$0].toLowerCase(), tableid: $$[$0-2].toLowerCase(), databaseid:$$[$0-4].toLowerCase()});
break;
case 113:
 this.$ = new yy.Column({columnid: $$[$0].toLowerCase(), tableid: $$[$0-2].toLowerCase()});
break;
case 114:
 this.$ = new yy.Column({columnid: $$[$0-1], tableid: $$[$0-3].toLowerCase()});
break;
case 115:
 this.$ = new yy.Column({columnid: $$[$0-1]});
break;
case 116:
 this.$ = new yy.Column({columnid: $$[$0].toLowerCase()});
break;
case 135:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 136:
 this.$ = "SUM"; 
break;
case 137:
 this.$ = "COUNT"; 
break;
case 138:
 this.$ = "MIN"; 
break;
case 139:
 this.$ = "MAX"; 
break;
case 140:
 this.$ = "AVG"; 
break;
case 141:
 this.$ = "FIRST"; 
break;
case 142:
 this.$ = "LAST"; 
break;
case 143:
 this.$ = new yy.FuncValue({funcid: $$[$0-3].toLowerCase(), args: $$[$0-1]}); 
break;
case 144:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2].toLowerCase() }) 
break;
case 146:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 147:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 148:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 149:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 150:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 151:
 this.$ = new yy.NullValue({value:null}); 
break;
case 152:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 153: case 154:
 this.$ = new yy.ParamValue({param: $$[$0].toLowerCase()}); 
break;
case 155:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 156:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 157:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 158:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 160:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 162:
this.$ = null; 
break;
case 163:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 164:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 165:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 166:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 167:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 168:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 169:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 170:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 171:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 172:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 173:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 174:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 175:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 176:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 177:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 178:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 179:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 180:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 181:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 182:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 183:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 184:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 185:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 186:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 187:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 194:
 this.$ = 'ALL'; 
break;
case 195:
 this.$ = 'SOME'; 
break;
case 196:
 this.$ = 'ANY'; 
break;
case 197:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 198:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 201:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 202:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 203:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 204:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 205:
 this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; 
break;
case 206:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 207:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 208:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 209:
 this.$ = [$$[$0-1]]; 
break;
case 210:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 212: case 220:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 221:
 
			this.$ = new yy.CreateTable({table:$$[$0-3]}); 
			yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-4]); 
			yy.extend(this.$,$$[$0-1]); 
			yy.extend(this.$,$$[$0]);
		
break;
case 223: case 224:
 this.$ = {temporary:true}; 
break;
case 226:
 this.$ = {ifnotexists: true}; 
break;
case 227:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 228:
 this.$ = {columns: $$[$0]}; 
break;
case 229:
 this.$ = {as: $$[$0]} 
break;
case 230: case 240:
 this.$ = [$$[$0]];
break;
case 232: case 233:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 234:
 this.$ = null 
break;
case 235:
 this.$ = $$[$0].toLowerCase(); 
break;
case 236:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 237:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-6].toLowerCase(), tableid: $$[$0-7].toLowerCase(), refcolumns: $$[$0-4]}; 
break;
case 238:
 this.$ = [$$[$0].toLowerCase()]; 
break;
case 239:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0].toLowerCase()); 
break;
case 242:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2].toLowerCase()}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 243:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1].toLowerCase()}); yy.extend(this.$,$$[$0]); 
break;
case 244:
 this.$ = {dbtypeid: $$[$0-5].toUpperCase(), dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 245:
 this.$ = {dbtypeid: $$[$0-3].toUpperCase(), dbsize: $$[$0-1]} 
break;
case 246:
 this.$ = {dbtypeid: $$[$0].toUpperCase()} 
break;
case 249:
 yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];
break;
case 251:
this.$ = {primarykey:true};
break;
case 252:
this.$ = {foreignkey:{tableid:$$[$0-3].toLowerCase(), columnid: $$[$0-1].toLowerCase()}};
break;
case 253:
this.$ = {auto_increment:true};
break;
case 254:
 this.$ = {identity: [$$[$0-3],$$[$0-1]]} 
break;
case 255:
this.$ = {default:$$[$0]};
break;
case 256:
this.$ = {notnull:true};
break;
case 257:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 258:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 259:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0].toLowerCase()});
break;
case 260:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 261:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 262:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0].toLowerCase()});
break;
case 263:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0].toLowerCase() });
break;
case 264: case 265:
 this.$ = new yy.UseDatabase({databaseid: $$[$0].toLowerCase() });
break;
case 266:
 this.$ = new yy.DropDatabase({databaseid: $$[$0].toLowerCase() });
break;
case 267:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5].toLowerCase(), table:$$[$0-3], columns:$$[$0-1]})
break;
case 268:
 this.$ = new yy.CreateIndex({indexid:$$[$0-6].toLowerCase(), table:$$[$0-4], columns:$$[$0-2], unique:true})
break;
case 269:
 this.$ = new yy.DropIndex({indexid:$$[$0].toLowerCase()});
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,28:21,36:$V2,160:$V3,164:$V4,165:$V5,172:$V6,201:$V7,202:$V8,209:$V9}),{1:[3]},{5:[1,25],6:[1,26]},o($V0,[2,3]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),{174:[1,27]},{173:31,174:[2,222],177:[1,32],178:[1,33],208:[1,28],210:[1,29],211:[1,30]},{45:[1,34]},{174:[1,37],208:[1,35],210:[1,36]},{43:[1,38]},o($Va,[2,29],{29:39,43:[1,40]}),{52:[1,42],208:[1,41]},{44:43,52:$Vb},o($Vc,$Vd,{38:47,37:[1,45],40:[1,46],41:$Ve}),{1:[2,1]},o($V0,$V1,{12:4,13:5,14:6,15:7,16:8,17:9,18:10,19:11,20:12,21:13,22:14,23:15,28:21,7:49,36:$V2,160:$V3,164:$V4,165:$V5,172:$V6,201:$V7,202:$V8,209:$V9}),{44:50,52:$Vb},{52:[1,51]},{52:[1,52]},{210:[1,53]},{174:[1,54]},{174:[2,223]},{174:[2,224]},{44:55,52:$Vb},{52:[1,56]},{52:[1,57]},{44:59,52:$Vb,179:[1,58]},{44:60,52:$Vb},o($Vf,[2,33],{30:61,45:[1,62]}),{44:63,52:$Vb},{52:[1,64]},o($V0,[2,265]),{161:[1,65]},o($Vg,[2,46],{55:[1,66]}),o($Vc,$Vd,{38:67,41:$Ve}),o($Vc,$Vd,{38:68,41:$Ve}),{39:69,42:77,50:$Vh,52:$Vi,54:81,72:71,98:70,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:108,100:$Vk},o($V0,[2,2]),{201:[1,112],203:[1,109],205:[1,110],207:[1,111]},o($V0,[2,263]),{71:[1,113]},{52:[1,114]},{52:[2,225],175:115,179:[1,116]},o($V0,[2,203],{75:[1,117]}),o($V0,[2,266]),o($V0,[2,269]),{127:[1,118]},o($V0,[2,258]),{21:122,28:21,36:$V2,50:[1,121],166:[1,119],168:[1,120]},o($VE,[2,74],{31:123,75:[1,124]}),{44:128,46:125,47:126,50:$VF,52:$Vb,54:129,128:$Vy,129:$Vz,130:$VA},o($Va,[2,30]),o($V0,[2,264]),{52:$VG,99:$Vj,104:132,162:130,163:131},{52:[1,134]},{39:135,42:77,50:$Vh,52:$Vi,54:81,72:71,98:70,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{39:136,42:77,50:$Vh,52:$Vi,54:81,72:71,98:70,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($VH,[2,26],{49:$VI}),o($VJ,[2,104]),o($VJ,[2,108],{150:151,53:[1,138],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V01,[2,117]),o($V01,[2,118]),o($V01,[2,119]),o($V01,[2,120]),o($V01,[2,121]),o($V01,[2,122]),o($V01,[2,123]),o($V01,[2,124]),o($V01,[2,125]),o($V01,[2,126]),o($V01,[2,127]),o($V01,[2,128]),{50:[1,158]},o($V01,$V11,{50:$V21,55:[1,160],99:$V31}),{42:77,50:$Vh,52:$Vi,54:81,72:162,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:163,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:164,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{100:[1,165]},o($V01,[2,111]),o([5,6,43,45,49,50,51,52,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,97,99,100,103,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,168,187,190,199,200],[2,147]),o($V41,[2,148]),o($V41,[2,149]),o($V41,[2,150]),o($V41,[2,151]),{52:[1,166]},{52:[1,167]},o($V51,[2,155]),{50:[1,168]},{42:77,50:$Vh,52:$Vi,54:81,72:169,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:170,135:171,136:$V61,141:$VC,154:$VD},{50:[2,136]},{50:[2,137]},{50:[2,138]},{50:[2,139]},{50:[2,140]},{50:[2,141]},{50:[2,142]},o($Vc,[2,27]),{204:[1,173]},{206:[1,174]},{206:[1,175]},{206:[1,176]},{44:177,52:$Vb},{71:[1,178]},{44:179,52:$Vb},{154:[1,180]},{42:77,50:$Vh,52:$Vi,54:81,72:181,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{44:182,52:$Vb},{50:$V71,167:183},{166:[1,185]},{52:$VG,74:186,99:$Vj,104:187},o($V0,[2,207]),o($V81,[2,76],{32:188,76:[1,189]}),{42:77,50:$Vh,52:$Vi,54:81,72:190,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($Vf,[2,31],{49:[1,191]}),o($V91,[2,34],{48:192,56:193,57:194,61:195,58:$Va1,62:$Vb1,63:$Vc1,64:$Vd1,65:$Ve1,66:$Vf1,67:$Vg1,68:$Vh1,69:$Vi1,70:$Vj1}),{21:205,28:21,36:$V2},o($Vk1,[2,41],{52:[1,206],53:[1,207]}),o($Vk1,[2,44],{52:[1,208],53:[1,209]}),o($V0,[2,198],{49:[1,211],75:[1,210]}),o($Vl1,[2,199]),{148:[1,212]},o($Vm1,$V11,{55:[1,213],99:$V31}),o($Vg,[2,45]),o($VH,[2,24],{49:$VI}),o($VH,[2,25],{49:$VI}),{42:77,50:$Vh,52:$Vi,54:81,72:71,98:214,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:[1,215],99:[1,216],100:[1,217]},{42:77,50:$Vh,52:$Vi,54:81,72:218,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:219,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:220,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:221,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:222,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:223,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($Vn1,[2,188],{105:72,106:73,107:74,104:75,102:76,42:77,108:78,109:79,110:80,54:81,111:82,112:83,114:84,72:224,50:$Vh,52:$Vi,99:$Vj,100:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vn1,[2,189],{105:72,106:73,107:74,104:75,102:76,42:77,108:78,109:79,110:80,54:81,111:82,112:83,114:84,72:225,50:$Vh,52:$Vi,99:$Vj,100:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vn1,[2,190],{105:72,106:73,107:74,104:75,102:76,42:77,108:78,109:79,110:80,54:81,111:82,112:83,114:84,72:226,50:$Vh,52:$Vi,99:$Vj,100:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vn1,[2,191],{105:72,106:73,107:74,104:75,102:76,42:77,108:78,109:79,110:80,54:81,111:82,112:83,114:84,72:227,50:$Vh,52:$Vi,99:$Vj,100:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vn1,[2,192],{105:72,106:73,107:74,104:75,102:76,42:77,108:78,109:79,110:80,54:81,111:82,112:83,114:84,72:228,50:$Vh,52:$Vi,99:$Vj,100:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),o($Vn1,[2,193],{105:72,106:73,107:74,104:75,102:76,42:77,108:78,109:79,110:80,54:81,111:82,112:83,114:84,72:229,50:$Vh,52:$Vi,99:$Vj,100:$Vk,103:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD}),{40:[1,231],151:230,158:[1,232],159:[1,233]},{42:77,50:$Vh,52:$Vi,54:81,72:234,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:235,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{50:[1,236]},{155:[1,237]},{42:77,50:$Vh,52:$Vi,54:81,72:238,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:239,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:240,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,51:[1,242],52:$Vi,54:81,72:243,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:241,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:[1,244],103:[1,245]},{100:[1,246]},o([5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,134,136,137,138,144,145,146,147,148,149,152,153,154,155,156,157],[2,179],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP}),o($Vo1,[2,180],{150:151,103:$VK,142:$VO,143:$VP}),{51:[1,247],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:151,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},{101:[1,248]},o($V51,[2,153]),o($V51,[2,154]),{21:249,28:21,36:$V2},{103:$VK,132:250,135:171,136:$V61,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:151,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},{133:251,134:$Vp1,135:252,136:$V61,138:$Vq1},o($Vr1,[2,159]),{42:77,50:$Vh,52:$Vi,54:81,72:254,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:[1,255]},{52:$Vs1,192:256},{52:$Vs1,192:258},{52:[1,259]},{50:[1,260]},{44:261,52:$Vb},{50:[1,262]},{127:[1,263]},o($V0,[2,202],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V0,[2,257]),o($V0,[2,204],{49:$Vt1}),{42:77,50:$Vh,52:$Vi,54:81,72:266,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD,169:265},o($V0,[2,205]),{49:$Vu1,51:[1,267]},o($Vk1,[2,219]),o($Vv1,[2,91],{33:269,89:[1,270]}),{77:[1,271]},o($VE,[2,75],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),{44:128,47:272,50:$VF,52:$Vb,54:129,128:$Vy,129:$Vz,130:$VA},o($Vf,[2,32],{57:194,61:195,56:273,58:$Va1,62:$Vb1,63:$Vc1,64:$Vd1,65:$Ve1,66:$Vf1,67:$Vg1,68:$Vh1,69:$Vi1,70:$Vj1}),o($Vw1,[2,48]),{58:[1,274]},{58:[2,58]},{58:[2,60],61:275,63:$Vc1,64:$Vd1,65:$Ve1,66:$Vf1,67:$Vg1,68:$Vh1,69:$Vi1,70:$Vj1},{58:[2,61]},{58:[2,62],65:[1,276]},{58:[2,64],65:[1,277]},{58:[2,66]},{65:[1,278]},{58:[2,68]},{58:[2,69]},{58:[2,70]},{51:[1,279]},o($Vk1,[2,39]),{52:[1,280]},o($Vk1,[2,42]),{52:[1,281]},{42:77,50:$Vh,52:$Vi,54:81,72:282,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:$VG,99:$Vj,104:132,163:283},{42:77,50:$Vh,52:$Vi,54:81,72:284,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:[1,285]},o($VJ,[2,103]),o($VJ,[2,105]),{100:[1,286]},o($VJ,[2,107]),o([5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,134,136,137,138,139,144,145,146,147,148,149,152,153,154,155,156,157],[2,163],{150:151,103:$VK,140:$VM,141:$VN,142:$VO,143:$VP}),o($Vo1,[2,164],{150:151,103:$VK,142:$VO,143:$VP}),o($Vo1,[2,165],{150:151,103:$VK,142:$VO,143:$VP}),o($V01,[2,166],{150:151}),o($V01,[2,167],{150:151}),o($V01,[2,168],{150:151}),o($Vx1,[2,169],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vx1,[2,170],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vx1,[2,171],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vx1,[2,172],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vx1,[2,173],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),o($Vx1,[2,174],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,154:$VY,155:$VZ}),{50:[1,287]},{50:[2,194]},{50:[2,195]},{50:[2,196]},o([5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,134,136,137,138,152,153,156,157],[2,177],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,154:$VY,155:$VZ}),o([5,6,43,45,49,51,53,58,62,63,64,65,66,67,68,69,70,75,76,85,86,87,88,89,92,93,95,134,136,137,138,153],[2,178],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,154:$VY,155:$VZ,156:$V_,157:$V$}),{21:288,28:21,36:$V2,42:77,50:$Vh,52:$Vi,54:81,72:243,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:289,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{50:[1,290]},o($Vy1,[2,186],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,154:$VY,155:$VZ}),o($Vy1,[2,187],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,154:$VY,155:$VZ}),{51:[1,291],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:151,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},{49:$Vz1,51:[1,292]},o($V41,[2,144]),o($VA1,[2,145],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V01,$VB1,{55:[1,294]}),o($V01,[2,110]),{101:[1,295]},o($V01,[2,181]),o($V01,[2,115]),{51:[1,296]},{133:297,134:$Vp1,135:252,136:$V61,138:$Vq1},{134:[1,298]},o($Vr1,[2,158]),{42:77,50:$Vh,52:$Vi,54:81,72:299,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{103:$VK,137:[1,300],139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:151,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},o($V0,[2,259]),o($V0,[2,260]),{52:[1,303],193:301,195:[1,302]},o($V0,[2,261]),o($V0,[2,262]),{52:$VC1,189:304},{50:[1,306]},{52:$Vs1,53:[1,309],176:307,180:308,192:310},{52:[2,226]},{50:[1,311]},{49:$VD1,51:[1,312]},o($VA1,[2,211],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),{21:315,28:21,36:$V2,166:[1,314]},{52:$VG,99:$Vj,104:316},o($VE1,[2,99],{34:317,95:[1,318]}),{77:[1,319]},{42:77,50:$Vh,52:$Vi,54:81,72:325,78:320,80:321,81:$VF1,83:$VG1,84:$VH1,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V91,[2,35]),o($Vw1,[2,47]),{44:327,50:[1,329],52:$Vb,54:328,59:326,128:$Vy,129:$Vz,130:$VA},{58:[2,59]},{58:[2,63]},{58:[2,65]},{58:[2,67]},o($Vk1,[2,38],{52:[1,330],53:[1,331]}),o($Vk1,[2,40]),o($Vk1,[2,43]),o($V0,[2,197],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vl1,[2,200]),o($Vl1,[2,201],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vm1,$VB1,{55:[1,332]}),{101:[1,333]},{21:334,28:21,36:$V2,42:77,50:$Vh,52:$Vi,54:81,72:243,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:335,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{51:[1,336]},{49:$Vz1,51:[1,337]},{21:338,28:21,36:$V2,42:77,50:$Vh,52:$Vi,54:81,72:243,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,122:339,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V01,[2,135]),o($V41,[2,143]),{42:77,50:$Vh,52:$Vi,54:81,72:340,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:$VI1,103:[1,342]},o($V01,[2,114]),o($V01,[2,152]),{134:[1,343]},o($V01,[2,157]),{103:$VK,134:[2,161],139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,150:151,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$},{42:77,50:$Vh,52:$Vi,54:81,72:344,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($VJ1,[2,247],{194:345,197:346,198:347,154:$VK1,168:$VL1,187:$VM1,190:$VN1,199:$VO1,200:$VP1}),o($VJ1,[2,243]),o($VQ1,[2,246],{50:[1,354]}),{49:$VR1,51:[1,355]},o($VA1,[2,238]),{52:$VC1,189:357},{51:[1,358]},{49:[1,359],51:[2,228]},{21:360,28:21,36:$V2},o($VA1,[2,240]),{42:77,50:$Vh,52:$Vi,54:81,72:266,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD,169:361},o($VS1,[2,209]),{42:77,50:$Vh,52:$Vi,54:81,72:362,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{50:$V71,167:363},o($V0,[2,208]),o($Vk1,[2,220]),o($VT1,[2,86],{35:364,86:[1,365],87:[1,366],88:[1,367]}),{42:368,100:$Vk},{42:77,50:$Vh,52:$Vi,54:81,72:371,90:369,91:370,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V81,[2,84],{79:372,49:$VU1,85:[1,374]}),o($VV1,[2,78]),{82:[1,375]},{50:[1,376]},{50:[1,377]},o($VV1,[2,83],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vw1,[2,73],{60:378,71:[1,379],73:[1,380]}),o($VW1,[2,50],{52:[1,381],53:[1,382]}),{52:[1,383],53:[1,384]},{21:385,28:21,36:$V2},o($Vk1,[2,36]),{52:[1,386]},{52:$VI1},o($VJ,[2,106]),{51:[1,387]},{49:$Vz1,51:[1,388]},o($V01,[2,182]),o($V01,[2,184]),{51:[1,389]},{49:$Vz1,51:[1,390]},o($VA1,[2,146],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V01,[2,112]),o($V01,[2,109]),o($V01,[2,156]),o($Vr1,[2,160],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($VJ1,[2,242]),o($VJ1,[2,248],{198:391,154:$VK1,168:$VL1,187:$VM1,190:$VN1,199:$VO1,200:$VP1}),o($VQ1,[2,250]),{188:[1,392]},{188:[1,393]},o($VQ1,[2,253]),{50:[1,394]},{42:396,52:[1,402],54:400,100:$Vk,106:401,108:398,109:397,110:399,113:395,123:$Vt,124:$Vu,125:$Vv,126:$Vw,128:$Vy,129:$Vz,130:$VA},{126:[1,403]},{196:[1,404]},o($V0,[2,267]),{52:[1,405]},{49:$VR1,51:[1,406]},o($V0,[2,221]),o($VX1,$VY1,{181:407,192:408,182:409,183:410,52:$Vs1,186:$VZ1}),{51:[2,229]},{49:$VD1,51:[1,412]},o($VA1,[2,212],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V0,[2,206],{49:$Vt1}),o($VT1,[2,23]),{21:413,28:21,36:$V2,40:[1,414]},{21:415,28:21,36:$V2},{21:416,28:21,36:$V2},o($VE1,[2,101],{96:417,97:[1,418]}),o($Vv1,[2,92],{49:[1,419]}),o($V_1,[2,93]),o($V_1,[2,95],{150:151,92:[1,420],93:[1,421],103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($V81,[2,77]),{42:77,50:$Vh,52:$Vi,54:81,72:325,80:422,81:$VF1,83:$VG1,84:$VH1,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:423,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{50:[1,424]},{42:77,50:$Vh,52:$Vi,54:81,72:325,78:425,80:321,81:$VF1,83:$VG1,84:$VH1,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{42:77,50:$Vh,52:$Vi,54:81,72:325,78:426,80:321,81:$VF1,83:$VG1,84:$VH1,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($Vw1,[2,49]),{42:77,50:$Vh,52:$Vi,54:81,72:427,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{52:$VG,74:428,99:$Vj,104:187},o($VW1,[2,51]),{52:[1,429]},o($VW1,[2,53]),{52:[1,430]},{51:[1,431]},o($Vk1,[2,37]),o($V01,[2,175]),o($V01,[2,176]),o($V01,[2,183]),o($V01,[2,185]),o($VQ1,[2,249]),o($VQ1,[2,251]),{191:[1,432]},{42:433,100:$Vk},o($VQ1,[2,255]),o($VQ1,[2,129]),o($VQ1,[2,130]),o($VQ1,[2,131]),o($VQ1,[2,132]),o($VQ1,[2,133]),o($VQ1,[2,134]),{50:$V21},o($VQ1,[2,256]),{51:[1,435],55:[1,434]},o($VA1,[2,239]),o($V0,[2,268]),{49:[1,436],51:[2,227]},o($VA1,[2,241]),o($VA1,[2,230]),{184:437,185:438,187:[1,439],190:[1,440]},{52:[1,441]},o($VS1,[2,210]),o($VT1,[2,87]),{21:442,28:21,36:$V2},o($VT1,[2,89]),o($VT1,[2,90]),o($VE1,[2,100]),{42:443,100:$Vk},{42:77,50:$Vh,52:$Vi,54:81,72:371,91:444,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},o($V_1,[2,96]),{94:[1,445]},o($VV1,[2,79]),o($V81,[2,85],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),{42:77,50:$Vh,52:$Vi,54:81,72:325,78:446,80:321,81:$VF1,83:$VG1,84:$VH1,99:$Vj,100:$Vk,102:76,103:$Vl,104:75,105:72,106:73,107:74,108:78,109:79,110:80,111:82,112:83,114:84,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:$Vq,120:$Vr,121:$Vs,123:$Vt,124:$Vu,125:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,141:$VC,154:$VD},{49:$VU1,51:[1,447]},{49:$VU1,51:[1,448]},o($Vw1,[2,71],{150:151,103:$VK,139:$VL,140:$VM,141:$VN,142:$VO,143:$VP,144:$VQ,145:$VR,146:$VS,147:$VT,148:$VU,149:$VV,152:$VW,153:$VX,154:$VY,155:$VZ,156:$V_,157:$V$}),o($Vw1,[2,72],{49:$Vu1}),o($VW1,[2,52]),o($VW1,[2,54]),{52:[1,449],53:[1,450]},{52:[1,451]},{49:[1,452]},{196:[1,453]},o($VQ1,[2,245]),o($VX1,$VY1,{183:410,182:454,186:$VZ1}),o($VA1,[2,232]),o($VA1,[2,233]),{188:[1,455]},{188:[1,456]},o($VX1,[2,235]),o($VT1,[2,88]),o($VE1,[2,102]),o($V_1,[2,94]),o($V_1,[2,97],{92:[1,457]}),{49:$VU1,51:[1,458]},o($VV1,[2,81]),o($VV1,[2,82]),o($VW1,[2,55]),{52:[1,459]},{50:[1,460]},{42:461,100:$Vk},{51:[1,462]},o($VA1,[2,231]),{50:[1,463]},{50:[1,464]},o($V_1,[2,98]),o($VV1,[2,80]),o($VW1,[2,56]),{52:[1,465]},{51:[1,466]},o($VQ1,[2,244]),{52:$VC1,189:467},{52:$VC1,189:468},{51:[1,469]},o($VQ1,[2,254]),{49:$VR1,51:[1,470]},{49:$VR1,51:[1,471]},o($VQ1,[2,252]),o($VA1,[2,236]),{191:[1,472]},{52:[1,473]},{50:[1,474]},{52:$VC1,189:475},{49:$VR1,51:[1,476]},o($VA1,[2,237])],
defaultActions: {25:[2,1],32:[2,223],33:[2,224],101:[2,136],102:[2,137],103:[2,138],104:[2,139],105:[2,140],106:[2,141],107:[2,142],195:[2,58],197:[2,61],200:[2,66],202:[2,68],203:[2,69],204:[2,70],231:[2,194],232:[2,195],233:[2,196],263:[2,226],275:[2,59],276:[2,63],277:[2,65],278:[2,67],360:[2,229]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 205
break;
case 2:return 40
break;
case 3:return 202
break;
case 4:return 152
break;
case 5:return 69
break;
case 6:return 159
break;
case 7:return 53
break;
case 8:return 92
break;
case 9:return 199
break;
case 10:return 119
break;
case 11:return 156
break;
case 12:return 157
break;
case 13:return 77
break;
case 14:return "CASE"
break;
case 15:return 93
break;
case 16:return "COLUMN"
break;
case 17:return "CONSTRAINT"
break;
case 18:return "COUNT"
break;
case 19:return 172
break;
case 20:return "CROSS"
break;
case 21:return 84
break;
case 22:return 208
break;
case 23:return 168
break;
case 24:return 164
break;
case 25:return 92
break;
case 26:return 37
break;
case 27:return 201
break;
case 28:return 134
break;
case 29:return 138
break;
case 30:return 87
break;
case 31:return 127
break;
case 32:return 9
break;
case 33:return 124
break;
case 34:return 120
break;
case 35:return 190
break;
case 36:return 45
break;
case 37:return 76
break;
case 38:return 81
break;
case 39:return 85
break;
case 40:return 179
break;
case 41:return 200
break;
case 42:return 155
break;
case 43:return 210
break;
case 44:return 63
break;
case 45:return 165
break;
case 46:return 88
break;
case 47:return 43
break;
case 48:return 58
break;
case 49:return 188
break;
case 50:return 121
break;
case 51:return 64
break;
case 52:return 139
break;
case 53:return 95
break;
case 54:return "MAX"
break;
case 55:return "MIN"
break;
case 56:return "MODIFY"
break;
case 57:return 62
break;
case 58:return 94
break;
case 59:return 154
break;
case 60:return 126
break;
case 61:return 71
break;
case 62:return 97
break;
case 63:return 153
break;
case 64:return 89
break;
case 65:return 65
break;
case 66:return 11
break;
case 67:return 187
break;
case 68:return 10
break;
case 69:return 191
break;
case 70:return 203
break;
case 71:return 66
break;
case 72:return 83
break;
case 73:return 36
break;
case 74:return 68
break;
case 75:return 161
break;
case 76:return 82
break;
case 77:return 158
break;
case 78:return "SUM"
break;
case 79:return 174
break;
case 80:return 137
break;
case 81:return 204
break;
case 82:return 41
break;
case 83:return 123
break;
case 84:return 86
break;
case 85:return 160
break;
case 86:return 209
break;
case 87:return 73
break;
case 88:return 166
break;
case 89:return 136
break;
case 90:return 75
break;
case 91:return 100
break;
case 92:return 140
break;
case 93:return 141
break;
case 94:return 103
break;
case 95:return 142
break;
case 96:return 143
break;
case 97:return 145
break;
case 98:return 144
break;
case 99:return 147
break;
case 100:return 149
break;
case 101:return 146
break;
case 102:return 148
break;
case 103:return 149
break;
case 104:return 50
break;
case 105:return 51
break;
case 106:return 99
break;
case 107:return 101
break;
case 108:return 55
break;
case 109:return 49
break;
case 110:return 129
break;
case 111:return 6
break;
case 112:return 128
break;
case 113:return 130
break;
case 114:return 52
break;
case 115:return 125
break;
case 116:return 125
break;
case 117:return 5
break;
case 118:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ADD\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AUTO_INCREMENT\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:DATABASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:REFERENCES\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}