/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,118,122,123,128,147,148],$V8=[5,7,31,118,122,123,128,147,148],$V9=[1,26],$Va=[1,52],$Vb=[1,49],$Vc=[1,50],$Vd=[1,53],$Ve=[1,62],$Vf=[1,63],$Vg=[1,64],$Vh=[1,65],$Vi=[1,66],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,51],$Vs=[5,7,31,37,41,42,43,44,48,50,51,52,53,55,57,60,70,71,77,118,119,122,123,124,128,147,148,149,151],$Vt=[35,37],$Vu=[1,80],$Vv=[35,37,41],$Vw=[1,84],$Vx=[1,82],$Vy=[1,83],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[5,7,31,35,37,41,43,48,50,51,52,57,60,69,70,71,74,75,77,79,81,83,107,108,109,110,111,112,113,114,115,116,117,118,122,123,128,147,148],$VJ=[2,81],$VK=[5,7,31,43,60,70,71,77,118,122,123,128,147,148],$VL=[1,107],$VM=[1,113],$VN=[5,7,31,35,37,41,43,48,50,51,52,57,60,69,70,71,74,75,77,79,81,110,111,112,113,114,115,116,117,118,122,123,128,147,148],$VO=[5,7,31,35,37,41,43,48,50,51,52,57,60,69,70,71,74,75,77,79,81,107,108,110,111,112,113,114,115,116,117,118,122,123,128,147,148],$VP=[5,7,31,43,70,71,77,118,122,123,128,147,148],$VQ=[5,7,31,43,57,60,70,71,77,118,122,123,128,147,148],$VR=[5,7,31,41,43,57,60,70,71,77,118,122,123,128,147,148],$VS=[2,30],$VT=[1,147],$VU=[2,36],$VV=[1,150],$VW=[1,151],$VX=[1,152],$VY=[5,7,31,41,57,118,122,123,128,147,148],$VZ=[5,7,31,41,43,48,50,51,52,57,60,70,71,77,114,118,122,123,128,147,148],$V_=[2,80],$V$=[5,7,31,43,70,77,118,122,123,128,147,148],$V01=[5,7,31,43,48,50,51,52,57,60,70,71,77,118,122,123,128,147,148],$V11=[1,186],$V21=[1,189],$V31=[5,7,31,41,43,48,50,51,52,57,60,70,71,77,118,122,123,128,147,148],$V41=[1,198],$V51=[1,199],$V61=[5,7,31,43,70,118,122,123,128,147,148],$V71=[1,206],$V81=[1,207],$V91=[1,208],$Va1=[1,215],$Vb1=[41,43],$Vc1=[5,7,31,43,118,122,123,128,147,148],$Vd1=[1,233],$Ve1=[5,7,31,41,43,69,70,71,77,118,122,123,128,147,148],$Vf1=[5,7,31,41,43,118,122,123,128,147,148],$Vg1=[5,7,31,41,43,59,118,122,123,128,143,147,148],$Vh1=[5,7,31,41,43,70,77,118,122,123,128,147,148];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"ResultColumns":33,"ALL":34,"INTO":35,"Table":36,"FROM":37,"FromTablesList":38,"JoinTablesList":39,"FromTable":40,"COMMA":41,"LPAR":42,"RPAR":43,"LITERAL":44,"DOT":45,"JoinTable":46,"JoinMode":47,"JOIN":48,"OnClause":49,"LEFT":50,"RIGHT":51,"INNER":52,"ON":53,"Expression":54,"USING":55,"ColumnsList":56,"WHERE":57,"EXISTS":58,"NOT":59,"GROUP":60,"BY":61,"GroupExpressionsList":62,"HavingClause":63,"GroupExpression":64,"GROUPING":65,"SETS":66,"ROLLUP":67,"CUBE":68,"HAVING":69,"UNION":70,"ORDER":71,"OrderExpressionsList":72,"OrderExpression":73,"DIRECTION":74,"COLLATE":75,"NOCASE":76,"LIMIT":77,"OffsetClause":78,"OFFSET":79,"ResultColumn":80,"AS":81,"Star":82,"STAR":83,"Column":84,"AggrValue":85,"FuncValue":86,"Op":87,"NumValue":88,"LogicValue":89,"StringValue":90,"NullValue":91,"ParamValue":92,"Aggregator":93,"SUM":94,"COUNT":95,"MIN":96,"MAX":97,"AVG":98,"NUMBER":99,"TRUE":100,"FALSE":101,"STRING":102,"NULL":103,"DOLLAR":104,"COLON":105,"QUESTION":106,"PLUS":107,"MINUS":108,"SLASH":109,"GT":110,"GE":111,"LT":112,"LE":113,"EQ":114,"NE":115,"AND":116,"OR":117,"UPDATE":118,"SET":119,"SetColumnsList":120,"SetColumn":121,"DELETE":122,"INSERT":123,"VALUES":124,"ValuesList":125,"Value":126,"DateValue":127,"CREATE":128,"TemporaryClause":129,"TABLE":130,"IfNotExists":131,"CreateTableDefClause":132,"ConstraintsClause":133,"TEMPORARY":134,"TEMP":135,"IF":136,"ColumnDefList":137,"ColumnDef":138,"ColumnTypeName":139,"ColumnConstraint":140,"ColumnConstraints":141,"SignedNumber":142,"PRIMARY":143,"KEY":144,"ConstraintsList":145,"Constraint":146,"DROP":147,"ALTER":148,"RENAME":149,"TO":150,"ADD":151,"COLUMN":152,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",34:"ALL",35:"INTO",37:"FROM",41:"COMMA",42:"LPAR",43:"RPAR",44:"LITERAL",45:"DOT",48:"JOIN",50:"LEFT",51:"RIGHT",52:"INNER",53:"ON",55:"USING",57:"WHERE",58:"EXISTS",59:"NOT",60:"GROUP",61:"BY",65:"GROUPING",66:"SETS",67:"ROLLUP",68:"CUBE",69:"HAVING",70:"UNION",71:"ORDER",74:"DIRECTION",75:"COLLATE",76:"NOCASE",77:"LIMIT",79:"OFFSET",81:"AS",83:"STAR",94:"SUM",95:"COUNT",96:"MIN",97:"MAX",98:"AVG",99:"NUMBER",100:"TRUE",101:"FALSE",102:"STRING",103:"NULL",104:"DOLLAR",105:"COLON",106:"QUESTION",107:"PLUS",108:"MINUS",109:"SLASH",110:"GT",111:"GE",112:"LT",113:"LE",114:"EQ",115:"NE",116:"AND",117:"OR",118:"UPDATE",119:"SET",122:"DELETE",123:"INSERT",124:"VALUES",127:"DateValue",128:"CREATE",130:"TABLE",134:"TEMPORARY",135:"TEMP",136:"IF",141:"ColumnConstraints",142:"SignedNumber",143:"PRIMARY",144:"KEY",147:"DROP",148:"ALTER",149:"RENAME",150:"TO",151:"ADD",152:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,3],[23,3],[23,2],[24,0],[24,2],[25,2],[25,3],[38,1],[38,3],[40,4],[40,2],[40,1],[36,3],[36,1],[39,2],[39,1],[46,4],[47,0],[47,1],[47,1],[47,1],[49,2],[49,2],[49,0],[26,0],[26,2],[26,5],[26,6],[27,0],[27,4],[62,1],[62,3],[64,5],[64,4],[64,4],[64,1],[63,0],[63,2],[30,0],[30,2],[30,3],[28,0],[28,3],[72,1],[72,3],[73,1],[73,2],[73,3],[73,4],[29,0],[29,3],[78,0],[78,2],[33,3],[33,1],[80,3],[80,1],[82,5],[82,3],[82,1],[84,5],[84,3],[84,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[85,4],[93,1],[93,1],[93,1],[93,1],[93,1],[86,4],[88,1],[89,1],[89,1],[90,1],[91,1],[92,2],[92,2],[92,1],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,2],[87,2],[87,3],[14,6],[14,4],[120,1],[120,3],[121,3],[15,5],[15,3],[13,7],[13,10],[125,1],[125,3],[126,1],[126,1],[126,1],[126,1],[126,1],[126,1],[56,1],[56,3],[16,9],[129,0],[129,1],[129,1],[131,0],[131,3],[132,1],[132,2],[137,1],[137,3],[138,3],[138,2],[139,6],[139,4],[139,1],[140,0],[140,2],[140,2],[133,0],[145,3],[145,1],[146,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 26: case 34: case 49: case 62: case 73: case 124: case 131: case 139:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 30: case 54: case 75: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 93: case 94: case 95: case 96: case 97:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7]; 
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); 
break;
case 22: case 156:
this.$ = null
break;
case 23:
this.$ = $$[$0]
break;
case 24:
 this.$ = { from: $$[$0] }; 
break;
case 25:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 27: case 50: case 125:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 28:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 29:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 31:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 32:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 33:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 35:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 36:
this.$ = "INNER";
break;
case 37: case 38: case 39:
this.$ = $$[$0];
break;
case 40:
 this.$ = {on: $$[$0]}; 
break;
case 41:
 this.$ = {using: $$[$0]}; 
break;
case 42: case 43: case 47: case 55: case 57: case 60: case 68: case 70: case 142: case 145:
 this.$ = null; 
break;
case 44:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 45:
 this.$ = {whereexists: $$[$0-1]}; 
break;
case 46:
 this.$ = {wherenotexists: $$[$0-1]}; 
break;
case 48:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 51:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 52:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 53:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 56:
 this.$ = {having:$$[$0]}
break;
case 58:
 this.$ = {union: $$[$0]} ; 
break;
case 59:
 this.$ = {unionall: $$[$0]} ; 
break;
case 61:
 this.$ = {order:$$[$0]}
break;
case 63:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 64:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 65:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 66:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 67:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 69:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 71:
 this.$ = {offset:$$[$0]}
break;
case 72: case 150:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 74:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 76:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 77:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 78:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 79:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 80:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 81:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 92:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 98:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], expression: $$[$0-1]}); 
break;
case 99:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 100:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 101:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 102:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 103:
 this.$ = new yy.NullValue({value:null}); 
break;
case 104: case 105:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 106:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
			console.log(yy.question);
		
break;
case 107:
 this.$ = new yy.Op({left:$$[$0-2], op:'+' , right:$$[$0]}); 
break;
case 108:
 this.$ = new yy.Op({left:$$[$0-2], op:'-' , right:$$[$0]}); 
break;
case 109:
 this.$ = new yy.Op({left:$$[$0-2], op:'*' , right:$$[$0]}); 
break;
case 110:
 this.$ = new yy.Op({left:$$[$0-2], op:'/' , right:$$[$0]}); 
break;
case 111:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 112:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 113:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 114:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 115:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 116:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 117:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 118:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 119:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 120:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 121:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 122:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 123:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 126:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 127:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 128:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 129:
 this.$ = new yy.Insert({into:$$[$0-4], values: $$[$0-1]}); 
break;
case 130:
 this.$ = new yy.Insert({into:$$[$0-7], columns: $$[$0-5], values: $$[$0-1]}); 
break;
case 132: case 140:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 141:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 143: case 144:
 this.$ = {temporary:true}; 
break;
case 146:
 this.$ = {ifnotexists: true}; 
break;
case 147:
 this.$ = {columns: $$[$0]}; 
break;
case 148:
 this.$ = {as: $$[$0]} 
break;
case 149:
 this.$ = [$$[$0]];
break;
case 151:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 152:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 153:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 154:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 155:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 157:
this.$ = {primarykey:true};
break;
case 158:
this.$ = {notnull:true};
break;
case 159:
this.$ = null;
break;
case 160:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 161:
this.$ = [$$[$0]];
break;
case 163:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 164:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,118:$V1,122:$V2,123:$V3,128:$V4,147:$V5,148:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,118:$V1,122:$V2,123:$V3,128:$V4,147:$V5,148:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,35:[1,23],37:[2,22]},{35:[1,24]},{36:25,44:$V9},{37:[1,27]},{129:28,130:[2,142],134:[1,29],135:[1,30]},{130:[1,31]},{130:[1,32]},{32:[1,33],33:35,34:[1,34],42:$Va,44:$Vb,54:37,59:$Vc,80:36,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:67,37:[1,68]},{36:69,44:$V9},{36:70,44:$V9},{119:[1,71]},o($Vs,[2,32],{45:[1,72]}),{36:73,44:$V9},{130:[1,74]},{130:[2,143]},{130:[2,144]},{36:76,44:$V9,136:[1,75]},{36:77,44:$V9},{33:78,42:$Va,44:$Vb,54:37,59:$Vc,80:36,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{33:79,42:$Va,44:$Vb,54:37,59:$Vc,80:36,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},o($Vt,[2,21],{41:$Vu}),o($Vv,[2,73]),o($Vv,[2,75],{81:[1,81],83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),o($VI,[2,82]),o($VI,[2,83]),o($VI,[2,84]),o($VI,[2,85]),o($VI,[2,86]),o($VI,[2,87]),o($VI,[2,88]),o($VI,[2,89]),o($VI,[2,90]),o($VI,[2,91]),{42:[1,94]},o($VI,$VJ,{42:[1,95],45:[1,96]}),{42:$Va,44:$Vb,54:97,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:98,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:99,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},o($VI,[2,78]),o($VI,[2,99]),o($VI,[2,100]),o($VI,[2,101]),o($VI,[2,102]),o($VI,[2,103]),{44:[1,100]},{44:[1,101]},o($VI,[2,106]),{42:[2,93]},{42:[2,94]},{42:[2,95]},{42:[2,96]},{42:[2,97]},o($VK,[2,43],{26:102,57:[1,103]}),{36:105,38:104,40:106,42:$VL,44:$V9},{37:[2,23]},{42:[1,109],124:[1,108]},{44:$VM,84:112,120:110,121:111},{44:[1,114]},o($V8,[2,128],{57:[1,115]}),{44:[2,145],131:116,136:[1,117]},{58:[1,118]},o($V8,[2,164]),{149:[1,119],151:[1,120]},o($Vt,[2,19],{41:$Vu}),o($Vt,[2,20],{41:$Vu}),{42:$Va,44:$Vb,54:37,59:$Vc,80:121,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{44:[1,122]},{42:$Va,44:$Vb,54:123,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:124,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:125,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:126,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:127,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:128,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:129,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:130,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:131,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:132,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:133,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:134,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:135,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:136,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{44:[1,137],83:[1,138]},o($VN,[2,119],{83:$Vw,107:$Vx,108:$Vy,109:$Vz}),o($VO,[2,120],{83:$Vw,109:$Vz}),{43:[1,139],83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH},o($VI,[2,104]),o($VI,[2,105]),o($VP,[2,47],{27:140,60:[1,141]}),{42:$Va,44:$Vb,54:142,58:[1,143],59:[1,144],82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},o($VQ,[2,24],{41:[1,145]}),o($VR,$VS,{39:146,46:148,47:149,44:$VT,48:$VU,50:$VV,51:$VW,52:$VX}),o($VR,[2,26]),{12:153,23:11,31:$V0},{42:[1,154]},{44:$VM,56:155,84:156},o($V8,[2,123],{41:[1,158],57:[1,157]}),o($VY,[2,124]),{114:[1,159]},o($VZ,$VJ,{45:[1,160]}),o($Vs,[2,31]),{42:$Va,44:$Vb,54:161,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{36:162,44:$V9},{59:[1,163]},{36:164,44:$V9},{150:[1,165]},{152:[1,166]},o($Vv,[2,72]),o($Vv,[2,74]),o($VO,[2,107],{83:$Vw,109:$Vz}),o($VO,[2,108],{83:$Vw,109:$Vz}),o($VI,[2,109]),o($VI,[2,110]),o($VN,[2,111],{83:$Vw,107:$Vx,108:$Vy,109:$Vz}),o($VN,[2,112],{83:$Vw,107:$Vx,108:$Vy,109:$Vz}),o($VN,[2,113],{83:$Vw,107:$Vx,108:$Vy,109:$Vz}),o($VN,[2,114],{83:$Vw,107:$Vx,108:$Vy,109:$Vz}),o($VN,[2,115],{83:$Vw,107:$Vx,108:$Vy,109:$Vz}),o($VN,[2,116],{83:$Vw,107:$Vx,108:$Vy,109:$Vz}),o([5,7,31,35,37,41,43,48,50,51,52,57,60,69,70,71,74,75,77,79,81,116,117,118,122,123,128,147,148],[2,117],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF}),o([5,7,31,35,37,41,43,48,50,51,52,57,60,69,70,71,74,75,77,79,81,117,118,122,123,128,147,148],[2,118],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG}),{43:[1,167],83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH},{43:[1,168],83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH},o($VI,$V_,{45:[1,169]}),o($VI,[2,77]),o($VI,[2,121]),o($V$,[2,60],{28:170,71:[1,171]}),{61:[1,172]},o($VK,[2,44],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),{42:[1,173]},{42:$Va,44:$Vb,54:97,58:[1,174],59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{36:176,40:175,42:$VL,44:$V9},o($VQ,[2,25],{47:149,46:177,48:$VU,50:$VV,51:$VW,52:$VX}),o($VR,[2,29]),o($V01,[2,34]),{48:[1,178]},{48:[2,37]},{48:[2,38]},{48:[2,39]},{43:[1,179]},{88:182,89:184,90:183,91:185,92:187,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,125:180,126:181,127:$V11},{41:$V21,43:[1,188]},o($V31,[2,139]),{42:$Va,44:$Vb,54:190,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{44:$VM,84:112,121:191},{42:$Va,44:$Vb,54:192,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{44:[1,193]},o($V8,[2,127],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),{42:[1,194]},{58:[1,195]},o($V8,[2,163]),{44:[1,196]},{44:$V41,138:197},o($VI,[2,92]),o($VI,[2,98]),{44:$V51,83:[1,200]},o($V61,[2,68],{29:201,77:[1,202]}),{61:[1,203]},{42:$Va,44:$Vb,54:209,59:$Vc,62:204,64:205,65:$V71,67:$V81,68:$V91,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{12:210,23:11,31:$V0},{42:[1,211]},o($VR,[2,27]),o($VR,$VS,{44:$VT}),o($V01,[2,33]),{36:212,44:$V9},{44:[1,213]},{41:$Va1,43:[1,214]},o($Vb1,[2,131]),o($Vb1,[2,133]),o($Vb1,[2,134]),o($Vb1,[2,135]),o($Vb1,[2,136]),o($Vb1,[2,137]),o($Vb1,[2,138]),{124:[1,216]},{44:$VM,84:217},o($V8,[2,122],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),o($VY,[2,125]),o($VY,[2,126],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),o($VZ,$V_,{45:[1,218]}),{44:$V41,81:[1,221],132:219,137:220,138:222},{44:[2,146]},o($V8,[2,165]),o($V8,[2,166]),{44:[1,225],139:223,141:[1,224]},o($VI,[2,79]),o($VI,[2,76]),o($Vc1,[2,57],{30:226,70:[1,227]}),{42:$Va,44:$Vb,54:228,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:231,59:$Vc,72:229,73:230,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},o($VP,[2,55],{63:232,41:$Vd1,69:[1,234]}),o($Ve1,[2,49]),{66:[1,235]},{42:[1,236]},{42:[1,237]},o($Ve1,[2,54],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),{43:[1,238]},{12:239,23:11,31:$V0},o($V01,[2,42],{49:240,53:[1,241],55:[1,242]}),o($VR,[2,28]),o($V8,[2,129]),{88:182,89:184,90:183,91:185,92:187,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,126:243,127:$V11},{42:[1,244]},o($V31,[2,140]),{44:$V51},{43:[2,159],133:245},{41:[1,246],43:[2,147]},{12:247,23:11,31:$V0},o($Vb1,[2,149]),o($Vf1,[2,156],{140:248,59:[1,250],143:[1,249]}),o($Vf1,[2,152]),o($Vg1,[2,155],{42:[1,251]}),o($Vc1,[2,18]),{12:252,23:11,31:$V0,34:[1,253]},o($V61,[2,70],{78:254,79:[1,255],83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),o($V$,[2,61],{41:[1,256]}),o($Vh1,[2,62]),o($Vh1,[2,64],{74:[1,257],75:[1,258],83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),o($VP,[2,48]),{42:$Va,44:$Vb,54:209,59:$Vc,64:259,65:$V71,67:$V81,68:$V91,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:260,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:[1,261]},{42:$Va,44:$Vb,54:209,59:$Vc,62:262,64:205,65:$V71,67:$V81,68:$V91,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:209,59:$Vc,62:263,64:205,65:$V71,67:$V81,68:$V91,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},o($VK,[2,45]),{43:[1,264]},o($V01,[2,35]),{42:$Va,44:$Vb,54:265,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{44:$VM,56:266,84:156},o($Vb1,[2,132]),{88:182,89:184,90:183,91:185,92:187,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,125:267,126:181,127:$V11},{43:[1,268]},{44:$V41,138:269},{43:[2,148]},o($Vf1,[2,151]),{144:[1,270]},{103:[1,271]},{142:[1,272]},o($Vc1,[2,58]),{12:273,23:11,31:$V0},o($V61,[2,69]),{42:$Va,44:$Vb,54:274,59:$Vc,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{42:$Va,44:$Vb,54:231,59:$Vc,73:275,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},o($Vh1,[2,65]),{76:[1,276]},o($Ve1,[2,50]),o($VP,[2,56],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),{42:$Va,44:$Vb,54:209,59:$Vc,62:277,64:205,65:$V71,67:$V81,68:$V91,82:42,83:$Vd,84:41,85:38,86:39,87:40,88:43,89:44,90:45,91:46,92:47,93:48,94:$Ve,95:$Vf,96:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:$Vo,105:$Vp,106:$Vq,108:$Vr},{41:$Vd1,43:[1,278]},{41:$Vd1,43:[1,279]},o($VK,[2,46]),o($V01,[2,40],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),o($V01,[2,41],{41:$V21}),{41:$Va1,43:[1,280]},o($V8,[2,141]),o($Vb1,[2,150]),o($Vf1,[2,157]),o($Vf1,[2,158]),{43:[1,282],45:[1,281]},o($Vc1,[2,59]),o($V61,[2,71],{83:$Vw,107:$Vx,108:$Vy,109:$Vz,110:$VA,111:$VB,112:$VC,113:$VD,114:$VE,115:$VF,116:$VG,117:$VH}),o($Vh1,[2,63]),o($Vh1,[2,66],{74:[1,283]}),{41:$Vd1,43:[1,284]},o($Ve1,[2,52]),o($Ve1,[2,53]),o($V8,[2,130]),{142:[1,285]},o($Vg1,[2,154]),o($Vh1,[2,67]),o($Ve1,[2,51]),{43:[1,286]},o($Vg1,[2,153])],
defaultActions: {19:[2,1],29:[2,143],30:[2,144],62:[2,93],63:[2,94],64:[2,95],65:[2,96],66:[2,97],69:[2,23],150:[2,37],151:[2,38],152:[2,39],195:[2,146],247:[2,148]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 34
break;
case 2:return 148
break;
case 3:return 116
break;
case 4:return 'ANTI'
break;
case 5:return 81
break;
case 6:return 74
break;
case 7:return 98
break;
case 8:return 61
break;
case 9:return 128
break;
case 10:return 75
break;
case 11:return "COUNT"
break;
case 12:return 68
break;
case 13:return 122
break;
case 14:return 74
break;
case 15:return 32
break;
case 16:return 147
break;
case 17:return 58
break;
case 18:return 9
break;
case 19:return 101
break;
case 20:return 37
break;
case 21:return 60
break;
case 22:return 65
break;
case 23:return 69
break;
case 24:return 136
break;
case 25:return 52
break;
case 26:return 123
break;
case 27:return 35
break;
case 28:return 48
break;
case 29:return 144
break;
case 30:return 50
break;
case 31:return 77
break;
case 32:return "MAX"
break;
case 33:return "MIN"
break;
case 34:return 76
break;
case 35:return 59
break;
case 36:return 103
break;
case 37:return 53
break;
case 38:return 79
break;
case 39:return 117
break;
case 40:return 71
break;
case 41:return 11
break;
case 42:return 143
break;
case 43:return 10
break;
case 44:return 51
break;
case 45:return 67
break;
case 46:return 31
break;
case 47:return 119
break;
case 48:return 66
break;
case 49:return "SUM"
break;
case 50:return 130
break;
case 51:return 100
break;
case 52:return 70
break;
case 53:return 118
break;
case 54:return 55
break;
case 55:return 124
break;
case 56:return 57
break;
case 57:return 107
break;
case 58:return 108
break;
case 59:return 83
break;
case 60:return 109
break;
case 61:return 111
break;
case 62:return 110
break;
case 63:return 113
break;
case 64:return 115
break;
case 65:return 112
break;
case 66:return 114
break;
case 67:return 115
break;
case 68:return 42
break;
case 69:return 43
break;
case 70:return 45
break;
case 71:return 41
break;
case 72:return 105
break;
case 73:return 7
break;
case 74:return 104
break;
case 75:return 106
break;
case 76:return 44
break;
case 77:return 99
break;
case 78:return 102
break;
case 79:return 5
break;
case 80:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}