{"name":"Alasql","tagline":"Alasql.js - pure JavaScript fast client-side SQL database","body":"# Alasql.js - pure JavaScript client-side in-memory fast SQL-database \r\n\r\nVersion: 0.0.14 Date: November 7, 2014 [Changelog](CHANGELOG.md) \r\n\r\nAlasql - '[Ã  la SQL](http://en.wiktionary.org/wiki/%C3%A0_la)' - is a lightweight client-side in-memory SQL database designed to work in browser and Node.js. \r\n\r\n* Alasql was written with pure JavaScript and does not use browser WebSQL database. \r\n* Alasql is fully functional compact sql server with JOINs, GROUPs, UNIONs, ANY, ALL, IN, subqueries and very limited transactions support.\r\n* Alasql supports ROLLUP(), CUBE() and GROUPING SETS() functions\r\n* Alasql works with all modern versions of browsers (Chrome, Firefox, IE, Safari), Node.js, and mobile iOS and Android.\r\n* Alasql is fast, because it uses some optimization methods.\r\n\r\nCheck Alasql vs other JavaScript databases: \r\n* [Alabase vs. WebSQL](http://jsperf.com/alasql-js-vs-websql)\r\n* [Alabase vs. SQL.js](http://jsperf.com/sql-js-vs-alasql-js/4)\r\n\r\nWarning: Alasql project is very young and still in active development phase, therefore it may has some bugs. Please, wait a little bit before start to use it in production. I am going to add more tests and clean \r\nthe code before relaese more stable version 0.1.0 in the mid of November.\r\n\r\n## Examples\r\n\r\nTry Alasql in Fiddle: [sample 1](http://jsfiddle.net/38hj2uwy/6/), [sample 2](http://jsfiddle.net/6a06dqhc/3/), [sample 3](http://jsfiddle.net/606ksx2g/1/)\r\n\r\n\r\nOther examples:\r\n* [Sandbox](examples/sandbox.html)\r\n* [Sieve of Eratosthenes](examples/prime.html)\r\n\r\n## Installation\r\n\r\n### In browser\r\n\r\nInclude file: [alasql.js](./alasql.js) to the page.\r\n\r\n```\r\n  <script src=\"alasql.js\"></script>  \r\n  <script>\r\n    alasql.exec(\"CREATE TABLE test (language INT, hello STRING)\");\r\n    alasql.exec(\"INSERT INTO test VALUES (1,'Hello!')\");\r\n    alasql.exec(\"INSERT INTO test VALUES (2,'Aloha!')\");\r\n    alasql.exec(\"INSERT INTO test VALUES (3,'Bonjour!')\");\r\n    console.table(alasql.exec(\"SELECT * FROM test WHERE language > 1\"));\r\n  </script>\r\n\r\n```\r\n\r\nYou can use alasql.js with define()/require() functions in browser as well, because it supports AMD and UMD.\r\n\r\n### In Node.js\r\n\r\nUse the following command for installation:\r\n```\r\n    npm install alasql\r\n```\r\nThen require alasql.js file:\r\n\r\n```\r\n    var alasql = require('alasql');\r\n\r\n    var db = new alasql.Database();\r\n    \r\n    db.exec(\"CREATE TABLE test (one INT, two INT)\");\r\n    db.tables.test.data = [   // You can mix SQL and JavaScript\r\n        {one:3,two:4},\r\n        {one:5,two:6},\r\n    ];\r\n    var res = db.exec(\"SELECT * FROM test ORDER BY two DESC\");\r\n    console.log(res[0].one);\r\n\r\n```\r\n\r\n### Supported SQL statements\r\n\r\n* SELECT fields FROM tableid1 JOIN tableid2 ON oncond WHERE cond GROUP BY v1,v2 HAVING cond ORDER BY a,b, LIMIT number OFFSET number\r\n* INSERT INTO table \\[ (field1, field2) \\] VALUES (value1, value2), (value3, value4), ...\r\n* INSERT INTO table SELECT subquery\r\n* UPDATE table SET field = value1, field = value2 WHERE condition \r\n* DELETE FROM table WHERE condition \r\n* CREATE TABLE \\[IF NOT EXISTS\\] table\r\n* DROP TABLE \\[IF EXISTS\\] table\r\n\r\n#### SELECT statement\r\n\r\nNow Alasql.js supports following subset of SELECT syntax:\r\n\r\n* SELECT column1, column2 AS alias3, FUNCTION(field4+field5) AS alias6, SUM(expression7) AS alias8, *, table2.*\r\n* FROM table1, table2, (SELECT * FROM table3) alias\r\n* LEFT / RIGHT / INNER  JOIN table2 ON condition / USING columns\r\n* WHERE condition\r\n* GROUP BY column1, column2, ROLLUP(a,b), CUBE(c,d,e), GROUPING SETS(g,h)\r\n* HAVING condition\r\n* ORDER BY column1, column2 DESC, \r\n* LIMIT number [OFFSET number]\r\n* UNION / UNION ALL select / INTERSECT / EXCEPT\r\n\r\n#### Operators\r\n\r\n* +, -, *, /, %, AND, OR, NOT, BETWEEN, NOT BETWEEN, EXISTS (Subquery), > ALL (subquery/array), > ANY/SOME (subquery / array), [NOT] IN (subquery / array), LIKE\r\n\r\n#### Functions\r\n\r\n* ABS(), IIF(), IFNULL(), INSTR(), LOWER(), UPPER(), LCASE(), UCASE(), LEN(), LENGTH()\r\n\r\n#### Aggregators\r\n\r\n* SUM()\r\n* COUNT() \r\n* MIN()\r\n* MAX()\r\n* FIRST()\r\n* LAST()\r\n* Sorry, AVG still does not work\r\n\r\n#### GROUP BY Grouping functions\r\n\r\n* ROLLUP()\r\n* CUBE()\r\n* GROUPING SETS()\r\n\r\n#### User-defined JavaScript functions\r\n\r\nYou can use all benefits of SQL and JavaScript togeather by defining user functions. Just add new functions\r\nto alasql.userlib object:\r\n\r\n```\r\n        alasql.userlib.DOUBLE = function(x){return x*2};        \r\n        alasql.userlib.SUM10 = function(x,y) { return x+y*10; }\r\n        db.exec('SELECT a, DOUBLE(a) AS b, SUM10(a,b) FROM test1');\r\n```\r\n\r\n### alasql\r\n\r\nalasql is a main variable of module. You can use it immediatly as default database\r\n\r\nIn browser:\r\n```\r\n    <script src=\"alasql.js\"></script>\r\n    <script>\r\n        alasql.exec('CREATE TABLE one (two INT)');\r\n    </script>\r\n```\r\n\r\nor in Node.js:\r\n```\r\n    var alasql = require('alasql');\r\n    alasql.exec('CREATE TABLE one (two INT)');\r\n```\r\n\r\nAnother approach is to create new database:\r\n\r\n```\r\n    var mybase = new alasql Database();\r\n    mybase.exec('CREATE TABLE one (two INT)');\r\n```\r\nYou can give a name to database and then access it from alasql:\r\n```\r\n    var mybase = new alasql Database('mybase');\r\n    console.log(alasql.databases.mybase);\r\n```\r\n\r\nEach database can be used with the following methods:\r\n\r\n* vat db = new alasql.Database() - create new alasql-database\r\n* var res = db.exec(\"sql-statement\") - executes SELECT query and returns array of objects \r\n\r\nUsually, alasql.js works synchronously, but you can use callback.\r\n\r\n```\r\n    db.exec('SELECT * FROM test', function(res){\r\n    \tconsole.log(res);\r\n    });\r\n```\r\n\r\nor you can use aexec() - promised version of exec (in this case you need to install [es6-promise](https://www.npmjs.org/package/es6-promise) module for Node.js) (this feature is experimental and may be removed in a future to reduce dependices):\r\n```\r\n    db.aexec('SELECT * FROM test').then(function(res){\r\n        console.log(res);\r\n    });\r\n```\r\nYou can use compile statements:\r\n```\r\n    var insert = db.compile('INSERT INTO one (1,2)');\r\n    insert();\r\n```\r\n\r\nYou can use parameters in compiled statements:\r\n\r\n```\r\n    var insert1 = db.compile('INSERT INTO one (?,?)');\r\n    var insert2 = db.compile('INSERT INTO one ($a,$b)');\r\n    var insert3 = db.compile('INSERT INTO one (:a,:b)');\r\n\r\n    insert1([1,2]);\r\n    insert2({a:1,b:2});\r\n    insert3({a:3,b:4});\r\n\r\n    db.exec('INSERT INTO one (?,?)',[5,6]);\r\n\r\n```\r\n\r\n### Transactions\r\n\r\nThere is a limited support of transactions (with tx.rollback() and tx.commit() functions):\r\n\r\n```\r\n    db = new alasql.Database(\"mydb\");\r\n    db.transaction(function(tx) {\r\n        tx.exec('SELECT COUNT(*) FROM students');\r\n        tx.rollback();\r\n    });     \r\n\r\n```\r\n\r\n### SQL to JavaScript parser and compiler\r\n\r\nYou can use Alasql to parse to AST and compile SQL statements:\r\n\r\n```\r\n    // Parse to AST\r\n    var ast = alasql.parse(\"SELECT * FROM one\");\r\n\r\n    // Compile to JavaScript function with or without parameters\r\n    var statement = alasql.compile(\"SELECT * FROM one WHERE a > ? AND b < ?\");\r\n    statement([1,5]);\r\n```\r\n\r\nAlasql uses wonderful [Jison](jison.org) parser to produce AST-tree.\r\n\r\n\r\n### Performance\r\n\r\nAccording the preliminary performance tests alasql.js is faster than [sql.js]() in 5 to 10 times on more than 1000 records tables, and 2 to 3 times to [WebSQL]() on different queries. \r\n\r\nAlasql has four different optimization algorithm:\r\n* Caching of compiled queries\r\n* Joins: Preindexation of joined table\r\n* Joins: Prefiltering of WHERE expressions\r\n\r\nNow optimization algorithm has some limitations and therefore \"table1 JOIN table2 USING column1, column2\" is faster than \"table1 JOIN table2 ON table1.column1 = table2.column1 AND table1.column2 = table2.column2 \", but with one column it is ok.\r\n\r\n### Limitations\r\n\r\nIt is Ok with select for 1000000 records or 2 join two tables by 10000 records in each. \r\n\r\n### Tests\r\n\r\nI use mocha for tests. Run mocha from command line:\r\n\r\n```\r\n    mocha\r\n```\r\nor run [test/main.html](test/main.html) in browser.\r\n\r\n\r\n### Known Bugs\r\n\r\n1. Semicolon with multiple statements\r\n2. ORDER BY clause on three or more UNIONS\r\n3. AVG() does not work\r\n4. There are many of others. Please, [give me a chance](https://github.com/agershun/alasql/issues) to fix them  \r\n### Future Plans\r\n\r\nRead my [to do](TODO.md) page\r\n\r\n## Similar projects (SQL database, MDX/OLAP on JavaScript)\r\nSQL-database:\r\n* [sql.js](https://github.com/kripken/sql.js) - port of SQLike to JavaScript\r\n* [SequelSphere](http://www.sequelsphere.com/) - commercial SQL-database\r\n* [Datamanip](https://github.com/RossKor/datamanip.js)\r\n* [jsonQ.js](https://github.com/emasstudio/jsonQ.js)\r\n* [SQittle](https://github.com/moxley/sqittle)\r\n* [SQLinJS](https://github.com/nuxy/SQLinJS)\r\n* [jQuery-SQL-Emulator](https://github.com/maciakl/jQuery-SQL-Emulator)\r\n\r\nLINQ realizations:\r\n* [SQLike](http://www.thomasfrank.se/sqlike.html) - \r\n* [JSLINQ](http://jslinq.codeplex.com/)\r\n* [JavaScriptSQL](http://javascriptsql.sourceforge.net/ARCH/en/index.html)\r\n* [TrimQuery](https://code.google.com/p/trimpath/wiki/TrimQuery)\r\n* [jlinq](http://www.hugoware.net/projects/jlinq)\r\n* [jSQL](https://github.com/PaulGuo/jSQL)\r\n\r\nOther:\r\n* [dom-storage-query-language](https://code.google.com/p/dom-storage-query-language/)\r\n* [kombai-js](https://code.google.com/p/kombai-js/)\r\n\r\nJavaScript databases:\r\n* [SearchJS](https://github.com/deitch/searchjs)\r\n* [TaffyDB](http://www.taffydb.com/)\r\n* [River](https://github.com/andykent/river)\r\n* [CrossFilter](https://github.com/square/crossfilter)\r\n* [js-hypercube](https://github.com/thesmart/js-hypercube)\r\n* [cubico](https://github.com/diegodayan/cubico)\r\n* [SimpleMemolap](https://github.com/ajlopez/SimpleMemolap)\r\n\r\n## Other\r\n\r\n* [Press about Alasql](PRESS.md)\r\n\r\n## Credits\r\n\r\nMany thanks to Andrew Kent for his SQL Parser and other people for useful tools, which made our work much easier.\r\n\r\n## License\r\n\r\n(c) 2014, Andrey Gershun (agershun@gmail.com), [MIT licence information](LICENSE)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}