//
// alasql.js
// Alasql - JavaScript SQL database
// Date: 03.11.2014
// Version: 0.0.6
// (Ã±) 2014, Andrey Gershun
//
/*
The MIT License (MIT)

Copyright (c) 2014 Andrey Gershun (agershun@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

//  UMD header
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('es6-promise').Promise);
    } else {
        root.alasql = factory(root.Promise);
    }
}(this, function (Promise) {



/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[5,31,135,139,140,146,165,166],$V8=[5,7,31,135,139,140,146,165,166],$V9=[1,26],$Va=[45,47,86,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,116,129],$Vb=[2,23],$Vc=[1,36],$Vd=[5,7,31,40,44,45,46,47,51,53,54,55,56,58,60,61,71,72,73,74,80,135,136,139,140,141,146,165,166,167,169],$Ve=[1,68],$Vf=[1,65],$Vg=[1,69],$Vh=[1,79],$Vi=[1,80],$Vj=[1,81],$Vk=[1,82],$Vl=[1,83],$Vm=[1,84],$Vn=[1,85],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,78],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,67],$Vy=[1,66],$Vz=[5,7,31,46,61,71,72,73,74,80,135,139,140,146,165,166],$VA=[1,92],$VB=[1,99],$VC=[38,40],$VD=[1,109],$VE=[38,40,44],$VF=[1,114],$VG=[1,111],$VH=[1,112],$VI=[1,113],$VJ=[1,115],$VK=[1,116],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,124],$VS=[1,125],$VT=[1,127],$VU=[1,126],$VV=[1,128],$VW=[1,129],$VX=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,86,114,115,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,146,165,166],$VY=[2,83],$VZ=[5,7,31,46,71,72,73,74,80,135,139,140,146,165,166],$V_=[5,7,31,46,60,61,71,72,73,74,80,135,139,140,146,165,166],$V$=[5,7,31,44,46,60,61,71,72,73,74,80,135,139,140,146,165,166],$V01=[2,32],$V11=[1,144],$V21=[2,38],$V31=[1,147],$V41=[1,148],$V51=[1,149],$V61=[1,152],$V71=[5,7,31,44,60,135,139,140,146,165,166],$V81=[5,7,31,44,46,51,53,54,55,60,61,71,72,73,74,80,123,135,139,140,146,165,166],$V91=[35,133,134],$Va1=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,114,115,116,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,146,165,166],$Vb1=[5,7,31,46,71,72,73,80,135,139,140,146,165,166],$Vc1=[5,7,31,46,51,53,54,55,60,61,71,72,73,74,80,135,139,140,146,165,166],$Vd1=[1,205],$Ve1=[1,212],$Vf1=[1,215],$Vg1=[5,7,31,44,46,51,53,54,55,60,61,71,72,73,74,80,135,139,140,146,165,166],$Vh1=[1,224],$Vi1=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,119,120,121,122,123,124,127,128,131,132,135,139,140,146,165,166],$Vj1=[5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,128,131,132,135,139,140,146,165,166],$Vk1=[1,231],$Vl1=[44,46],$Vm1=[2,82],$Vn1=[5,7,31,46,71,72,73,135,139,140,146,165,166],$Vo1=[1,239],$Vp1=[1,240],$Vq1=[1,241],$Vr1=[1,247],$Vs1=[1,266],$Vt1=[5,7,31,46,135,139,140,146,165,166],$Vu1=[1,277],$Vv1=[5,7,31,44,46,70,71,72,73,74,80,135,139,140,146,165,166],$Vw1=[5,7,31,44,135,139,140,146,165,166],$Vx1=[5,7,31,44,46,135,139,140,146,165,166],$Vy1=[5,7,31,44,46,129,135,139,140,146,161,165,166],$Vz1=[5,7,31,44,46,71,72,73,80,135,139,140,146,165,166];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"Statements":4,"EOF":5,"Statement":6,"SEMICOLON":7,"ExplainStatement":8,"EXPLAIN":9,"QUERY":10,"PLAN":11,"Select":12,"Insert":13,"Update":14,"Delete":15,"CreateTable":16,"DropTable":17,"AlterTable":18,"WithSelectClause":19,"WITH":20,"WithTables":21,"RECURSIVE":22,"SelectClause":23,"IntoClause":24,"FromClause":25,"WhereClause":26,"GroupClause":27,"OrderClause":28,"LimitClause":29,"UnionClause":30,"SELECT":31,"DISTINCT":32,"TopClause":33,"ResultColumns":34,"ALL":35,"TOP":36,"NumValue":37,"INTO":38,"Table":39,"FROM":40,"FromTablesList":41,"JoinTablesList":42,"FromTable":43,"COMMA":44,"LPAR":45,"RPAR":46,"LITERAL":47,"DOT":48,"JoinTable":49,"JoinMode":50,"JOIN":51,"OnClause":52,"LEFT":53,"RIGHT":54,"INNER":55,"ON":56,"Expression":57,"USING":58,"ColumnsList":59,"WHERE":60,"GROUP":61,"BY":62,"GroupExpressionsList":63,"HavingClause":64,"GroupExpression":65,"GROUPING":66,"SETS":67,"ROLLUP":68,"CUBE":69,"HAVING":70,"UNION":71,"EXCEPT":72,"INTERSECT":73,"ORDER":74,"OrderExpressionsList":75,"OrderExpression":76,"DIRECTION":77,"COLLATE":78,"NOCASE":79,"LIMIT":80,"OffsetClause":81,"OFFSET":82,"ResultColumn":83,"AS":84,"Star":85,"STAR":86,"Column":87,"AggrValue":88,"FuncValue":89,"Op":90,"LogicValue":91,"StringValue":92,"NullValue":93,"ParamValue":94,"ExistsValue":95,"Aggregator":96,"SUM":97,"COUNT":98,"MIN":99,"MAX":100,"AVG":101,"FIRST":102,"LAST":103,"ExprList":104,"NUMBER":105,"TRUE":106,"FALSE":107,"STRING":108,"NULL":109,"EXISTS":110,"DOLLAR":111,"COLON":112,"QUESTION":113,"LIKE":114,"PLUS":115,"MINUS":116,"SLASH":117,"PERCENT":118,"GT":119,"GE":120,"LT":121,"LE":122,"EQ":123,"NE":124,"CondOp":125,"AllSome":126,"AND":127,"OR":128,"NOT":129,"IN":130,"BETWEEN":131,"NOT_BETWEEN":132,"SOME":133,"ANY":134,"UPDATE":135,"SET":136,"SetColumnsList":137,"SetColumn":138,"DELETE":139,"INSERT":140,"VALUES":141,"ValuesListsList":142,"ValuesList":143,"Value":144,"DateValue":145,"CREATE":146,"TemporaryClause":147,"TABLE":148,"IfNotExists":149,"CreateTableDefClause":150,"ConstraintsClause":151,"TEMPORARY":152,"TEMP":153,"IF":154,"ColumnDefList":155,"ColumnDef":156,"ColumnTypeName":157,"ColumnConstraint":158,"ColumnConstraints":159,"SignedNumber":160,"PRIMARY":161,"KEY":162,"ConstraintsList":163,"Constraint":164,"DROP":165,"ALTER":166,"RENAME":167,"TO":168,"ADD":169,"COLUMN":170,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",9:"EXPLAIN",10:"QUERY",11:"PLAN",20:"WITH",22:"RECURSIVE",31:"SELECT",32:"DISTINCT",35:"ALL",36:"TOP",38:"INTO",40:"FROM",44:"COMMA",45:"LPAR",46:"RPAR",47:"LITERAL",48:"DOT",51:"JOIN",53:"LEFT",54:"RIGHT",55:"INNER",56:"ON",58:"USING",60:"WHERE",61:"GROUP",62:"BY",66:"GROUPING",67:"SETS",68:"ROLLUP",69:"CUBE",70:"HAVING",71:"UNION",72:"EXCEPT",73:"INTERSECT",74:"ORDER",77:"DIRECTION",78:"COLLATE",79:"NOCASE",80:"LIMIT",82:"OFFSET",84:"AS",86:"STAR",97:"SUM",98:"COUNT",99:"MIN",100:"MAX",101:"AVG",102:"FIRST",103:"LAST",105:"NUMBER",106:"TRUE",107:"FALSE",108:"STRING",109:"NULL",110:"EXISTS",111:"DOLLAR",112:"COLON",113:"QUESTION",114:"LIKE",115:"PLUS",116:"MINUS",117:"SLASH",118:"PERCENT",119:"GT",120:"GE",121:"LT",122:"LE",123:"EQ",124:"NE",127:"AND",128:"OR",129:"NOT",130:"IN",131:"BETWEEN",132:"NOT_BETWEEN",133:"SOME",134:"ANY",135:"UPDATE",136:"SET",139:"DELETE",140:"INSERT",141:"VALUES",145:"DateValue",146:"CREATE",148:"TABLE",152:"TEMPORARY",153:"TEMP",154:"IF",159:"ColumnConstraints",160:"SignedNumber",161:"PRIMARY",162:"KEY",165:"DROP",166:"ALTER",167:"RENAME",168:"TO",169:"ADD",170:"COLUMN"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[8,2],[8,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[19,4],[19,1],[21,0],[12,8],[23,4],[23,4],[23,3],[33,2],[33,0],[24,0],[24,2],[25,2],[25,3],[41,1],[41,3],[43,4],[43,2],[43,1],[39,3],[39,1],[42,2],[42,1],[49,4],[50,0],[50,1],[50,1],[50,1],[52,2],[52,2],[52,0],[26,0],[26,2],[27,0],[27,4],[63,1],[63,3],[65,5],[65,4],[65,4],[65,1],[64,0],[64,2],[30,0],[30,2],[30,3],[30,2],[30,2],[28,0],[28,3],[75,1],[75,3],[76,1],[76,2],[76,3],[76,4],[29,0],[29,3],[81,0],[81,2],[34,3],[34,1],[83,3],[83,1],[85,5],[85,3],[85,1],[87,5],[87,3],[87,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[88,4],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[89,4],[89,3],[104,1],[104,3],[37,1],[91,1],[91,1],[92,1],[93,1],[95,4],[94,2],[94,2],[94,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,6],[90,6],[90,3],[90,3],[90,2],[90,2],[90,3],[90,5],[90,6],[90,5],[90,6],[90,3],[90,3],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[126,1],[126,1],[126,1],[14,6],[14,4],[137,1],[137,3],[138,3],[15,5],[15,3],[13,5],[13,8],[13,4],[13,7],[142,3],[142,5],[143,1],[143,3],[144,1],[144,1],[144,1],[144,1],[144,1],[144,1],[59,1],[59,3],[16,9],[147,0],[147,1],[147,1],[149,0],[149,3],[150,1],[150,2],[155,1],[155,3],[156,3],[156,2],[157,6],[157,4],[157,1],[158,0],[158,2],[158,2],[151,0],[163,3],[163,1],[164,0],[17,5],[17,3],[18,6],[18,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 2:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$01]); 
break;
case 3: case 161:
 this.$ = [$$[$0-1]]; 
break;
case 4: case 28: case 36: case 49: case 64: case 75: case 105: case 152: case 163: case 171:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 6:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 14: case 15: case 32: case 54: case 77: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 141: case 142: case 143: case 144: case 145: case 146:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = $$[$0];
break;
case 18:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 19:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-1]); 
break;
case 20:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-1]); 
break;
case 21:
 this.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-1]); 
break;
case 22:
 this.$ = {top: $$[$0]}; 
break;
case 23: case 44: case 45: case 47: case 55: case 57: case 62: case 70: case 72: case 174: case 177: case 198:
 this.$ = null; 
break;
case 24: case 188:
this.$ = null
break;
case 25:
this.$ = $$[$0]
break;
case 26:
 this.$ = { from: $$[$0] }; 
break;
case 27:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 29: case 50: case 153:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 30:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 31:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 33:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 34:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 35:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 37:
 this.$ = new yy.Join({table:$$[$0-1], joinmode: $$[$0-3]}); yy.extend(this.$, $$[$0]); 
break;
case 38:
this.$ = "INNER";
break;
case 39: case 40: case 41:
this.$ = $$[$0];
break;
case 42:
 this.$ = {on: $$[$0]}; 
break;
case 43:
 this.$ = {using: $$[$0]}; 
break;
case 46:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 48:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 51:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 52:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 53:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 56:
 this.$ = {having:$$[$0]}
break;
case 58:
 this.$ = {union: $$[$0]} ; 
break;
case 59:
 this.$ = {unionall: $$[$0]} ; 
break;
case 60:
 this.$ = {except: $$[$0]} ; 
break;
case 61:
 this.$ = {intersect: $$[$0]} ; 
break;
case 63:
 this.$ = {order:$$[$0]}
break;
case 65:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 66:
 this.$ = new yy.OrderExpression({expression: $$[$0], direction:'ASC'}) 
break;
case 67:
 this.$ = new yy.OrderExpression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 68:
 this.$ = new yy.OrderExpression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 69:
 this.$ = new yy.OrderExpression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 71:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 73:
 this.$ = {offset:$$[$0]}
break;
case 74: case 182:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 76:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 78:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 79:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 80:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 81:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 82:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 83:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 95:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-3].toUpperCase(), expression: $$[$0-1]}); 
break;
case 103:
 this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
break;
case 104:
 this.$ = new yy.FuncValue({funcid: $$[$0-2]}); 
break;
case 106:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 107:
 this.$ = new yy.NumValue({value:$$[$0]}); 
break;
case 108:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 109:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 110:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/\'\'/g,"'")}); 
break;
case 111:
 this.$ = new yy.NullValue({value:null}); 
break;
case 112:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 113: case 114:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 115:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
			console.log(yy.question);
		
break;
case 116:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 117:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 118:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 119:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 120:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 121:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 122:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 123:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 124:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 125:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 126:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 127:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 128:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 129:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 130:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 131:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 132:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 133:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 134:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 135:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 136:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 137:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 138:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 139:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 140:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 147:
 this.$ = 'ALL'; 
break;
case 148:
 this.$ = 'SOME'; 
break;
case 149:
 this.$ = 'ANY'; 
break;
case 150:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 151:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 154:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 155:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 156:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 157:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 158:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 159:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 160:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 162:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 164: case 172:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 173:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			yy.extend(this.$,$$[$0-7]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]);
		
break;
case 175: case 176:
 this.$ = {temporary:true}; 
break;
case 178:
 this.$ = {ifnotexists: true}; 
break;
case 179:
 this.$ = {columns: $$[$0]}; 
break;
case 180:
 this.$ = {as: $$[$0]} 
break;
case 181:
 this.$ = [$$[$0]];
break;
case 183:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 184:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 185:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 186:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 187:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 189:
this.$ = {primarykey:true};
break;
case 190:
this.$ = {notnull:true};
break;
case 191:
this.$ = null;
break;
case 192:
this.$=$$[$0-2]; $$[$0-2].push($$[$0])
break;
case 193:
this.$ = [$$[$0]];
break;
case 195:
 this.$ = new yy.DropTable({table:$$[$0], ifexists:true}); 
break;
case 196:
 this.$ = new yy.DropTable({table:$$[$0]}); 
break;
case 197:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
}
},
table: [{3:1,4:2,6:3,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,135:$V1,139:$V2,140:$V3,146:$V4,165:$V5,166:$V6},{1:[3]},{5:[1,19],6:20,12:4,13:5,14:6,15:7,16:8,17:9,18:10,23:11,31:$V0,135:$V1,139:$V2,140:$V3,146:$V4,165:$V5,166:$V6},o($V7,[2,4],{7:[1,21]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{24:22,38:[1,23],40:[2,24]},{38:[1,24]},{39:25,47:$V9},{40:[1,27]},{147:28,148:[2,174],152:[1,29],153:[1,30]},{148:[1,31]},{148:[1,32]},o($Va,$Vb,{33:35,32:[1,33],35:[1,34],36:$Vc}),{1:[2,1]},o($V7,[2,2]),o($V7,[2,3]),{25:37,40:[1,38]},{39:39,47:$V9},{39:40,47:$V9},{136:[1,41]},o($Vd,[2,34],{48:[1,42]}),{39:43,47:$V9},{148:[1,44]},{148:[2,175]},{148:[2,176]},{39:46,47:$V9,154:[1,45]},{39:47,47:$V9},o($Va,$Vb,{33:48,36:$Vc}),o($Va,$Vb,{33:49,36:$Vc}),{34:50,37:58,45:$Ve,47:$Vf,57:52,83:51,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:86,105:$Vo},o($Vz,[2,45],{26:87,60:[1,88]}),{39:90,41:89,43:91,45:$VA,47:$V9},{40:[2,25]},{12:95,23:11,31:$V0,45:[1,94],141:[1,93]},{47:$VB,87:98,137:96,138:97},{47:[1,100]},o($V8,[2,156],{60:[1,101]}),{47:[2,177],149:102,154:[1,103]},{110:[1,104]},o($V8,[2,196]),{167:[1,105],169:[1,106]},{34:107,37:58,45:$Ve,47:$Vf,57:52,83:51,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{34:108,37:58,45:$Ve,47:$Vf,57:52,83:51,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VC,[2,21],{44:$VD}),o($VE,[2,75]),o($VE,[2,77],{125:123,84:[1,110],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,[2,84]),o($VX,[2,85]),o($VX,[2,86]),o($VX,[2,87]),o($VX,[2,88]),o($VX,[2,89]),o($VX,[2,90]),o($VX,[2,91]),o($VX,[2,92]),o($VX,[2,93]),o($VX,[2,94]),{45:[1,130]},o($VX,$VY,{45:[1,131],48:[1,132]}),{37:58,45:$Ve,47:$Vf,57:133,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:134,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:135,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VX,[2,80]),o([5,7,31,38,40,44,45,46,47,51,53,54,55,60,61,70,71,72,73,74,77,78,80,82,84,86,97,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,146,165,166],[2,107]),o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110]),o($VX,[2,111]),{47:[1,136]},{47:[1,137]},o($VX,[2,115]),{45:[1,138]},{45:[2,96]},{45:[2,97]},{45:[2,98]},{45:[2,99]},{45:[2,100]},{45:[2,101]},{45:[2,102]},o($Va,[2,22]),o($VZ,[2,47],{27:139,61:[1,140]}),{37:58,45:$Ve,47:$Vf,57:141,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($V_,[2,26],{44:[1,142]}),o($V$,$V01,{42:143,49:145,50:146,47:$V11,51:$V21,53:$V31,54:$V41,55:$V51}),o($V$,[2,28]),{12:150,23:11,31:$V0},{45:$V61,142:151},{47:$VB,59:153,87:154},o($V8,[2,159]),o($V8,[2,151],{44:[1,156],60:[1,155]}),o($V71,[2,152]),{123:[1,157]},o($V81,$VY,{48:[1,158]}),o($Vd,[2,33]),{37:58,45:$Ve,47:$Vf,57:159,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{39:160,47:$V9},{129:[1,161]},{39:162,47:$V9},{168:[1,163]},{170:[1,164]},o($VC,[2,19],{44:$VD}),o($VC,[2,20],{44:$VD}),{37:58,45:$Ve,47:$Vf,57:52,83:165,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:[1,166]},{37:58,45:$Ve,47:$Vf,57:167,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:168,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:169,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:170,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:171,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:172,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($V91,[2,141],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:173,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V91,[2,142],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:174,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V91,[2,143],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:175,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V91,[2,144],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:176,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V91,[2,145],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:177,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),o($V91,[2,146],{88:53,89:54,90:55,87:56,85:57,37:58,91:59,92:60,93:61,94:62,95:63,96:64,57:178,45:$Ve,47:$Vf,86:$Vg,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy}),{35:[1,180],126:179,133:[1,181],134:[1,182]},{37:58,45:$Ve,47:$Vf,57:183,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:184,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{45:[1,185]},{130:[1,186]},{37:58,45:$Ve,47:$Vf,57:187,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:188,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:189,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,46:[1,191],47:$Vf,57:192,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:190,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:[1,193],86:[1,194]},o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,146,165,166],[2,132],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK}),o($Va1,[2,133],{125:123,86:$VF,117:$VJ,118:$VK}),{46:[1,195],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,125:123,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW},o($VX,[2,113]),o($VX,[2,114]),{12:196,23:11,31:$V0},o($Vb1,[2,62],{28:197,74:[1,198]}),{62:[1,199]},o($Vz,[2,46],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),{39:201,43:200,45:$VA,47:$V9},o($V_,[2,27],{50:146,49:202,51:$V21,53:$V31,54:$V41,55:$V51}),o($V$,[2,31]),o($Vc1,[2,36]),{51:[1,203]},{51:[2,39]},{51:[2,40]},{51:[2,41]},{46:[1,204]},o($V8,[2,157],{44:$Vd1}),{37:208,91:210,92:209,93:211,94:213,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,111:$Vu,112:$Vv,113:$Vw,143:206,144:207,145:$Ve1},{44:$Vf1,46:[1,214]},o($Vg1,[2,171]),{37:58,45:$Ve,47:$Vf,57:216,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:$VB,87:98,138:217},{37:58,45:$Ve,47:$Vf,57:218,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:[1,219]},o($V8,[2,155],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),{45:[1,220]},{110:[1,221]},o($V8,[2,195]),{47:[1,222]},{47:$Vh1,156:223},o($VE,[2,74]),o($VE,[2,76]),o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,114,119,120,121,122,123,124,127,128,129,130,131,132,135,139,140,146,165,166],[2,116],{125:123,86:$VF,115:$VH,116:$VI,117:$VJ,118:$VK}),o($Va1,[2,117],{125:123,86:$VF,117:$VJ,118:$VK}),o($Va1,[2,118],{125:123,86:$VF,117:$VJ,118:$VK}),o($VX,[2,119],{125:123}),o($VX,[2,120],{125:123}),o($VX,[2,121],{125:123}),o($Vi1,[2,122],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vi1,[2,123],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vi1,[2,124],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vi1,[2,125],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vi1,[2,126],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),o($Vi1,[2,127],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,129:$VT,130:$VU}),{45:[1,225]},{45:[2,147]},{45:[2,148]},{45:[2,149]},o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,127,128,131,132,135,139,140,146,165,166],[2,130],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,129:$VT,130:$VU}),o([5,7,31,38,40,44,46,51,53,54,55,60,61,70,71,72,73,74,77,78,80,84,128,135,139,140,146,165,166],[2,131],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,129:$VT,130:$VU,131:$VV,132:$VW}),{12:226,23:11,31:$V0,37:58,45:$Ve,47:$Vf,57:192,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:227,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{45:[1,228]},o($Vj1,[2,139],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,129:$VT,130:$VU}),o($Vj1,[2,140],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,129:$VT,130:$VU}),{46:[1,229],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,125:123,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW},{44:$Vk1,46:[1,230]},o($VX,[2,104]),o($Vl1,[2,105],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,$Vm1,{48:[1,232]}),o($VX,[2,79]),o($VX,[2,134]),{46:[1,233]},o($Vn1,[2,70],{29:234,80:[1,235]}),{62:[1,236]},{37:58,45:$Ve,47:$Vf,57:242,63:237,65:238,66:$Vo1,68:$Vp1,69:$Vq1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($V$,[2,29]),o($V$,$V01,{47:$V11}),o($Vc1,[2,35]),{39:243,47:$V9},{47:[1,244]},{45:[1,245]},{44:$Vr1,46:[1,246]},o($Vl1,[2,163]),o($Vl1,[2,165]),o($Vl1,[2,166]),o($Vl1,[2,167]),o($Vl1,[2,168]),o($Vl1,[2,169]),o($Vl1,[2,170]),{12:249,23:11,31:$V0,141:[1,248]},{47:$VB,87:250},o($V8,[2,150],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($V71,[2,153]),o($V71,[2,154],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($V81,$Vm1,{48:[1,251]}),{47:$Vh1,84:[1,254],150:252,155:253,156:255},{47:[2,178]},o($V8,[2,197]),o($V8,[2,198]),{47:[1,258],157:256,159:[1,257]},{12:259,23:11,31:$V0,37:58,45:$Ve,47:$Vf,57:192,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:260,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{46:[1,261]},{44:$Vk1,46:[1,262]},{12:263,23:11,31:$V0,37:58,45:$Ve,47:$Vf,57:192,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,104:264,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VX,[2,95]),o($VX,[2,103]),{37:58,45:$Ve,47:$Vf,57:265,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:$Vs1,86:[1,267]},o($VX,[2,112]),o($Vt1,[2,57],{30:268,71:[1,269],72:[1,270],73:[1,271]}),{37:272,105:$Vo},{37:58,45:$Ve,47:$Vf,57:275,75:273,76:274,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($VZ,[2,55],{64:276,44:$Vu1,70:[1,278]}),o($Vv1,[2,49]),{67:[1,279]},{45:[1,280]},{45:[1,281]},o($Vv1,[2,54],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($Vc1,[2,44],{52:282,56:[1,283],58:[1,284]}),o($V$,[2,30]),{37:208,91:210,92:209,93:211,94:213,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,111:$Vu,112:$Vv,113:$Vw,143:285,144:207,145:$Ve1},o($Vw1,[2,161]),{37:208,91:210,92:209,93:211,94:213,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,111:$Vu,112:$Vv,113:$Vw,144:286,145:$Ve1},{45:$V61,142:287},o($V8,[2,160]),o($Vg1,[2,172]),{47:$Vs1},{46:[2,191],151:288},{44:[1,289],46:[2,179]},{12:290,23:11,31:$V0},o($Vl1,[2,181]),o($Vx1,[2,188],{158:291,129:[1,293],161:[1,292]}),o($Vx1,[2,184]),o($Vy1,[2,187],{45:[1,294]}),{46:[1,295]},{44:$Vk1,46:[1,296]},o($VX,[2,135]),o($VX,[2,137]),{46:[1,297]},{44:$Vk1,46:[1,298]},o($Vl1,[2,106],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,[2,81]),o($VX,[2,78]),o($Vt1,[2,18]),{12:299,23:11,31:$V0,35:[1,300]},{12:301,23:11,31:$V0},{12:302,23:11,31:$V0},o($Vn1,[2,72],{81:303,82:[1,304]}),o($Vb1,[2,63],{44:[1,305]}),o($Vz1,[2,64]),o($Vz1,[2,66],{125:123,77:[1,306],78:[1,307],86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VZ,[2,48]),{37:58,45:$Ve,47:$Vf,57:242,65:308,66:$Vo1,68:$Vp1,69:$Vq1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:309,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{45:[1,310]},{37:58,45:$Ve,47:$Vf,57:242,63:311,65:238,66:$Vo1,68:$Vp1,69:$Vq1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{37:58,45:$Ve,47:$Vf,57:242,63:312,65:238,66:$Vo1,68:$Vp1,69:$Vq1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($Vc1,[2,37]),{37:58,45:$Ve,47:$Vf,57:313,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{47:$VB,59:314,87:154},{44:$Vr1,46:[1,315]},o($Vl1,[2,164]),o($V8,[2,158],{44:$Vd1}),{46:[1,316]},{47:$Vh1,156:317},{46:[2,180]},o($Vx1,[2,183]),{162:[1,318]},{109:[1,319]},{160:[1,320]},o($VX,[2,128]),o($VX,[2,129]),o($VX,[2,136]),o($VX,[2,138]),o($Vt1,[2,58]),{12:321,23:11,31:$V0},o($Vt1,[2,60]),o($Vt1,[2,61]),o($Vn1,[2,71]),{37:322,105:$Vo},{37:58,45:$Ve,47:$Vf,57:275,76:323,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},o($Vz1,[2,67]),{79:[1,324]},o($Vv1,[2,50]),o($VZ,[2,56],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),{37:58,45:$Ve,47:$Vf,57:242,63:325,65:238,66:$Vo1,68:$Vp1,69:$Vq1,85:57,86:$Vg,87:56,88:53,89:54,90:55,91:59,92:60,93:61,94:62,95:63,96:64,97:$Vh,98:$Vi,99:$Vj,100:$Vk,101:$Vl,102:$Vm,103:$Vn,105:$Vo,106:$Vp,107:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,116:$Vx,129:$Vy},{44:$Vu1,46:[1,326]},{44:$Vu1,46:[1,327]},o($Vc1,[2,42],{125:123,86:$VF,114:$VG,115:$VH,116:$VI,117:$VJ,118:$VK,119:$VL,120:$VM,121:$VN,122:$VO,123:$VP,124:$VQ,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($Vc1,[2,43],{44:$Vf1}),o($Vw1,[2,162]),o($V8,[2,173]),o($Vl1,[2,182]),o($Vx1,[2,189]),o($Vx1,[2,190]),{46:[1,329],48:[1,328]},o($Vt1,[2,59]),o($Vn1,[2,73]),o($Vz1,[2,65]),o($Vz1,[2,68],{77:[1,330]}),{44:$Vu1,46:[1,331]},o($Vv1,[2,52]),o($Vv1,[2,53]),{160:[1,332]},o($Vy1,[2,186]),o($Vz1,[2,69]),o($Vv1,[2,51]),{46:[1,333]},o($Vy1,[2,185])],
defaultActions: {19:[2,1],29:[2,175],30:[2,176],39:[2,25],79:[2,96],80:[2,97],81:[2,98],82:[2,99],83:[2,100],84:[2,101],85:[2,102],147:[2,39],148:[2,40],149:[2,41],180:[2,147],181:[2,148],182:[2,149],221:[2,178],290:[2,180]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 35
break;
case 2:return 166
break;
case 3:return 127
break;
case 4:return 134
break;
case 5:return 'ANTI'
break;
case 6:return 84
break;
case 7:return 77
break;
case 8:return 101
break;
case 9:return 131
break;
case 10:return 132
break;
case 11:return 62
break;
case 12:return 146
break;
case 13:return 78
break;
case 14:return "COUNT"
break;
case 15:return 69
break;
case 16:return 139
break;
case 17:return 77
break;
case 18:return 32
break;
case 19:return 165
break;
case 20:return 72
break;
case 21:return 110
break;
case 22:return 9
break;
case 23:return 107
break;
case 24:return 102
break;
case 25:return 40
break;
case 26:return 61
break;
case 27:return 66
break;
case 28:return 70
break;
case 29:return 154
break;
case 30:return 130
break;
case 31:return 55
break;
case 32:return 140
break;
case 33:return 73
break;
case 34:return 38
break;
case 35:return 51
break;
case 36:return 162
break;
case 37:return 103
break;
case 38:return 53
break;
case 39:return 114
break;
case 40:return 80
break;
case 41:return "MAX"
break;
case 42:return "MIN"
break;
case 43:return 79
break;
case 44:return 129
break;
case 45:return 109
break;
case 46:return 56
break;
case 47:return 82
break;
case 48:return 128
break;
case 49:return 74
break;
case 50:return 11
break;
case 51:return 161
break;
case 52:return 10
break;
case 53:return 167
break;
case 54:return 54
break;
case 55:return 68
break;
case 56:return 31
break;
case 57:return 136
break;
case 58:return 67
break;
case 59:return 133
break;
case 60:return "SUM"
break;
case 61:return 148
break;
case 62:return 168
break;
case 63:return 36
break;
case 64:return 106
break;
case 65:return 71
break;
case 66:return 135
break;
case 67:return 58
break;
case 68:return 141
break;
case 69:return 60
break;
case 70:return 115
break;
case 71:return 116
break;
case 72:return 86
break;
case 73:return 117
break;
case 74:return 118
break;
case 75:return 120
break;
case 76:return 119
break;
case 77:return 122
break;
case 78:return 124
break;
case 79:return 121
break;
case 80:return 123
break;
case 81:return 124
break;
case 82:return 45
break;
case 83:return 46
break;
case 84:return 48
break;
case 85:return 44
break;
case 86:return 112
break;
case 87:return 7
break;
case 88:return 111
break;
case 89:return 113
break;
case 90:return 47
break;
case 91:return 105
break;
case 92:return 108
break;
case 93:return 5
break;
case 94:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:ANTI\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AVG\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:COLLATE\b)/i,/^(?:COUNT\b)/i,/^(?:CUBE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FIRST\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:NOCASE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RENAME\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLUP\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SOME\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VALUES\b)/i,/^(?:WHERE\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

/*
//
// Utilities for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Fast hash function
function hash(str){
    var h = 0;
    if (str.length == 0) return h;
    for (var i = 0; i < str.length; i++) {
        h = ((h<<5)-h)+str.charCodeAt(i);
        h = h & h; 
   	}
    return h;
};

// Union arrays
arrayUnion = function(a,b) {
    var r = b.slice(0);
    a.forEach(function(i) { if (r.indexOf(i) < 0) r.push(i); });
    return r;
};

// Array Difference
arrayDiff = function(a,b) {
    return a.filter(function(i) {return b.indexOf(i) < 0;});
};

// Arrays deep union (with records)
arrayUnionDeep = function(a,b) {
    var r = b.slice(0);
    a.forEach(function(ai) {
        var found = false;
        
        r.forEach(function(ri){
            found = found || equalDeep(ai, ri, true);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

// Arrays deep union (with records)
arrayExceptDeep = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
            found = found || equalDeep(ai, bi, true);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

// Arrays deep intersect (with records)
arrayIntersectDeep = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
            found = found || equalDeep(ai, bi, true);
        });

        if(found) {
            r.push(ai); 
        }
    });
    return r;
};

// Deep clone obects
function cloneDeep(obj) {
    if(obj == null || typeof(obj) != 'object')
        return obj;

    var temp = obj.constructor(); // changed

    for(var key in obj) {
        if(obj.hasOwnProperty(key)) {
            temp[key] = cloneDeep(obj[key]);
        }
    }
    return temp;
}

// Check equality of objects
equalDeep = function (x, y, deep) {
    if (deep) {
        if (x == y) return true;

        var p;
        for (p in y) {
            if (typeof (x[p]) == 'undefined') { return false; }
        }

        for (p in y) {
            if (y[p]) {
                switch (typeof (y[p])) {
                    case 'object':
                        if (!equalDeep(y[p],x[p])) { return false; } break;
                    case 'function':
                        if (typeof (x[p]) == 'undefined' ||
                  (p != 'equals' && y[p].toString() != x[p].toString()))
                            return false;
                        break;
                    default:
                        if (y[p] != x[p]) { return false; }
                }
            } else {
                if (x[p])
                    return false;
            }
        }

        for (p in x) {
            if (typeof (y[p]) == 'undefined') { return false; }
        }

        return true;
    }
    return x == y;
};

// Extend object
function extend (a,b){
    if(typeof a == 'undefined') a = {};
    for(key in b) {
        if(b.hasOwnProperty(key)) {
            a[key] = b[key]
        }
    }
    return a;
};;

// Flat array by first row
flatArray = function flatArray(a) {
    if(!a || a.length == 0) return [];
    var key = Object.keys(a[0])[0];
    if(typeof key == 'undefined') return [];
    return a.map(function(ai) {return ai[key]});
}



/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Main database variable
var alasql = {};

// Initial parameters
alasql.parser = parser;
alasql.parse = parser.parse.bind(parser); // Shortcut
alasql.databases = {};

// Create default database
alasql.currentDatabase = new Database();
alasql.tables = alasql.currentDatabase.tables;

alasql.MAXSQLCACHESIZE = 10000;

// Main Database class
function Database(databaseid) {
	var self = this;
	if(self == alasql) self = new Database(databaseid); // to call without new
	if(!databaseid) {
		databaseid = +Date.now()+""; // Random name
	}
	self.databaseid = databaseid;
	alasql.databases[databaseid] = self;
	self.tables = {};   // Tables
	self.sqlcache = {}; // Cache for compiled SQL statements
	self.sqlcachesize = 0;
	return self;
};

// Start database
alasql.Database = Database;

// Compiler
alasql.compile = function(sql) {
	return this.currentDatabase.compile(sql);
}

// Default methods to exec SQL statements
alasql.run = alasql.exec = function (sql, params, cb) {
	return this.currentDatabase.exec(sql, params, cb);
};

// Promised version of exec
alasql.aexec = function (sql, params) {
	return this.currentDatabase.aexec(sql, params);
};


// MSSQL-Like aliases
alasql.query = function (sql, params, cb) {
	return this.currentDatabase.query(sql, params.cb);
}
alasql.querySingle = function (sql, params, cb) {
	return this.currentDatabase.querySingle(sql, params, cb);
}
alasql.queryValue = function (sql, params, cb) {
	return this.currentDatabase.queryValue(sql, params, cb);
}

alasql.indexColumns = function(tableid) {
	this.currentDatabase.indexColumns(tableid);
}

// Main SQL function
Database.prototype.exec = function(sql, params, cb) {
	// Compile
	var statement = this.compile(sql);
	// Run
	var data = statement(params, cb);
	return data;
};

// Async version of exec
Database.prototype.aexec = function(sql, params) {
	var self = this;
	return new Promise(function(resolve, reject){
		self.exec(sql,params,resolve);
	});
};


// Aliases like MS SQL
Database.prototype.query = Database.prototype.exec;
Database.prototype.run = Database.prototype.exec;
Database.prototype.querySingle = function(sql, params, cb) {
	return this.exec(sql, params, cb)[0];
}
Database.prototype.queryValue = function(sql, params, cb) {
	var res = this.querySingle(sql, params, cb);
	return res[Object.keys(res)[0]];
}


// Compile statements
Database.prototype.compile = function(sql) {
	var hh = hash(sql);

	// Check cache with hash of SQL statement
	var statement = this.sqlcache[hh];
	if(!statement) {
		// If not fount, then compile it
		var ast = alasql.parse(sql);
		// Save to cache
		statement = this.sqlcache[hh]= ast.compile(this);

		// Memory leak prevention 
		this.sqlcachesize++;
		if(this.sqlcachesize > alasql.MAXSQLCACHESIZE) {
			delete this.sqlcache;
			this.sqlcachesize = 0;
		}
	};
	return statement;
}

// SQL.js compatibility method
Database.prototype.prepare = Database.prototype.compile;

// Added for compatibility with WebSQL
Database.prototype.transaction = function(cb) {
	var tx = new alasql.Transaction(this.databaseid);
	var res = cb(tx);
	return res;
};

// Index columns in table utility
Database.prototype.indexColumns = function(tableid) {
	var table = this.tables[tableid];
	table.xcolumns = {};
	table.columns.forEach(function(col){
		table.xcolumns[col.columnid] = col;
	});	
}


/*
//
// Transactio class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Transaction class (for WebSQL compatibility)
function Transaction(databaseid) {
	this.transactionid = Date.now();
	this.databaseid = databaseid;
	this.commited = false; 
	this.bank = JSON.stringify(alasql.databases[databaseid].tables);
	return this;
};

// Main class 
alasql.Transaction = Transaction;

// Commit
Transaction.prototype.commit = function() {
	this.commited = true;
	delete this.bank;
};

// Rollback
Transaction.prototype.rollback = function() {
	alasql.databases[this.databaseid].tables = JSON.parse(this.bank);
};

// Transactions stub
Transaction.prototype.exec = Transaction.prototype.executeSQL = function(sql, params, cb) {
	return alasql.databases[this.databaseid].exec(sql);
};



/*
//
// Persistence Store for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Store to Storage
alasql.store = function(databaseid, transactionid) {
	var obj = {
		tables: alasql.databases[databaseid].tables
	};
	var key = databaseid;
	if(transactionid) key += "."+transactionid;
	localStorage[key] = JSON.stringify(obj);
};

// Restore from localStorage
alasql.restore = function(databaseid, transactionid) {
	var key = databaseid;
	if(transactionid) key += "."+transactionid;

	var res = localStorage[key];
	if(res) {
		var obj = JSON.parse(localStorage[key]);
		var db = new alasql.Database(databaseid);
		db.databaseid = databaseid;
		db.tables = obj.tables;
		return db;
	} else {
		return null;
	}

};

// Clear all database records with transactions
alasql.wipe = function (databaseid, transactionid) {
	var key = databaseid;
	if(transactionid) {
		key += "."+transactionid;
		localStorage.removeItem(key);
	} else {
		for(var key in localStorage) {
			if(key.substr(0,databaseid.length+1) == databaseid+".") {
				localStorage.removeItem(key);
			};
		};
		localStorage.removeItem(databaseid);
	}
};

/*
//
// Parser helper for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

var yy = parser.yy = {};

// Utility
yy.extend = extend;


/*
//
// Statements class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Statements container
yy.Statements = function(params) { return yy.extend(this, params); };

yy.Statements.prototype.toString = function () {
	return this.statements.map(function(st){return st.toString()}).join(';');
};

// Compile array of statements into single statement
yy.Statements.prototype.compile = function(db) {
	var statements = this.statements.map(function(st){return st.compile(db)});
	if(statements.length == 1) {
		return statements[0];	
	} else {
		return function(params, cb){
			var res = statements.map(function(st){ return st(params); });
			if(cb) cb(res);
			return res;
		}
	}
};



/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

//
// Main part of SELECT procedure
//

yy.Select = function (params) { return yy.extend(this, params); }
yy.Select.prototype.toString = function() {
	var s = 'SELECT ';
	if(this.top) s += 'TOP '+this.top.value+' ';
	s += this.columns.map(function(col){
		var s = col.toString();
	//	console.log(col);
		if(col.as) s += ' AS '+col.as;
		return s;
	}).join(',');
	s += ' FROM '+this.from.map(function(f){return f.toString()}).join(',');

	if(this.where) s += ' WHERE '+this.where.toString();
	if(this.group) s += ' GROUP BY '+this.group.toString();
	if(this.having) s += ' HAVING '+this.having.toString();
	if(this.order) s += ' ORDER BY '+this.order.toString();
	if(this.union) s += ' UNION '+this.union.toString();
	if(this.unionall) s += ' UNION ALL '+this.unionall.toString();
	if(this.except) s += ' EXCEPT '+this.except.toString();
	if(this.intersect) s += ' INTERSECT '+this.intersect.toString();
	if(this.limit) s += ' LIMIT '+this.limit.value;
	if(this.offset) s += ' OFFSET '+this.offset.value;
	return s;
};

// Compile SELECT statement
yy.Select.prototype.compile = function(db) {
	// Create variable for query
	var query = {};

	query.database = db;
	// 0. Precompile whereexists
	this.compileWhereExists(query);

	// 0. Precompile queries for IN, NOT IN, ANY and ALL operators
	this.compileQueries(query);
	
	// 1. Compile FROM clause
	query.fromfn = this.compileFrom(query);
	// 2. Compile JOIN clauses
	if(this.joins) this.compileJoins(query);
	// 3. Compile SELECT clause
	query.selectfn = this.compileSelect(query);
	// 5. Optimize WHERE and JOINS
	if(this.where) this.compileWhereJoins(query);

	// 4. Compile WHERE clause
	query.wherefn = this.compileWhere(query);


	// 6. Compile GROUP BY
	if(this.group) query.groupfn = this.compileGroup(query);
	// 7. Compile DISTINCT, LIMIT and OFFSET
	query.distinct = this.distinct;

	if(this.top) {
		query.limit = this.top.value;
	} else if(this.limit) {
		query.limit = this.limit.value;
		if(this.offset) {
			query.offset = this.offset.value;
		}
	}
	// 8. Compile ORDER BY clause
	if(this.order) query.orderfn = this.compileOrder(query);

	// 9. Compile ordering function for UNION and UNIONALL
	if(this.union) {
		query.unionfn = this.union.compile(db);
		if(this.union.order) {
			query.orderfn = this.union.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.unionall) {
		query.unionallfn = this.unionall.compile(db);
		if(this.unionall.order) {
			query.orderfn = this.unionall.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.except) {
		query.exceptfn = this.except.compile(db);
		if(this.except.order) {
			query.orderfn = this.except.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.intersect) {
		query.intersectfn = this.intersect.compile(db);
		if(this.intersect.order) {
			query.intersectfn = this.intersect.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	};

//console.log(query);

	// Now, compile all togeather into one function with query object in scope
	return function(params, cb, oldscope) {
		query.params = params;
		var res = queryfn(query,oldscope); 
		if(cb) cb(res); 
		return res;
	}
};

// Main query procedure
function queryfn(query,oldscope) {

	// Run all subqueries before main statement
	if(query.queriesfn) {
		query.queriesdata = query.queriesfn.map(function(q){return flatArray(q(query.params))});
//		console.log(query.queriesdata[0]);
	}

	var scope;
	if(!oldscope) scope = {};
	else scope = cloneDeep(oldscope);
	query.scope = scope;

	// First - refresh data sources
	query.sources.forEach(function(source){
//		source.data = query.database.tables[source.tableid].data;
		source.data = source.datafn(); 

//
// Ugly hack to use in query.wherefn and source.srcwherefns functions
// constructions like this.queriesdata['test'].
// I can elimite it with source.srcwherefn.bind(this)()
// but it may be slow.
// 
		source.queriesdata = query.queriesdata;  
	});

	// Preindexation of data sources
	if(!oldscope) {
		preIndex(query);
	}

	// Prepare variables
	query.data = [];
	query.xgroups = {};
	query.groups = [];

	// Level of Joins
	var h = 0;

	// Start walking over data
	doJoin(query, scope, h);

	// If groupping, then filter groups with HAVING function
	if(query.groupfn) {
		if(query.havingfn) query.groups = query.groups.filter(query.havingfn)
		query.data = query.groups;
	};

	// Remove distinct values	
	doDistinct(query);	

	// Reduce to limit and offset
	doLimit(query);

	// UNION / UNION ALL
	if(query.unionallfn) {
		query.data = query.data.concat(query.unionallfn(query.params));
	} else if(query.unionfn) {
		query.data = arrayUnionDeep(query.data, query.unionfn(query.params));
	} else if(query.exceptfn) {
		query.data = arrayExceptDeep(query.data, query.exceptfn(query.params));
	} else if(query.intersectfn) {
		query.data = arrayIntersectDeep(query.data, query.intersectfn(query.params));
	};

	// Ordering
	if(query.orderfn) query.data = query.data.sort(query.orderfn);

	// That's all
	return query.data;
};

// Limiting
function doLimit (query) {
//	console.log(query.limit, query.offset)
	if(query.limit) {
		var offset = 0;
		if(query.offset) offset = ((query.offset|0)-1)||0;
		var limit = (query.limit|0) + offset;
		query.data = query.data.slice(offset,limit);
	}
}

// Distinct
function doDistinct (query) {
	if(query.distinct) {
		var uniq = {};
		// TODO: Speedup, because Object.keys is slow
		for(var i=0,ilen=query.data.length;i<ilen;i++) {
			var uix = Object.keys(query.data[i]).map(function(k){return query.data[i][k]}).join('`');
			uniq[uix] = query.data[i];
		};
		query.data = [];
		for(var key in uniq) query.data.push(uniq[key]);
	}
};


// Optimization: preliminary indexation of joins
preIndex = function(query) {
//	console.log(query);
	// Loop over all sources
	for(var k=0, klen = query.sources.length;k<klen;k++) {
		var source = query.sources[k];
		// If there is indexation rule
		if(source.optimization == 'ix' && source.onleftfn && source.onrightfn) {
			// If there is no table.indices - create it
			if(!query.database.tables[source.tableid].indices) query.database.tables[source.tableid].indices = {};
				// Check if index already exists
			var ixx = query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)];
			if( !query.database.tables[source.tableid].dirty && ixx) {
				source.ix = ixx; 
			} else {
				source.ix = {};
				// Walking over source data
				var scope = {};
				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					// Prepare scope for indexation
					scope[source.alias || source.tableid] = source.data[i];

					// Check if it apply to where function 
					if(source.srcwherefn(scope, query.params)) {
						// Create index entry for each address
						var addr = source.onrightfn(scope, query.params);
						var group = source.ix [addr]; 
						if(!group) {
							group = source.ix [addr] = []; 
						}
						group.push(source.data[i]);
					}
				}
				// Save index to original table				
				query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)] = source.ix;
			}
			// Optimization for WHERE column = expression
		} else if (source.wxleftfns) {
			// Check if index exists
			var ixx = query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')];
			if( !query.database.tables[source.tableid].dirty && ixx) {
				// Use old index if exists
				source.ix = ixx;
				// Reduce data (apply filter)
				source.data = source.ix[source.wxrightfn(query.params)]; 
			} else {
				// Create new index
				source.ix = {};
				// Prepare scope
				var scope = {};
				// Walking on each source line
				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					scope[source.alias || source.tableid] = source.data[i];
					// Create index entry
					var addr = source.wxleftfn(scope, query.params);
					var group = source.ix [addr]; 
					if(!group) {
						group = source.ix [addr] = []; 
					}
					group.push(source.data[i]);
				}
//					query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`'+source.onwherefns)] = source.ix;
				query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')] = source.ix;
			}
			// Apply where filter to reduces rows
			if(source.srcwherefns) {
				if(source.data) {
					var scope = {};
					source.data = source.data.filter(function(r) {
						scope[source.alias] = r;
						return source.srcwherefn(scope, query.params);
					});
				} else {
					source.data = [];
				}
			}		

		// If there is no any optimization than apply srcwhere filter
		} else if(source.srcwherefns) {
			if(source.data) {
				var scope = {};
				source.data = source.data.filter(function(r) {
					scope[source.alias] = r;
					return source.srcwherefn(scope, query.params);
				});
			} else {
				source.data = [];
			};
		}			
		// Change this to another place (this is a wrong)
		if(query.database.tables[source.tableid]) {
			query.database.tables[source.tableid].dirty = false;
		} else {
			// this is a subquery?
		}
	}
}

//
// Join all lines over sources 
//

function doJoin (query, scope, h) {
	// Check, if this is a last join?
	if(h>=query.sources.length) {
		// Then apply where and select
		if(query.wherefn(scope,query.params)) {
			var res = query.selectfn(scope, query.params);
			// If there is a GROUP BY then pipe to groupping function
			if(query.groupfn) {
				query.groupfn(res, query.params)
			} else {
				query.data.push(res);
			}	
		}
	} else {
		var source = query.sources[h];
		var tableid = source.alias || source.tableid; 
		var pass = false; // For LEFT JOIN
		var data = source.data;

		// Reduce data for looping if there is optimization hint
		if(source.optimization == 'ix') {
			data = source.ix[ source.onleftfn(scope, query.params) ] || [];
		}

		// Main cycle
		for(var i=0, ilen=data.length; i<ilen; i++) {
			scope[tableid] = data[i];
			// Reduce with ON and USING clause
			if(!source.onleftfn || (source.onleftfn(scope, query.params) == source.onrightfn(scope, query.params))) {
				// For all non-standard JOINs like a-b=0
				if(source.onmiddlefn(scope, query.params)) {
					// Recursively call new join
					doJoin(query, scope, h+1);
					// for LEFT JOIN
					pass = true;
				}
			}
		};

		// Clear the scope after the loop
		scope[tableid] = {};

		// Additional join for LEFT JOINS
		if((source.joinmode == 'LEFT') && !pass) {
			doJoin(query,scope,h+1);
		}	
	}
};



/*
//
// EXISTS and other subqueries functions  functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExistsValue = function(params) { return yy.extend(this, params); }
yy.ExistsValue.prototype.toString = function() {
	return 'EXISTS('+this.value.toString()+')';
};

yy.ExistsValue.prototype.toJavaScript = function() {
	return 'this.existsfn['+this.existsidx+'](params,null,p).length';
};

yy.Select.prototype.compileWhereExists = function(query) {
	if(!this.exists) return;
	query.existsfn = this.exists.map(function(ex) {
		return ex.compile(query.database);
	});
};

yy.Select.prototype.compileQueries = function(query) {
	if(!this.queries) return;
	query.queriesfn = this.queries.map(function(q) {
		return q.compile(query.database);
	});
};

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT Compile functions

// Stub for non-ecisting WHERE clause 
// so is faster then if(whenrfn) whenfn()
function returnTrue () {return true};

// Compile JOIN caluese
yy.Select.prototype.compileJoins = function(query) {
	var self = this;
	this.joins.forEach(function(jn){
		var tq = jn.table;
		var source = {
			alias: tq.alias||tq.tableid,
			databaseid: jn.databaseid || query.database.databaseid,
			tableid: tq.tableid,
			joinmode: jn.joinmode,
			onmiddlefn: returnTrue,
			srcwherefns: '',	// for optimization
			srcwherefn: returnTrue
		};

		source.datafn = function() {
			return query.database.tables[source.tableid].data;
		}


		var alias = tq.as || tq.tableid;
		query.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid};

		if(jn.using) {
			var prevSource = query.sources[query.sources.length-1];
//			console.log(query.sources[0],prevSource,source);
			source.onleftfns = jn.using.map(function(colid){
				return "p['"+(prevSource.alias||prevSource.tableid)+"']['"+colid+"']";
			}).join('+"`"+');
			source.onleftfn = new Function('p,params','return '+source.onleftfns);
			source.onrightfns = jn.using.map(function(colid){
				return "p['"+(source.alias||source.tableid)+"']['"+colid+"']";
			}).join('+"`"+');
			source.onrightfn = new Function('p,params','return '+source.onrightfns);
			source.optimization = 'ix';
		} else if(jn.on) {
//console.log(jn.on);
			if(jn.on instanceof yy.Op && jn.on.op == '=' && !jn.on.allsome) {
//				console.log('ix optimization', jn.on.toJavaScript('p',query.defaultTableid) );
				source.optimization = 'ix';
			// 	source.onleftfns = jn.on.left.toJavaScript('p',query.defaultTableid);
			// 	source.onleftfn = new Function('p', 'return '+source.onleftfns);
			// 	source.onrightfns = jn.on.right.toJavaScript('p',query.defaultTableid);
			// 	source.onrightfn = new Function('p', 'return '+source.onrightfns);

				var lefts ;
				var rights ;
				var middles ;
				// Test right and left sides
				var ts = jn.on.left.toJavaScript('p',query.defaultTableid);
				var rs = jn.on.right.toJavaScript('p',query.defaultTableid);
				if((ts.indexOf("p['"+alias+"']")>-1) && !(rs.indexOf("p['"+alias+"']")>-1)){
					rights = ts;
				} else 	if(!(ts.indexOf("p['"+alias+"']")>-1) && (rs.indexOf("p['"+alias+"']")>-1)){
					lefts = ts;
				} else {
					middles = ts;
				}

				if((rs.indexOf("p['"+alias+"']")>-1) && !(ts.indexOf("p['"+alias+"']")>-1)){
					rights = rs;
				} else if(!(rs.indexOf("p['"+alias+"']")>-1) && (ts.indexOf("p['"+alias+"']")>-1)){
					lefts = rs;
				} else {
					if(middles) {
						middles = jn.on.toJavaScript('p',query.defaultTableid);
					} else {
						rights = '';
						lefts = '';
						middles = jn.on.toJavaScript('p',query.defaultTableid);
						source.optimization = 'no';
						// What to here?
					} 
				}

				source.onleftfns = lefts;
				source.onrightfns = rights;
				source.onmiddlefns = middles || 'true';
//			console.log(source.onleftfns, '-',source.onrightfns, '-',source.onmiddlefns);

				source.onleftfn = new Function('p,params', 'return '+source.onleftfns);
				source.onrightfn = new Function('p,params', 'return '+source.onrightfns);
				source.onmiddlefn = new Function('p,params', 'return '+source.onmiddlefns);

//			} else if(jn.on instanceof yy.Op && jn.on.op == 'AND') {
//				console.log('join on and ',jn);

			} else {
//				console.log('no optimization');
				source.optimization = 'no';
//				source.onleftfn = returnTrue;
//				source.onleftfns = "true";
				source.onmiddlefns = jn.on.toJavaScript('p',query.defaultTableid);
				source.onmiddlefn = new Function('p,params','return '+jn.on.toJavaScript('p',query.defaultTableid));
			};
//			console.log(source.onleftfns, source.onrightfns, source.onmiddlefns);

			// Optimization function
		};

//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
//console.log(source, jn);
		// TODO SubQueries
		if(!query.database.tables[source.tableid]) {
			throw new Error('Table \''+source.tableid+
			'\' is not exists in database \''+query.database.databaseid)+'\'';
		};
		source.data = query.database.tables[source.tableid].data;
		if(source.joinmode == 'RIGHT') {
			var prevSource = query.sources.pop();
			if(prevSource.joinmode == 'INNER') {
				prevSource.joinmode = 'LEFT';
				var onleftfn = prevSource.onleftfn;
				var onleftfns = prevSource.onleftfns;
				var onrightfn = prevSource.onrightfn;
				var onrightfns = prevSource.onrightfns;
				var optimization = prevSource.optimization;

				prevSource.onleftfn = source.onrightfn;
				prevSource.onleftfns = source.onrightfns;
				prevSource.onrightfn = source.onleftfn;
				prevSource.onrightfns = source.onleftfns;
				prevSource.optimization = source.optimization;

				source.onleftfn = onleftfn;
				source.onleftfns = onleftfns;
				source.onrightfn = onrightfn;
				source.onrightfns = onrightfns;
				source.optimization = optimization;

				source.joinmode = 'INNER';
				query.sources.push(source);
				query.sources.push(prevSource);
			} else {
				throw new Error('Do not know how to process this SQL');
			}
		} else {
			query.sources.push(source);
		}
	});
//	console.log('sources',query.sources);
}


// Compile group of statements
yy.Select.prototype.compileGroup = function(query) {
	var self = this;

	var allgroup = decartes(this.group);

	//console.log(allgroup);
	// Prepare groups
	//var allgroup = [['a'], ['a','b'], ['a', 'b', 'c']];

	// Union all arrays to get a maximum
	var allgroups = [];
	allgroup.forEach(function(a){
		allgroups = arrayUnion(allgroups, a);
	});

	// Create negative array

	var s = '';

	allgroup.forEach(function(agroup) {


		// Start of group function
		s += 'var g=this.xgroups[';

	//	var gcols = this.group.map(function(col){return col.columnid}); // Group fields with r
		// Array with group columns from record
		var rg = agroup.map(function(columnid){
			// Check, if aggregator exists but GROUP BY is not exists
			if(columnid == '') return '1'; // Create fictive groupping column for fictive GROUP BY
			else return "r['"+columnid+"']";
		});

		if(rg.length == 0) rg = ["''"];

	//	console.log('rg',rg);

		s += rg.join('+"`"+');
		s += '];if(!g) {this.groups.push(g=this.xgroups[';
		s += rg.join('+"`"+');
		s += '] = {';
	//	s += ']=r';

		s += agroup.map(function(columnid){
			if(columnid == '') return '';
			else return "'"+columnid+"':r['"+columnid+"'],";
		}).join('');


		var neggroup = arrayDiff(allgroups,agroup);

		s += neggroup.map(function(columnid){
			return "'"+columnid+"':null,";
		}).join('');


		s += self.columns.map(function(col){
			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM'
					|| col.aggregatorid == 'MIN'
					|| col.aggregatorid == 'MAX'
					|| col.aggregatorid == 'FIRST'
					|| col.aggregatorid == 'LAST'
					|| col.aggregatorid == 'AVG'
//				) { return '\''+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJavaScript(); 	
				) { return '\''+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') { return '\''+col.as+'\':1,'; }
//				else if(col.aggregatorid == 'MIN') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
//				else if(col.aggregatorid == 'MAX') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
				return '';
			} else return '';
		}).join('');





		// columnid:r.columnid
	//	var srg = [];//rg.map(function(fn){ return (fn+':'+fn); });

	//	var srg = this.group.map(function(col){
	//		if(col == '') return '';
	//		else return col.columnid+':'+col.toJavaScript('r','');
	//	});

	// Initializw aggregators

	/*
		this.columns.forEach(function(col){
	//		console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';


			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM') { srg.push("'"+col.as+'\':0'); }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') {srg.push( "'"+col.as+'\':0'); }
				else if(col.aggregatorid == 'MIN') { srg.push( "'"+col.as+'\':Infinity'); }
				else if(col.aggregatorid == 'MAX') { srg.push( "'"+col.as+'\':-Infinity'); }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
			};

		});

	*/

	/*****************/

	//	s += srg.join(',');

		// var ss = [];
		// gff.forEach(function(fn){
		// 	ss.push(fn+':rec.'+fn);
		// });
		// s += ss.join(',');
	//	s += '});};';

		s += '});} else {';
	//	console.log(s, this.columns);



	// var neggroup = arrayDiff(allgroups,agroup);

	// console.log(agroup,neggroup);

	// s += neggroup.map(function(columnid){
	// 	return "g['"+columnid+"']=null;";
	// }).join('');

	// console.log(s);


	//console.log(query.selectfn);
		s += self.columns.map(function(col){
			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM') { return 'g[\''+col.as+'\']+=r[\''+col.as+'\'];'; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') { return 'g[\''+col.as+'\']++;'; }
				else if(col.aggregatorid == 'MIN') { return 'g[\''+col.as+'\']=Math.min(g[\''+col.as+'\'],r[\''+col.as+'\']);'; }
				else if(col.aggregatorid == 'MAX') { return 'g[\''+col.as+'\']=Math.max(g[\''+col.as+'\'],r[\''+col.as+'\']);'; }
				else if(col.aggregatorid == 'FIRST') { return ''; }
				else if(col.aggregatorid == 'LAST') { return 'g[\''+col.as+'\']=r[\''+col.as+'\'];'; }
				else if(col.aggregatorid == 'AVG') { return ''; }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
				return '';
			} else return '';
		}).join('');


	//	s += selectFields.map(function(f){
	//			console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';
	//			if (f.field instanceof SQLParser.nodes.FunctionValue 
	//				&& (f.field.name.toUpperCase() == 'SUM' || f.field.name.toUpperCase() == 'COUNT')) {
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+='+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+=rec.'+f.name.value+';'; //f.field.arguments[0].toJavaScript(); 	
	//			};
	//			return '';
	//		}).join('');

		//s += '	group.amt += rec.emplid;';
		//s += 'group.count++;';

		s += '}';
	//	console.log(s, this.group);

	});

//	console.log(s);
	return new Function('r,params',s);

}

yy.Select.prototype.compileFrom = function(query) {
	var self = this;
	query.sources = [];
//	var tableid = this.from[0].tableid;
//	var as = '';
//	if(self.from[0].as) as = this.from[0].as;
//console.log(this);
	query.aliases = {};
	self.from.forEach(function(tq){
		var alias = tq.as || tq.tableid;
//		console.log(alias);
		if(tq instanceof yy.Table) {
//			console.log(tq, tq.databaseid, query);
			query.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid};
		} else if(tq instanceof yy.Select) {

		} else {
			throw new Error('Wrong table at FROM');
		}

		var source = {
			alias: alias,
			databaseid: tq.databaseid || query.database.databaseid,
			tableid: tq.tableid,
			joinmode: 'INNER',
			onmiddlefn: returnTrue,			
			srcwherefns: '',	// for optimization
			srcwherefn: returnTrue			
		};

		if(tq instanceof yy.Table) {
			source.datafn = function() {
				return query.database.tables[source.tableid].data;
			}
		} else if(tq instanceof yy.Select) {
			source.subquery = tq.compile(db);
			source.datafn = function() {
				return source.subquery(query.params);
			}						
		} else {
			throw new Error('Wrong table at FROM');
		}
//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
		query.sources.push(source);

	});
	// TODO Add joins
	query.defaultTableid = query.sources[0].alias;
//console.log(query.defaultTableid);
};

// yy.Select.prototype.compileSources = function(query) {
// 	return sources;
// };

function compileSelectStar (query,alias) {
	// console.log(query.aliases[alias]);
//	console.log(query,alias);
	// console.log(query.aliases[alias].tableid);
	var s = '', sp = '', ss=[];
	var columns = query.database.tables[query.aliases[alias].tableid].columns;
	if(columns) {
		columns.forEach(function(tcol){
			ss.push(tcol.columnid+':p.'+alias+'.'+tcol.columnid);

//		console.log('ok',s);

			var coldef = {
				columnid:tcol.columnid, 
				dbtypeid:tcol.dbtypeid, 
				dbsize:tcol.dbsize, 
				dbpecision:tcol.dbprecision
			};
			query.columns.push(coldef);
			query.xcolumns[coldef.columnid]=coldef;

		});
	} else {
		// if column not exists, then copy all
		sp += 'var w=p["'+alias+'"];for(var k in w){r[k]=w[k]};';
		query.dirtyColumns = true;
	}
	return {s:ss.join(','),sp:sp};
}


yy.Select.prototype.compileSelect = function(query) {
	var self = this;
	query.columns = [];
	query.xcolumns = {};
	query.dirtyColumns = false;
	var s = 'var r={';
	var sp = '';
	var ss = [];
//	console.log(this.columns);
	this.columns.forEach(function(col){
		if(col instanceof yy.Column) {
			if(col.columnid == '*') {
				if(col.tableid) {
					//Copy all
					var ret = compileSelectStar(query, col.tableid);
					if(ret.s)  ss = ss.concat(ret.s);
					sp += ret.sp;

				} else {
					for(var alias in query.aliases) {
						var ret = compileSelectStar(query, alias); //query.aliases[alias].tableid);
						if(ret.s) ss = ss.concat(ret.s);
						sp += ret.sp;
					}
					// TODO Remove these lines
					// In case of no information 
					// sp += 'for(var k1 in p){var w=p[k1];'+
					// 			'for(k2 in w) {r[k2]=w[k2]}}'
				}
			} else {
				// If field, otherwise - expression
				ss.push((col.as || col.columnid)+':p.'+(col.tableid||query.defaultTableid)+'.'+col.columnid);

				if(query.aliases[col.tableid||query.defaultTableid]) {

					if(!query.database.tables[query.aliases[col.tableid||query.defaultTableid].tableid]) {
						throw new Error('Table \''+(col.tableid||query.defaultTableid)+'\' does not exists in database');
					}
					var xcolumns = query.database.tables[query.aliases[col.tableid||query.defaultTableid].tableid].xcolumns;

					if(xcolumns) {
						var tcol = xcolumns[col.columnid];
						var coldef = {
							columnid:col.as || col.columnid, 
							dbtypeid:tcol.dbtypeid, 
							dbsize:tcol.dbsize, 
							dbpecision:tcol.dbprecision
						};
						query.columns.push(coldef);
						query.xcolumns[coldef.columnid]=coldef;
					} else {
						query.dirtyColumns = true;
					}
				} else {
					// This is a subquery? 
					// throw new Error('There is now such table \''+col.tableid+'\'');
				};

			}
		} else if(col instanceof yy.AggrValue) {
			if(!self.group) {
//				self.group=[new yy.Column({columnid:'q',as:'q'	})];
				self.group = [''];
			}
			if(!col.as) col.as = col.toString();
			if (col.aggregatorid == 'SUM' || col.aggregatorid == 'MAX' ||  col.aggregatorid == 'MIN' ||
				col.aggregatorid == 'FIRST' || col.aggregatorid == 'LAST' ||  col.aggregatorid == 'AVG'
				) {
				ss.push("'"+col.as+'\':'+col.expression.toJavaScript("p",query.defaultTableid))	
			} else if (col.aggregatorid == 'COUNT') {
				ss.push("'"+col.as+"':1");
				// Nothing
			} 
//			else if (col.aggregatorid == 'MAX') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			} else if (col.aggregatorid == 'MIN') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			}
		} else {
			ss.push('\''+(col.as || col.columnid || col.toString())+'\':'+col.toJavaScript("p",query.defaultTableid));
			//if(col instanceof yy.Expression) {
		}
	});
	s += ss.join(',')+'};'+sp;
//	console.log(s);
	query.selectfns = s;
	return new Function('p,params',s+'return r');
};

yy.Select.prototype.compileWhere = function(query) {
	if(this.where) {
		s = this.where.toJavaScript('p',query.defaultTableid);
		query.wherefns = s;
//		console.log(s);
		return new Function('p,params','return '+s);
	} else return function(){return true};
};

yy.Select.prototype.compileWhereJoins = function(query) {
//	console.log(this.where);
	optimizeWhereJoin(query, this.where.expression);

	//for sources compile wherefs
	query.sources.forEach(function(source) {
		if(source.srcwherefns) {
			source.srcwherefn = new Function('p,params','return '+source.srcwherefns);
		};
		if(source.wxleftfns) {
			source.wxleftfn = new Function('p,params','return '+source.wxleftfns);
		};
		if(source.wxrightfns) {
			source.wxrightfn = new Function('params','return '+source.wxrightfns);
		};
//		console.log(source.alias, source.wherefns)
//		console.log(source);
	});
};

function optimizeWhereJoin (query, ast) {
	if(!ast) return false;
	var s = ast.toJavaScript('p',query.defaultTableid);
	var fsrc = [];
	query.sources.forEach(function(source,idx) {

		// This is a good place to remove all unnecessary optimizations
		if(s.indexOf('p[\''+source.alias+'\']')>-1) fsrc.push(source);
	});
//	console.log(ast);
//	console.log(s);
//	console.log(fsrc.length);
	if(fsrc.length == 0) {
//		console.log('no optimization, can remove this part of ast');
		return false;
	} else if (fsrc.length == 1) {
		var src = fsrc[0]; // optmiization source
		src.srcwherefns = src.srcwherefns ? src.srcwherefns+'&&'+s : s;

		if((ast instanceof yy.Op) && (ast.op == '=' && !ast.allsome)) {
			if(ast.left instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid);
				var rs = ast.right.toJavaScript('p',query.defaultTableid);
				if(rs.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = ls; 
					fsrc[0].wxrightfns = rs; 
				} 
			} if(ast.right instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid);
				var rs = ast.right.toJavaScript('p',query.defaultTableid);
				if(ls.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = rs; 
					fsrc[0].wxrightfns = ls; 
				} 
			}
		}
		ast.reduced = true;  // To do not duplicate wherefn and srcwherefn
		return;
	} else {
		if(ast.op = 'AND') {
			optimizeWhereJoin(query,ast.left);
			optimizeWhereJoin(query,ast.right);
		} 
	}

};


yy.Select.prototype.compileOrder = function (query) {
	if(this.order) {
		var s = '';
		var sk = '';
		this.order.forEach(function(ord){
			var columnid = ord.expression.columnid; 
			
			// Date conversion
			var dg = ''; 
			if(query.xcolumns[columnid]) {
				var dbtypeid = query.xcolumns[columnid].dbtypeid;
				if( dbtypeid == 'DATE' || dbtypeid == 'DATETIME') dg = '+';
			}
			
			// COLLATE NOCASE
			if(ord.nocase) columnid += '.toUpperCase()';

			// TODO Add date comparision
			s += 'if('+dg+'a.'+columnid+(ord.direction == 'ASC'?'>':'<')+dg+'b.'+columnid+')return 1;';
			s += 'if('+dg+'a.'+columnid+'=='+dg+'b.'+columnid+'){';
			sk += '}';
		});
		s += 'return 0;';
		s += sk+'return -1';
		query.orderfns = s;

		return new Function('a,b',s);
	};
};



/*
//
// ROLLUP(), CUBE(), GROUPING SETS() for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Calculate ROLLUP()

var rollup = function (a) {
	var rr = [];
	var mask = 0;
	var glen = a.length;
	for(var g=0;g<glen+1;g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(mask&(1<<i)) ss.push(a[i]);
		}
		rr.push(ss);
		mask = (mask<<1)+1; 
	};
	return rr;
};

// Calculate CUBE()
var cube = function (a) {
	var rr = [];
	var glen = a.length;
	for(var g=0;g<(1<<glen);g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(g&(1<<i)) //ss.push(a[i]);
				//ss = cartes(ss,decartes(a[i]));
				ss = ss.concat(decartes(a[i]));
				//
		}
		rr.push(ss);
	}
	return rr;
}

// GROUPING SETS()
var groupingsets = function(a) {
	return a.reduce(function(acc,d){
		acc = acc.concat(decartes(d));
		return acc;
	}, []);
}

// Cartesian production
var cartes = function(a1,a2){
	var rrr =[];
	for(var i1=0;i1<a1.length;i1++) {
		for(var i2=0;i2<a2.length;i2++) {
			rrr.push(a1[i1].concat(a2[i2]));
		}
	};
	return rrr;
}

// Prepare function
function decartes(gv) {
//	console.log(gv);
	if(gv instanceof Array) {
		var res = [[]];
		for(var t=0; t<gv.length; t++) {
			if(gv[t] instanceof yy.Column) {
		 		res = res.map(function(r){return r.concat(gv[t].columnid)}); 	
			} else if(gv[t] instanceof yy.GroupExpression) {
				if(gv[t].type == 'ROLLUP') res = cartes(res,rollup(gv[t].group));
				else if(gv[t].type == 'CUBE') res = cartes(res,cube(gv[t].group));
				else if(gv[t].type == 'GROUPING SETS') res = cartes(res,groupingsets(gv[t].group));
			} else {
//				res = res.concat(gv[t]);
			};

			// switch(gv[t].t) {
			// 	case 'plain': 
			// 		res = res.map(function(r){return r.concat(gv[t].p)}); 

			// 	break; 
			// 	case 'rollup': res = cartes(res,rollup(gv[t].p)); break; 
			// 	case 'cube': res = cartes(res,cube(gv[t].p)); break; 
			// 	case 'groupingsets': res = cartes(res,groupingsets(gv[t].p)); break; 
			// 	default: res = res.concat(gv[t]);
			// }
		}
		return res;
	} else {
		if(gv instanceof yy.Column) return [gv.columnid];

		// switch(gv.t) {
		// 	case 'plain': return gv.p; break;
		// 	case 'rollup': return rollup(gv.p); break; 
		// 	case 'cube': return cube(gv.p); break; 
		// 	case 'groupingsets':  return groupingsets(gv.p); break; 
		// 	default: return [gv];//return decartes(gv.p);
		// }
		// return gv;
	}
}


/*
//
// UNION for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT UNION statement

yy.Union = function (params) { return yy.extend(this, params); }
yy.Union.prototype.toString = function () {
	return "UNION";
};

yy.Union.prototype.compile = function (tableid) {
	return null;
};

/*
//
// Expressions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Expression = function(params) { return yy.extend(this, params); };
yy.Expression.prototype.toString = function() {
	return this.expression.toString();
};
yy.Expression.prototype.toJavaScript = function(context, tableid) {
//	console.log('Expression',this);
	if(this.expression.reduced) return 'true';
	return this.expression.toJavaScript(context, tableid);
};
yy.Expression.prototype.compile = function(context, tableid){
//	console.log('Expression',this);
	if(this.reduced) return returnTrue();
	return new Function('p','return '+this.toJavaScript(context, tableid));
};


yy.Literal = function (params) { return yy.extend(this, params); }
yy.Literal.prototype.toString = function() {
	var s = this.value;
	if(this.value1) s = this.value1+'.'+s; 
//	else s = tableid+'.'+s;
	return s;
}


yy.Join = function (params) { return yy.extend(this, params); }
yy.Join.prototype.toString = function() {
	return 'JOIN'+this.table.toString();
}
//yy.Join.prototype.toJavaScript = function(context, tableid) {
//	return 'JOIN'+this.table.toString();
//}


yy.Table = function (params) { return yy.extend(this, params); }
yy.Table.prototype.toString = function() {
	var s = this.tableid;
	if(this.databaseid) s = this.databaseid+'.'+s;
	return s;
};


yy.Op = function (params) { return yy.extend(this, params); }
yy.Op.prototype.toString = function() {
	if(this.op == 'IN' || this.op == 'NOT IN') {
		return this.left.toString()+" "+this.op+" ("+this.right.toString()+")";
	}
	if(this.allsome) {
		return this.left.toString()+" "+this.op+" "+this.allsome+' ('+this.right.toString()+')';
	}
	return this.left.toString()+" "+this.op+" "+(this.allsome?this.allsome+' ':'')+this.right.toString();
};

yy.Op.prototype.toJavaScript = function(context,tableid) {
//	console.log(this);
	var op = this.op;
	if(this.op == '=') op = '===';
	else if(this.op == '<>') op = '!=';
	else if(this.op == 'OR') op = '||';

	if(this.op == 'LIKE') {
		var s = '('+this.left.toJavaScript(context,tableid)+')'+
		".match(new RegExp(("+this.right.toJavaScript(context,tableid)+").replace(/\\\%/g,'.*'),'g'))"
//		console.log(s);
		return s;
	};

	if(this.op == 'BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '(('+this.right.left.toJavaScript(context,tableid)+'<='+this.left.toJavaScript(context,tableid)+')&&'+
			'('+this.left.toJavaScript(context,tableid)+'<='+this.right.right.toJavaScript(context,tableid)+'))';		
		} else {
			throw new Error('Wrong BETWEEM operator without AND part');
		}
	};

	if(this.op == 'NOT BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '!(('+this.right.left.toJavaScript(context,tableid)+'<='+this.left.toJavaScript(context,tableid)+')&&'+
			'('+this.left.toJavaScript(context,tableid)+'<='+this.right.right.toJavaScript(context,tableid)+'))';		
		} else {
			throw new Error('Wrong NOT BETWEEM operator without AND part');
		}
	};

	if(this.op == 'IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid)+')>-1)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid)+')>-1)';
			return s;
		} else {
			throw new Error('Wrong IN operator without SELECT part');
		}
	};


	if(this.op == 'NOT IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid)+')<0)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid)+')<0)';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}
	};

	if(this.allsome == 'ALL') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.queriesdata['+this.queriesidx+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid)}).join(',')+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

	if(this.allsome == 'SOME' || this.allsome == 'ANY') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.queriesdata['+this.queriesidx+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid)}).join(',')+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

// Special case for AND optimization (if reduced)
	if(this.op == 'AND') {
		if(this.left.reduced) {
			if(this.right.reduced) {
				return 'true';
			} else {
				return this.right.toJavaScript(context,tableid);
			}
		} else if(this.right.reduced) {
			return this.left.toJavaScript(context,tableid);
		}			

		// Otherwise process as regular operation (see below)
		op = '&&';

	}


	// Change names
//	console.log(this);
	return '('+this.left.toJavaScript(context,tableid)+op+this.right.toJavaScript(context,tableid)+')';
};



yy.NumValue = function (params) { return yy.extend(this, params); }
yy.NumValue.prototype.toString = function() {
	return this.value.toString();
};

yy.NumValue.prototype.toJavaScript = function() {
	return ""+this.value;
}


yy.StringValue = function (params) { return yy.extend(this, params); }
yy.StringValue.prototype.toString = function() {
	return "'"+this.value.toString()+"'";
}
yy.StringValue.prototype.toJavaScript = function() {
	return "'"+this.value+"'";
}


yy.LogicValue = function (params) { return yy.extend(this, params); }
yy.LogicValue.prototype.toString = function() {
	return this.value?'TRUE':'FALSE';
}
yy.LogicValue.prototype.toJavaScript = function() {
	return this.value?'true':'false';
}

yy.NullValue = function (params) { return yy.extend(this, params); }
yy.NullValue.prototype.toString = function() {
	return 'NULL';
}
yy.NullValue.prototype.toJavaScript = function() {
	return 'null';
}

yy.ParamValue = function (params) { return yy.extend(this, params); }
yy.ParamValue.prototype.toString = function() {
	return '$'+this.param;
}
yy.ParamValue.prototype.toJavaScript = function() {
	if(typeof this.param == "string") return "params[\'"+this.param+"\']";
	else return "params["+this.param+"]";
}



yy.UniOp = function (params) { return yy.extend(this, params); }
yy.UniOp.prototype.toString = function() {
	if(this.op == '-') return this.op+this.right.toString();
	if(this.op == 'NOT') return this.op+'('+this.right.toString()+')';
	else if(this.op == null) return '('+this.right.toString()+')';
};

yy.UniOp.prototype.toJavaScript = function(context, tableid) {
	if(this.op == '-') return "-"+this.right.toJavaScript(context, tableid);
	if(this.op == 'NOT') return '!('+this.right.toJavaScript(context, tableid)+')';
	else if(this.op == null) return '('+this.right.toJavaScript(context, tableid)+')';
};



// yy.Star = function (params) { return yy.extend(this, params); }
// yy.Star.prototype.toString = function() {
// 	var s = this.fieldid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// 		if(this.databaseid) {
// 			s = this.databaseid+'.'+s;
// 		}
// 	}
// 	if(this.alias) s += ' AS '+this.alias;
// 	return s;
// }

yy.Column = function(params) { return yy.extend(this, params); }
yy.Column.prototype.toString = function() {
	var s = this.columnid;
	if(this.tableid) {
		s = this.tableid+'.'+s;
		if(this.databaseid) {
			s = this.databaseid+'.'+s;
		}
	}
//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

yy.Column.prototype.toJavaScript = function(context, tableid) {
//	var s = this.value;
// 	var s = this.columnid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// //		if(this.databaseid) {
// //			s = this.databaseid+'.'+s;
// //		}
// 	} else {
// 		s = tableid+'.'+s;
// 	}
//console.log('yy.Column',this, tableid);
	var s = '';
	if(tableid == '') {
		s = context+'[\''+this.columnid+'\']';
	} else {
		s = context+'[\''+(this.tableid || tableid) + '\'][\''+this.columnid+'\']';
	}
//	console.log(context,s);
//	console.trace(new Error());
	return s;
}




yy.AggrValue = function(params){ return yy.extend(this, params); }
yy.AggrValue.prototype.toString = function() {
	var s = this.aggregatorid+'(';
	if(this.expression) s += this.expression.toString();
	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

yy.AggrValue.prototype.toJavaScript = function(context, tableid) {
//	var s = 'alasql.functions.'+this.funcid+'(';
//	if(this.expression) s += this.expression.toJavaScript(context, tableid);
//	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
//	return s;
	return '';
}


yy.OrderExpression = function(params){ return yy.extend(this, params); }
yy.OrderExpression.prototype.toString = function() {
	var s = this.expression.toString();
	if(this.order) s += ' '+this.order.toString();
	return s;
}

yy.GroupExpression = function(params){ return yy.extend(this, params); }
yy.GroupExpression.prototype.toString = function() {
	return this.type+'('+this.group.toString()+')';
}


yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}


/*
//
// Functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.FuncValue = function(params){ return yy.extend(this, params); }
yy.FuncValue.prototype.toString = function() {
	var s = this.funcid+'(';
	if(this.args && this.args.length > 0) {
		s += this.args.map(function(arg){
			return arg.toString();
		}).join(',');
	};
	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

yy.FuncValue.prototype.toJavaScript = function(context, tableid) {
	var s = '';
	// IF this is standard compile functions
	if(alasql.stdlib[this.funcid.toUpperCase()]) {
		if(this.args && this.args.length > 0) {
			s += alasql.stdlib[this.funcid.toUpperCase()].apply(this, this.args.map(function(arg) {return arg.toJavaScript(context, tableid)}));
		} else {
			s += alasql.stdlib[this.funcid.toUpperCase()]();
		}
	} else {
	// This is user-defined run-time function
	// TODO arguments!!!
		var s = 'alasql.userlib.'+this.funcid.toUpperCase()+'(';
//		if(this.args) s += this.args.toJavaScript(context, tableid);
		s += this.args.map(function(arg){
			return arg.toJavaScript(context, tableid);
		}).join(',');
		s += ')';
	}
//console.log('userfn:',s,this);

//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

// // Functions compiler
// nodes.FunctionValue.prototype.toJavaScript = function (context, tableid) {
// 	var s = '';
// 	s += fns[this.name.toUpperCase()].apply(null,this.arguments.map(function(arg){
// 		if(arg) return arg.toJavaScript(context, tableid);
// 		else return '';
// 	}));
// 	return s;
// };

// 
// SQL FUNCTIONS COMPILERS
// Based on SQLite functions

// IMPORTANT: These are compiled functions

alasql.userlib = {};
var stdlib = alasql.stdlib = {}

stdlib.ABS = function(a) {return 'Math.abs('+a+')'};
stdlib.IIF = function(a,b,c) {
	if(arguments.length == 3) {
		return  '(('+a+')?('+b+'):('+c+'))';
	} else {
		throw new Error('Number of arguments of IFF is not equals to 3');
	};
};
stdlib.IFNULL = function(a,b) {return '('+a+'||'+b+')'};
stdlib.INSTR = function(s,p) {return '(('+s+').indexOf('+p+')+1)'};

stdlib.LEN = function(s) {return '('+s+').length';};
stdlib.LENGTH = function(s) {return '('+s+').length'};

stdlib.LOWER = function(s) {return '('+s+').toLowerCase()';}
stdlib.LCASE = function(s) {return '('+s+').toLowerCase()';}

// fns.LIKE = function(x,y,z) {
// 	return x.match(new RegExp(y.replace(/\%/g,'*')))[0].length;
// };
// LTRIM
stdlib.MAX = function(){return 'Math.max('+arguments.join(',')+')'};
stdlib.MIN = function(){return 'Math.min('+arguments.join(',')+')'};

stdlib.NOW = function(){return '(new Date())';};
stdlib.NULLIF = function(a,b){return '('+a+'=='+b+'?null:'+a+')'};

stdlib.UPPER = function(s) {return '('+s+').toUpperCase()';}
stdlib.UCASE = function(s) {return '('+s+').toUpperCase()';}
//REPLACE
// RTRIM
// SUBSTR
// TRIM


/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}

yy.CreateTable = function (params) { return yy.extend(this, params); }
yy.CreateTable.prototype.toString = function() {
	var s = 'CREATE';
	if(this.temporary) s+=' TEMPORARY';
	s += ' TABLE';
	if(this.ifnotexists) s += ' IF NOT EXISTS';
	s += ' '+this.table.toString();
	if(this.as) s += ' AS '+this.as;
	else { 
		var ss = this.columns.map(function(col){
			return col.toString();
		});
		s += ' ('+ss.join(',')+')';
	}
	return s;
}

// CREATE TABLE
yy.CreateTable.prototype.compile = function (db) {
//	var self = this;
	var tableid = this.table.tableid;
	var ifnotexists = this.ifnotexists;
	var columns = this.columns;
//	console.log(this);

	return function() {

		if(!ifnotexists || ifnotexists && !db.tables[tableid]) {

			if(db.tables[tableid]) 
				throw new Error('Can not create table \''+tableid
					+'\', because it already exists in the database \''+db.databaseid+'\'');

			var table = db.tables[tableid] = {}; // TODO Can use special object?
			table.columns = [];
			table.xcolumns = {};
			columns.forEach(function(col) {
				var newcol = {
					columnid: col.columnid.toLowerCase(),
					dbtypeid: col.dbtypeid.toUpperCase() // TODO: Add types table
				};
				table.columns.push(newcol);
				table.xcolumns[newcol.columnid] = newcol;
			});
			table.indices = {};
			table.data = [];
			return 1;
		};
		return 0;
	};
};




/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropTable = function (params) { return yy.extend(this, params); }
yy.DropTable.prototype.toString = function() {
	var s = 'DROP TABLE';
	if(this.ifexists) s += ' IF EXISTS';
	s += ' '+this.table.toString();
	return s;
}


// DROP TABLE
yy.DropTable.prototype.compile = function (db) {
	var ifexists = this.ifexists;
	var tableid = this.table.tableid;
	return function() {
		if(!ifexists || ifexists && db.tables[tableid]) {
			if(!db.tables[tableid]) throw new Error('Can not drop table \''+this.target.value+'\', because it does not exist in the database.');
			delete db.tables[tableid];
		}
		return 1;
	}
};


/*
//
// ALTER TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// ALTER TABLE table1 RENAME TO table2
yy.AlterTable = function (params) { return yy.extend(this, params); }
yy.AlterTable.prototype.toString = function() {
	var s = 'ALTER TABLE '+this.table.toString(); 
	if(this.renameto) s += ' RENAME TO '+this.renameto;
	return s;
}

yy.AlterTable.prototype.compile = function (db) {
	var oldtableid = this.table.tableid;
	var newtableid = this.renameto;
	return function(params, cb) {
		var res = 1;
		if(db.tables[newtableid]) {
			throw new Error("Can not rename a table '"+oldtableid+"' to '"
				+newtableid+"', because the table with this name already exists");
		} else if(newtableid == oldtableid) {
			throw new Error("Can not rename a table '"+oldtableid+"' to itself");
		} else {
			db.tables[newtableid] = db.tables[oldtableid];
			delete db.tables[oldtableid];
			res = 1;
		};
		if(cb) cb(res)
		return res;
	}
};



/*
//
// INSERT for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Insert = function (params) { return yy.extend(this, params); }
yy.Insert.prototype.toString = function() {
	var s = 'INSERT INTO '+this.into.toString();
	if(this.columns) s += '('+this.columns.toString()+')';
	if(this.values) s += ' VALUES '+this.values.toString();
	if(this.select) s += ' '+this.select.toString();
	return s;
}

yy.Insert.prototype.compile = function (db) {
	var self = this;
//	console.log(self);
	var tableid = self.into.tableid;

	var s = 'db.tables[\''+tableid+'\'].dirty=true;';


// INSERT INTO table VALUES
	if(this.values) {

		self.values.forEach(function(values) {

			s += 'db.tables[\''+tableid+'\'].data.push({';

			var ss = [];
			if(self.columns) {
				self.columns.forEach(function(col, idx){
		//			ss.push(col.columnid +':'+ self.values[idx].value.toString());
		//			console.log(rec[f.name.value]);
		//			if(rec[f.name.value] == "NULL") rec[f.name.value] = undefined;

		//			if(table.xflds[f.name.value].dbtypeid == "INT") rec[f.name.value] = +rec[f.name.value]|0;
		//			else if(table.xflds[f.name.value].dbtypeid == "FLOAT") rec[f.name.value] = +rec[f.name.value];
					var q = col.columnid +':';
					// if(table.xcolumns && table.xcolumns[col.columnid] && 
					// 	( table.xcolumns[col.columnid].dbtypeid == "INT"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "FLOAT"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "NUMBER"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "MONEY"
					// 	)) q += '+';
		//			console.log(self.values[idx].value);
					q += values[idx].toJavaScript();
					// if(table.xcolumns && table.xcolumns[col.columnid] && table.xcolumns[col.columnid].dbtypeid == "INT") q += '|0';
					ss.push(q);

				});
			} else {
				var table = db.tables[tableid];
		//		console.log('table', table.columns);
				table.columns.forEach(function(col, idx){
					var q = col.columnid +':';
					// if(table.xcolumns && table.xcolumns[col.columnid] && 
					// 	( table.xcolumns[col.columnid].dbtypeid == "INT"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "FLOAT"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "NUMBER"
					// 		|| table.xcolumns[col.columnid].dbtypeid == "MONEY"
					// 	)) q += '+';
				//	console.log(self.values[idx].toString());
		//console.log(self);
					q += values[idx].toJavaScript();
					// if(table.xcolumns && table.xcolumns[col.columnid] && table.xcolumns[col.columnid].dbtypeid == "INT") q += '|0';
					ss.push(q);

		//			console.log(fld);
					// TODO: type checking and conversions
		//			rec[fld.fldid] = eval(self.insertExpression[idx].toJavaScript('',''));
		//			console.log(rec[fld.fldid]);
		//			if(rec[fld.fldid] == "NULL") rec[fld.fldid] = undefined;

		//			if(table.xflds[fld.fldid].dbtypeid == "INT") rec[fld.fldid] = +rec[fld.fldid]|0;
		//			else if(table.xflds[fld.fldid].dbtypeid == "FLOAT" || table.xflds[fld.fldid].dbtypeid == "MONEY" ) 
		//				rec[fld.fldid] = +rec[fld.fldid];
				});
			}

			s += ss.join(',')+'});';
		});

		s += 'return '+this.values.length;
		var insertfn = new Function('db, params',s);
	
// INSERT INTO table SELECT

	} else if(this.select) {
		selectfn = this.select.compile(db);
		var insertfn = function(db, params) {
			var res = selectfn(params);
			db.tables[tableid].data = db.tables[tableid].data.concat(res);
			return res.length;
		}
	}


	return function(params, cb) {
		var res = insertfn(db, params);
		if(cb) cb(res);
		return res;
	}
};





/*
//
// DELETE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Delete = function (params) { return yy.extend(this, params); }
yy.Delete.prototype.toString = function() {
	var s = 'DELETE FROM '+this.table.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}

yy.Delete.prototype.compile = function (db) {
//  console.log(11,this);

	var tableid = this.table.tableid;

	if(this.where) {
//		try {
//		console.log(this, 22, this.where.toJavaScript('r',''));
//	} catch(err){console.log(444,err)};
		var wherefn = new Function('r,params','return ('+this.where.toJavaScript('r','')+')');
//		console.log(wherefn);
		return function (params, cb) {
			var table = db.tables[tableid];
			table.dirty = true;
			var orignum = table.data.length;
			table.data = table.data.filter(function(r){return !wherefn(r,params);});
//			console.log('deletefn',table.data.length);
			if(cb) cb(orignum - table.data.length);
			return orignum - table.data.length;
		}
	} else {
		return function (params, cb) {
			var table = db.tables[tableid];
			table.dirty = true;
			var orignum = db.tables[tableid].data.length;
			table.data.length = 0;
			if(cb) cb(orignum);
			return orignum;
		};
	}

};


/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Update = function (params) { return yy.extend(this, params); }
yy.Update.prototype.toString = function() {
	var s = 'UPDATE '+this.table.toString();
	if(this.columns) s += ' SET '+this.columns.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}


yy.SetColumn = function (params) { return yy.extend(this, params); }
yy.SetColumn.prototype.toString = function() {
	return this.columnid.toString() + '='+this.expression.toString();
}

yy.Update.prototype.compile = function (db) {
//	console.log(this);

	var tableid = this.table.tableid;
	
	if(this.where) {
		var wherefn = new Function('r,params','return '+this.where.toJavaScript('r',''));
	};

	// Construct update function
	var s = '';
	this.columns.forEach(function(col){
		s += 'r.'+col.columnid+'='+col.expression.toJavaScript('r','')+';'; 
	});
	var assignfn = new Function('r,params',s);

	return function(params, cb) {
		var table = db.tables[tableid];
		if(!table) {
			throw new Error("Table '"+tableid+"' not exists")
		}
		table.dirty = true;
		var numrows = 0;
		for(var i=0, ilen=table.data.length; i<ilen; i++) {
			if(!wherefn || wherefn(table.data[i], params) ) {
				assignfn(table.data[i],params);
				numrows++;
			}
		};
		if(cb) cb(numrows);
		return numrows;
	};
};






/*
//
// Last part of Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// End of module

return alasql;
}));


//# sourceMappingURL=alasql.js.map