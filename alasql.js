//
// alasql.js
// Alasql - JavaScript SQL database
// Date: 14.12.2014
// Version: 0.0.33
// (Ã±) 2014, Andrey Gershun
//

/*
The MIT License (MIT)

Copyright (c) 2014 Andrey Gershun (agershun@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/**
 UMD envelope 
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.alasql = factory();
    }
}(this, function () {

/**
 alasql - Main Alasql class
 @param {string | Object} sql SQL-statement or data object for fuent interface
 @param {Object} params SQL parameters
 @param {Function} cb callback function
 @param {Object} scope Scope for nested queries
 @return {array} Result data object
 
 Standard sync call:
    alasql('CREATE TABLE one');
 Query:
 	var res = alasql('SELECT * FROM one');
 Call with parameters:
 	var res = alasql('SELECT * FROM ?',[data]);
 Standard async call with callback function:
 	alasql('SELECT * FROM ?',[data],function(res){
		console.log(data);
 	});
 Call with scope for subquery (to pass common values):
    var scope = {one:{a:2,b;20}}
    alasql('SELECT * FROM ? two WHERE two.a = one.a',[data],null,scope);
 Call for fluent interface with data object:
    alasql(data).Where(function(x){return x.a == 10}).exec();
 Call for fluent interface without data object:
    alasql().From(data).Where(function(x){return x.a == 10}).exec();
 */

var alasql = function(sql, params, cb, scope) {
	if(arguments.length == 0) {
		// Without arguments - Fluent interface
		return new yy.Select({
			columns:[new yy.Column({columnid:'*'})],
			from: [new yy.ParamValue({param:0})]
		});
	} else if ((arguments.length == 1) && (sql instanceof Array)) {
		// One argument data object - fluent interface
		var select = new yy.Select({
			columns:[new yy.Column({columnid:'*'})],
			from: [new yy.ParamValue({param:0})]
		});
		select.preparams = [sql];	
		return select;
	} else {
		// Standard interface
		return alasql.exec(sql, params, cb, scope);
	}
};

/** Current version of alasql */
alasql.version = "0.0.36";



/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,9,11],$V1=[2,10],$V2=[1,28],$V3=[1,62],$V4=[1,53],$V5=[1,60],$V6=[1,42],$V7=[1,45],$V8=[1,41],$V9=[1,57],$Va=[1,44],$Vb=[1,39],$Vc=[1,46],$Vd=[1,40],$Ve=[1,43],$Vf=[1,52],$Vg=[1,48],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[1,50],$Vl=[1,51],$Vm=[1,49],$Vn=[1,58],$Vo=[1,59],$Vp=[1,70],$Vq=[1,71],$Vr=[8,9,11,78,84,112,113,123,124,125,126,132],$Vs=[1,103],$Vt=[1,118],$Vu=[1,119],$Vv=[1,120],$Vw=[1,121],$Vx=[1,122],$Vy=[1,123],$Vz=[1,124],$VA=[1,125],$VB=[1,108],$VC=[1,110],$VD=[1,117],$VE=[1,143],$VF=[1,148],$VG=[1,153],$VH=[1,151],$VI=[1,152],$VJ=[1,154],$VK=[1,155],$VL=[1,156],$VM=[1,157],$VN=[1,158],$VO=[1,159],$VP=[1,160],$VQ=[1,161],$VR=[1,162],$VS=[1,149],$VT=[1,150],$VU=[1,147],$VV=[1,146],$VW=[4,5,77,136,139,150,151,153,161,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,178,179,180,190,209,215,308,312],$VX=[2,64],$VY=[1,173],$VZ=[4,5,62,65,66,75,77,136,139,150,151,153,161,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,178,179,180,190,209,215,308,312],$V_=[4,5,8,9,11,39,65,67,73,77,78,80,84,89,91,92,93,94,100,101,102,103,104,105,106,107,108,110,112,113,122,123,124,125,126,129,130,132,136,139,173,174,177,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,224,226,230,237,238,239,243,253,254,256,257,265,266,269,270,272,273,274,275,276,277,278,279,281,282,283,303,305,306,314,316,319,320,322,323,328,329],$V$=[4,5],$V01=[2,324],$V11=[1,187],$V21=[2,369],$V31=[1,197],$V41=[8,9,11,78,112,113,123,124,125,126,132],$V51=[2,91],$V61=[1,219],$V71=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,139,173,174,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,226,230,238,243,253,256,257,269,270,272,273,277,279,281,282,303,305,306,314,316,320,322,323,328,329],$V81=[2,219],$V91=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,139,173,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,314,316,320,322,323,328,329],$Va1=[1,240],$Vb1=[8,9,11,78,93,174,209,226,238,253,256,257,269],$Vc1=[1,246],$Vd1=[1,245],$Ve1=[1,250],$Vf1=[1,255],$Vg1=[1,252],$Vh1=[1,253],$Vi1=[1,254],$Vj1=[1,256],$Vk1=[1,257],$Vl1=[1,258],$Vm1=[1,259],$Vn1=[1,260],$Vo1=[1,261],$Vp1=[1,262],$Vq1=[1,263],$Vr1=[1,264],$Vs1=[1,265],$Vt1=[1,266],$Vu1=[1,267],$Vv1=[1,268],$Vw1=[1,269],$Vx1=[1,271],$Vy1=[1,272],$Vz1=[1,274],$VA1=[1,273],$VB1=[1,275],$VC1=[1,276],$VD1=[1,277],$VE1=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,139,173,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],$VF1=[2,166],$VG1=[1,288],$VH1=[8,9,11,93],$VI1=[8,9,11,77,91],$VJ1=[8,9,11,78,113,123,124,125,126,132],$VK1=[1,335],$VL1=[93,316],$VM1=[93,314,316],$VN1=[1,356],$VO1=[93,314],$VP1=[66,216,217],$VQ1=[1,396],$VR1=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,188,189,190,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],$VS1=[2,232],$VT1=[1,412],$VU1=[183,185,187],$VV1=[1,416],$VW1=[1,417],$VX1=[8,9,11,78,80,84,112,113,123,124,125,126,132],$VY1=[1,422],$VZ1=[8,9,11,78,80,84,93,112,113,123,124,125,126,132],$V_1=[1,449],$V$1=[8,9,11,78,123,124,125,126,132],$V02=[8,9,11,78,93,112,113,123,124,125,126,132],$V12=[1,464],$V22=[1,465],$V32=[1,467],$V42=[1,468],$V52=[1,469],$V62=[1,470],$V72=[1,471],$V82=[1,472],$V92=[1,473],$Va2=[1,474],$Vb2=[8,9,11,78,89,92,93,100,101,102,103,104,105,106,107,112,113,123,124,125,126,132],$Vc2=[8,9,11,93,112],$Vd2=[2,90],$Ve2=[1,501],$Vf2=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,108,110,112,113,122,123,124,125,126,129,130,132,136,139,173,174,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,226,230,238,243,253,256,257,269,270,272,273,277,279,281,282,303,305,306,314,316,320,322,323,328,329],$Vg2=[78,93],$Vh2=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,139,173,183,185,186,187,188,189,190,191,192,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],$Vi2=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,195,196,197,198,199,200,201,202,203,204,207,208,212,213,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],$Vj2=[4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,208,212,213,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],$Vk2=[2,165],$Vl2=[2,385],$Vm2=[1,537],$Vn2=[1,546],$Vo2=[1,547],$Vp2=[1,551],$Vq2=[8,9,11,78,123,124,125,132],$Vr2=[8,9,11,78,89,92,100,101,102,103,104,105,106,107,112,113,123,124,125,126,132],$Vs2=[1,564],$Vt2=[1,566],$Vu2=[4,5,77,176,177,178,179],$Vv2=[2,197],$Vw2=[1,600],$Vx2=[1,628],$Vy2=[8,9,11,78,123,124,125],$Vz2=[1,637],$VA2=[1,638],$VB2=[1,639],$VC2=[8,9,11,78,89,92,100,101,102,103,104,105,106,107,108,110,112,113,123,124,125,126,132],$VD2=[8,9,11,78,93],$VE2=[1,682],$VF2=[1,683],$VG2=[1,681],$VH2=[1,679],$VI2=[1,676],$VJ2=[1,677],$VK2=[1,678],$VL2=[1,680],$VM2=[1,691],$VN2=[1,692],$VO2=[1,693],$VP2=[1,694],$VQ2=[65,73,253,254,256],$VR2=[2,335],$VS2=[1,699],$VT2=[8,9,11,78],$VU2=[1,713],$VV2=[8,9,11,78,93,122,123,124,125,126,132],$VW2=[1,730],$VX2=[8,9,11,226,237,238,239],$VY2=[1,765],$VZ2=[8,9,11,78,93,123,124,125,132];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Literal":3,"LITERAL":4,"BRALITERAL":5,"main":6,"Statements":7,"EOF":8,"SEMICOLON":9,"Statement":10,"GO":11,"ExplainStatement":12,"EXPLAIN":13,"QUERY":14,"PLAN":15,"AlterTable":16,"AttachDatabase":17,"CreateDatabase":18,"CreateIndex":19,"CreateTable":20,"CreateView":21,"Delete":22,"DetachDatabase":23,"DropDatabase":24,"DropIndex":25,"DropTable":26,"DropView":27,"Insert":28,"RenameTable":29,"Select":30,"ShowCreateTable":31,"ShowColumns":32,"ShowDatabases":33,"ShowIndex":34,"ShowTables":35,"BeginTransaction":36,"CommitTransaction":37,"RollbackTransaction":38,"EndTransaction":39,"UseDatabase":40,"Update":41,"Help":42,"Source":43,"Assert":44,"If":45,"Print":46,"Require":47,"SetVariable":48,"WithSelectClause":49,"WITH":50,"WithTables":51,"RECURSIVE":52,"SelectClause":53,"IntoClause":54,"FromClause":55,"WhereClause":56,"GroupClause":57,"OrderClause":58,"LimitClause":59,"UnionClause":60,"SelectModifier":61,"DISTINCT":62,"TopClause":63,"ResultColumns":64,"UNIQUE":65,"ALL":66,"SELECT":67,"VALUE":68,"ROW":69,"COLUMN":70,"MATRIX":71,"TEXT":72,"INDEX":73,"RECORDSET":74,"TOP":75,"NumValue":76,"LPAR":77,"RPAR":78,"PERCENT":79,"INTO":80,"Table":81,"FuncValue":82,"ParamValue":83,"FROM":84,"FromTablesList":85,"FromTable":86,"JoinTablesList":87,"ApplyClause":88,"CROSS":89,"APPLY":90,"AS":91,"OUTER":92,"COMMA":93,"DOT":94,"JoinTable":95,"JoinMode":96,"JoinTableAs":97,"OnClause":98,"JoinModeMode":99,"NATURAL":100,"JOIN":101,"INNER":102,"LEFT":103,"RIGHT":104,"FULL":105,"SEMI":106,"ANTI":107,"ON":108,"Expression":109,"USING":110,"ColumnsList":111,"WHERE":112,"GROUP":113,"BY":114,"GroupExpressionsList":115,"HavingClause":116,"GroupExpression":117,"GROUPING":118,"SETS":119,"ROLLUP":120,"CUBE":121,"HAVING":122,"UNION":123,"EXCEPT":124,"INTERSECT":125,"ORDER":126,"OrderExpressionsList":127,"OrderExpression":128,"DIRECTION":129,"COLLATE":130,"NOCASE":131,"LIMIT":132,"OffsetClause":133,"OFFSET":134,"ResultColumn":135,"NUMBER":136,"StringValue":137,"Star":138,"STAR":139,"Column":140,"AggrValue":141,"Op":142,"LogicValue":143,"NullValue":144,"ExistsValue":145,"CaseValue":146,"CastClause":147,"Json":148,"NewClause":149,"NEW":150,"CAST":151,"ColumnType":152,"CONVERT":153,"PrimitiveValue":154,"Aggregator":155,"OverClause":156,"OVER":157,"OverPartitionClause":158,"OverOrderByClause":159,"PARTITION":160,"SUM":161,"COUNT":162,"MIN":163,"MAX":164,"AVG":165,"FIRST":166,"LAST":167,"AGGR":168,"ARRAY":169,"ExprList":170,"TRUE":171,"FALSE":172,"STRING":173,"NULL":174,"EXISTS":175,"DOLLAR":176,"COLON":177,"QUESTION":178,"BRAQUESTION":179,"CASE":180,"WhensList":181,"ElseClause":182,"END":183,"When":184,"WHEN":185,"THEN":186,"ELSE":187,"LIKE":188,"PLUS":189,"MINUS":190,"SLASH":191,"MODULO":192,"CARET":193,"ARROW":194,"GT":195,"GE":196,"LT":197,"LE":198,"EQ":199,"EQEQ":200,"EQEQEQ":201,"NE":202,"NEEQEQ":203,"NEEQEQEQ":204,"CondOp":205,"AllSome":206,"AND":207,"OR":208,"NOT":209,"IN":210,"ColFunc":211,"BETWEEN":212,"NOT_BETWEEN":213,"IS":214,"AT":215,"SOME":216,"ANY":217,"UPDATE":218,"SET":219,"SetColumnsList":220,"SetColumn":221,"DELETE":222,"INSERT":223,"VALUES":224,"ValuesListsList":225,"DEFAULT":226,"ValuesList":227,"Value":228,"DateValue":229,"CREATE":230,"TABLE":231,"IfNotExists":232,"CreateTableDefClause":233,"CreateTableOptionsClause":234,"CreateTableOptions":235,"CreateTableOption":236,"ENGINE":237,"AUTO_INCREMENT":238,"CHARSET":239,"TemporaryClause":240,"TEMPORARY":241,"TEMP":242,"IF":243,"ColumnDefsList":244,"ConstraintsList":245,"Constraint":246,"ConstraintName":247,"PrimaryKey":248,"ForeignKey":249,"UniqueKey":250,"IndexKey":251,"CONSTRAINT":252,"PRIMARY":253,"KEY":254,"ColsList":255,"FOREIGN":256,"REFERENCES":257,"OnForeignKeyClause":258,"OnDeleteClause":259,"OnUpdateClause":260,"NO":261,"ACTION":262,"ColumnDef":263,"ColumnConstraintsClause":264,"ColumnConstraints":265,"ENUM":266,"ColumnConstraintsList":267,"ColumnConstraint":268,"IDENTITY":269,"DROP":270,"IfExists":271,"ALTER":272,"RENAME":273,"TO":274,"ADD":275,"MODIFY":276,"ATTACH":277,"DATABASE":278,"DETACH":279,"AsClause":280,"USE":281,"SHOW":282,"DATABASES":283,"TABLES":284,"COLUMNS":285,"VIEW":286,"View":287,"DeclareCursor":288,"DECLARE":289,"CURSOR":290,"FOR":291,"OpenCursor":292,"OPEN":293,"CloseCursor":294,"CLOSE":295,"FetchCursor":296,"FETCH":297,"FetchDirection":298,"NEXT":299,"PRIOR":300,"ABSOLUTE":301,"RELATIVE":302,"HELP":303,"ExpressionStatement":304,"SOURCE":305,"ASSERT":306,"JsonObject":307,"ATLBRA":308,"JsonArray":309,"JsonValue":310,"JsonPrimitiveValue":311,"LCUR":312,"JsonPropertiesList":313,"RCUR":314,"JsonElementsList":315,"RBRA":316,"JsonProperty":317,"OnOff":318,"OFF":319,"COMMIT":320,"TRANSACTION":321,"ROLLBACK":322,"BEGIN":323,"Store":324,"STORE":325,"Restore":326,"RESTORE":327,"PRINT":328,"REQUIRE":329,"StringValuesList":330,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",5:"BRALITERAL",8:"EOF",9:"SEMICOLON",11:"GO",13:"EXPLAIN",14:"QUERY",15:"PLAN",39:"EndTransaction",50:"WITH",52:"RECURSIVE",62:"DISTINCT",65:"UNIQUE",66:"ALL",67:"SELECT",68:"VALUE",69:"ROW",70:"COLUMN",71:"MATRIX",72:"TEXT",73:"INDEX",74:"RECORDSET",75:"TOP",77:"LPAR",78:"RPAR",79:"PERCENT",80:"INTO",84:"FROM",89:"CROSS",90:"APPLY",91:"AS",92:"OUTER",93:"COMMA",94:"DOT",100:"NATURAL",101:"JOIN",102:"INNER",103:"LEFT",104:"RIGHT",105:"FULL",106:"SEMI",107:"ANTI",108:"ON",110:"USING",112:"WHERE",113:"GROUP",114:"BY",118:"GROUPING",119:"SETS",120:"ROLLUP",121:"CUBE",122:"HAVING",123:"UNION",124:"EXCEPT",125:"INTERSECT",126:"ORDER",129:"DIRECTION",130:"COLLATE",131:"NOCASE",132:"LIMIT",134:"OFFSET",136:"NUMBER",139:"STAR",150:"NEW",151:"CAST",153:"CONVERT",157:"OVER",160:"PARTITION",161:"SUM",162:"COUNT",163:"MIN",164:"MAX",165:"AVG",166:"FIRST",167:"LAST",168:"AGGR",169:"ARRAY",171:"TRUE",172:"FALSE",173:"STRING",174:"NULL",175:"EXISTS",176:"DOLLAR",177:"COLON",178:"QUESTION",179:"BRAQUESTION",180:"CASE",183:"END",185:"WHEN",186:"THEN",187:"ELSE",188:"LIKE",189:"PLUS",190:"MINUS",191:"SLASH",192:"MODULO",193:"CARET",194:"ARROW",195:"GT",196:"GE",197:"LT",198:"LE",199:"EQ",200:"EQEQ",201:"EQEQEQ",202:"NE",203:"NEEQEQ",204:"NEEQEQEQ",207:"AND",208:"OR",209:"NOT",210:"IN",212:"BETWEEN",213:"NOT_BETWEEN",214:"IS",215:"AT",216:"SOME",217:"ANY",218:"UPDATE",219:"SET",222:"DELETE",223:"INSERT",224:"VALUES",226:"DEFAULT",229:"DateValue",230:"CREATE",231:"TABLE",237:"ENGINE",238:"AUTO_INCREMENT",239:"CHARSET",241:"TEMPORARY",242:"TEMP",243:"IF",252:"CONSTRAINT",253:"PRIMARY",254:"KEY",256:"FOREIGN",257:"REFERENCES",261:"NO",262:"ACTION",265:"ColumnConstraints",266:"ENUM",269:"IDENTITY",270:"DROP",272:"ALTER",273:"RENAME",274:"TO",275:"ADD",276:"MODIFY",277:"ATTACH",278:"DATABASE",279:"DETACH",281:"USE",282:"SHOW",283:"DATABASES",284:"TABLES",285:"COLUMNS",286:"VIEW",289:"DECLARE",290:"CURSOR",291:"FOR",293:"OPEN",295:"CLOSE",297:"FETCH",299:"NEXT",300:"PRIOR",301:"ABSOLUTE",302:"RELATIVE",303:"HELP",305:"SOURCE",306:"ASSERT",308:"ATLBRA",312:"LCUR",314:"RCUR",316:"RBRA",319:"OFF",320:"COMMIT",321:"TRANSACTION",322:"ROLLBACK",323:"BEGIN",325:"STORE",327:"RESTORE",328:"PRINT",329:"REQUIRE"},
productions_: [0,[3,1],[3,1],[6,2],[7,3],[7,3],[7,1],[7,1],[12,2],[12,4],[10,0],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[49,3],[49,4],[49,1],[51,0],[30,8],[53,4],[53,4],[53,4],[53,3],[61,1],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[63,2],[63,4],[63,3],[63,0],[54,0],[54,2],[54,2],[54,2],[55,2],[55,3],[55,0],[88,6],[88,7],[88,6],[88,7],[85,1],[85,3],[86,4],[86,5],[86,3],[86,2],[86,3],[86,1],[86,2],[86,3],[86,1],[86,1],[86,2],[86,3],[81,3],[81,1],[87,2],[87,2],[87,1],[87,1],[95,3],[97,1],[97,2],[97,3],[97,2],[97,3],[97,4],[97,5],[97,1],[97,2],[97,3],[96,1],[96,2],[99,1],[99,2],[99,2],[99,3],[99,2],[99,3],[99,2],[99,3],[99,2],[99,2],[99,2],[98,2],[98,2],[98,0],[56,0],[56,2],[57,0],[57,4],[115,1],[115,3],[117,5],[117,4],[117,4],[117,1],[116,0],[116,2],[60,0],[60,2],[60,3],[60,2],[60,2],[58,0],[58,3],[127,1],[127,3],[128,1],[128,2],[128,3],[128,4],[59,0],[59,3],[133,0],[133,2],[64,3],[64,1],[135,3],[135,2],[135,3],[135,2],[135,3],[135,2],[135,1],[138,5],[138,3],[138,1],[140,5],[140,3],[140,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,3],[149,2],[149,2],[147,6],[147,6],[147,8],[154,1],[154,1],[154,1],[154,1],[154,1],[154,1],[141,5],[141,6],[141,6],[156,0],[156,4],[156,4],[156,5],[158,3],[159,3],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[82,4],[82,3],[170,1],[170,3],[76,1],[143,1],[143,1],[137,1],[144,1],[145,4],[83,2],[83,2],[83,1],[83,1],[146,5],[146,4],[181,2],[181,1],[184,4],[182,2],[182,0],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,5],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,6],[142,6],[142,3],[142,3],[142,2],[142,2],[142,3],[142,5],[142,6],[142,5],[142,6],[142,3],[142,4],[142,3],[142,3],[142,3],[211,1],[211,1],[211,4],[205,1],[205,1],[205,1],[205,1],[205,1],[205,1],[206,1],[206,1],[206,1],[41,6],[41,4],[220,1],[220,3],[221,3],[22,5],[22,3],[28,5],[28,5],[28,8],[28,4],[28,7],[225,3],[225,1],[225,1],[225,5],[225,3],[225,3],[227,1],[227,3],[228,1],[228,1],[228,1],[228,1],[228,1],[228,1],[111,1],[111,3],[20,8],[20,4],[20,6],[234,0],[234,1],[235,2],[235,1],[236,1],[236,3],[236,3],[236,3],[240,0],[240,1],[240,1],[232,0],[232,3],[233,3],[233,1],[233,2],[245,1],[245,3],[246,2],[246,2],[246,2],[246,2],[247,0],[247,2],[248,5],[249,11],[258,0],[258,2],[259,4],[260,4],[250,1],[251,5],[251,5],[255,1],[255,3],[244,1],[244,3],[263,3],[263,2],[152,6],[152,4],[152,1],[152,4],[264,0],[264,1],[267,2],[267,1],[268,2],[268,7],[268,5],[268,1],[268,6],[268,2],[268,1],[268,2],[26,4],[271,0],[271,2],[16,6],[16,6],[16,6],[16,8],[16,6],[29,5],[17,4],[17,7],[17,6],[17,9],[23,3],[18,4],[18,6],[18,9],[280,0],[280,2],[40,3],[40,2],[24,4],[24,5],[19,8],[19,9],[25,3],[33,2],[33,4],[33,3],[33,5],[35,2],[35,4],[35,4],[35,6],[32,4],[32,6],[34,4],[34,6],[31,4],[31,6],[21,5],[21,8],[27,3],[287,1],[287,3],[288,5],[292,2],[294,2],[296,4],[298,1],[298,1],[298,1],[298,1],[298,2],[298,2],[42,2],[42,1],[304,1],[43,2],[44,2],[44,2],[44,4],[148,4],[148,2],[148,2],[148,2],[148,2],[148,1],[148,2],[148,2],[310,1],[310,1],[311,1],[311,1],[311,1],[311,1],[311,1],[311,1],[311,1],[311,3],[307,3],[307,4],[307,2],[309,2],[309,3],[309,1],[313,3],[313,1],[317,3],[317,3],[317,3],[315,3],[315,1],[48,3],[318,1],[318,1],[37,1],[37,2],[38,1],[38,2],[36,1],[36,2],[324,1],[324,2],[326,1],[326,2],[45,3],[46,2],[46,2],[47,2],[330,3],[330,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			if (yy.casesensitive) this.$ = $$[$0];
			else this.$ = $$[$0].toLowerCase();
		
break;
case 2:
 this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); 
break;
case 3:
 return new yy.Statements({statements:$$[$0-1]}); 
break;
case 4: case 5:
 this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); 
break;
case 6: case 7: case 76: case 94: case 95: case 127: case 142: case 153: case 214: case 229: case 284: case 295: case 296: case 300: case 308: case 346: case 460: case 479:
 this.$ = [$$[$0]]; 
break;
case 8:
 this.$ = $$[$0]; $$[$0].explain = true; 
break;
case 9:
 this.$ = $$[$0];  $$[$0].explain = true;
break;
case 10: case 64: case 71: case 122: case 123: case 125: case 133: case 135: case 140: case 148: case 150: case 321: case 324: case 339: case 340: case 369:
 this.$ = null; 
break;
case 44: case 45: case 83: case 132: case 160: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 181: case 188: case 189: case 190: case 191: case 192: case 193: case 231: case 273: case 274: case 275: case 276: case 277: case 278: case 336: case 357: case 359: case 434: case 435: case 436: case 437: case 438: case 439: case 443: case 445: case 446: case 455:
 this.$ = $$[$0]; 
break;
case 46: case 270: case 271:
 this.$ = $$[$0];
break;
case 48:
   yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]); 
		    yy.extend(this.$,$$[$0-3]); yy.extend(this.$,$$[$0-2]);yy.extend(this.$,$$[$0-1]); 
		    yy.extend(this.$,$$[$0]); 
		    this.$ = $$[$0-7];
		    if(yy.exists) this.$.exists = yy.exists;
		    delete yy.exists;
		    if(yy.queries) this.$.queries = yy.queries;
			delete yy.queries;
		
break;
case 49:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]); yy.extend(this.$, $$[$0-1]); 
break;
case 50:
 this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 51:
 this.$ = new yy.Select({ columns:$$[$0], all:true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); 
break;
case 52:
 this.$ = new yy.Select({ columns:$$[$0] }); yy,extend(this.$, $$[$0-2]);yy.extend(this.$, $$[$0-1]); 
break;
case 53:
 this.$ = null
break;
case 54:
 this.$ = {modifier:'VALUE'}
break;
case 55:
 this.$ = {modifier:'ROW'}
break;
case 56:
 this.$ = {modifier:'COLUMN'}
break;
case 57:
 this.$ = {modifier:'MATRIX'}
break;
case 58:
 this.$ = {modifier:'TEXT'}
break;
case 59:
 this.$ = {modifier:'INDEX'}
break;
case 60:
 this.$ = {modifier:'RECORDSET'}
break;
case 61:
 this.$ = {top: $$[$0]}; 
break;
case 62:
 this.$ = {top: $$[$0-1]}; 
break;
case 63:
 this.$ = {top: $$[$0-1], percent:true}; 
break;
case 65: case 197: case 356:
this.$ = null
break;
case 66: case 67: case 68:
this.$ = {into: $$[$0]} 
break;
case 69:
 this.$ = { from: $$[$0] }; 
break;
case 70:
 this.$ = { from: [$$[$0-1]], joins: $$[$0] }; 
break;
case 72:
 this.$ = new yy.Apply({select: $$[$0-2], apply:'CROSS', as:$$[$0]}); 
break;
case 73:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.Apply({select: $$[$0-3], apply:'CROSS', as:$$[$0],existsidx:yy.exists.length});
			yy.exists.push($$[$0-4]);

		 
break;
case 74:
 this.$ = new yy.Apply({select: $$[$0-2], apply:'OUTER', as:$$[$0]}); 
break;
case 75:
 this.$ = new yy.Apply({select: $$[$0-3], apply:'OUTER', as:$$[$0]}); 
break;
case 77: case 128: case 285: case 347:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 78:
 this.$ = $$[$0-2]; this.$.as = $$[$0] 
break;
case 79:
 this.$ = $$[$0-3]; this.$.as = $$[$0] 
break;
case 80:
 this.$ = $$[$0-1]; this.$.as = 'default' 
break;
case 81:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] 
break;
case 82:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] 
break;
case 84: case 88:
 this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; 
break;
case 85: case 89:
 this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; 
break;
case 86: case 87:
 this.$ = $$[$0]; $$[$0].as = 'default'; 
break;
case 90:
 this.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});
break;
case 91:
 this.$ = new yy.Table({tableid: $$[$0]});
break;
case 92: case 93:
 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 96:
 this.$ = new yy.Join($$[$0-2]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); 
break;
case 97:
 this.$ = {table: $$[$0]}; 
break;
case 98:
 this.$ = {table: $$[$0-1], as: $$[$0] } ; 
break;
case 99:
 this.$ = {table: $$[$0-2], as: $$[$0] } ; 
break;
case 100:
 this.$ = {param: $$[$0-1], as: $$[$0] } ; 
break;
case 101:
 this.$ = {param: $$[$0-2], as: $$[$0] } ; 
break;
case 102:
 this.$ = {select: $$[$0-3], as: $$[$0]} ; 
break;
case 103:
 this.$ = {select: $$[$0-4], as: $$[$0] } ; 
break;
case 104:
 this.$ = {func:$$[$0], as:'default'}; 
break;
case 105:
 this.$ = {func:$$[$0-1], as: $$[$0]}; 
break;
case 106:
 this.$ = {func:$$[$0-2], as: $$[$0]}; 
break;
case 107:
 this.$ = { joinmode: $$[$0] } ; 
break;
case 108:
 this.$ = {joinmode: $$[$0-1], natural:true} ; 
break;
case 109: case 110:
 this.$ = "INNER"; 
break;
case 111: case 112:
 this.$ = "LEFT"; 
break;
case 113: case 114:
 this.$ = "RIGHT"; 
break;
case 115: case 116:
 this.$ = "OUTER"; 
break;
case 117:
 this.$ = "SEMI"; 
break;
case 118:
 this.$ = "ANTI"; 
break;
case 119:
 this.$ = "CROSS"; 
break;
case 120:
 this.$ = {on: $$[$0]}; 
break;
case 121:
 this.$ = {using: $$[$0]}; 
break;
case 124:
 this.$ = {where: new yy.Expression({expression:$$[$0]})}; 
break;
case 126:
 this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 129:
 this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); 
break;
case 130:
 this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); 
break;
case 131:
 this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); 
break;
case 134:
 this.$ = {having:$$[$0]}
break;
case 136:
 this.$ = {union: $$[$0]} ; 
break;
case 137:
 this.$ = {unionall: $$[$0]} ; 
break;
case 138:
 this.$ = {except: $$[$0]} ; 
break;
case 139:
 this.$ = {intersect: $$[$0]} ; 
break;
case 141:
 this.$ = {order:$$[$0]}
break;
case 143:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 144:
 this.$ = new yy.Expression({expression: $$[$0], direction:'ASC'}) 
break;
case 145:
 this.$ = new yy.Expression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) 
break;
case 146:
 this.$ = new yy.Expression({expression: $$[$0-2], direction:'ASC', nocase:true}) 
break;
case 147:
 this.$ = new yy.Expression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) 
break;
case 149:
 this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])
break;
case 151:
 this.$ = {offset:$$[$0]}
break;
case 152: case 330: case 349: case 459: case 478:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 154: case 156: case 158:
 $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];
break;
case 155: case 157: case 159:
 $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];
break;
case 161:
 this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); 
break;
case 162:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); 
break;
case 163:
 this.$ = new yy.Column({columnid:$$[$0]}); 
break;
case 164:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});
break;
case 165:
 this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});
break;
case 166:
 this.$ = new yy.Column({columnid: $$[$0]});
break;
case 180:
 this.$ = new yy.Json({value:$$[$0]}); 
break;
case 182:

			if(!yy.queries) yy.queries = []; 
			yy.queries.push($$[$0-1]);
			$$[$0-1].queriesidx = yy.queries.length;
			this.$ = $$[$0-1];
		
break;
case 183:
 this.$ = new yy.FuncValue({funcid:$$[$0], newid:true}); 
break;
case 184:
 this.$ = $$[$0]; yy.extend(this.$,{newid:true}); 
break;
case 185:
 this.$ = new yy.Cast({expression:$$[$0-3]}) ; yy.extend(this.$,$$[$0-1]) ; 
break;
case 186:
 this.$ = new yy.Cast({expression:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; 
break;
case 187:
 this.$ = new yy.Cast({expression:$$[$0-3], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-5]) ; 
break;
case 194:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-4].toUpperCase(), expression: $$[$0-2]}); 
break;
case 195:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2], distinct:true}); 
break;
case 196:
 this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2]}); 
break;
case 198: case 199:
 this.$ = {over: new yy.Over()}; yy.extend(this.$,$$[$0-1]); 
break;
case 200:
 this.$ = {over: new yy.Over()}; yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);
break;
case 201:
 this.$ = {partition:$$[$0]}; 
break;
case 202:
 this.$ = {order:$$[$0]}; 
break;
case 203:
 this.$ = "SUM"; 
break;
case 204:
 this.$ = "COUNT"; 
break;
case 205:
 this.$ = "MIN"; 
break;
case 206:
 this.$ = "MAX"; 
break;
case 207:
 this.$ = "AVG"; 
break;
case 208:
 this.$ = "FIRST"; 
break;
case 209:
 this.$ = "LAST"; 
break;
case 210:
 this.$ = "AGGR"; 
break;
case 211:
 this.$ = "ARRAY"; 
break;
case 212:
 
		    if(alasql.aggr[$$[$0-3]]) {
		    	this.$ = new yy.AggrValue({aggregatorid: 'REDUCE', 
                      funcid: $$[$0-3], expression: $$[$0-1].pop() });
		    } else {
			    this.$ = new yy.FuncValue({funcid: $$[$0-3], args: $$[$0-1]}); 
			};
		
break;
case 213:
 this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) 
break;
case 215:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 216:
 this.$ = new yy.NumValue({value:+$$[$0]}); 
break;
case 217:
 this.$ = new yy.LogicValue({value:true}); 
break;
case 218:
 this.$ = new yy.LogicValue({value:false}); 
break;
case 219:
 this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/(\\\')/g,"'").replace(/(\'\')/g,"'")}); 
break;
case 220:
 this.$ = new yy.NullValue({value:undefined}); 
break;
case 221:
 
			if(!yy.exists) yy.exists = [];
			this.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); 
			yy.exists.push($$[$0-1]);
		
break;
case 222: case 223:
 this.$ = new yy.ParamValue({param: $$[$0]}); 
break;
case 224:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++}); 
		
break;
case 225:
 
			if(typeof yy.question == 'undefined') yy.question = 0; 
			this.$ = new yy.ParamValue({param: yy.question++, array:true}); 
		
break;
case 226:
 this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 227:
 this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); 
break;
case 228:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 230:
 this.$ = {when: $$[$0-2], then: $$[$0] }; 
break;
case 232: case 341: case 342:
this.$ = null; 
break;
case 233:
 this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); 
break;
case 234:
 this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); 
break;
case 235:
 this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); 
break;
case 236:
 this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); 
break;
case 237:
 this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); 
break;
case 238:
 this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); 
break;
case 239:
 this.$ = new yy.Op({left:$$[$0-2], op:'^', right:$$[$0]}); 
break;
case 240: case 241: case 243:
 this.$ = new yy.Op({left:$$[$0-2], op:'->' , right:$$[$0]}); 
break;
case 242:
 this.$ = new yy.Op({left:$$[$0-4], op:'->' , right:$$[$0-1]}); 
break;
case 244:
 this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); 
break;
case 245:
 this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); 
break;
case 246:
 this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); 
break;
case 247:
 this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); 
break;
case 248:
 this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); 
break;
case 249:
 this.$ = new yy.Op({left:$$[$0-2], op:'==' , right:$$[$0]}); 
break;
case 250:
 this.$ = new yy.Op({left:$$[$0-2], op:'===' , right:$$[$0]}); 
break;
case 251:
 this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); 
break;
case 252:
 this.$ = new yy.Op({left:$$[$0-2], op:'!==' , right:$$[$0]}); 
break;
case 253:
 this.$ = new yy.Op({left:$$[$0-2], op:'!===' , right:$$[$0]}); 
break;
case 254:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); 
			yy.queries.push($$[$0-1]);  
		
break;
case 255:
 
			this.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); 
		
break;
case 256:
 this.$ = new yy.Op({left:$$[$0-2], op:'AND' , right:$$[$0]}); 
break;
case 257:
 this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); 
break;
case 258:
 this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); 
break;
case 259:
 this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); 
break;
case 260:
 this.$ = new yy.UniOp({right: $$[$0-1]}); 
break;
case 261:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 262:
 
			if(!yy.queries) yy.queries = []; 
			this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});
			yy.queries.push($$[$0-1]);  
		
break;
case 263:
 this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); 
break;
case 264:
 this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); 
break;
case 265:
 this.$ = new yy.Op({left: $$[$0-2], op:'IN', right:$$[$0]}); 
break;
case 266:
 this.$ = new yy.Op({left: $$[$0-3], op:'NOT IN', right:$$[$0]}); 
break;
case 267:
 this.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN', right:$$[$0] }); 
break;
case 268:
 this.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:$$[$0] }); 
break;
case 269:
 this.$ = new yy.Op({op:'IS' , left:$$[$0-2], right:$$[$0]}); 
break;
case 272:
 this.$ = $$[$0-1];
break;
case 279:
 this.$ = 'ALL'; 
break;
case 280:
 this.$ = 'SOME'; 
break;
case 281:
 this.$ = 'ANY'; 
break;
case 282:
 this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); 
break;
case 283:
 this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); 
break;
case 286:
 this.$ = new yy.SetColumn({columnid:$$[$0-2], expression:$$[$0]})
break;
case 287:
 this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});
break;
case 288:
 this.$ = new yy.Delete({table:$$[$0]});
break;
case 289:
 this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); 
break;
case 290:
 this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; 
break;
case 291:
 this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); 
break;
case 292:
 this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); 
break;
case 293:
 this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); 
break;
case 294:
 this.$ = [$$[$0-1]]; 
break;
case 297:
this.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])
break;
case 298: case 299: case 301: case 309:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0])
break;
case 310:
 
			this.$ = new yy.CreateTable({table:$$[$0-4]}); 
			//yy.extend(this.$,$$[$0-6]); 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-2]); 
		
break;
case 311:
 
			this.$ = new yy.CreateTable({table:new yy.Table({tableid:$$[$0]})}); 
		
break;
case 312:
 
			this.$ = new yy.CreateTable({table:new yy.Table({tableid:$$[$0], databaseid:$$[$0-2]})}); 
		
break;
case 322: case 323:
 this.$ = {temporary:true}; 
break;
case 325:
 this.$ = {ifnotexists: true}; 
break;
case 326:
 this.$ = {columns: $$[$0-2], constraints: $$[$0]}; 
break;
case 327:
 this.$ = {columns: $$[$0]}; 
break;
case 328:
 this.$ = {as: $$[$0]} 
break;
case 329: case 348:
 this.$ = [$$[$0]];
break;
case 331: case 332: case 333: case 334:
 $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; 
break;
case 335:
 this.$ = null 
break;
case 337:
 this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1]}; 
break;
case 338:
 this.$ = {type: 'FOREIGN KEY', columns: $$[$0-7], fktableid: $$[$0-4], fkcolumns: $$[$0-2]}; 
break;
case 350:
 this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);
break;
case 351:
 this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); 
break;
case 352:
 this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: $$[$0-1]} 
break;
case 353:
 this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} 
break;
case 354:
 this.$ = {dbtypeid: $$[$0]} 
break;
case 355:
 this.$ = {dbtypeid: 'ENUM', enumvalues: $$[$0-1]} 
break;
case 358:
 yy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];
break;
case 360:
this.$ = {primarykey:true};
break;
case 361: case 362:
this.$ = {foreignkey:{tableid:$$[$0-3], columnid: $$[$0-1]}};
break;
case 363:
this.$ = {auto_increment:true};
break;
case 364:
 this.$ = {identity: [$$[$0-3],$$[$0-1]]} 
break;
case 365:
this.$ = {default:$$[$0]};
break;
case 366:
this.$ = {null:true}; 
break;
case 367:
this.$ = {notnull:true}; 
break;
case 368:
 this.$ = new yy.DropTable({table:$$[$0]}); yy.extend(this.$, $$[$0-1]); 
break;
case 370:
 this.$ = {ifexists: true};
break;
case 371:
 this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});
break;
case 372:
 this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});
break;
case 373:
 this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});
break;
case 374:
 this.$ = new yy.AlterTable({table:$$[$0-5], renamecolumn: $$[$0-2], to: $$[$0]});
break;
case 375:
 this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});
break;
case 376:
 this.$ = new yy.AlterTable({table:$$[$0-2], renameto: $$[$0]});
break;
case 377:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0], engineid:$$[$0-2].toUpperCase() });
break;
case 378:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0-3], engineid:$$[$0-5].toUpperCase(), args:$$[$0-1] });
break;
case 379:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0-2], engineid:$$[$0-4].toUpperCase(), as:$$[$0] });
break;
case 380:
 this.$ = new yy.AttachDatabase({databaseid:$$[$0-5], engineid:$$[$0-7].toUpperCase(), as:$$[$0], args:$$[$0-3]});
break;
case 381:
 this.$ = new yy.DetachDatabase({databaseid:$$[$0]});
break;
case 382:
 this.$ = new yy.CreateDatabase({databaseid:$$[$0] }); yy.extend(this.$,$$[$0]); 
break;
case 383:
 this.$ = new yy.CreateDatabase({engineid:$$[$0-4].toUpperCase(), databaseid:$$[$0-1], as:$$[$0] }); yy.extend(this.$,$$[$0-2]); 
break;
case 384:
 this.$ = new yy.CreateDatabase({engineid:$$[$0-7].toUpperCase(), databaseid:$$[$0-4], args:$$[$0-2], as:$$[$0] }); yy.extend(this.$,$$[$0-5]); 
break;
case 385:
this.$ = null;
break;
case 386: case 430: case 448: case 451:
 this.$ = $$[$0-1]; 
break;
case 387: case 388:
 this.$ = new yy.UseDatabase({databaseid: $$[$0] });
break;
case 389:
 this.$ = new yy.DropDatabase({databaseid: $$[$0] }); yy.extend(this.$,$$[$0-1]); 
break;
case 390:
 this.$ = new yy.DropDatabase({databaseid: $$[$0], engineid:$$[$0-3].toUpperCase() }); yy.extend(this.$,$$[$0-1]); 
break;
case 391:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})
break;
case 392:
 this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})
break;
case 393:
 this.$ = new yy.DropIndex({indexid:$$[$0]});
break;
case 394:
 this.$ = new yy.ShowDatabases();
break;
case 395:
 this.$ = new yy.ShowDatabases({like:$$[$0]});
break;
case 396:
 this.$ = new yy.ShowDatabases({engineid:$$[$0-1].toUpperCase() });
break;
case 397:
 this.$ = new yy.ShowDatabases({engineid:$$[$0-3].toUpperCase() , like:$$[$0]});
break;
case 398:
 this.$ = new yy.ShowTables();
break;
case 399:
 this.$ = new yy.ShowTables({like:$$[$0]});
break;
case 400:
 this.$ = new yy.ShowTables({databaseid: $$[$0]});
break;
case 401:
 this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});
break;
case 402:
 this.$ = new yy.ShowColumns({table: $$[$0]});
break;
case 403:
 this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});
break;
case 404:
 this.$ = new yy.ShowIndex({table: $$[$0]});
break;
case 405:
 this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});
break;
case 406:
 this.$ = new yy.ShowCreateTable({table: $$[$0]});
break;
case 407:
 this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});
break;
case 408:
 this.$ = new yy.CreateView({view:$$[$0-2], select: $$[$0]}); 
break;
case 409:
 this.$ = new yy.CreateView({view:$$[$0-5], columns: $$[$0-3], select: $$[$0-3]}); 
break;
case 410:
 this.$ = new yy.DropView({view:$$[$0-1]}); 
break;
case 411:
 this.$ = new yy.View({viewid: $$[$0]}); 
break;
case 412:
 this.$ = new yy.View({databaseid:$$[$0-2], viewid: $$[$0]}); 
break;
case 413:
 this.$ = new yy.DeclareCursor({cursorid:$$[$0-3], select:$$[$0]}); 
break;
case 414:
 this.$ = new yy.OpenCursor({cursorid:$$[$0]}); 
break;
case 415:
 this.$ = new yy.CloseCursor({cursorid:$$[$0]}); 
break;
case 416:
 this.$ = new yy.FetchCursor({cursorid:$$[$0]}); yy.extend(this.$,$$[$0-2]); 
break;
case 417:
 this.$ = {direction: 'NEXT'}; 
break;
case 418:
 this.$ = {direction: 'PRIOR'}; 
break;
case 419:
 this.$ = {direction: 'FIRST'}; 
break;
case 420:
 this.$ = {direction: 'LAST'}; 
break;
case 421:
 this.$ = {direction: 'ABSOLUTE', num:$$[$0]}; 
break;
case 422:
 this.$ = {direction: 'RELATIVE', num:$$[$0]}; 
break;
case 423:
 this.$ = new yy.Help({subject:$$[$0].value.toUpperCase()} ) ; 
break;
case 424:
 this.$ = new yy.Help() ; 
break;
case 425:
 this.$ = new yy.ExpressionStatement({expression:$$[$0]}); 
break;
case 426:
 this.$ = new yy.Source({url:$$[$0].value}); 
break;
case 427:
 this.$ = new yy.Assert({value:$$[$0]}); 
break;
case 428:
 this.$ = new yy.Assert({value:$$[$0].value}); 
break;
case 429:
 this.$ = new yy.Assert({value:$$[$0], message:$$[$0-2]}); 
break;
case 431: case 442: case 444:
 this.$ = $$[$0].value; 
break;
case 432: case 440:
 this.$ = +$$[$0].value; 
break;
case 433:
 this.$ = (!!$$[$0].value); 
break;
case 441:
 this.$ = ""+$$[$0].value; 
break;
case 447:
 this.$ = $$[$0-1]
break;
case 449: case 452:
 this.$ = $$[$0-2]; 
break;
case 450:
 this.$ = {}; 
break;
case 453:
 this.$ = []; 
break;
case 454:
 yy.extend($$[$0-2],$$[$0]); this.$ = $$[$0-2]; 
break;
case 456:
 this.$ = {}; this.$[$$[$0-2].substr(1,$$[$0-2].length-2)] = $$[$0]; 
break;
case 457: case 458:
 this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 461:
 this.$ = new yy.SetVariable({variable:$$[$0-1].toLowerCase(), value:$$[$0]});
break;
case 462:
 this.$ = true; 
break;
case 463:
 this.$ = false; 
break;
case 464: case 465:
 this.$ = new yy.Commit(); 
break;
case 466: case 467:
 this.$ = new yy.Rollback(); 
break;
case 468: case 469:
 this.$ = new yy.Begin(); 
break;
case 470:
 this.$ = new yy.Store(); 
break;
case 471:
 this.$ = new yy.Store({databaseid: $$[$0]}); 
break;
case 472:
 this.$ = new yy.Restore(); 
break;
case 473:
 this.$ = new yy.Restore({databaseid: $$[$0]}); 
break;
case 474:
 this.$ = new yy.If({expression:$$[$0-1],thenstat:$$[$0]}); 
break;
case 475: case 476:
 this.$ = new yy.Print({statement:$$[$0]});
break;
case 477:
 this.$ = new yy.Require({paths:$$[$0]}); 
break;
}
},
table: [o($V0,$V1,{6:1,7:2,10:3,12:4,16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,53:47,61:61,13:[1,38],39:$V2,67:$V3,218:$V4,219:$V5,222:$V6,223:$V7,230:$V8,243:$V9,270:$Va,272:$Vb,273:$Vc,277:$Vd,279:$Ve,281:$Vf,282:$Vg,303:$Vh,305:$Vi,306:$Vj,320:$Vk,322:$Vl,323:$Vm,328:$Vn,329:$Vo}),{1:[3]},{8:[1,63],9:[1,64],11:[1,65]},o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),o($V0,[2,34]),o($V0,[2,35]),o($V0,[2,36]),o($V0,[2,37]),o($V0,[2,38]),o($V0,[2,39]),o($V0,[2,40]),o($V0,[2,41]),o($V0,[2,42]),o($V0,[2,43]),o($V0,$V1,{16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,53:47,61:61,10:66,14:[1,67],39:$V2,67:$V3,218:$V4,219:$V5,222:$V6,223:$V7,230:$V8,243:$V9,270:$Va,272:$Vb,273:$Vc,277:$Vd,279:$Ve,281:$Vf,282:$Vg,303:$Vh,305:$Vi,306:$Vj,320:$Vk,322:$Vl,323:$Vm,328:$Vn,329:$Vo}),{231:[1,68]},{3:69,4:$Vp,5:$Vq},{3:73,4:$Vp,5:$Vq,65:[1,75],73:[1,74],231:[1,76],278:[1,72],286:[1,77]},{84:[1,78]},{278:[1,79]},{3:81,4:$Vp,5:$Vq,73:[1,82],231:[1,83],278:[1,80],286:[1,84]},{80:[1,85]},{231:[1,86]},o($Vr,[2,65],{54:87,80:[1,88]}),{3:92,4:$Vp,5:$Vq,73:[1,93],230:[1,89],283:[1,91],284:[1,94],285:[1,90]},o($V0,[2,468],{321:[1,95]}),o($V0,[2,464],{321:[1,96]}),o($V0,[2,466],{321:[1,97]}),{3:99,4:$Vp,5:$Vq,278:[1,98]},{3:101,4:$Vp,5:$Vq,81:100},o($V0,[2,424],{137:102,173:$Vs}),{137:104,173:$Vs},{3:126,4:$Vp,5:$Vq,76:111,82:116,83:115,136:$Vt,137:112,143:113,144:114,148:105,154:106,171:$Vu,172:$Vv,173:[1,107],174:$Vw,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:127,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,30:163,53:47,61:61,67:$V3,76:133,77:$VE,82:129,83:137,109:165,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,304:164,307:109,308:$VC,312:$VD},{137:167,173:$Vs,330:166},{3:168,4:$Vp,5:$Vq},o($VW,$VX,{63:172,62:[1,169],65:[1,170],66:[1,171],75:$VY}),o($VZ,[2,53],{68:[1,174],69:[1,175],70:[1,176],71:[1,177],72:[1,178],73:[1,179],74:[1,180]}),{1:[2,3]},o($V0,$V1,{16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,53:47,61:61,10:181,39:$V2,67:$V3,218:$V4,219:$V5,222:$V6,223:$V7,230:$V8,243:$V9,270:$Va,272:$Vb,273:$Vc,277:$Vd,279:$Ve,281:$Vf,282:$Vg,303:$Vh,305:$Vi,306:$Vj,320:$Vk,322:$Vl,323:$Vm,328:$Vn,329:$Vo}),o($V0,$V1,{16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,53:47,61:61,10:182,39:$V2,67:$V3,218:$V4,219:$V5,222:$V6,223:$V7,230:$V8,243:$V9,270:$Va,272:$Vb,273:$Vc,277:$Vd,279:$Ve,281:$Vf,282:$Vg,303:$Vh,305:$Vi,306:$Vj,320:$Vk,322:$Vl,323:$Vm,328:$Vn,329:$Vo}),o($V0,[2,8]),{15:[1,183]},{3:101,4:$Vp,5:$Vq,81:184},{278:[1,185]},o($V_,[2,1]),o($V_,[2,2]),o($V$,$V01,{232:186,243:$V11}),{278:[1,188]},{3:189,4:$Vp,5:$Vq},{73:[1,190]},o($V$,$V01,{232:191,243:$V11}),{3:193,4:$Vp,5:$Vq,287:192},{3:101,4:$Vp,5:$Vq,81:194},{3:195,4:$Vp,5:$Vq},o($V$,$V21,{271:196,243:$V31}),{278:[1,198]},{3:199,4:$Vp,5:$Vq},o($V$,$V21,{271:200,243:$V31}),{3:193,4:$Vp,5:$Vq,287:201},{3:101,4:$Vp,5:$Vq,81:202},{3:101,4:$Vp,5:$Vq,81:203},o($V41,[2,71],{55:204,84:[1,205]}),{3:209,4:$Vp,5:$Vq,81:206,82:207,83:208,176:$Vx,177:$Vy,178:$Vz,179:$VA},{231:[1,210]},{84:[1,211]},o($V0,[2,394],{188:[1,212]}),{283:[1,213]},{84:[1,214]},o($V0,[2,398],{84:[1,216],188:[1,215]}),o($V0,[2,469]),o($V0,[2,465]),o($V0,[2,467]),{3:217,4:$Vp,5:$Vq},o($V0,[2,388]),{219:[1,218]},o([8,9,11,67,77,84,112,219,224,226,270,273,274,275,276],$V51,{94:$V61}),o($V0,[2,423]),o($V71,$V81),o($V0,[2,426]),o($V0,[2,427]),o($V0,[2,428]),o($V0,$V81,{93:[1,220]}),{76:223,77:[1,221],83:225,136:$Vt,137:222,143:224,171:$Vu,172:$Vv,173:$Vs,176:$Vx,177:$Vy,178:$Vz,179:$VA,307:226,312:$VD},o($V91,[2,435]),{3:241,4:$Vp,5:$Vq,76:233,77:$Va1,82:239,83:238,136:$Vt,137:234,140:236,143:235,144:237,148:231,171:$Vu,172:$Vv,173:$Vs,174:$Vw,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,307:109,308:$VC,309:227,310:230,311:232,312:$VD,315:228,316:[1,229]},o($Vb1,[2,188]),o($Vb1,[2,189]),o($Vb1,[2,190]),o($Vb1,[2,191]),o($Vb1,[2,192]),o($Vb1,[2,193]),{3:247,4:$Vp,5:$Vq,136:$Vc1,173:$Vd1,313:242,314:[1,243],317:244},o([4,5,8,9,11,39,67,77,78,79,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,134,136,139,150,151,153,161,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,178,179,180,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,215,218,219,222,223,226,230,237,238,239,243,253,256,257,269,270,272,273,277,279,281,282,303,305,306,308,312,314,316,320,322,323,328,329],[2,216]),o($V71,[2,217]),o($V71,[2,218]),o($V71,[2,220]),{3:248,4:$Vp,5:$Vq},{3:249,4:$Vp,5:$Vq},o($V71,[2,224]),o($V71,[2,225]),{77:$Ve1},o($V0,$V1,{16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,53:47,61:61,10:251,205:270,39:$V2,67:$V3,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1,218:$V4,219:$V5,222:$V6,223:$V7,230:$V8,243:$V9,270:$Va,272:$Vb,273:$Vc,277:$Vd,279:$Ve,281:$Vf,282:$Vg,303:$Vh,305:$Vi,306:$Vj,320:$Vk,322:$Vl,323:$Vm,328:$Vn,329:$Vo}),o($VE1,[2,167]),o($VE1,[2,168]),o($VE1,[2,169]),o($VE1,[2,170]),o($VE1,[2,171]),o($VE1,[2,172]),o($VE1,[2,173]),o($VE1,[2,174]),o($VE1,[2,175]),o($VE1,[2,176]),o($VE1,[2,177]),o($VE1,[2,178]),o($VE1,[2,179]),o($VE1,[2,180]),o($VE1,[2,181]),{3:145,4:$Vp,5:$Vq,30:278,53:47,61:61,67:$V3,76:133,77:$VE,82:129,83:137,109:279,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{77:[1,280]},o($VE1,$VF1,{77:$Ve1,94:[1,281]}),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:282,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:283,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VE1,[2,163]),{77:[1,284]},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:285,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,181:286,184:287,185:$VG1,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{77:[1,289]},{77:[1,290]},{3:291,4:$Vp,5:$Vq,82:292},{77:[2,203]},{77:[2,204]},{77:[2,205]},{77:[2,206]},{77:[2,207]},{77:[2,208]},{77:[2,209]},{77:[2,210]},{77:[2,211]},o($V0,[2,475]),o($V0,[2,476]),o($V0,[2,425],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($V0,[2,477],{93:[1,293]}),o($VH1,[2,479]),{108:[1,295],318:294,319:[1,296]},o($VW,$VX,{63:297,75:$VY}),o($VW,$VX,{63:298,75:$VY}),o($VW,$VX,{63:299,75:$VY}),{3:145,4:$Vp,5:$Vq,64:300,76:133,77:$VE,82:129,83:137,109:302,135:301,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{76:303,77:[1,304],136:$Vt},o($VZ,[2,54]),o($VZ,[2,55]),o($VZ,[2,56]),o($VZ,[2,57]),o($VZ,[2,58]),o($VZ,[2,59]),o($VZ,[2,60]),o($V0,[2,4]),o($V0,[2,5]),o($V0,$V1,{16:5,17:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,53:47,61:61,10:305,39:$V2,67:$V3,218:$V4,219:$V5,222:$V6,223:$V7,230:$V8,243:$V9,270:$Va,272:$Vb,273:$Vc,277:$Vd,279:$Ve,281:$Vf,282:$Vg,303:$Vh,305:$Vi,306:$Vj,320:$Vk,322:$Vl,323:$Vm,328:$Vn,329:$Vo}),{270:[1,309],273:[1,306],275:[1,307],276:[1,308]},{3:310,4:$Vp,5:$Vq},{3:311,4:$Vp,5:$Vq},{209:[1,312]},o($V$,$V01,{232:313,243:$V11}),{108:[1,314]},{3:315,4:$Vp,5:$Vq},{3:317,4:$Vp,5:$Vq,81:316},{77:[1,319],91:[1,318]},o($VI1,[2,411],{94:[1,320]}),o($V0,[2,288],{112:[1,321]}),o($V0,[2,381]),{3:322,4:$Vp,5:$Vq},{175:[1,323]},o($V$,$V21,{271:324,243:$V31}),o($V0,[2,393]),{3:101,4:$Vp,5:$Vq,81:325},o($V0,[2,410]),{30:329,53:47,61:61,67:$V3,77:[1,328],224:[1,326],226:[1,327]},{274:[1,330]},o($VJ1,[2,123],{56:331,112:[1,332]}),{3:209,4:$Vp,5:$Vq,77:$VK1,81:336,82:338,83:337,85:333,86:334,176:$Vx,177:$Vy,178:$Vz,179:$VA},o($Vr,[2,66]),o($Vr,[2,67]),o($Vr,[2,68]),o([4,5,8,9,11,78,84,89,91,92,93,100,101,102,103,104,105,106,107,108,110,112,113,123,124,125,126,132],$V51,{77:$Ve1,94:$V61}),{3:101,4:$Vp,5:$Vq,81:339},{3:101,4:$Vp,5:$Vq,81:340},{137:341,173:$Vs},o($V0,[2,396],{188:[1,342]}),{3:101,4:$Vp,5:$Vq,81:343},{137:344,173:$Vs},{3:345,4:$Vp,5:$Vq},o($V0,[2,387]),{3:349,4:$Vp,5:$Vq,140:348,220:346,221:347},{3:350,4:$Vp,5:$Vq},{148:351,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:352,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V91,[2,431]),o($V91,[2,432]),o($V91,[2,433]),o($V91,[2,434]),o($V91,[2,436]),o($V91,[2,437]),{93:[1,354],316:[1,353]},o($V91,[2,453]),o($VL1,[2,460]),o($VM1,[2,438]),o($VM1,[2,439]),o($VM1,[2,440]),o($VM1,[2,441]),o($VM1,[2,442]),o($VM1,[2,443]),o($VM1,[2,444]),o($VM1,[2,445]),o($VM1,[2,446]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:355,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V91,$VF1,{77:$Ve1,94:$VN1}),{93:[1,358],314:[1,357]},o($V91,[2,450]),o($VO1,[2,455]),{177:[1,359]},{177:[1,360]},{177:[1,361]},o($V71,[2,222]),o($V71,[2,223]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,78:[1,363],82:129,83:137,109:364,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,170:362,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V0,[2,474]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:365,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:366,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:367,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:368,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:369,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:370,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:371,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:372,4:$Vp,5:$Vq,76:373,77:[1,374],82:375,136:$Vt},o($VP1,[2,273],{307:109,141:128,82:129,142:130,140:131,138:132,76:133,143:134,137:135,144:136,83:137,145:138,146:139,147:140,148:141,149:142,155:144,3:145,109:376,4:$Vp,5:$Vq,77:$VE,136:$Vt,139:$VF,150:$VG,151:$VH,153:$VI,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,308:$VC,312:$VD}),o($VP1,[2,274],{307:109,141:128,82:129,142:130,140:131,138:132,76:133,143:134,137:135,144:136,83:137,145:138,146:139,147:140,148:141,149:142,155:144,3:145,109:377,4:$Vp,5:$Vq,77:$VE,136:$Vt,139:$VF,150:$VG,151:$VH,153:$VI,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,308:$VC,312:$VD}),o($VP1,[2,275],{307:109,141:128,82:129,142:130,140:131,138:132,76:133,143:134,137:135,144:136,83:137,145:138,146:139,147:140,148:141,149:142,155:144,3:145,109:378,4:$Vp,5:$Vq,77:$VE,136:$Vt,139:$VF,150:$VG,151:$VH,153:$VI,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,308:$VC,312:$VD}),o($VP1,[2,276],{307:109,141:128,82:129,142:130,140:131,138:132,76:133,143:134,137:135,144:136,83:137,145:138,146:139,147:140,148:141,149:142,155:144,3:145,109:379,4:$Vp,5:$Vq,77:$VE,136:$Vt,139:$VF,150:$VG,151:$VH,153:$VI,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,308:$VC,312:$VD}),o($VP1,[2,277],{307:109,141:128,82:129,142:130,140:131,138:132,76:133,143:134,137:135,144:136,83:137,145:138,146:139,147:140,148:141,149:142,155:144,3:145,109:380,4:$Vp,5:$Vq,77:$VE,136:$Vt,139:$VF,150:$VG,151:$VH,153:$VI,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,308:$VC,312:$VD}),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:381,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:382,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VP1,[2,278],{307:109,141:128,82:129,142:130,140:131,138:132,76:133,143:134,137:135,144:136,83:137,145:138,146:139,147:140,148:141,149:142,155:144,3:145,109:383,4:$Vp,5:$Vq,77:$VE,136:$Vt,139:$VF,150:$VG,151:$VH,153:$VI,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,308:$VC,312:$VD}),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:384,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:385,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{66:[1,387],206:386,216:[1,388],217:[1,389]},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:390,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:391,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:241,4:$Vp,5:$Vq,77:[1,392],82:395,140:394,211:393,215:$VQ1},{210:[1,397]},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:398,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:399,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:400,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{78:[1,401]},{78:[1,402],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{3:145,4:$Vp,5:$Vq,62:[1,404],66:[1,405],76:133,77:$VE,82:129,83:137,109:403,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:406,4:$Vp,5:$Vq,139:[1,407]},o([4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],[2,258],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,214:$VD1}),o($VR1,[2,259],{205:270,139:$Vf1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1}),{30:408,53:47,61:61,67:$V3},{139:$Vf1,181:409,184:287,185:$VG1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{182:410,183:$VS1,184:411,185:$VG1,187:$VT1},o($VU1,[2,229]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:413,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:414,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{4:$VV1,152:415,266:$VW1},o($VE1,[2,183],{77:$Ve1}),o($VE1,[2,184]),{137:418,173:$Vs},o($V0,[2,461]),o($V0,[2,462]),o($V0,[2,463]),{3:145,4:$Vp,5:$Vq,64:419,76:133,77:$VE,82:129,83:137,109:302,135:301,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,64:420,76:133,77:$VE,82:129,83:137,109:302,135:301,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,64:421,76:133,77:$VE,82:129,83:137,109:302,135:301,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VX1,[2,52],{93:$VY1}),o($VZ1,[2,153]),o($VZ1,[2,160],{205:270,3:424,137:426,4:$Vp,5:$Vq,91:[1,423],136:[1,425],139:$Vf1,173:$Vs,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($VW,[2,61],{79:[1,427]}),{76:428,136:$Vt},o($V0,[2,9]),{70:[1,430],274:[1,429]},{70:[1,431]},{70:[1,432]},{70:[1,433]},o($V0,[2,377],{77:[1,434],91:[1,435]}),o($V0,[2,382]),{175:[1,436]},{3:437,4:$Vp,5:$Vq},{3:101,4:$Vp,5:$Vq,81:438},{108:[1,439]},{77:[1,440]},o($V0,[2,311],{77:$V51,94:[1,441]}),{30:442,53:47,61:61,67:$V3},{3:444,4:$Vp,5:$Vq,255:443},{3:445,4:$Vp,5:$Vq},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:446,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V0,[2,389]),o($V$,[2,370]),{3:447,4:$Vp,5:$Vq},o($V0,[2,368]),{77:$V_1,83:451,148:450,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,225:448,307:109,308:$VC,312:$VD},{224:[1,452]},{3:349,4:$Vp,5:$Vq,111:453,140:454},o($V0,[2,292]),{3:455,4:$Vp,5:$Vq},o($V$1,[2,125],{57:456,113:[1,457]}),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:458,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V41,[2,69],{93:[1,459]}),o($V02,[2,76],{87:460,95:461,88:462,96:463,99:466,89:$V12,92:$V22,100:$V32,101:$V42,102:$V52,103:$V62,104:$V72,105:$V82,106:$V92,107:$Va2}),{30:475,53:47,61:61,67:$V3},o($Vb2,[2,83],{3:476,4:$Vp,5:$Vq,91:[1,477]}),o($Vb2,[2,86],{3:478,4:$Vp,5:$Vq,91:[1,479]}),o($Vb2,[2,87],{3:480,4:$Vp,5:$Vq,91:[1,481]}),o($V0,[2,406],{84:[1,482]}),o($V0,[2,402],{84:[1,483]}),o($V0,[2,395]),{137:484,173:$Vs},o($V0,[2,404],{84:[1,485]}),o($V0,[2,399]),o($V0,[2,400],{188:[1,486]}),o($V0,[2,283],{93:[1,488],112:[1,487]}),o($Vc2,[2,284]),{199:[1,489]},o([8,9,11,78,89,92,93,100,101,102,103,104,105,106,107,112,113,123,124,125,126,132,199],$VF1,{94:$VN1}),o([4,5,8,9,11,67,77,78,84,89,91,92,93,100,101,102,103,104,105,106,107,108,110,112,113,123,124,125,126,132,219,224,226,270,273,274,275,276],$Vd2),o($V0,[2,429]),{78:[1,490],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},o($V91,[2,451]),{3:241,4:$Vp,5:$Vq,76:233,77:$Va1,82:239,83:238,136:$Vt,137:234,140:236,143:235,144:237,148:231,171:$Vu,172:$Vv,173:$Vs,174:$Vw,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,307:109,308:$VC,310:492,311:232,312:$VD,316:[1,491]},{78:[1,493],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{3:494,4:$Vp,5:$Vq},o($V91,[2,448]),{3:247,4:$Vp,5:$Vq,136:$Vc1,173:$Vd1,314:[1,495],317:496},{3:241,4:$Vp,5:$Vq,76:233,77:$Va1,82:239,83:238,136:$Vt,137:234,140:236,143:235,144:237,148:231,171:$Vu,172:$Vv,173:$Vs,174:$Vw,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,307:109,308:$VC,310:497,311:232,312:$VD},{3:241,4:$Vp,5:$Vq,76:233,77:$Va1,82:239,83:238,136:$Vt,137:234,140:236,143:235,144:237,148:231,171:$Vu,172:$Vv,173:$Vs,174:$Vw,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,307:109,308:$VC,310:498,311:232,312:$VD},{3:241,4:$Vp,5:$Vq,76:233,77:$Va1,82:239,83:238,136:$Vt,137:234,140:236,143:235,144:237,148:231,171:$Vu,172:$Vv,173:$Vs,174:$Vw,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,307:109,308:$VC,310:499,311:232,312:$VD},{78:[1,500],93:$Ve2},o($Vf2,[2,213]),o($Vg2,[2,214],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o([4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,188,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],[2,233],{205:270,139:$Vf1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1}),o($VR1,[2,234],{205:270,139:$Vf1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1}),o($VR1,[2,235],{205:270,139:$Vf1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1}),o($Vh2,[2,236],{205:270,193:$Vl1,194:$Vm1}),o($Vh2,[2,237],{205:270,193:$Vl1,194:$Vm1}),o($Vh2,[2,238],{205:270,193:$Vl1,194:$Vm1}),o([4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,139,173,183,185,186,187,188,189,190,191,192,193,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],[2,239],{205:270,194:$Vm1}),o($VE1,[2,240],{77:$Ve1}),o($VE1,[2,241]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:502,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VE1,[2,243]),o($Vi2,[2,244],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,245],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,246],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,247],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,248],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,249],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,250],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,251],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,252],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),o($Vi2,[2,253],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,209:$Vz1,210:$VA1,214:$VD1}),{77:[1,503]},{77:[2,279]},{77:[2,280]},{77:[2,281]},o([4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,207,208,212,213,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],[2,256],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,209:$Vz1,210:$VA1,214:$VD1}),o([4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,208,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],[2,257],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),{3:145,4:$Vp,5:$Vq,30:504,53:47,61:61,67:$V3,76:133,77:$VE,82:129,83:137,109:364,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,170:505,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VE1,[2,265]),o($VE1,[2,270]),o($VE1,[2,271]),{77:[1,506]},{3:241,4:$Vp,5:$Vq,77:[1,507],82:395,140:394,211:508,215:$VQ1},o($Vj2,[2,267],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,209:$Vz1,210:$VA1,214:$VD1}),o($Vj2,[2,268],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,209:$Vz1,210:$VA1,214:$VD1}),o([4,5,8,9,11,39,67,78,80,84,89,91,92,93,100,101,102,103,104,105,106,107,112,113,122,123,124,125,126,129,130,132,136,173,183,185,186,187,195,196,197,198,199,200,201,202,203,204,207,208,209,210,212,213,214,218,219,222,223,230,243,270,272,273,277,279,281,282,303,305,306,320,322,323,328,329],[2,269],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1}),o($VE1,[2,182]),o($VE1,[2,260]),{78:[1,509],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:510,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:511,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VE1,$Vk2,{94:[1,512]}),o($VE1,[2,162]),{78:[1,513]},{182:514,183:$VS1,184:411,185:$VG1,187:$VT1},{183:[1,515]},o($VU1,[2,228]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:516,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{139:$Vf1,186:[1,517],188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{91:[1,518],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{93:[1,519]},o($Vb1,[2,354],{77:[1,520]}),{77:[1,521]},o($VH1,[2,478]),o($VX1,[2,49],{93:$VY1}),o($VX1,[2,50],{93:$VY1}),o($VX1,[2,51],{93:$VY1}),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:302,135:522,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:523,4:$Vp,5:$Vq,136:[1,524],137:525,173:$Vs},o($VZ1,[2,155]),o($VZ1,[2,157]),o($VZ1,[2,159]),o($VW,[2,63]),{78:[1,526]},{3:527,4:$Vp,5:$Vq},{3:528,4:$Vp,5:$Vq},{3:530,4:$Vp,5:$Vq,263:529},{3:530,4:$Vp,5:$Vq,263:531},{3:532,4:$Vp,5:$Vq},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:364,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,170:533,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:534,4:$Vp,5:$Vq},o($V$,[2,325]),o($V0,$Vl2,{280:535,77:[1,536],91:$Vm2}),{77:[1,538]},{3:101,4:$Vp,5:$Vq,81:539},{3:530,4:$Vp,5:$Vq,91:[1,542],233:540,244:541,263:543},{3:544,4:$Vp,5:$Vq},o($V0,[2,408]),{78:[1,545],93:$Vn2},o($Vg2,[2,346]),o($VI1,[2,412]),o($V0,[2,287],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($V0,[2,390]),o($V0,[2,289],{93:$Vo2}),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:549,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,227:548,307:109,308:$VC,312:$VD},o($VH1,[2,295]),o($VH1,[2,296]),o($V0,[2,290]),{78:[1,550],93:$Vp2},o($Vb2,[2,308]),o($V0,[2,376]),o($Vq2,[2,140],{58:552,126:[1,553]}),{114:[1,554]},o($VJ1,[2,124],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),{3:209,4:$Vp,5:$Vq,77:$VK1,81:336,82:338,83:337,86:555,176:$Vx,177:$Vy,178:$Vz,179:$VA},o($V41,[2,70],{96:463,99:466,95:556,88:557,89:$V12,92:$V22,100:$V32,101:$V42,102:$V52,103:$V62,104:$V72,105:$V82,106:$V92,107:$Va2}),o($Vr2,[2,94]),o($Vr2,[2,95]),{3:209,4:$Vp,5:$Vq,77:[1,561],81:559,82:562,83:560,97:558,176:$Vx,177:$Vy,178:$Vz,179:$VA},{90:[1,563],101:$Vs2},{90:[1,565],101:$Vt2},o($Vu2,[2,107]),{89:[1,569],92:[1,568],99:567,101:$V42,102:$V52,103:$V62,104:$V72,105:$V82,106:$V92,107:$Va2},o($Vu2,[2,109]),{101:[1,570]},{92:[1,572],101:[1,571]},{92:[1,574],101:[1,573]},{92:[1,575]},{101:[1,576]},{101:[1,577]},{78:[1,578]},o($Vb2,[2,81]),{3:579,4:$Vp,5:$Vq},o($Vb2,[2,84]),{3:580,4:$Vp,5:$Vq},o($Vb2,[2,88]),{3:581,4:$Vp,5:$Vq},{3:582,4:$Vp,5:$Vq},{3:583,4:$Vp,5:$Vq},o($V0,[2,397]),{3:584,4:$Vp,5:$Vq},{137:585,173:$Vs},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:586,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:349,4:$Vp,5:$Vq,140:348,221:587},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:588,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V91,[2,430]),o($V91,[2,452]),o($VL1,[2,459]),o($VM1,[2,447]),o($V91,$Vk2,{94:[1,589]}),o($V91,[2,449]),o($VO1,[2,454]),o($VO1,[2,456]),o($VO1,[2,457]),o($VO1,[2,458]),o($Vf2,[2,212]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:590,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{78:[1,591],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{3:145,4:$Vp,5:$Vq,30:592,53:47,61:61,67:$V3,76:133,77:$VE,82:129,83:137,109:364,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,170:593,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{78:[1,594]},{78:[1,595],93:$Ve2},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:596,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,30:597,53:47,61:61,67:$V3,76:133,77:$VE,82:129,83:137,109:364,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,170:598,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VE1,[2,266]),o($VE1,$Vv2,{156:599,157:$Vw2}),{78:[1,601],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{78:[1,602],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{3:603,4:$Vp,5:$Vq,139:[1,604]},o($VE1,[2,221]),{183:[1,605]},o($VE1,[2,227]),{139:$Vf1,183:[2,231],188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:606,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{4:$VV1,152:607,266:$VW1},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:608,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{136:[1,609]},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:549,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,227:610,307:109,308:$VC,312:$VD},o($VZ1,[2,152]),o($VZ1,[2,154]),o($VZ1,[2,156]),o($VZ1,[2,158]),o($VW,[2,62]),o($V0,[2,371]),{274:[1,611]},o($V0,[2,372]),{4:$VV1,152:612,265:[1,613],266:$VW1},o($V0,[2,373]),o($V0,[2,375]),{78:[1,614],93:$Ve2},o($V0,[2,379]),o($V0,[2,383]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:364,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,170:615,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:616,4:$Vp,5:$Vq},{3:444,4:$Vp,5:$Vq,255:617},{77:[1,618]},{78:[1,619]},{78:[2,327],93:[1,620]},{30:621,53:47,61:61,67:$V3},o($Vg2,[2,348]),o($V0,[2,312],{77:$Vd2}),{91:[1,622]},{3:623,4:$Vp,5:$Vq},{77:[1,624],83:626,148:625,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,307:109,308:$VC,312:$VD},{78:[1,627],93:$Vx2},o($Vg2,[2,300],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),{30:630,53:47,61:61,67:$V3,224:[1,629]},{3:349,4:$Vp,5:$Vq,140:631},o($Vy2,[2,148],{59:632,132:[1,633]}),{114:[1,634]},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:640,115:635,117:636,118:$Vz2,120:$VA2,121:$VB2,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V02,[2,77]),o($Vr2,[2,92]),o($Vr2,[2,93]),o($Vr2,[2,122],{98:641,108:[1,642],110:[1,643]}),o($VC2,[2,97],{3:644,4:$Vp,5:$Vq,91:[1,645]}),{3:646,4:$Vp,5:$Vq,91:[1,647]},{30:648,53:47,61:61,67:$V3},o($VC2,[2,104],{3:649,4:$Vp,5:$Vq,91:[1,650]}),{77:[1,651]},o($Vu2,[2,119]),{77:[1,652]},o($Vu2,[2,115]),o($Vu2,[2,108]),{101:$Vt2},{101:$Vs2},o($Vu2,[2,110]),o($Vu2,[2,111]),{101:[1,653]},o($Vu2,[2,113]),{101:[1,654]},{101:[1,655]},o($Vu2,[2,117]),o($Vu2,[2,118]),o($Vb2,[2,80],{3:656,4:$Vp,5:$Vq,91:[1,657]}),o($Vb2,[2,82]),o($Vb2,[2,85]),o($Vb2,[2,89]),o($V0,[2,407]),o($V0,[2,403]),o($V0,[2,405]),o($V0,[2,401]),o($V0,[2,282],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($Vc2,[2,285]),o($Vc2,[2,286],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),{3:603,4:$Vp,5:$Vq},o($Vg2,[2,215],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($VE1,[2,242]),{78:[1,658]},{78:[1,659],93:$Ve2},o($VE1,[2,261]),o($VE1,[2,263]),{78:[1,660],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{78:[1,661]},{78:[1,662],93:$Ve2},o($VE1,[2,194]),{77:[1,663]},o($VE1,$Vv2,{156:664,157:$Vw2}),o($VE1,$Vv2,{156:665,157:$Vw2}),o($V91,[2,164]),o($VE1,[2,161]),o($VE1,[2,226]),o($VU1,[2,230],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),{78:[1,666]},{78:[1,667],93:[1,668],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,205:270,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1},{78:[1,670],93:[1,669]},{78:[1,671],93:$Vx2},{3:672,4:$Vp,5:$Vq},o($VD2,[2,356],{264:673,267:674,268:675,174:$VE2,209:$VF2,226:$VG2,238:$VH2,253:$VI2,256:$VJ2,257:$VK2,269:$VL2}),o($VD2,[2,351]),o($V0,[2,378],{91:[1,684]}),{78:[1,685],93:$Ve2},o($V0,[2,386]),{78:[1,686],93:$Vn2},{3:444,4:$Vp,5:$Vq,255:687},o($V0,[2,313],{234:688,235:689,236:690,226:$VM2,237:$VN2,238:$VO2,239:$VP2}),o($VQ2,$VR2,{3:530,245:695,263:696,246:697,247:698,4:$Vp,5:$Vq,252:$VS2}),{78:[2,328]},{30:700,53:47,61:61,67:$V3},o($Vg2,[2,347]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:549,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,227:701,307:109,308:$VC,312:$VD},o($VH1,[2,298]),o($VH1,[2,299]),o($VH1,[2,294]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:702,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{77:$V_1,83:451,148:450,176:$Vx,177:$Vy,178:$Vz,179:$VA,215:$VB,225:703,307:109,308:$VC,312:$VD},o($V0,[2,293]),o($Vb2,[2,309]),o($VT2,[2,135],{60:704,123:[1,705],124:[1,706],125:[1,707]}),{76:708,136:$Vt},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:711,127:709,128:710,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($V$1,[2,133],{116:712,93:$VU2,122:[1,714]}),o($VV2,[2,127]),{119:[1,715]},{77:[1,716]},{77:[1,717]},o($VV2,[2,132],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($Vr2,[2,96]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:718,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:349,4:$Vp,5:$Vq,111:719,140:454},o($VC2,[2,98]),{3:720,4:$Vp,5:$Vq},o($VC2,[2,100]),{3:721,4:$Vp,5:$Vq},{78:[1,722]},o($VC2,[2,105]),{3:723,4:$Vp,5:$Vq},{30:724,53:47,61:61,67:$V3},{30:725,53:47,61:61,67:$V3},o($Vu2,[2,112]),o($Vu2,[2,114]),o($Vu2,[2,116]),o($Vb2,[2,78]),{3:726,4:$Vp,5:$Vq},o($VE1,[2,254]),o($VE1,[2,255]),o($VE1,[2,272]),o($VE1,[2,262]),o($VE1,[2,264]),{126:$VW2,158:727,159:728,160:[1,729]},o($VE1,[2,195]),o($VE1,[2,196]),o($VE1,[2,185]),o($VE1,[2,186]),{136:[1,731]},{136:[1,732]},o($Vb1,[2,353]),o($Vb1,[2,355]),o($V0,[2,374]),o($VD2,[2,350]),o($VD2,[2,357],{268:733,174:$VE2,209:$VF2,226:$VG2,238:$VH2,253:$VI2,256:$VJ2,257:$VK2,269:$VL2}),o($Vb1,[2,359]),{254:[1,734]},{254:[1,735]},{3:736,4:$Vp,5:$Vq},o($Vb1,[2,363]),{77:[1,737]},{3:126,4:$Vp,5:$Vq,76:111,82:116,83:115,136:$Vt,137:112,143:113,144:114,154:738,171:$Vu,172:$Vv,173:$Vs,174:$Vw,176:$Vx,177:$Vy,178:$Vz,179:$VA},o($Vb1,[2,366]),{174:[1,739]},{3:740,4:$Vp,5:$Vq},o($V0,$Vl2,{280:741,91:$Vm2}),o($V0,[2,391]),{78:[1,742],93:$Vn2},o($V0,[2,310]),o($V0,[2,314],{236:743,226:$VM2,237:$VN2,238:$VO2,239:$VP2}),o($VX2,[2,316]),o($VX2,[2,317]),{199:[1,744]},{199:[1,745]},{199:[1,746]},{78:[2,326],93:[1,747]},o($Vg2,[2,349]),o($Vg2,[2,329]),{65:[1,754],73:[1,755],248:748,249:749,250:750,251:751,253:[1,752],254:[1,756],256:[1,753]},{3:757,4:$Vp,5:$Vq},o($V0,[2,409]),{78:[1,758],93:$Vx2},o($Vg2,[2,301],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($V0,[2,291],{93:$Vo2}),o($VT2,[2,48]),{30:759,53:47,61:61,66:[1,760],67:$V3},{30:761,53:47,61:61,67:$V3},{30:762,53:47,61:61,67:$V3},o($Vy2,[2,150],{133:763,134:[1,764]}),o($Vq2,[2,141],{93:$VY2}),o($VZ2,[2,142]),o($VZ2,[2,144],{205:270,129:[1,766],130:[1,767],139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($V$1,[2,126]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:640,117:768,118:$Vz2,120:$VA2,121:$VB2,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:769,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{77:[1,770]},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:640,115:771,117:636,118:$Vz2,120:$VA2,121:$VB2,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:640,115:772,117:636,118:$Vz2,120:$VA2,121:$VB2,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($Vr2,[2,120],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),o($Vr2,[2,121],{93:$Vp2}),o($VC2,[2,99]),o($VC2,[2,101]),{3:773,4:$Vp,5:$Vq,91:[1,774]},o($VC2,[2,106]),{78:[1,775]},{78:[1,776]},o($Vb2,[2,79]),{78:[1,777],126:$VW2,159:778},{78:[1,779]},{114:[1,780]},{114:[1,781]},{78:[1,782]},{78:[1,783]},o($Vb1,[2,358]),o($Vb1,[2,360]),{257:[1,784]},{77:[1,785]},{76:786,136:$Vt},o($Vb1,[2,365]),o($Vb1,[2,367]),o($V0,[2,380]),o($V0,[2,384]),o($V0,[2,392]),o($VX2,[2,315]),{3:787,4:$Vp,5:$Vq},{76:788,136:$Vt},{3:789,4:$Vp,5:$Vq},o($VQ2,$VR2,{247:698,246:790,252:$VS2}),o($Vg2,[2,331]),o($Vg2,[2,332]),o($Vg2,[2,333]),o($Vg2,[2,334]),{254:[1,791]},{254:[1,792]},o($Vg2,[2,343]),{3:793,4:$Vp,5:$Vq},{3:794,4:$Vp,5:$Vq},o($VQ2,[2,336]),o($VH1,[2,297]),o($VT2,[2,136]),{30:795,53:47,61:61,67:$V3},o($VT2,[2,138]),o($VT2,[2,139]),o($Vy2,[2,149]),{76:796,136:$Vt},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:711,128:797,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VZ2,[2,145]),{131:[1,798]},o($VV2,[2,128]),o($V$1,[2,134],{205:270,139:$Vf1,188:$Vg1,189:$Vh1,190:$Vi1,191:$Vj1,192:$Vk1,193:$Vl1,194:$Vm1,195:$Vn1,196:$Vo1,197:$Vp1,198:$Vq1,199:$Vr1,200:$Vs1,201:$Vt1,202:$Vu1,203:$Vv1,204:$Vw1,207:$Vx1,208:$Vy1,209:$Vz1,210:$VA1,212:$VB1,213:$VC1,214:$VD1}),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:640,115:799,117:636,118:$Vz2,120:$VA2,121:$VB2,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{78:[1,800],93:$VU2},{78:[1,801],93:$VU2},o($VC2,[2,102]),{3:802,4:$Vp,5:$Vq},{3:803,4:$Vp,5:$Vq,91:[1,804]},{3:805,4:$Vp,5:$Vq,91:[1,806]},o($VE1,[2,198]),{78:[1,807]},o($VE1,[2,199]),{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:640,115:808,117:636,118:$Vz2,120:$VA2,121:$VB2,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},{3:145,4:$Vp,5:$Vq,76:133,77:$VE,82:129,83:137,109:711,127:809,128:710,136:$Vt,137:135,138:132,139:$VF,140:131,141:128,142:130,143:134,144:136,145:138,146:139,147:140,148:141,149:142,150:$VG,151:$VH,153:$VI,155:144,161:$VJ,162:$VK,163:$VL,164:$VM,165:$VN,166:$VO,167:$VP,168:$VQ,169:$VR,171:$Vu,172:$Vv,173:$Vs,174:$Vw,175:$VS,176:$Vx,177:$Vy,178:$Vz,179:$VA,180:$VT,190:$VU,209:$VV,215:$VB,307:109,308:$VC,312:$VD},o($VE1,[2,187]),o($Vb1,[2,352]),{3:810,4:$Vp,5:$Vq},{3:811,4:$Vp,5:$Vq},{93:[1,812]},o($VX2,[2,318]),o($VX2,[2,319]),o($VX2,[2,320]),o($Vg2,[2,330]),{77:[1,813]},{77:[1,814]},{77:[1,815]},{77:[1,816]},o($VT2,[2,137]),o($Vy2,[2,151]),o($VZ2,[2,143]),o($VZ2,[2,146],{129:[1,817]}),{78:[1,818],93:$VU2},o($VV2,[2,130]),o($VV2,[2,131]),o($VC2,[2,103]),o($Vr2,[2,72]),{3:819,4:$Vp,5:$Vq},o($Vr2,[2,74]),{3:820,4:$Vp,5:$Vq},o($VE1,[2,200]),o([78,126],[2,201],{93:$VU2}),{78:[2,202],93:$VY2},{77:[1,821]},{78:[1,822]},{76:823,136:$Vt},{3:444,4:$Vp,5:$Vq,255:824},{3:444,4:$Vp,5:$Vq,255:825},{3:349,4:$Vp,5:$Vq,111:826,140:454},{3:349,4:$Vp,5:$Vq,111:827,140:454},o($VZ2,[2,147]),o($VV2,[2,129]),o($Vr2,[2,73]),o($Vr2,[2,75]),{3:828,4:$Vp,5:$Vq},o($Vb1,[2,362]),{78:[1,829]},{78:[1,830],93:$Vn2},{78:[1,831],93:$Vn2},{78:[1,832],93:$Vp2},{78:[1,833],93:$Vp2},{78:[1,834]},o($Vb1,[2,364]),o($Vg2,[2,337]),{257:[1,835]},o($Vg2,[2,344]),o($Vg2,[2,345]),o($Vb1,[2,361]),{3:836,4:$Vp,5:$Vq},{77:[1,837]},{3:444,4:$Vp,5:$Vq,255:838},{78:[1,839],93:$Vn2},o($Vg2,[2,339],{258:840,259:841,108:[1,842]}),o($Vg2,[2,338]),{108:[1,844],260:843},{222:[1,845]},o($Vg2,[2,340]),{218:[1,846]},{261:[1,847]},{261:[1,848]},{262:[1,849]},{262:[1,850]},{108:[2,341]},o($Vg2,[2,342])],
defaultActions: {63:[2,3],154:[2,203],155:[2,204],156:[2,205],157:[2,206],158:[2,207],159:[2,208],160:[2,209],161:[2,210],162:[2,211],387:[2,279],388:[2,280],389:[2,281],621:[2,328],849:[2,341]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 179
break;
case 1:return 308
break;
case 2:return 5
break;
case 3:return 5
break;
case 4:return 173
break;
case 5:return 173
break;
case 6:return /* skip comments */
break;
case 7:return /* return 'COMMENT' */
break;
case 8:/* skip whitespace */
break;
case 9:return 208
break;
case 10:return 207
break;
case 11:return 301
break;
case 12:return 262
break;
case 13:return 275
break;
case 14:return 168
break;
case 15:return 66
break;
case 16:return 272
break;
case 17:return 207
break;
case 18:return 107
break;
case 19:return 217
break;
case 20:return 90
break;
case 21:return 169
break;
case 22:return 91
break;
case 23:return 306
break;
case 24:return 129
break;
case 25:return 277
break;
case 26:return 238
break;
case 27:return 165
break;
case 28:return 323
break;
case 29:return 212
break;
case 30:return 213
break;
case 31:return 114
break;
case 32:return 180
break;
case 33:return 151
break;
case 34:return 239
break;
case 35:return 295
break;
case 36:return 130
break;
case 37:return "COLUMN"
break;
case 38:return "COLUMNS"
break;
case 39:return "COMMIT"
break;
case 40:return "CONSTRAINT"
break;
case 41:return "CONVERT"
break;
case 42:return "COUNT"
break;
case 43:return 230
break;
case 44:return "CROSS"
break;
case 45:return 121
break;
case 46:return "CURSOR"
break;
case 47:return 278
break;
case 48:return 283
break;
case 49:return 289
break;
case 50:return 226
break;
case 51:return 222
break;
case 52:return 129
break;
case 53:return 279
break;
case 54:return 62
break;
case 55:return 270
break;
case 56:return 183
break;
case 57:return 237
break;
case 58:return 266
break;
case 59:return 187
break;
case 60:return 124
break;
case 61:return 175
break;
case 62:return 13
break;
case 63:return 172
break;
case 64:return 297
break;
case 65:return 166
break;
case 66:return 256
break;
case 67:return 84
break;
case 68:return 11
break;
case 69:return 113
break;
case 70:return 118
break;
case 71:return 122
break;
case 72:return 303
break;
case 73:return 243
break;
case 74:return 269
break;
case 75:return 214
break;
case 76:return 210
break;
case 77:return 73
break;
case 78:return 102
break;
case 79:return 223
break;
case 80:return 125
break;
case 81:return 80
break;
case 82:return 101
break;
case 83:return 254
break;
case 84:return 167
break;
case 85:return 103
break;
case 86:return 188
break;
case 87:return 132
break;
case 88:return 305
break;
case 89:return 71	
break;
case 90:return "MAX"
break;
case 91:return "MIN"
break;
case 92:return "EXCEPT"
break;
case 93:return "MODIFY"
break;
case 94:return 100
break;
case 95:return 299
break;
case 96:return 150
break;
case 97:return 131
break;
case 98:return 261
break;
case 99:return 209
break;
case 100:return 174
break;
case 101:return 319
break;
case 102:return 108
break;
case 103:return 134
break;
case 104:return 293
break;
case 105:return 208
break;
case 106:return 126
break;
case 107:return 92
break;
case 108:return 157
break;
case 109:return 160
break;
case 110:return 79
break;
case 111:return 15
break;
case 112:return 253
break;
case 113:return 328
break;
case 114:return 300
break;
case 115:return 14
break;
case 116:return 74
break;
case 117:return 'REDUCE'
break;
case 118:return 257
break;
case 119:return 302
break;
case 120:return 273
break;
case 121:return 329
break;
case 122:return 327
break;
case 123:return 104
break;
case 124:return 322
break;
case 125:return 120
break;
case 126:return 69
break;
case 127:return 278
break;
case 128:return 283
break;
case 129:return 67
break;
case 130:return 106
break;
case 131:return 219
break;
case 132:return 119
break;
case 133:return 282
break;
case 134:return 216
break;
case 135:return 325
break;
case 136:return "SUM"
break;
case 137:return 231
break;
case 138:return 284
break;
case 139:return 72
break;
case 140:return 186
break;
case 141:return 274
break;
case 142:return 75
break;
case 143:return 'TRAN'
break;
case 144:return 321
break;
case 145:return 171
break;
case 146:return 123
break;
case 147:return 65
break;
case 148:return 218
break;
case 149:return 281
break;
case 150:return 110
break;
case 151:return 68
break;
case 152:return 224
break;
case 153:return 286
break;
case 154:return 185
break;
case 155:return 112
break;
case 156:return 136
break;
case 157:return 194
break;
case 158:return 189
break;
case 159:return 190
break;
case 160:return 139
break;
case 161:return 191
break;
case 162:return 192
break;
case 163:return 204
break;
case 164:return 201
break;
case 165:return 203
break;
case 166:return 200
break;
case 167:return 196
break;
case 168:return 195
break;
case 169:return 198
break;
case 170:return 202
break;
case 171:return 197
break;
case 172:return 199
break;
case 173:return 202
break;
case 174:return 77
break;
case 175:return 78
break;
case 176:return 215
break;
case 177:return 312
break;
case 178:return 314
break;
case 179:return 316
break;
case 180:return 94
break;
case 181:return 93
break;
case 182:return 177
break;
case 183:return 9
break;
case 184:return 176
break;
case 185:return 178
break;
case 186:return 193
break;
case 187:return 4
break;
case 188:return 8
break;
case 189:return 'INVALID'
break;
}
},
rules: [/^(?:\[\?\])/i,/^(?:@\[)/i,/^(?:\[([^\]])*?\])/i,/^(?:`([^\]])*?`)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:\/\*(.*?)\*\/)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:ABSOLUTE\b)/i,/^(?:ACTION\b)/i,/^(?:ADD\b)/i,/^(?:AGGR\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:AND\b)/i,/^(?:ANTI\b)/i,/^(?:ANY\b)/i,/^(?:APPLY\b)/i,/^(?:ARRAY\b)/i,/^(?:AS\b)/i,/^(?:ASSERT\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:AUTO_INCREMENT\b)/i,/^(?:AVG\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:NOT BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHARSET\b)/i,/^(?:CLOSE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:COMMIT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONVERT\b)/i,/^(?:COUNT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:CURSOR\b)/i,/^(?:DATABASE\b)/i,/^(?:DATABASES\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DETACH\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:END\b)/i,/^(?:ENGINE\b)/i,/^(?:ENUM\b)/i,/^(?:ELSE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FALSE\b)/i,/^(?:FETCH\b)/i,/^(?:FIRST\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:GO\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HAVING\b)/i,/^(?:HELP\b)/i,/^(?:IF\b)/i,/^(?:IDENTITY\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LAST\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:SOURCE\b)/i,/^(?:MATRIX\b)/i,/^(?:MAX\b)/i,/^(?:MIN\b)/i,/^(?:MINUS\b)/i,/^(?:MODIFY\b)/i,/^(?:NATURAL\b)/i,/^(?:NEXT\b)/i,/^(?:NEW\b)/i,/^(?:NOCASE\b)/i,/^(?:NO\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:OFF\b)/i,/^(?:ON\b)/i,/^(?:OFFSET\b)/i,/^(?:OPEN\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:OVER\b)/i,/^(?:PARTITION\b)/i,/^(?:PERCENT\b)/i,/^(?:PLAN\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRINT\b)/i,/^(?:PRIOR\b)/i,/^(?:QUERY\b)/i,/^(?:RECORDSET\b)/i,/^(?:REDUCE\b)/i,/^(?:REFERENCES\b)/i,/^(?:RELATIVE\b)/i,/^(?:RENAME\b)/i,/^(?:REQUIRE\b)/i,/^(?:RESTORE\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROLLUP\b)/i,/^(?:ROW\b)/i,/^(?:SCHEMA\b)/i,/^(?:SCHEMAS\b)/i,/^(?:SELECT\b)/i,/^(?:SEMI\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHOW\b)/i,/^(?:SOME\b)/i,/^(?:STORE\b)/i,/^(?:SUM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLES\b)/i,/^(?:TEXT\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TOP\b)/i,/^(?:TRAN\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRUE\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USE\b)/i,/^(?:USING\b)/i,/^(?:VALUE\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:(\d*[.])?\d+)/i,/^(?:->)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:!===)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:@)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

//
// 12prettyflag.js - prettify
//

/**
 Pretty flag - nice HTML output or standard text without any tags
 */

alasql.prettyflag = false;

/**
 Pretty output of SQL functions
 @param {string} sql SQL statement
 @param {boolean} prettyflag value
 @return {string} HTML or text string with pretty output 
 */

alasql.pretty = function(sql, flag) {
	var pf = alasql.prettyflag;
	alasql.prettyflag = !flag;
	var s = alasql.parse(sql).toString();
	alasql.prettyflag = pf;
	return s;
};

/**
 Pretty keyword
 @param {string} Keyword
 @return {string} pretty keyword
 */
function K(s){
	if(alasql.prettyflag) {
		return '<b style="color:blue">'+s.toUpperCase()+'</b>'; 
	} else {
		return s;
	}
};

/**
 Pretty 
 @param {string} 
 @return {string} pretty keyword
 */
function P(s){
	if(alasql.prettyflag) {
		return '<span style="color:green">'+s+'</span>'; 
	} else {
		return s;
	}
};

/**
 Pretty 
 @param {string} 
 @return {string} pretty keyword
 */
function L(s){
	if(alasql.prettyflag) {
		return '<span style="color:red">'+s+'</span>'; 
	} else {
		return s;
	}
};

/**
 Pretty number
 @param {string | number} s number 
 @return {string} pretty number
 */
function N(s){
	if(alasql.prettyflag) {
		return '<span style="color:green">'+s+'</span>'; 
	} else {
		return s;
	}
};

/**
 Pretty string
 @param {string} s string 
 @return {string} pretty string
 */
function S(s){
	if(alasql.prettyflag) {
		return '<span style="color:green">'+s+'</span>'; 
	} else {
		return s;
	}
};


/**
 Pretty new line
 @return {string} HTML new line character
 */
function NL(){
	if(alasql.prettyflag) {
		return '<br/>'; 
	} else {
		return ' '; // '\n'
	}	
};

/**
 Pretty ident
 @return {string} HTML ident
 */
function ID(){
	if(alasql.prettyflag) {
		return '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'; 
	} else {
		return ''; //'    ';
	}	
};



/*
//
// Utilities for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/**
 Alasql utility functions
 */
var utils = alasql.utils = {};

/**
 Return true.
 Stub for non-ecisting WHERE clause, because is faster then if(whenrfn) whenfn()
 @return {boolean} true
 */
function returnTrue () {return true};

/**
 Return undefined
 Stub for non-ecisting WHERE clause, because is faster then if(whenrfn) whenfn()
 @return undefined
 */
function returnUndefined() {};

/**
 Escape quotes
 @param {string} s Source string
 @return {string} Escaped string
 */
var escapeq = utils.escapeq = function(s) {
    return s.replace(/\'/g,'\\\'');
}


/**
 Double quotes
 @param {string} s Source string
 @return {string} Escaped string
 */
var escapeqq = utils.undoubleq = function(s) {
    return s.replace(/(\')/g,'\'\'');
}

/**
 Replace double quotes
 @param {string} s Source string
 @return {string} Replaced string
 */
var doubleq = utils.doubleq = function(s) {
    return s.replace(/(\'\')/g,'\\\'');
}


/**
 Replace sigle quote to escaped single quote
 @param {string} s Source string
 @return {string} Replaced string
 */
 var doubleqq = utils.doubleqq = function(s) {
    return s.replace(/\'/g,"\'");
}


/**
  Load text file from anywhere
  @param {string} path File path
  @param {boolean} asy True - async call, false - sync call
  @param {function} success Success function
  @param {function} error Error function
*/
var loadFile = utils.loadFile = function(path, asy, success, error) {

    if(typeof exports == 'object') {
        // For Node.js
        var fs = require('fs');
//        console.log(36,path);
//        console.log(typeof path);
        if(!path) {
            var buff = '';
            process.stdin.setEncoding('utf8');
            process.stdin.on('readable', function() {
                var chunk = process.stdin.read();
                if (chunk !== null) {
                    buff += chunk.toString();
                }
            });
            process.stdin.on('end', function() {
               success(buff);
            });
        } else {
            // var data = fs.readFileSync(path);
            // success(data.toString());
            if(asy) {
                fs.readFile(path,function(err,data){
                    if(err) {
                        throw err;
                    }
                    success(data.toString());
                });
            } else {
              var data = fs.readFileSync(path);
              success(data.toString());
            }
        }
    } else {

        if(typeof path == "string") {
                    // For browser
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        if (success)
                            success(xhr.responseText);
                    } else {
                        if (error)
                            error(xhr);
                    }
                }
            };
            xhr.open("GET", path, asy); // Async
            xhr.send();
        } else if(path instanceof Event) {
            // console.log("event");
            var files = path.target.files;
            var reader = new FileReader();
            var name = files[0].name;
            reader.onload = function(e) {
                var data = e.target.result;
                success(data);
            };
            reader.readAsText(files[0]);    
        }
    }
};

/**
  Load binary file from anywhere
  @param {string} path File path
  @param {boolean} asy True - async call, false - sync call
  @param {function} success Success function
  @param {function} error Error function
  @return 1 for Async, data - for sync version
*/

var loadBinaryFile = utils.loadBinaryFile = function(path, asy, success, error) {
    if(typeof exports == 'object') {
        // For Node.js
        var fs = require('fs');
        if(asy) {
            fs.readFile(path,function(err,data){
                if(err) {
                    throw err;
                }
                var arr = new Array();
                for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);
                success(arr.join(""));
            });

        } else {
            var data = fs.readFileSync(path);
            var arr = new Array();
            for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);
            success(arr.join(""));
        }
//        success(data);
    } else {

        if(typeof path == "string") {
            // For browser
            var xhr = new XMLHttpRequest();
            xhr.open("GET", path, asy); // Async
            xhr.responseType = "arraybuffer";
            xhr.onload = function() {
                var data = new Uint8Array(xhr.response);
                var arr = new Array();
                for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);
                success(arr.join(""));
            };
            xhr.send();
        } else if(path instanceof Event) {
            // console.log("event");
            var files = path.target.files;
            var reader = new FileReader();
            var name = files[0].name;
            reader.onload = function(e) {
                var data = e.target.result;
                success(data);
            };
            reader.readAsBinaryString(files[0]);    
        }
    };
};


/**
  Save text file from anywhere
  @param {string} path File path
  @param {array of objects} data Data object
  @param {function} cb Callback
*/

var saveFile = utils.saveFile = function(path, data, cb) {
    if(!path) {
        alasql.options.stdout = true;
        console.log(data);
    } else {
        if(typeof exports == 'object') {
            // For Node.js
            var fs = require('fs');
            var data = fs.writeFileSync(path,data);
        } else {
            var blob = new Blob([data], {type: "text/plain;charset=utf-8"});
            saveAs(blob, path);        
        }
    }
};


// For LOAD
// var saveBinaryFile = utils.saveFile = function(path, data, cb) {
//     if(typeof exports == 'object') {
//         // For Node.js
//         var fs = require('fs');
//         var data = fs.writeFileSync(path,data);
//     } else {
//         var blob = new Blob([data], {type: "text/plain;charset=utf-8"});
//         saveAs(blob, path);        
//     }
// };


// Fast hash function

/**
  Hash string to integer number
  @param {string} str Source string
  @return {integer} hash number
*/

var hash = utils.hash = function hash(str){
    var h = 0;
    if (str.length == 0) return h;
    for (var i = 0; i < str.length; i++) {
        h = ((h<<5)-h)+str.charCodeAt(i);
        h = h & h; 
   	}
    return h;
};

/**
 Union arrays
 */
var arrayUnion = utils.arrayUnion = function (a,b) {
    var r = b.slice(0);
    a.forEach(function(i) { if (r.indexOf(i) < 0) r.push(i); });
    return r;
};

/** 
 Array Difference
 */
var arrayDiff = utils.arrayDiff  = function (a,b) {
    return a.filter(function(i) {return b.indexOf(i) < 0;});
};

/**
  Arrays deep intersect (with records)
 */
var arrayIntersect = utils.arrayIntersept  = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
            found = found || (ai==bi);
        });

        if(found) {
            r.push(ai); 
        }
    });
    return r;
};


/**
  Arrays deep union (with records)
 */
var arrayUnionDeep = utils.arrayUnionDeep = function (a,b) {
    var r = b.slice(0);
    a.forEach(function(ai) {
        var found = false;
        
        r.forEach(function(ri){
//            found = found || equalDeep(ai, ri, true);
            found = found || deepEqual(ai, ri);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

/**
  Arrays deep union (with records)
 */
var arrayExceptDeep = utils.arrayExceptDeep = function (a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
//            found = found || equalDeep(ai, bi, true);
            found = found || deepEqual(ai, bi);
        });

        if(!found) {
            r.push(ai); 
        }
    });
    return r;
};

/**
  Arrays deep intersect (with records)
 */
var arrayIntersectDeep = utils.arrayInterseptDeep  = function(a,b) {
    var r = [];
    a.forEach(function(ai) {
        var found = false;
        
        b.forEach(function(bi){
//            found = found || equalDeep(ai, bi, true);
            found = found || deepEqual(ai, bi, true);
        });

        if(found) {
            r.push(ai); 
        }
    });
    return r;
};

/** 
  Deep clone obects
 */
var cloneDeep = utils.cloneDeep = function cloneDeep(obj) {
    if(obj == null || typeof(obj) != 'object')
        return obj;

    var temp = obj.constructor(); // changed

    for(var key in obj) {
        if(obj.hasOwnProperty(key)) {
            temp[key] = cloneDeep(obj[key]);
        }
    }
    return temp;
}

/**
  Check equality of objects
*/
var equalDeep = utils.equalDeep = function equalDeep (x, y, deep) {
    if (deep) {
        if (x == y) return true;

        var p;
        for (p in y) {
            if (typeof (x[p]) == 'undefined') { return false; }
        }

        for (p in y) {
            if (y[p]) {
                switch (typeof (y[p])) {
                    case 'object':
                        if (!equalDeep(y[p],x[p])) { return false; } break;
                    case 'function':
                        if (typeof (x[p]) == 'undefined' ||
                  (p != 'equals' && y[p].toString() != x[p].toString()))
                            return false;
                        break;
                    default:
                        if (y[p] != x[p]) { return false; }
                }
            } else {
                if (x[p])
                    return false;
            }
        }

        for (p in x) {
            if (typeof (y[p]) == 'undefined') { return false; }
        }

        return true;
    }
    return x == y;
};

/**
  COmpare two object in deep
 */
var deepEqual = utils.deepEqual = function (x, y) {
  if ((typeof x == "object" && x != null) && (typeof y == "object" && y != null)) {
    if (Object.keys(x).length != Object.keys(y).length)
      return false;

    for (var prop in x) {
      if (y.hasOwnProperty(prop))
      {  
        if (! deepEqual(x[prop], y[prop]))
          return false;
      }
      else
        return false;
    }

    return true;
  }
  else if (x !== y)
    return false;
  else
    return true;
}


/** 
  Extend object
 */
var extend = utils.extend = function extend (a,b){
    if(typeof a == 'undefined') a = {};
    for(key in b) {
        if(b.hasOwnProperty(key)) {
            a[key] = b[key]
        }
    }
    return a;
};;

/**
   Flat array by first row
 */
var flatArray = utils.flatArray = function(a) {
    if(!a || a.length == 0) return [];
    var key = Object.keys(a[0])[0];
    if(typeof key == 'undefined') return [];
    return a.map(function(ai) {return ai[key]});
};

/**
  Convert array of objects to array of arrays
 */
var arrayOfArrays = utils.arrayOfArrays = function (a) {
    return a.map(function(aa){
        var ar = [];
        for(var key in aa) ar.push(aa[key]);
        return ar;
    });
};

/**
    Excel:convert number to Excel column, like 1 => 'A'
    @param {integer} i Column number, starting with 0
    @return {string} Column name, starting with 'A'
*/

var xlsnc = utils.xlsnc = function(i) {
    var addr = String.fromCharCode(65+i%26);
    if(i>=26) {
        i=((i/26)|0)-1;
        addr = String.fromCharCode(65+i%26)+addr;
        if(i>26) {
            i=((i/26)|0)-1;
            addr = String.fromCharCode(65+i%26)+addr;
        };
    };
    return addr;
};

/**
    Excel:conver Excel column name to number
    @param {integer} i Column number, like 'A' or 'BE'
    @return {string} Column name, starting with 0
*/
var xlscn = utils.xlscn = function(s) {
    var n = s.charCodeAt(0)-65;
    if(s.length>1) {
        n = n*26+s.charCodeAt(1)-65;
        if(s.length>2) {
            n = n*26+s.charCodeAt(2)-65;
        }
    }
    return n;
};

var domEmptyChildren = utils.domEmptyChildren = function (container){
  var len = container.childNodes.length;
  while (len--) {
    container.removeChild(container.lastChild);
  };
};



/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/


// Initial parameters
/**
 Jison parser
 */
alasql.parser = parser;

/**
 Jison parser
 @param {string} sql SQL statement
 @return {object} AST (Abstract Syntax Tree)
 */
alasql.parse = parser.parse.bind(parser); // Shortcut

// Database Engines
/**
 List of engines of external databases
 */
alasql.engines = {};

// Databases
/**
 List of databases
 */
alasql.databases = {};

/** Number of databases */
alasql.databasenum = 0; // Current database

// Deafult options
/**
 Alasql options object
 */
alasql.options = {};
alasql.options.valueof = false; // Use valueof in orderfn
alasql.options.dropifnotexists = false; // DROP database in any case
alasql.options.datetimeformat = 'sql'; // How to handle DATE and DATETIME types
								// Another value is 'javascript'
alasql.options.casesensitive = true; // Table and column names are case sensitive and converted to lower-case
alasql.options.logtarget = 'output'; // target for log. Values: 'console', 'output', 'id' of html tag
alasql.options.logprompt = true; // Print SQL at log

alasql.vars = {};

// AUTOCOMMIT ON | OFF
alasql.options.autocommit = true;

alasql.prompthistory = [];

alasql.from = {}; // FROM functions
alasql.into = {}; // INTO functions

alasql.fn = {};
alasql.aggr = {};

alasql.busy = 0;

// Cache
alasql.MAXSQLCACHESIZE = 10000;
alasql.DEFAULTDATABASEID = 'alasql';

/**
  Select current database
  @param {string} databaseid Selected database identificator
 */
alasql.use = function (databaseid) {
	if(!databaseid) databaseid = alasql.DEFAULTDATABASEID;
	if(alasql.useid == databaseid) return;
	alasql.useid = databaseid;
	var db = alasql.databases[alasql.useid];
	alasql.tables = db.tables;
//	alasql.fn = db.fn;
	db.resetSqlCache();
};

// Run one statement
/**
 Run SQL statement on current database
 */
alasql.exec = function (sql, params, cb, scope) {
	return alasql.dexec(alasql.useid, sql, params, cb, scope);
}

/**
 Run SQL statement on specific database
 */
alasql.dexec = function (databaseid, sql, params, cb, scope) {
	var db = alasql.databases[databaseid];
//	if(db.databaseid != databaseid) console.trace('got!');
//	console.log(3,db.databaseid,databaseid);
	
	// Create hash
	var hh = hash(sql);
	var statement = db.sqlCache[hh];
	// If database structure was not changed sinse lat time return cache
	if(statement && db.dbversion == statement.dbversion) {
		return statement(params, cb);
	}

	// Create AST
	var ast = alasql.parse(sql);
	if(!ast.statements) return;
	if(ast.statements.length == 0) return 0;
	else if(ast.statements.length == 1) {
		if(ast.statements[0].compile) {

// Compile and Execute
			var statement = ast.statements[0].compile(databaseid);
			if(!statement) return;
			statement.sql = sql;
			statement.dbversion = db.dbversion;
			
			// Secure sqlCache size
			if (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {
				db.resetSqlCache();
			}
			db.sqlCacheSize++;
			db.sqlCache[hh] = statement;
			var res = alasql.res = statement(params, cb, scope);
			return res;
			
		} else {
//			console.log(ast.statements[0]);
			var res = alasql.res = ast.statements[0].execute(databaseid, params, cb, scope);		
			return res;
		}
	} else {
		// Multiple statements
		if(cb) {
			alasql.adrun(databaseid, ast, params, cb, scope);
		} else {
			return alasql.drun(databaseid, ast, params, cb, scope);
		}
	}
};

/**
  Run multiple statements and return array of results sync
 */
alasql.drun = function (databaseid, ast, params, cb, scope) {
	var useid = alasql.useid;
	if(useid != databaseid) alasql.use(databaseid);
	var res = [];
	for (var i=0, ilen=ast.statements.length; i<ilen; i++) {
		if(ast.statements[i]) {
			if(ast.statements[i].compile) { 
				var statement = ast.statements[i].compile(alasql.useid);
				res.push(alasql.res = statement(params,null,scope));
			} else {
				res.push(alasql.res = ast.statements[i].execute(alasql.useid, params));
			}		
		}
	};
	if(useid != databaseid) alasql.use(useid);
	if(cb) cb(res);
	alasql.res = res;
	return res;
};

/**
  Run multiple statements and return array of results async
 */
alasql.adrun = function (databaseid, ast, params, cb, scope) {
//	alasql.busy++;
	var useid = alasql.useid;
	if(useid != databaseid) alasql.use(databaseid);
	var res = [];

	adrunone();

	function adrunone(data) {
		if(typeof data != 'undefined') res.push(data);
		var astatement = ast.statements.shift();
		if(!astatement) {
			if(useid != databaseid) alasql.use(useid);
			cb(res);
//			alasql.busy--;
//			if(alasql.busy<0) alasql.busy = 0;
		} else {
			if(astatement.compile) {
				var statement = astatement.compile(alasql.useid);
				statement(params, adrunone, scope);
			} else {
				astatement.execute(alasql.useid, params, adrunone);
			}
		}
	}
};



/**
 Compile statement to JavaScript function
 @param {string} sql SQL statement
 @param {string} databaseid Database identificator
 @return {functions} Compiled statement functions
*/
alasql.compile = function(sql, databaseid) {
	if(!databaseid) databaseid = alasql.useid;
	var ast = alasql.parse(sql); // Create AST
	if(ast.statements.length == 1) {
		return ast.statements[0].compile(databaseid);
/*		
		if(kind == 'value') {
			return function(params,cb) {
				var res = statementfn(params);
				var key = Object.keys(res[0])[0];
				if(cb) cb(res[0][key]);
				return res[0][key];
			};
		} else  if(kind == 'single') {
			return function(params,cb) {
				var res = statementfn(params);
				if(cb) cb(res[0]);
				return res[0];
			}
		} else  if(kind == 'row') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				var a = [];
				for(var key in res[0]) {
					a.push(res[0][key]);
				};
				if(cb) cb(a);
				return a;
			}
		} else  if(kind == 'column') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				var ar = [];
				var key = Object.keys(res)[0];
				for(var i=0, ilen=res.length; i<ilen; i++){
					ar.push(res[i][key]);
				}
				if(cb) cb(ar);
				return ar;
			}
		} else if(kind == 'array') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				res = flatArray(res);
				if(cb) cb(res);
				return res;
			};
		} else if(kind == 'matrix') {
			return function(params,cb) {
				var res = statementfn(params,cb);
				res = arrayOfArrays(res);
				if(cb) cb(res);
				return res;
			};				
		} else if(kind == 'collection') {
			return statementfn;
		} else {
			return statementfn;
		}
*/
	} else {
		throw new Error('Cannot compile, because number of statments in SQL is not equal to 1');
	}
}

// // Default methods to exec SQL statements
// alasql.run = alasql.exec = function (sql, params, cb) {
// 	return this.currentDatabase.exec(sql, params, cb);
// };

// Promised version of exec
// alasql.aexec = function (sql, params) {
// 	var self = this;
// 	return new Promise(function(resolve, reject){
// 		self.exec(sql,params,resolve);
// 	});
// };


/*
// MSSQL-Like aliases
alasql.query = function (sql, params, cb) {
	var res = this.exec(sql, params);
	if(cb) cb(res);
	return res;	
};

alasql.queryArray = function (sql, params, cb) {
	var res = flatArray(this.exec(sql, params));
	if(cb) cb(res);
	return res;
};

alasql.querySingle = function (sql, params, cb) {
	var res = this.exec(sql, params)[0];
	if(cb) cb(res);
	return res;
};

alasql.queryRow = function (sql, params, cb) {
	var res = this.querySingle(sql, params);
	var a = [];
	for(var key in res) {
		a.push(res[key]);
	};
	if(cb) cb(a);
	return a;
};

alasql.queryValue = function (sql, params, cb) {
	var res = this.exec(sql, params)[0];
	var val = res[Object.keys(res)[0]];
	if(cb) cb(val);
	return val;
	// TODO Refactor to query.columns
};

alasql.queryArrayOfArrays = function (sql, params, cb) {
	var res = this.exec(sql, params);
	var keys = Object.keys(res[0]);
	var klen = keys.length;
	var aa = [];
	for(var i=0, ilen=res.length;i<ilen;i++) {
		var r = res[i];
		var a = [];
		for(var k=0; k<klen;k++){
			a.push(r[keys[k]]);
		}
		aa.push(a);
	}

	if(cb) cb(aa);
	return aa;
};
*/
/*alasql.queryColumn = function (sql, params, cb) {
	var res = this.exec(sql, params);
	var keys = Object.keys(res[0]);
	var klen = keys.length;
	var aa = [];
	for(var i=0, ilen=res.length;i<ilen;i++) {
		var r = res[i];
		var a = [];
		for(var k=0; k<klen;k++){
			a.push(r[keys[k]]);
		}
		aa.push(a);
	}

	if(cb) cb(aa);
	return aa;
};
*/
/*
alasql.value = alasql.queryValue;
alasql.single = alasql.querySingle;
alasql.row = alasql.queryRow;
alasql.column = alasql.queryArray;
alasql.array = alasql.queryArray;
alasql.matrix = alasql.queryArrayOfArrays;
*/


/*
//
// Database class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Main Database class
/**
    @class Database 
 */

var Database = alasql.Database = function (databaseid) {
	var self = this;
	if(self === alasql) {
		if(databaseid) {
			self = alasql.databases[databaseid];
			if(!self) {
				throw new Error('Database "'+databaseid+'" not found');
			}
		} else {
			// Create new database (or get alasql?)
			self = alasql.databases.alasql;
//			self = new Database(databaseid); // to call without new
		}
	}
	if(!databaseid) {
		databaseid = "db"+(alasql.databasenum++); // Random name
	};
	self.databaseid = databaseid;
	alasql.databases[databaseid] = self;
	self.tables = {};
	self.views = {};

	self.indices = {};
//	self.fn = {};
	self.resetSqlCache();
	self.dbversion = 0;
	return self;
};


/**
    Reset SQL statements cache
 */

Database.prototype.resetSqlCache = function () {
	this.sqlCache = {}; // Cache for compiled SQL statements
	this.sqlCacheSize = 0;	
}


// // Main SQL function

/**
    Run SQL statement on database
    @param {string} sql SQL statement
    @param [object] params Parameters
    @param {function} cb callback
 */

Database.prototype.exec = function(sql, params, cb) {
	return alasql.dexec(this.databaseid, sql, params, cb);
};

// 	// Compile
// 	var statement = this.compile(sql);
// 	// Run
// 	if(statement) {
// 		var data = statement(params, cb);
// 		return data;
// 	}
// 	return;
// };

// // Async version of exec


// Database.prototype.aexec = function(sql, params) {
// 	var self = this;
// 	return new Promise(function(resolve, reject){
// 		alasql.dexec(this.databaseid,sql,params,resolve);
// 	});
// };


// Aliases like MS SQL
/*
Database.prototype.query = Database.prototype.exec;
Database.prototype.run = Database.prototype.exec;
Database.prototype.queryArray = function(sql, params, cb) {
	return flatArray(this.exec(sql, params, cb));
}

Database.prototype.queryArrayOfArrays = function(sql, params, cb) {
	return arrayOfArrays(this.exec(sql, params, cb));
}

Database.prototype.querySingle = function(sql, params, cb) {
	return this.exec(sql, params, cb)[0];
}
Database.prototype.queryValue = function(sql, params, cb) {
	var res = this.querySingle(sql, params, cb);
	return res[Object.keys(res)[0]];
}

Database.prototype.value  = Database.prototype.queryValue;
Database.prototype.row    = Database.prototype.querySingle;
Database.prototype.array  = Database.prototype.queryArray;
Database.prototype.matrix = Database.prototype.queryArrayOfArrays;


// Compile statements
Database.prototype.compile = function(sql, kind) {
	return alasql.compile(sql, kind, databaseid);
};

*/
// 	var self = this;
// 	var hh = hash(sql);

// 	// Check cache with hash of SQL statement
// 	var statement = this.sqlcache[hh];
// 	if(!statement) {

// 		// If not fount, then compile it
// 		var ast = alasql.parse(sql);
// 		// Save to cache

// 		statement = this.sqlcache[hh]= ast.compile(self);

// 		// Memory leak prevention 
// 		this.sqlcachesize++;
// 		if(this.sqlcachesize > alasql.MAXSQLCACHESIZE) {
// 			this.resetSqlCache();
// 		}
// 	};
// 	return statement;
// }

// SQL.js compatibility method
//Database.prototype.prepare = Database.prototype.compile;


// Added for compatibility with WebSQL





/*
//
// Transactio class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/


Database.prototype.transaction = function(cb) {
	var tx = new alasql.Transaction(this.databaseid);
	var res = cb(tx);
	return res;
};

// Transaction class (for WebSQL compatibility)

/** 
 Transaction class
 @class Transaction
 */

var Transaction = alasql.Transaction = function (databaseid) {
	this.transactionid = Date.now();
	this.databaseid = databaseid;
	this.commited = false; 
	this.dbversion = alasql.databases[databaseid].dbversion;
//	this.bank = cloneDeep(alasql.databases[databaseid]);
	this.bank = JSON.stringify(alasql.databases[databaseid]);
	// TODO CLone Tables with insertfns
//	console.log(this);
	return this;
};

// Main class 


// Commit

/**
 Commit transaction
 */
Transaction.prototype.commit = function() {
	this.commited = true;
	alasql.databases[this.databaseid].dbversion = Date.now();
	delete this.bank;
};

// Rollback
/**
 Rollback transaction
 */
Transaction.prototype.rollback = function() {
	if(!this.commited) {
		alasql.databases[this.databaseid] = JSON.parse(this.bank);
		// alasql.databases[this.databaseid].tables = this.bank;
		// alasql.databases[this.databaseid].dbversion = this.dbversion;
		delete this.bank;
	} else {
		throw new Error('Transaction already commited');
	}
};

// Transactions stub

/**
 Execute SQL statement
 @param {string} sql SQL statement
 @param {object} params Parameters
 @param {function} cb Callback function 
 @return result
 */
Transaction.prototype.exec = function(sql, params, cb) {
//	console.log(this.databaseid);
	return alasql.dexec(this.databaseid,sql,params,cb);
};

Transaction.prototype.executeSQL = Transaction.prototype.exec;

/*
Transaction.prototype.query = Database.prototype.exec;
Transaction.prototype.run = Database.prototype.exec;
Transaction.prototype.queryArray = function(sql, params, cb) {
	return flatArray(this.exec(sql, params, cb));
}

Transaction.prototype.queryArrayOfArrays = function(sql, params, cb) {
	return arrayOfArrays(this.exec(sql, params, cb));
}

Transaction.prototype.querySingle = function(sql, params, cb) {
	return this.exec(sql, params, cb)[0];
}
Transaction.prototype.queryValue = function(sql, params, cb) {
	var res = this.querySingle(sql, params, cb);
	return res[Object.keys(res)[0]];
}
*/


/*
//
// Table class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var Table = alasql.Table = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	this.data = [];

	this.inddefs = {};
	this.indices = {};

	this.uniqs = {};
	this.uniqdefs = {};	

	extend(this,params);
};


// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;

Table.prototype.indexColumns = function() {
	var self = this;
	self.xcolumns = {};
	self.columns.forEach(function(col){
		self.xcolumns[col.columnid] = col;
	});	
}




/*
//
// View class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class
var View = alasql.View = function(params){
	// Columns
	this.columns = [];
	this.xcolumns = {};
	// Data array
	this.query = [];

	extend(this,params);
};

// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;




/*
//
// Query class for Alasql.js
// Date: 14.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Table class

/**
 @class Query Main query class
 */
var Query = alasql.Query = function(params){
	this.alasql = alasql;
//	console.log(12,alasql);
	// Columns
	this.columns = [];
	this.xcolumns = {};
	this.selectGroup = [];
	// Data array
	extend(this,params);
};

/**
 @class Recordset data object
 */
var Recordset = alasql.Recordset = function(params){
	// Data array
	extend(this,params);
};


// View = function(){
// 	this.data = [];
// 	this.columns = [];
// 	this.ixcolumns = {};
// 	this.ixdefs = {};
// 	this.indices = {};
// };

// alasql.View = View;




/*
//
// Parser helper for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

var yy = parser.yy = {};

// Utility
yy.extend = extend;
// Option for case sensitive
yy.casesensitive = alasql.options.casesensitive; 

// Base class for all yy classes
var Base = yy.Base = function (params) { return yy.extend(this, params); };

Base.prototype.toString = function() {}
Base.prototype.toType = function() {}
Base.prototype.toJavaScript = function() {}

//var BaseClause = yy,BaseClause = function (params) { return yy.extend(this, params); };
Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {}

//var BaseStatement = yy,BaseStatement = function (params) { return yy.extend(this, params); };
Base.prototype.compile = returnUndefined;
Base.prototype.exec = function() {}




/*
//
// Statements class for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// Statements container
yy.Statements = function(params) { return yy.extend(this, params); };

yy.Statements.prototype.toString = function () {
	return this.statements.map(function(st){return st.toString()}).join(';'+NL());
};

// Compile array of statements into single statement
yy.Statements.prototype.compile = function(db) {
	var statements = this.statements.map(function(st){
		return st.compile(db)
	});
	if(statements.length == 1) {
		return statements[0];	
	} else {
		return function(params, cb){
			var res = statements.map(function(st){ return st(params); });
			if(cb) cb(res);
			return res;
		}
	}
};


// Main query procedure
function queryfn(query,oldscope,cb, A,B) {
	var ms;
		query.sourceslen = query.sources.length;
		var slen = query.sourceslen;
		query.A = A;
		query.B = B;
//	console.log(arguments);
		query.cb = cb;

	// Run all subqueries before main statement
	if(query.queriesfn) {
		query.sourceslen += query.queriesfn.length;
		slen += query.queriesfn.length;

		query.queriesdata = [];

//		console.log(8);
		query.queriesfn.forEach(function(q,idx){
//			if(query.explain) ms = Date.now();
//console.log(18,idx);
//			var res = flatArray(q(query.params,null,queryfn2,(-idx-1),query));

//			var res = flatArray(queryfn(q.query,null,queryfn2,(-idx-1),query));
//			console.log(A,B);
// console.log(q);
			q.query.params = query.params;
//			query.queriesdata[idx] = 
			queryfn(q.query,null,queryfn2,(-idx-1),query);


//			console.log(27,q);


//			query.explaination.push({explid: query.explid++, description:'Query '+idx,ms:Date.now()-ms});
//			query.queriesdata[idx] = res;
//			return res;
		});
//		console.log(9,query.queriesdata.length);
//		console.log(query.queriesdata[0]);
	}

	var scope;
	if(!oldscope) scope = {};
	else scope = cloneDeep(oldscope);
	query.scope = scope;

	// First - refresh data sources

	var result;
	query.sources.forEach(function(source, idx){
//		source.data = query.database.tables[source.tableid].data;
//		console.log(666,idx);
		source.query = query;
		var rs = source.datafn(query, query.params, queryfn2, idx, alasql); 
//		console.log(333,rs);
		if(typeof rs != undefined) {
			// TODO - this is a hack: check if result is array - check all cases and
			// make it more logical
			if((query.intofn || query.intoallfn) && rs instanceof Array) rs = rs.length;
			result = rs;
		}
//		console.log(444,result);
//
// Ugly hack to use in query.wherefn and source.srcwherefns functions
// constructions like this.queriesdata['test'].
// I can elimite it with source.srcwherefn.bind(this)()
// but it may be slow.
// 
		source.queriesdata = query.queriesdata;  
	});
	if(slen == 0) result = queryfn3(query);
	return result;
};

function queryfn2(data,idx,query) {

//console.log(56,arguments);
//		console.log(78,data, idx,query);
//console.trace();

	if(idx>=0) {
		var source = query.sources[idx];
		source.data = data;
		if(typeof source.data == 'function') {
			source.getfn = source.data;
			source.dontcache = source.getfn.dontcache;

	//			var prevsource = query.sources[h-1];
			if(source.joinmode == 'OUTER' || source.joinmode == 'RIGHT' || source.joinmode == 'ANTI') {
				source.dontcache = false;
			}
			source.data = {};
		}
	} else {
		// subqueries
		query.queriesdata[-idx-1] = flatArray(data);
//		console.log(98,query.queriesdata);
//		console.log(79,query.queriesdata);
	}

	query.sourceslen--;
	if(query.sourceslen>0) return;

	return queryfn3(query);
};

function queryfn3(query) {
//console.log(55,query);


	var scope = query.scope;
	// Preindexation of data sources
//	if(!oldscope) {
		preIndex(query);
//	}

	// query.sources.forEach(function(source) {
	// 		console.log(source.data);
	// });

	// Prepare variables
	query.data = [];
	query.xgroups = {};
	query.groups = [];

	// Level of Joins
	var h = 0;

	// Start walking over data
	doJoin(query, scope, h);

//console.log(85,query.data[0]);

	// If groupping, then filter groups with HAVING function
//			console.log(query.havingfns);
	if(query.groupfn) {
		query.data = [];
		for(var i=0,ilen=query.groups.length;i<ilen;i++) {
//			console.log(query.groups[i]);
			var g = query.groups[i];
			if((!query.havingfn) || query.havingfn(g,query.params,alasql)) {
				var d = query.selectgfn(g,query.params,alasql);
				query.data.push(d);
			};
		};
//			query.groups = query.groups.filter();
	};

	// Remove distinct values	
	doDistinct(query);	


	// UNION / UNION ALL
	if(query.unionallfn) {
		query.data = query.data.concat(query.unionallfn(query.params));
	} else if(query.unionfn) {
		query.data = arrayUnionDeep(query.data, query.unionfn(query.params));
	} else if(query.exceptfn) {
		query.data = arrayExceptDeep(query.data, query.exceptfn(query.params));
	} else if(query.intersectfn) {
		query.data = arrayIntersectDeep(query.data, query.intersectfn(query.params));
	};

	// Ordering
	if(query.orderfn) {
		if(query.explain) var ms = Date.now();
		query.data = query.data.sort(query.orderfn);
		if(query.explain) { 
			query.explaination.push({explid: query.explid++, description:'QUERY BY',ms:Date.now()-ms});
		}
	};

	// Reduce to limit and offset
	doLimit(query);

	// Remove Angular.js artifacts and other unnecessary columns
	// Issue #25

//	console.log('removeKeys:',query.removeKeys);

    var removeKeys = query.removeKeys;
    if(typeof angular != "undefined") removeKeys.push('$$hashKey');
    var jlen = removeKeys.length;
    if(jlen > 0) {
      for(var i=0,ilen=query.data.length;i<ilen;i++) {
        for(var j=0; j<jlen;j++)
          delete query.data[i][removeKeys[j]];
      }    
    };

//	console.log(query.intoallfns);

	// if(query.explain) {
	// 	if(query.cb) query.cb(query.explaination,query.A, query.B);
	// 	return query.explaination;
	// } else 
//console.log(190,query.intofns);
	if(query.intoallfn) {
//		console.log(161);
//		var res = query.intoallfn(query.columns,query.cb,query.A, query.B, alasql); 
		var res = query.intoallfn(query.columns,query.cb,query.alasql); 
//		console.log(1163,res);
//		if(query.cb) res = query.cb(res,query.A, query.B);
//		console.log(1165,res);
//		debugger;
		return res;	
	} else if(query.intofn) {
		for(var i=0,ilen=query.data.length;i<ilen;i++){
			query.intofn(query.data[i],i,query.params,query.alasql);
		}
//		console.log(query.intofn);
		if(query.cb) query.cb(query.data.length,query.A, query.B);
		return query.data.length;
	} else {
//		console.log(111,query.cb,query.data);
		var res = query.data;
		if(query.cb) res = query.cb(query.data,query.A, query.B);
//		console.log(777,res)
		return res;
	}

	// That's all
};

// Limiting
function doLimit (query) {
//	console.log(query.limit, query.offset)
	if(query.limit) {
		var offset = 0;
		if(query.offset) offset = ((query.offset|0)-1)||0;
		var limit;
		if(query.percent) {
			limit = ((query.data.length*query.limit/100)| 0)+offset;			
		} else {
			limit = (query.limit|0) + offset;
		};
		query.data = query.data.slice(offset,limit);
	}
}

// Distinct
function doDistinct (query) {
	if(query.distinct) {
		var uniq = {};
		// TODO: Speedup, because Object.keys is slow
		for(var i=0,ilen=query.data.length;i<ilen;i++) {
			var uix = Object.keys(query.data[i]).map(function(k){return query.data[i][k]}).join('`');
			uniq[uix] = query.data[i];
		};
		query.data = [];
		for(var key in uniq) query.data.push(uniq[key]);
	}
};


// Optimization: preliminary indexation of joins
preIndex = function(query) {
//	console.log(query);
	// Loop over all sources
	for(var k=0, klen = query.sources.length;k<klen;k++) {
		var source = query.sources[k];
		// If there is indexation rule
//console.log('preIndex', source);
//console.log(source);
		if(k > 0 && source.optimization == 'ix' && source.onleftfn && source.onrightfn) {
			// If there is no table.indices - create it
			if(query.database.tables[source.tableid]) {
				if(!query.database.tables[source.tableid].indices) query.database.tables[source.tableid].indices = {};
					// Check if index already exists
				var ixx = query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)];
				if( !query.database.tables[source.tableid].dirty && ixx) {
					source.ix = ixx; 
				}
			};
			if(!source.ix) {
				source.ix = {};
				// Walking over source data
				var scope = {};
				var i = 0;
				var ilen = source.data.length;
				var dataw;
//				while(source.getfn i<ilen) {

				while((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {
					if(source.getfn && !source.dontcache) source.data[i] = dataw;
//					scope[tableid] = dataw;

//				for(var i=0, ilen=source.data.length; i<ilen; i++) {
					// Prepare scope for indexation
					scope[source.alias || source.tableid] = dataw;

					// Check if it apply to where function 
					if(source.srcwherefn(scope, query.params, alasql)) {
						// Create index entry for each address
						var addr = source.onrightfn(scope, query.params, alasql);
						var group = source.ix [addr]; 
						if(!group) {
							group = source.ix [addr] = []; 
						}
						group.push(dataw);
					}
					i++;
				}
				if(query.database.tables[source.tableid]){
					// Save index to original table				
					query.database.tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)] = source.ix;
				};
			}
//console.log(38,274,source.ix);

			// Optimization for WHERE column = expression
		} else if (source.wxleftfn) {
				if(!alasql.databases[source.databaseid].engineid) {
					// Check if index exists
					var ixx = query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')];
				}
				if( !query.database.tables[source.tableid].dirty && ixx) {
					// Use old index if exists
					source.ix = ixx;
					// Reduce data (apply filter)
					source.data = source.ix[source.wxrightfn(null, query.params, alasql)]; 
				} else {
					// Create new index
					source.ix = {};
					// Prepare scope
					var scope = {};
					// Walking on each source line
					var i = 0;
					var ilen = source.data.length;
					var dataw;
	//				while(source.getfn i<ilen) {

					while((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {
						if(source.getfn && !source.dontcache) source.data[i] = dataw;
	//				for(var i=0, ilen=source.data.length; i<ilen; i++) {
						scope[source.alias || source.tableid] = source.data[i];
						// Create index entry
						var addr = source.wxleftfn(scope, query.params, alasql);
						var group = source.ix [addr]; 
						if(!group) {
							group = source.ix [addr] = []; 
						}
						group.push(source.data[i]);
						i++;
					}
	//					query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`'+source.onwherefns)] = source.ix;
					if(!alasql.databases[source.databaseid].engineid) {
						query.database.tables[source.tableid].indices[hash(source.wxleftfns+'`')] = source.ix;
					}
				}
				// Apply where filter to reduces rows
				if(source.srcwherefns) {
					if(source.data) {
						var scope = {};
						source.data = source.data.filter(function(r) {
							scope[source.alias] = r;
							return source.srcwherefn(scope, query.params, alasql);
						});
					} else {
						source.data = [];
					}
				}		
//			}
		// If there is no any optimization than apply srcwhere filter
		} else if(source.srcwherefns && !source.dontcache) {
			if(source.data) {
				var scope = {};
				// TODO!!!!! Data as Function

				source.data = source.data.filter(function(r) {
					scope[source.alias] = r;
//					console.log(288,source);
					return source.srcwherefn(scope, query.params, alasql);
				});

				var scope = {};
				var i = 0;
				var ilen = source.data.length;
				var dataw;
				var res = [];
//				while(source.getfn i<ilen) {

				while((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {
					if(source.getfn && !source.dontcache) source.data[i] = dataw;
					scope[source.alias] = dataw;
					if(source.srcwherefn(scope, query.params, alasql)) res.push(dataw);
					i++;
				}
				source.data = res;

			} else {
				source.data = [];
			};
		}			
		// Change this to another place (this is a wrong)
		if(query.database.tables[source.tableid]) {
			//query.database.tables[source.tableid].dirty = false;
		} else {
			// this is a subquery?
		}
	}
}



//
// Join all lines over sources 
//

function doJoin (query, scope, h) {
//	console.log(query.sources.length);
	// Check, if this is a last join?
	if(h>=query.sources.length) {
//console.log(query.wherefns);
		// Then apply where and select
		if(query.wherefn(scope,query.params, alasql)) {

//			console.log("scope",scope.schools);

//			var res = query.selectfn(scope, query.params, alasql);
//			console.log("last",res);
			// If there is a GROUP BY then pipe to groupping function
			if(query.groupfn) {
//				console.log(scope);
				query.groupfn(scope, query.params, query.alasql)
			} else {
				query.data.push(query.selectfn(scope, query.params, alasql));
			}	
		}
	} else {

// STEP 1

		var source = query.sources[h];
		var nextsource = query.sources[h+1];

//		if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "RIGHT"
//			|| source.joinmode == "OUTER" || source.joinmode == "SEMI") {
		if(true) {//source.joinmode != "ANTI") {

			// if(nextsource && nextsource.joinmode == "RIGHT") {
			// 	if(!nextsource.rightdata) {
			// 		console.log("ok");
			// 		nextsource.rightdata = new Array(nextsource.data.length);
			// 		console.log(nextsource.data.length, nextsource.rightdata);
			// 	}
			// }

			var tableid = source.alias || source.tableid; 
			var pass = false; // For LEFT JOIN
			var data = source.data;
			var opt = false;

			// Reduce data for looping if there is optimization hint
			if(!source.getfn || (source.getfn && !source.dontcache)) {
				if(source.joinmode != "RIGHT" && source.joinmode != "OUTER" && source.joinmode != "ANTI" && source.optimization == 'ix') {
					data = source.ix[ source.onleftfn(scope, query.params, alasql) ] || [];
					opt = true;
//					console.log(source.onleftfns);
//					console.log(source.ix);
//	console.log(source.onleftfn(scope, query.params, alasql));
//					console.log(opt, data, data.length);
				}
			}
			// Main cycle
			var i = 0;
			var ilen=data.length;
			var dataw;
//			console.log(h,opt,source.data,i,source.dontcache);
			while((dataw = data[i]) || (!opt && (source.getfn && (dataw = source.getfn(i)))) || (i<ilen) ) {
				if(!opt && source.getfn && !source.dontcache) data[i] = dataw;
//console.log(h, i, dataw);
				scope[tableid] = dataw;
				// Reduce with ON and USING clause
				if(!source.onleftfn || (source.onleftfn(scope, query.params, alasql) == source.onrightfn(scope, query.params, alasql))) {
					// For all non-standard JOINs like a-b=0
					if(source.onmiddlefn(scope, query.params, alasql)) {
						// Recursively call new join
//						if(source.joinmode == "LEFT" || source.joinmode == "INNER" || source.joinmode == "OUTER" || source.joinmode == "RIGHT" ) {
						if(source.joinmode != "SEMI" && source.joinmode != "ANTI") { 
//							console.log(scope);
							doJoin(query, scope, h+1);
						}

						// if(source.data[i].f = 200) debugger;

//						if(source.joinmode == "RIGHT" || source.joinmode == "ANTI" || source.joinmode == "OUTER") {
						if(source.joinmode != "LEFT" && source.joinmode != "INNER") {
							dataw._rightjoin = true;
						}

						// for LEFT JOIN
						pass = true;
					}
				};
				i++;
			};


			// Additional join for LEFT JOINS
			if((source.joinmode == 'LEFT' || source.joinmode == 'OUTER' || source.joinmode == 'SEMI' ) && !pass) {
			// Clear the scope after the loop
				scope[tableid] = {};
				doJoin(query,scope,h+1);
			}	


		}

// STEP 2

		if(h+1 < query.sources.length) {

			if(nextsource.joinmode == "OUTER" || nextsource.joinmode == "RIGHT" 
				|| nextsource.joinmode == "ANTI") {


				scope[source.alias] = {};
			
				var j = 0;
				var jlen = nextsource.data.length;
				var dataw;
				while((dataw = nextsource.data[j]) || (nextsource.getfn && (dataw = nextsource.getfn(j))) || (j<jlen)) {
					if(nextsource.getfn && !nextsource.dontcache) nextsource.data[j] = dataw;

					if(!dataw._rightjoin) {
						scope[nextsource.alias] = dataw;
						doJoin(query, scope, h+2);
					} else {
						//dataw._rightjoin = undefined;	
						delete dataw._rightjoin;					
					}
					j++;
				}
//				console.table(nextsource.data);
//				debugger;	

			};
		};


		scope[tableid] = undefined;

/*
		if(h+1 < query.sources.length) {
			var nextsource = query.sources[h+1];

			if(nextsource.joinmode == "OUTER" || nextsource.joinmode == "RIGHT" 
				|| nextsource.joinmode == "ANTI") {


				console.log(h,query.sources.length);
				// Swap


//				swapSources(query,h);

//				console.log(query.sources);
				//debugger;
//				var source = query.sources[h];

//				var tableid = source.alias || source.tableid; 
//				var data = source.data;

				// Reduce data for looping if there is optimization hint
//				if(source.optimization == 'ix') {
//					data = source.ix[ source.onleftfn(scope, query.params, alasql) ] || [];
//				}

				// Main cycle
				var pass = false;
//				console.log(tableid, data.length);
				for(var i=0, ilen=nextsource.data.length; i<ilen; i++) {
					scope[nextsource.tableid] = nextsource.data[i];
					// Reduce with ON and USING clause
					if(!source.onleftfn || (source.onleftfn(scope, query.params, alasql) == source.onrightfn(scope, query.params, alasql))) {
						// For all non-standard JOINs like a-b=0
						if(source.onmiddlefn(scope, query.params, alasql)) {
							// Recursively call new join
//							if(source.joinmode == "OUTER") {
								doJoin(query, scope, h+2);
//							}
							// for LEFT JOIN
							pass = true;
						}
					};
					if(!pass) {
					// Clear the scope after the loop
//						scope[tableid] = {};
						console.log(scope);
						doJoin(query,scope,h+2);
					}	
				};

				// Additional join for LEFT JOINS
					scope[query.sources[h+1].tableid] = {};
					console.log(scope);

				scope[tableid] = undefined;

				// SWAP BACK
				swapSources(query,h);

			}
		}

*/
	}

};

function swapSources(query, h) {
	var source = query.sources[h];
	var nextsource = query.sources[h+1];

	var onleftfn = source.onleftfn;
	var onleftfns = source.onleftfns;
	var onrightfn = source.onrightfn;
	var onrightfns = source.onrightfns;
	var optimization = source.optimization;

	source.onleftfn = nextsource.onrightfn;
	source.onleftfns = nextsource.onrightfns;
	source.onrightfn = nextsource.onleftfn;
	source.onrightfns = nextsource.onleftfns;
	source.optimization = nextsource.optimization;

	nextsource.onleftfn = onleftfn;
	nextsource.onleftfns = onleftfns;
	nextsource.onrightfn = onrightfn;
	nextsource.onrightfns = onrightfns;
	nextsource.optimization = optimization;

	query.sources[h] = nextsource;
	query.sources[h+1] = source;
}



/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

//
// Main part of SELECT procedure
//

yy.Select = function (params) { return yy.extend(this, params); }
yy.Select.prototype.toString = function() {
	var s = '';
	if(this.explain) s+= K('EXPLAIN')+' ';
	s += K('SELECT')+' ';
	if(this.modifier) s += K(this.modifier)+' ';
	if(this.top) {
		s += K('TOP')+' '+N(this.top.value)+' ';
		if(this.percent) s += K('PERCENT')+' ';
	}
	s += this.columns.map(function(col){
		var s = col.toString();
//		console.log(col);
		if(typeof col.as != "undefined") s += ' '+K('AS')+' '+L(col.as);
		return s;
	}).join(', ');

	if(this.from) {
		s += NL()+ID()+K('FROM')+' '+this.from.map(function(f){
//			console.log(f);
			var ss = f.toString();
			if(f.as) ss += ' '+K('AS')+' '+f.as;
			return ss;
		}).join(',');
	};

	if(this.joins) {
		s += this.joins.map(function(jn){
			var ss = NL()+ID();
			if(jn.joinmode) ss += K(jn.joinmode)+' ';
			ss += K('JOIN')+' ';
			ss += jn.table.toString();
			if(jn.using) ss += ' '+K('USING')+' '+jn.using.toString();
			if(jn.on) ss += ' '+K('ON')+' '+jn.on.toString();
			return ss;
 		});
	}

	if(this.where) s += NL()+ID()+K('WHERE')+' '+this.where.toString();
	if(this.group && this.group.length>0) {
		s += NL()+ID()+K('GROUP BY')+' '+this.group.map(function(grp){
			return grp.toString();
		}).join(', ');
	};
	if(this.having) s += NL()+ID()+K('HAVING')+' '+this.having.toString();

	if(this.order && this.order.length>0) {
		s += NL()+ID()+K('ORDER BY')+' '+this.order.map(function(ord){
			return  ord.toString();
		}).join(', ');
	};
	if(this.limit) s += NL()+ID()+K('LIMIT')+' '+this.limit.value;
	if(this.offset) s += NL()+ID()+K('OFFSET')+' '+this.offset.value;
	if(this.union) s += NL()+K('UNION')+NL()+this.union.toString();
	if(this.unionall) s += NL()+K('UNION ALL')+NL()+this.unionall.toString();
	if(this.except) s += NL()+K('EXCEPT')+NL()+this.except.toString();
	if(this.intersect) s += NL()+K('INTERSECT')+NL()+this.intersect.toString();
	return s;
};

/**
 Select statement in expression
 */
yy.Select.prototype.toJavaScript = function(context, tableid, defcols) {
//	console.log('Expression',this);
//	if(this.expression.reduced) return 'true';
//	return this.expression.toJavaScript(context, tableid, defcols);
console.log('Select.toJS', 81, this.queriesidx);
	var s = 'this.queriesdata['+(this.queriesidx-1)+']';
	return s;
};


// Compile SELECT statement
yy.Select.prototype.compile = function(databaseid) {
	var db = alasql.databases[databaseid];
	// Create variable for query
	var query = new Query();

    query.removeKeys = [];

	query.explain = this.explain; // Explain
	query.explaination = [];
	query.explid = 1;

	query.modifier = this.modifier;
	
	query.database = db;
	// 0. Precompile whereexists
	this.compileWhereExists(query);

	// 0. Precompile queries for IN, NOT IN, ANY and ALL operators
	this.compileQueries(query);
	
	query.defcols = this.compileDefCols(query, databaseid);

	// 1. Compile FROM clause
	query.fromfn = this.compileFrom(query);
	// 2. Compile JOIN clauses
	if(this.joins) this.compileJoins(query);
	// 3. Compile SELECT clause
	
	this.compileSelectGroup0(query);

	if(this.group || query.selectGroup.length>0) {
		query.selectgfns = this.compileSelectGroup1(query);
	} else {
		query.selectfns = this.compileSelect1(query);
	}
	// 5. Optimize WHERE and JOINS
	if(this.where) this.compileWhereJoins(query);

	// 4. Compile WHERE clause
	query.wherefn = this.compileWhere(query);


	// 6. Compile GROUP BY
	if(this.group || query.selectGroup.length>0) query.groupfn = this.compileGroup(query);

	// 6. Compile HAVING
	if(this.having) query.havingfn = this.compileHaving(query);

	if(this.group || query.selectGroup.length>0) {
		query.selectgfn = this.compileSelectGroup2(query);
	} else {
		query.selectfn = this.compileSelect2(query);
	}


	// 7. Compile DISTINCT, LIMIT and OFFSET
	query.distinct = this.distinct;

	// 8. Compile ORDER BY clause
	if(this.order) query.orderfn = this.compileOrder(query);

// TOP
	if(this.top) {
		query.limit = this.top.value;
	} else if(this.limit) {
		query.limit = this.limit.value;
		if(this.offset) {
			query.offset = this.offset.value;
		}
	};
	query.percent = this.percent;

	// 9. Compile ordering function for UNION and UNIONALL
	if(this.union) {
		query.unionfn = this.union.compile(databaseid);
		if(this.union.order) {
			query.orderfn = this.union.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.unionall) {
		query.unionallfn = this.unionall.compile(databaseid);
		if(this.unionall.order) {
			query.orderfn = this.unionall.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.except) {
		query.exceptfn = this.except.compile(databaseid);
		if(this.except.order) {
			query.orderfn = this.except.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	} else if(this.intersect) {
		query.intersectfn = this.intersect.compile(databaseid);
		if(this.intersect.order) {
			query.intersectfn = this.intersect.compileOrder(query);
		} else {
			query.orderfn = null;
		}
	};

	// SELECT INTO
//	console.log(this.into);
	if(this.into) {
		if(this.into instanceof yy.Table) {
			if(alasql.options.autocommit && alasql.databases[this.into.databaseid||databaseid].engineid) {
				query.intoallfns = 'return alasql.engines["'+alasql.databases[this.into.databaseid||databaseid].engineid+'"]'+
					'.intoTable("'+(this.into.databaseid||databaseid)+'","'+this.into.tableid+'",this.data, columns, cb);';
			} else {
				query.intofns = 
				'alasql.databases[\''+(this.into.databaseid||databaseid)+'\'].tables'+
				'[\''+this.into.tableid+'\'].data.push(r);';
			}
		} else if (this.into instanceof yy.FuncValue) {

/*
			query.intofns = 'alasql.into[\''+this.into.funcid+'\'](';
			var ss = ['r','i'];
			if(this.into.args && this.into.args.length>0 ) 	
				this.into.args.forEach(function(arg){
					ss.push(arg.toJavaScript());
				});
			query.intofns += ss.join(',')+')';	
*/
			var qs = 'alasql.into[\''+this.into.funcid.toUpperCase()+'\'](';
			if(this.into.args && this.into.args.length>0 ) {
				qs += this.into.args[0].toJavaScript()+',';
				if(this.into.args.length > 1) {
					qs += this.into.args[1].toJavaScript()+',';
				} else {
					qs += 'null,';
				}
			} else {
				qs += 'null, null,'
			}
			query.intoallfns = qs+'this.data,columns,cb)';
//console.log('999');		




		} else if (this.into instanceof yy.ParamValue) {
//			console.log(184);
//			query.intofns = 'params[\''+this.into.param+"\'](r)";	
			query.intofns = "params['"+this.into.param+"'].push(r)";

		};
//		console.log(query.intofns);
		if(query.intofns) {
			query.intofn = new Function("r,i,params,alasql",query.intofns); 
		};

		if(query.intoallfns) {
//			console.log(query.intoallfns);
			query.intoallfn = new Function("columns,cb,alasql",query.intoallfns); 
		}

	}
//console.log(query);

	// Now, compile all togeather into one function with query object in scope
	var statement = function(params, cb, oldscope) {
		query.params = params;
		var res1 = queryfn(query,oldscope,function(res){

//console.log(res[0].schoolid);
//console.log(184,res);
			var res2 = modify(query, res);


			if(cb) cb(res2); 
//console.log(8888,res2);
			return res2;

		}); 
//console.log(9999,res1);

//		if(typeof res1 != 'undefined') res1 =  modify(query,res1);

		return res1;
		
	};

//	statement.dbversion = ;
//	console.log(statement.query);
//console.log(202,statement);
	statement.query = query;
	return statement;
};

function modify(query, res) {
	if(query.modifier == 'VALUE') {
//		console.log(222,res);
		if(res.length > 0) {
			var key;
			if(query.columns && query.columns.length > 0) key = query.columns[0].columnid;
			else key = Object.keys(res[0])[0];
			res = res[0][key];
		} else {
			res = undefined;
		}
	} if(query.modifier == 'ROW') {
		if(res.length > 0) {
			var key;
			if(query.columns && query.columns.length > 0) key = query.columns[0].columnid;
			else key = Object.keys(res[0])[0];
			var a = [];
			for(var key in res[0]) {
				a.push(res[0][key]);
			};
			res = a;
		} else {
			res = undefined;
		}
	} if(query.modifier == 'COLUMN') {
		var ar = [];
		if(res.length > 0) {
			var key;
			if(query.columns && query.columns.length > 0) key = query.columns[0].columnid;
			else key = Object.keys(res[0])[0];
			for(var i=0, ilen=res.length; i<ilen; i++){
				ar.push(res[i][key]);
			}
		};
		res = ar;
	} if(query.modifier == 'MATRIX') {
		res = arrayOfArrays(res);
	} if(query.modifier == 'INDEX') {
		var ar = {};
		var key,val;
		if(query.columns && query.columns.length > 0) {
			key = query.columns[0].columnid;
			val = query.columns[1].columnid;
		} else {
			var okeys = Object.keys(res[0]);
			key = okeys[0];
			val = okeys[1];
		}
		for(var i=0, ilen=res.length; i<ilen; i++){
			ar[res[i][key]] = res[i][val];
		}
		res = ar;
//		res = arrayOfArrays(res);
	} if(query.modifier == 'RECORDSET') {
		res = new alasql.Recordset({data:res, columns:query.columns});
//		res = arrayOfArrays(res);
	} if(query.modifier == 'TEXT') {
		var key;
		if(query.columns && query.columns.length > 0) key = query.columns[0].columnid;
		else key = Object.keys(res[0])[0];
		var s = '';
		for(var i=0, ilen=res.length; i<ilen; i++){
			res[i] = res[i][key];
		}
		res = res.join('\n');
//		res = arrayOfArrays(res);
	}
	return res;
};



// yy.Select.prototype.exec = function(databaseid) {
// 	throw new Error('Select statement should be precompiled');

// };
yy.Select.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
//	throw new Error('Insert statement is should be compiled')
}


/*
//
// EXISTS and other subqueries functions  functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExistsValue = function(params) { return yy.extend(this, params); }
yy.ExistsValue.prototype.toString = function() {
	return 'EXISTS('+this.value.toString()+')';
};

yy.ExistsValue.prototype.toType = function() {
	return 'boolean';
};

yy.ExistsValue.prototype.toJavaScript = function() {
//	return 'ww=this.existsfn['+this.existsidx+'](params,null,p).length,console.log(ww),ww';
	return 'this.existsfn['+this.existsidx+'](params,null,p).length';
};

yy.Select.prototype.compileWhereExists = function(query) {
	if(!this.exists) return;
	query.existsfn = this.exists.map(function(ex) {
		return ex.compile(query.database.databaseid);
	});
};

yy.Select.prototype.compileQueries = function(query) {
	if(!this.queries) return;
	query.queriesfn = this.queries.map(function(q) {
		return q.compile(query.database.databaseid);
	});
};

/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Select.prototype.compileFrom = function(query) {
	var self = this;
	query.sources = [];
//	var tableid = this.from[0].tableid;
//	var as = '';
//	if(self.from[0].as) as = this.from[0].as;
//console.log(this);
	query.aliases = {};
	if(!self.from) return;

	self.from.forEach(function(tq){
		var alias = tq.as || tq.tableid;
//		console.log(alias);
		if(tq instanceof yy.Table) {
//			console.log(tq, tq.databaseid, query);
			query.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid, type:'table'};
		} else if(tq instanceof yy.Select) {
			query.aliases[alias] = {type:'subquery'};
		} else if(tq instanceof yy.ParamValue) {
			query.aliases[alias] = {type:'paramvalue'};
		} else if(tq instanceof yy.FuncValue) {
			query.aliases[alias] = {type:'funcvalue'};
		} else if(tq instanceof yy.FromData) {
			query.aliases[alias] = {type:'fromdata'};
		} else {
			throw new Error('Wrong table at FROM');
		}

		var source = {
			alias: alias,
			databaseid: tq.databaseid || query.database.databaseid,
			tableid: tq.tableid,
			joinmode: 'INNER',
			onmiddlefn: returnTrue,			
			srcwherefns: '',	// for optimization
			srcwherefn: returnTrue			
		};

		if(tq instanceof yy.Table) {
//				console.log(997,alasql.databases[source.databaseid].engineid);
			if(alasql.options.autocommit && alasql.databases[source.databaseid].engineid) {
//				console.log(997,alasql.databases[source.databaseid].engineid);
				source.datafn = function(query,params,cb,idx, alasql) {
					return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
						source.databaseid, source.tableid,cb,idx,query);
				}				
			} else {
				source.datafn = function(query,params,cb,idx, alasql) {
				// if(!query) console.log('query');
				// if(!query.database) console.log('query');
				// if(!query.database.tables) console.log('query');
				// if(!source.tableid) console.log('query');
				// if(!query.database.tables[source.tableid]) console.log(query);
				// if(!query.database.tables[source.tableid].data) console.log('query');
					var res = alasql.databases[source.databaseid].tables[source.tableid].data;
//				console.log(500,res);
					if(cb) res = cb(res,idx,query);
//				console.log(600,res);
					return res;
//				return alasql.databases[source.databaseid].tables[source.tableid].data;
				};
			}
		} else if(tq instanceof yy.Select) {
			source.subquery = tq.compile(query.database.databaseid);
			source.datafn = function(query, params, cb, idx, alasql) {
//				return source.subquery(query.params, cb, idx, query);
				var res;
				source.subquery(query.params, function(data){
	//				console.log(512,data);
					if(cb) res = cb(data,idx,query);
					return data;
				});
//					console.log(515,res);
				return res;
			}						
		} else if(tq instanceof yy.ParamValue) {
			var ps = "var res = alasql.prepareFromData(params['"+tq.param+"']";
//				console.log(tq);
			if(tq.array) ps+=",true";
			ps += ");if(cb)res=cb(res,idx,query);return res"
			source.datafn = new Function('query,params,cb,idx,alasql',ps);
		} else if(tq instanceof yy.FuncValue) {
			var s = "var res=alasql.from['"+tq.funcid.toUpperCase()+"'](";
			// if(tq.args && tq.args.length>0) {
			// 	s += tq.args.map(function(arg){
			// 		return arg.toJavaScript();
			// 	}).concat('cb,idx,query').join(',');
			// }
			// if(tq.args && tq.args.length>0) {
			// 	s += tq.args.map(function(arg){
			// 		return arg.toJavaScript();
			// 	}).concat().join(',');
			// }
			if(tq.args && tq.args.length>0) {
				if(tq.args[0]) {
					s += tq.args[0].toJavaScript()+',';
				} else {
					s += 'null,';
				};
				if(tq.args[1]) {
					s += tq.args[1].toJavaScript()+',';
				} else {
					s += 'null,';
				};
			} else {
				s += 'null,null,'
			}
			s += 'cb,idx,query';
			s += ');/*if(cb)res=cb(res,idx,query);*/return res';
//	console.log(s);
			source.datafn = new Function('query, params, cb, idx, alasql',s);

		} else if(tq instanceof yy.FromData) {
				source.datafn = function(query,params,cb,idx, alasql) {
					var res = tq.data;
					if(cb) res = cb(res,idx,query);
					return res;
				}				
		} else {
			throw new Error('Wrong table at FROM');
		}
//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
		query.sources.push(source);

	});
	// TODO Add joins
	query.defaultTableid = query.sources[0].alias;
//console.log(query.defaultTableid);
};

alasql.prepareFromData = function(data,array) {
	var res = data;
	if(typeof data == "string") {
		res = data.split(/\r?\n/);
		if(array) {
			for(var i=0, ilen=res.length; i<ilen;i++) {
				res[i] = [res[i]];
			}
		}
	} else if(array) {
		res = [];
		for(var i=0, ilen=data.length; i<ilen;i++) {
			res.push([data[i]]);
		}
//		console.log(res);
	} else if(typeof data == 'object' && !(data instanceof Array)) {
//	} else if(typeof data == 'object' && !(typeof data.length == 'undefined')) {
		res = [];
		for(var key in data) {
			if(data.hasOwnProperty(key)) res.push([key,data[key]]);
		};
//		console.log(res);
	};
//	console.log(typeof data);
	return res;
};



/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT Compile functions


// Compile JOIN caluese
yy.Select.prototype.compileJoins = function(query) {
//	console.log(this);
//	debugger;
	var self = this;




	this.joins.forEach(function(jn){

		// Test CROSS-JOIN
		if(jn.joinmode == "CROSS") {
			if(jn.using || jn.on) {
				throw new Error('CROSS JOIN cannot have USING or ON clauses');
			} else {
				jn.joinmode == "INNER";
			}
		}


		var source;
		var tq;
		if(jn.table) {
			tq = jn.table;
			source = {
				alias: jn.as||tq.tableid,
				databaseid: tq.databaseid || query.database.databaseid,
				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '',	// for optimization
				srcwherefn: returnTrue
			};
			//

//			console.log(source.databaseid, source.tableid);
			if(!alasql.databases[source.databaseid].tables[source.tableid]) {
				throw new Error('Table \''+source.tableid+
				'\' is not exists in database \''+source.databaseid)+'\'';
			};
			// source.data = query.database.tables[source.tableid].data;
			if(alasql.options.autocommit && alasql.databases[source.databaseid].engineid) {
//				console.log(997,alasql.databases[source.databaseid].engineid);
				source.datafn = function(query,params, cb, idx, alasql) {
//					console.log(777,arguments);
					return alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(
						source.databaseid, source.tableid, cb, idx,query);
				}				
			} else {
				source.datafn = function(query,params,cb, idx, alasql) {
					var res = alasql.databases[source.databaseid].tables[source.tableid].data;
					if(cb) res = cb(res,idx,query);
					return res;
				}
			};

//		var alias = jn.as || tq.tableid;
//		if(tq) {
			query.aliases[source.alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid};
//		}


		} else if(jn.select) {
			source = {
				alias: jn.as,
//				databaseid: jn.databaseid || query.database.databaseid,
//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '',	// for optimization
				srcwherefn: returnTrue
			};
			source.subquery = tq.compile(query.database.databaseid);
			source.datafn = function(query, params, cb, idx, alasql) {
				return source.subquery(query.params, null, cb, idx);
			}				
			query.aliases[source.alias] = {type:'subquery'};
		} else if(jn.param) {
			source = {
				alias: jn.as,
//				databaseid: jn.databaseid || query.database.databaseid,
//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '',	// for optimization
				srcwherefn: returnTrue
			};
			// source.data = ;
			var jnparam = jn.param.param;
//			console.log(jn, jnparam);
			var ps = "var res=alasql.prepareFromData(params['"+jnparam+"']";
			if(jn.array) ps += ",true";
			ps += ");if(cb)res=cb(res, idx, query);return res";

			source.datafn = new Function('query,params,cb,idx, alasql',ps);
			query.aliases[source.alias] = {type:'paramvalue'};
		} else if(jn.funcid) {
			source = {
				alias: jn.as,
//				databaseid: jn.databaseid || query.database.databaseid,
//				tableid: tq.tableid,
				joinmode: jn.joinmode,
				onmiddlefn: returnTrue,
				srcwherefns: '',	// for optimization
				srcwherefn: returnTrue
			};
			// source.data = ;

/*
			var jnparam = jn.param.param;
			source.datafn = new Function('query,params,cb,idx',
				"var res=alasql.prepareFromData(params['"+jnparam+"']);if(cb)res=cb(res, idx, query);return res");
*/

			var s = "var res=alasql.from['"+js.funcid.toUpperCase()+"'](";
			// if(tq.args && tq.args.length>0) {
			// 	s += tq.args.map(function(arg){
			// 		return arg.toJavaScript();
			// 	}).concat('cb,idx,query').join(',');
			// }
			// if(tq.args && tq.args.length>0) {
			// 	s += tq.args.map(function(arg){
			// 		return arg.toJavaScript();
			// 	}).concat().join(',');
			// }
			if(jn.args && jn.args.length>0) {
				if(jn.args[0]) {
					s += jn.args[0].toJavaScript()+',';
				} else {
					s += 'null,';
				};
				if(jn.args[1]) {
					s += jn.args[1].toJavaScript()+',';
				} else {
					s += 'null,';
				};
			} else {
				s += 'null,null,'
			}
			s += 'cb,idx,query';
			s += ');/*if(cb)res=cb(res,idx,query);*/return res';
//	console.log(s);
			source.datafn = new Function('query, params, cb, idx, alasql',s);

			query.aliases[source.alias] = {type:'funcvalue'};
		}
/*
		} else if(tq instanceof yy.Select) {
			query.aliases[alias] = {type:'subquery'};
		} else if(tq instanceof yy.ParamValue) {
			query.aliases[alias] = {type:'paramvalue'};
		} else if(tq instanceof yy.FuncValue) {
			query.aliases[alias] = {type:'paramvalue'};
		} else {
			throw new Error('Wrong table at FROM');
		}
*/
		var alias = source.alias;

		// Test NATURAL-JOIN
		if(jn.natural) {
			if(jn.using || jn.on) {
				throw new Error('NATURAL JOIN cannot have USING or ON clauses');
			} else {
//				source.joinmode == "INNER";
				if(query.sources.length > 0) {
					var prevSource = query.sources[query.sources.length-1];
					var prevTable = alasql.databases[prevSource.databaseid].tables[prevSource.tableid];
					var table = alasql.databases[source.databaseid].tables[source.tableid];

					if(prevTable && table) {
						var c1 = prevTable.columns.map(function(col){return col.columnid});
						var c2 = table.columns.map(function(col){return col.columnid});
						jn.using = arrayIntersect(c1,c2).map(function(colid){return {columnid:colid}});
//						console.log(jn.using);
					} else {
						throw new Error('In this version of Alasql NATURAL JOIN '+
							'works for tables with predefined columns only');
					};
				}
			}
		}







		if(jn.using) {
			var prevSource = query.sources[query.sources.length-1];
//			console.log(query.sources[0],prevSource,source);
			source.onleftfns = jn.using.map(function(col){
//				console.log(141,colid);
				return "p['"+(prevSource.alias||prevSource.tableid)+"']['"+col.columnid+"']";
			}).join('+"`"+');



			source.onleftfn = new Function('p,params,alasql','return '+source.onleftfns);

			source.onrightfns = jn.using.map(function(col){
				return "p['"+(source.alias||source.tableid)+"']['"+col.columnid+"']";
			}).join('+"`"+');
			source.onrightfn = new Function('p,params,alasql','return '+source.onrightfns);
			source.optimization = 'ix';
//			console.log(151,source.onleftfns, source.onrightfns);
//			console.log(source);
		} else if(jn.on) {
//console.log(jn.on);
			if(jn.on instanceof yy.Op && jn.on.op == '=' && !jn.on.allsome) {
//				console.log('ix optimization', jn.on.toJavaScript('p',query.defaultTableid) );
				source.optimization = 'ix';
			// 	source.onleftfns = jn.on.left.toJavaScript('p',query.defaultTableid);
			// 	source.onleftfn = new Function('p', 'return '+source.onleftfns);
			// 	source.onrightfns = jn.on.right.toJavaScript('p',query.defaultTableid);
			// 	source.onrightfn = new Function('p', 'return '+source.onrightfns);

				var lefts = '';
				var rights = '';
				var middles = '';
				var middlef = false;
				// Test right and left sides
				var ls = jn.on.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = jn.on.right.toJavaScript('p',query.defaultTableid,query.defcols);

				if((ls.indexOf("p['"+alias+"']")>-1) && !(rs.indexOf("p['"+alias+"']")>-1)){
					if((ls.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { rights = ls; } 
						else { middlef = true };

				} else 	if(!(ls.indexOf("p['"+alias+"']")>-1) && (rs.indexOf("p['"+alias+"']")>-1)){
					if((rs.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { lefts = ls; } 
						else { middlef = true };
				} else {
					middlef = true;
				}

//				console.log(alias, 1,lefts, rights, middlef);

				if((rs.indexOf("p['"+alias+"']")>-1) && !(ls.indexOf("p['"+alias+"']")>-1)){
					if((rs.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { rights = rs; } 
						else { middlef = true };
				} else if(!(rs.indexOf("p['"+alias+"']")>-1) && (ls.indexOf("p['"+alias+"']")>-1)){
					if((ls.match(/p\[\'.*?\'\]/g)||[]).every(function(s){ 
						return s == "p['"+alias+"']"})) { lefts = rs; } 
						else { middlef = true };
				} else {
					middlef = true;
				}

//				console.log(alias, 2,lefts, rights, middlef);

				if(middlef) {
//					middles = jn.on.toJavaScript('p',query.defaultTableid);
//				} else {
					rights = '';
					lefts = '';
					middles = jn.on.toJavaScript('p',query.defaultTableid,query.defcols);
					source.optimization = 'no';
					// What to here?
				} 

				source.onleftfns = lefts;
				source.onrightfns = rights;
				source.onmiddlefns = middles || 'true';
//			console.log(source.onleftfns, '-',source.onrightfns, '-',source.onmiddlefns);

				source.onleftfn = new Function('p,params,alasql', 'return '+source.onleftfns);
				source.onrightfn = new Function('p,params,alasql', 'return '+source.onrightfns);
				source.onmiddlefn = new Function('p,params,alasql', 'return '+source.onmiddlefns);

//			} else if(jn.on instanceof yy.Op && jn.on.op == 'AND') {
//				console.log('join on and ',jn);

			} else {
//				console.log('no optimization');
				source.optimization = 'no';
//				source.onleftfn = returnTrue;
//				source.onleftfns = "true";
				source.onmiddlefns = jn.on.toJavaScript('p',query.defaultTableid,query.defcols);
				source.onmiddlefn = new Function('p,params,alasql','return '+jn.on.toJavaScript('p',query.defaultTableid,query.defcols));
			};
//			console.log(source.onleftfns, source.onrightfns, source.onmiddlefns);

			// Optimization function
		};

//		source.data = alasql.databases[source.databaseid].tables[source.tableid].data;
//console.log(source, jn);
		// TODO SubQueries
/*		if(source.joinmode == 'RIGHT') {
			var prevSource = query.sources.pop();
			if(prevSource.joinmode == 'INNER') {
				prevSource.joinmode = 'LEFT';
				var onleftfn = prevSource.onleftfn;
				var onleftfns = prevSource.onleftfns;
				var onrightfn = prevSource.onrightfn;
				var onrightfns = prevSource.onrightfns;
				var optimization = prevSource.optimization;

				prevSource.onleftfn = source.onrightfn;
				prevSource.onleftfns = source.onrightfns;
				prevSource.onrightfn = source.onleftfn;
				prevSource.onrightfns = source.onleftfns;
				prevSource.optimization = source.optimization;

				source.onleftfn = onleftfn;
				source.onleftfns = onleftfns;
				source.onrightfn = onrightfn;
				source.onrightfns = onrightfns;
				source.optimization = optimization;

				source.joinmode = 'INNER';
				query.sources.push(source);
				query.sources.push(prevSource);
			} else {
				throw new Error('Do not know how to process this SQL');
			}
		} else {
			query.sources.push(source);
		}
*/	
		query.sources.push(source);
	});
//	console.log('sources',query.sources);
}



yy.Select.prototype.compileWhere = function(query) {
	if(this.where) {
		if(typeof this.where == "function") {
			return this.where;
		} else {
			s = this.where.toJavaScript('p',query.defaultTableid,query.defcols);
			query.wherefns = s;
//		console.log(s);
			return new Function('p,params,alasql','return '+s);
		}
	} else return function(){return true};
};



yy.Select.prototype.compileWhereJoins = function(query) {
//	console.log(this.where);
	optimizeWhereJoin(query, this.where.expression);

	//for sources compile wherefs
	query.sources.forEach(function(source) {
		if(source.srcwherefns) {
			source.srcwherefn = new Function('p,params,alasql','return '+source.srcwherefns);
		};
		if(source.wxleftfns) {
			source.wxleftfn = new Function('p,params,alasql','return '+source.wxleftfns);
		};
		if(source.wxrightfns) {
			source.wxrightfn = new Function('p,params,alasql','return '+source.wxrightfns);
		};
//		console.log(source.alias, source.wherefns)
//		console.log(source);
	});
};

function optimizeWhereJoin (query, ast) {
	if(!ast) return false;
	var s = ast.toJavaScript('p',query.defaultTableid,query.defcols);
	var fsrc = [];
	query.sources.forEach(function(source,idx) {
		// Optimization allowed only for tables only
		if(source.tableid) {
			// This is a good place to remove all unnecessary optimizations
			if(s.indexOf('p[\''+source.alias+'\']')>-1) fsrc.push(source);
		};
	});
//	console.log(ast);
//	console.log(s);
//	console.log(fsrc.length);
	if(fsrc.length == 0) {
//		console.log('no optimization, can remove this part of ast');
		return;
	} else if (fsrc.length == 1) {

		if(!(s.match(/p\[\'.*?\'\]/g)||[])
			.every(function(s){ 
						return s == "p['"+fsrc[0].alias+"']"})) { 
			return; 
			// This is means, that we have column from parent query
			// So we return without optimization
		} 

		var src = fsrc[0]; // optmiization source
		src.srcwherefns = src.srcwherefns ? src.srcwherefns+'&&'+s : s;

		if((ast instanceof yy.Op) && (ast.op == '=' && !ast.allsome)) {
			if(ast.left instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = ast.right.toJavaScript('p',query.defaultTableid,query.defcols);
				if(rs.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = ls; 
					fsrc[0].wxrightfns = rs; 
				} 
			} if(ast.right instanceof yy.Column) {
				var ls = ast.left.toJavaScript('p',query.defaultTableid,query.defcols);
				var rs = ast.right.toJavaScript('p',query.defaultTableid,query.defcols);
				if(ls.indexOf('p[\''+fsrc[0].alias+'\']') == -1) {
					fsrc[0].wxleftfns = rs; 
					fsrc[0].wxrightfns = ls; 
				} 
			}
		}
		ast.reduced = true;  // To do not duplicate wherefn and srcwherefn
		return;
	} else {
		if(ast.op = 'AND') {
			optimizeWhereJoin(query,ast.left);
			optimizeWhereJoin(query,ast.right);
		} 
	}

};




/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/**
 Compile group of statements
 */
yy.Select.prototype.compileGroup = function(query) {
	var self = this;
	var tableid = query.sources[0].alias;
	var defcols = query.defcols;
//	console.log(16,tableid, defcols);

//	console.log(query.sources[0].alias,query.defcols);
	var allgroup = [[]];
	if(this.group) {
		allgroup = decartes(this.group,query);
	}
//	console.log(23,allgroup);

//	console.log(allgroup);
	// Prepare groups
	//var allgroup = [['a'], ['a','b'], ['a', 'b', 'c']];

	// Union all arrays to get a maximum
	var allgroups = [];
	allgroup.forEach(function(a){
		allgroups = arrayUnion(allgroups, a);
	});

	query.allgroups = allgroups;

//console.log(42,294, this.group);
//console.log(allgroups);
//		console.log(42,364,query.selectColumns)

if(false) {
	allgroups.forEach(function(col2){
//		console.log(42,365,colid, query.selectColumns[colid])
		if(query.selectColumns[colid]) {
//			console.log(colid,'ok');
		} else {
//			if(colid.indexOf())
//			console.log(colid,'bad');	
			var tmpid = 'default';
			if(query.sources.length > 0) tmpid = query.sources[0].alias;
//			console.log(new yy.Column({columnid:colid}).toJavaScript('p',query.sources[0].alias));
//			query.selectfns += 'r[\''+colid+'\']=p[\''+tmpid+'\'][\''+colid+'\'];';
//console.log(374, colid);
			if(Object.keys(query.selectColumns).length != 0) query.removeKeys.push(colid);
			query.selectfns += 'r[\''+escapeq(colid)+'\']='+(new yy.Column({columnid:colid}).toJavaScript('p',tmpid))+';';
		}
	});
};

	// Create negative array

	var s = '';
//	s+= query.selectfns;

	allgroup.forEach(function(agroup) {
//console.log(agroup);

		// Start of group function
		s += 'var g=this.xgroups[';

	//	var gcols = this.group.map(function(col){return col.columnid}); // Group fields with r
		// Array with group columns from record
		var rg = agroup.map(function(col2){
			var columnid = col2.split('\t')[0];
			var coljs = col2.split('\t')[1];
			// Check, if aggregator exists but GROUP BY is not exists
			if(columnid == '') return '1'; // Create fictive groupping column for fictive GROUP BY
//			else return "r['"+columnid+"']";
			else return coljs;
		});
		if(rg.length == 0) rg = ["''"];

	//	console.log('rg',rg);

		s += rg.join('+"`"+');
		s += '];if(!g) {this.groups.push((g=this.xgroups[';
		s += rg.join('+"`"+');
		s += '] = {';
//		s += ']=r';
		s += agroup.map(function(col2){
			var columnid = col2.split('\t')[0];
			var coljs = col2.split('\t')[1]

			if(columnid == '') return '';
			else return "'"+columnid+"':"+coljs+",";
		}).join('');

		var neggroup = arrayDiff(allgroups,agroup);

		s += neggroup.map(function(col2){			
			var columnid = col2.split('\t')[0];
			var coljs = col2.split('\t')[1]
			return "'"+columnid+"':null,";
		}).join('');

		var aft = '';
//		s += self.columns.map(function(col){
//console.log('query.selectGroup',query.selectGroup);
		s += query.selectGroup.map(function(col,idx){
//console.log(idx, col.toString(), col.as);
			var colas = col.as;
			var colexp = col.expression.toJavaScript("p",tableid,defcols);
			if(typeof colas == 'undefined') {
				if(col instanceof yy.Column) colas = col.columnid;
				else colas = col.toString();
			};
			if (col instanceof yy.AggrValue) { 
				if(col.distinct) {
					aft += ',g[\'$$_VALUES_'+colas+'\']={},g[\'$$_VALUES_'+colas+'\']['+colexp+']=true';
				};
				if (col.aggregatorid == 'SUM'
					|| col.aggregatorid == 'MIN'
					|| col.aggregatorid == 'MAX'
					|| col.aggregatorid == 'FIRST'
					|| col.aggregatorid == 'LAST'
//					|| col.aggregatorid == 'AVG'
//				) { return '\''+col.as+'\':r[\''+col.as+'\'],'; }//f.field.arguments[0].toJavaScript(); 	
				) { return '\''+colas+'\':'+colexp+','; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'ARRAY') {
				 	return '\''+colas+'\':['+colexp+'],';
				} else if(col.aggregatorid == 'COUNT') { 
					if(col.expression.columnid == '*') {
						return '\''+colas+'\':1,';
					} else {
//						return '\''+colas+'\':(typeof '+colexp+' != "undefined")?1:0,';  
//					} else {
						return '\''+colas+'\':(typeof '+colexp+' != "undefined")?1:0,'; 
					}

//				else if(col.aggregatorid == 'MIN') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
//				else if(col.aggregatorid == 'MAX') { return '\''+col.as+'\':r[\''+col.as+'\'],'; }
				} else if(col.aggregatorid == 'AVG') { 
					query.removeKeys.push('_SUM_'+colas);
					query.removeKeys.push('_COUNT_'+colas);
					return '\''+colas+'\':p[\''+colas+'\'],\'_SUM_'+colas+'\':'+colexp+',\'_COUNT_'+colas+'\':1,'; 
				} else if(col.aggregatorid == 'AGGR') {
					aft += ',g[\''+colas+'\']='+col.expression.toJavaScript('g',-1); 
					return '';
				} else if(col.aggregatorid == 'REDUCE') {
					return '\''+colas+'\':alasql.aggr[\''+col.funcid+'\']('+colexp+'),'; 
				}
				return '';
			} else return '';
		}).join('');





		// columnid:r.columnid
	//	var srg = [];//rg.map(function(fn){ return (fn+':'+fn); });

	//	var srg = this.group.map(function(col){
	//		if(col == '') return '';
	//		else return col.columnid+':'+col.toJavaScript('r','');
	//	});

	// Initializw aggregators

	/*
		this.columns.forEach(function(col){
	//		console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';


			if (col instanceof yy.AggrValue) { 
				if (col.aggregatorid == 'SUM') { srg.push("'"+col.as+'\':0'); }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') {srg.push( "'"+col.as+'\':0'); }
				else if(col.aggregatorid == 'MIN') { srg.push( "'"+col.as+'\':Infinity'); }
				else if(col.aggregatorid == 'MAX') { srg.push( "'"+col.as+'\':-Infinity'); }
	//			else if(col.aggregatorid == 'AVG') { srg.push(col.as+':0'); }
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
			};

		});

	*/

	/*****************/

	//	s += srg.join(',');

		// var ss = [];
		// gff.forEach(function(fn){
		// 	ss.push(fn+':rec.'+fn);
		// });
		// s += ss.join(',');
	//	s += '});};';

		s += '}'+aft+',g));} else {';
	//	console.log(s, this.columns);



	// var neggroup = arrayDiff(allgroups,agroup);

	// console.log(agroup,neggroup);

	// s += neggroup.map(function(columnid){
	// 	return "g['"+columnid+"']=null;";
	// }).join('');

	// console.log(s);


	//console.log(query.selectfn);
//		s += self.columns.map(function(col){
		s += query.selectGroup.map(function(col,idx){
			var colas = col.as;
			if(typeof colas == 'undefined') {
				if(col instanceof yy.Column) colas = col.columnid;
				else colas = col.toString();
			}
			var colexp = col.expression.toJavaScript("p",tableid,defcols);

			if (col instanceof yy.AggrValue) { 
				if(col.distinct) {
			 		var pre = 'if(typeof '+colexp+'!="undefined" && (!g[\'$$_VALUES_'+colas+'\']['+colexp+'])) \
				 		 {';
				 	var post = 'g[\'$$_VALUES_'+colas+'\']['+colexp+']=true;}';
				} else {
					var pre = '', post = '';
				}
				if (col.aggregatorid == 'SUM') { return pre+'g[\''+colas+'\']+='+colexp+';'+post; }//f.field.arguments[0].toJavaScript(); 	
				else if(col.aggregatorid == 'COUNT') {
//					console.log(221,col.expression.columnid == '*');
					if(col.expression.columnid == '*') return pre+'g[\''+colas+'\']++;'+post; 
				 	else {
						return pre+'if(typeof '+colexp+'!="undefined") g[\''+colas+'\']++;'+post;
					}
				}
				else if(col.aggregatorid == 'ARRAY') { return pre+'g[\''+colas+'\'].push('+colexp+');'+post; }
				else if(col.aggregatorid == 'MIN') { return pre+'g[\''+colas+'\']=Math.min(g[\''+colas+'\'],'+colexp+');'+post; }
				else if(col.aggregatorid == 'MAX') { return pre+'g[\''+colas+'\']=Math.max(g[\''+colas+'\'],'+colexp+');'+post; }
				else if(col.aggregatorid == 'FIRST') { return ''; }
				else if(col.aggregatorid == 'LAST') { return pre+'g[\''+colas+'\']='+colexp+';'+post; }
				else if(col.aggregatorid == 'AVG') { 
						return pre+'g[\'_SUM_'+colas+'\']+='+colexp+';'
						+ 'g[\'_COUNT_'+colas+'\']++;'
						+ 'g[\''+colas+'\']=g[\'_SUM_'+colas+'\']/g[\'_COUNT_'+colas+'\'];'+post; 
//					 }
	//			else if(col.aggregatorid == 'AVG') { srg.push(colas+':0'); }
				} else if(col.aggregatorid == 'AGGR') {
					return pre+'g[\''+colas+'\']='+col.expression.toJavaScript('g',-1)+';'+post; 
				} else if(col.aggregatorid == 'REDUCE') {
					return pre+'g[\''+colas+'\']=alasql.aggr.'+col.funcid+'('+colexp+',g[\''+colas+'\']);'+post; 
				}
				return '';
			} else return '';
		}).join('');


	//	s += selectFields.map(function(f){
	//			console.log(f);
	//			if(f.constructor.name == 'LiteralValue') return '';
	//			if (f.field instanceof SQLParser.nodes.FunctionValue 
	//				&& (f.field.name.toUpperCase() == 'SUM' || f.field.name.toUpperCase() == 'COUNT')) {
	//				return 'group.'+f.name.value+'=+(+group.'+f.name.value+'||0)+'+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+='+f.field.arguments[0].toJavaScript('rec','')+';'; //f.field.arguments[0].toJavaScript(); 	
	//				return 'group.'+f.name.value+'+=rec.'+f.name.value+';'; //f.field.arguments[0].toJavaScript(); 	
	//			};
	//			return '';
	//		}).join('');

		//s += '	group.amt += rec.emplid;';
		//s += 'group.count++;';
		s += '}';

	});

//		console.log('groupfn',s);
	return new Function('p,params,alasql',s);

}


/*
//
// Select compiler part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// yy.Select.prototype.compileSources = function(query) {
// 	return sources;
// };

function compileSelectStar (query,alias) {
	// console.log(query.aliases[alias]);
//	console.log(query,alias);
	// console.log(query.aliases[alias].tableid);
//	console.log(42,631,alias);
//	console.log(query.aliases);
	var s = '', sp = '', ss=[];
//	if(!alias) {
//		sp += 'for(var k1 in p) var w=p[k1];for(var k2 in w){r[k2]=w[k2]};';
//	} else 	{
		if(query.aliases[alias].tableid) {
			var columns = alasql.databases[query.aliases[alias].databaseid].tables[query.aliases[alias].tableid].columns;
		};
		// Check if this is a Table or other

		if(columns && columns.length > 0) {
			columns.forEach(function(tcol){
				ss.push('\''+tcol.columnid+'\':p[\''+alias+'\'][\''+tcol.columnid+'\']');
				query.selectColumns[escapeq(tcol.columnid)] = true;

	//		console.log('ok',s);

				var coldef = {
					columnid:tcol.columnid, 
					dbtypeid:tcol.dbtypeid, 
					dbsize:tcol.dbsize, 
					dbprecision:tcol.dbprecision,
					dbenum: tcol.dbenum
				};
				query.columns.push(coldef);
				query.xcolumns[coldef.columnid]=coldef;

			});
//console.log(999,columns);			
		} else {
			// if column not exists, then copy all
			sp += 'var w=p["'+alias+'"];for(var k in w){r[k]=w[k]};';
//console.log(777, sp);
			query.dirtyColumns = true;
		}
//	}
//console.log({s:ss.join(','),sp:sp});
	return {s:ss.join(','),sp:sp};
}


yy.Select.prototype.compileSelect1 = function(query) {
	var self = this;
	query.columns = [];
	query.xcolumns = {};
	query.selectColumns = {};
	query.dirtyColumns = false;
	var s = 'var r={';
	var sp = '';
	var ss = [];

	this.columns.forEach(function(col){
//console.log(col);		
		if(col instanceof yy.Column) {
			if(col.columnid == '*') {
				if(col.func) {
					sp += 'r=params[\''+col.param+'\'](p[\''+query.sources[0].alias+'\'],p,params,alasql);';
				} else if(col.tableid) {
					//Copy all
					var ret = compileSelectStar(query, col.tableid);
					if(ret.s)  ss = ss.concat(ret.s);
					sp += ret.sp;

				} else {
//					console.log('aliases', query.aliases);
					for(var alias in query.aliases) {
						var ret = compileSelectStar(query, alias); //query.aliases[alias].tableid);
						if(ret.s) ss = ss.concat(ret.s);
						sp += ret.sp;
					}
					// TODO Remove these lines
					// In case of no information 
					// sp += 'for(var k1 in p){var w=p[k1];'+
					// 			'for(k2 in w) {r[k2]=w[k2]}}'
				}
			} else {
				// If field, otherwise - expression
				var tbid = col.tableid;
//				console.log(query.sources);
				var dbid = col.databaseid || query.sources[0].databaseid || query.database.databaseid;
				if(!tbid) tbid = query.defcols[col.columnid];
				if(!tbid) tbid = query.defaultTableid;
				if(col.columnid != '_') {
					ss.push('\''+escapeq(col.as || col.columnid)+'\':p[\''+(tbid)+'\'][\''+col.columnid+'\']');
				} else {
					ss.push('\''+escapeq(col.as || col.columnid)+'\':p[\''+(tbid)+'\']');					
				}
				query.selectColumns[escapeq(col.as || col.columnid)] = true;

				if(query.aliases[tbid] && query.aliases[tbid].type == 'table') {

					if(!alasql.databases[dbid].tables[query.aliases[tbid].tableid]) {
//						console.log(query.database,tbid,query.aliases[tbid].tableid);
						throw new Error('Table \''+(tbid)+'\' does not exists in database');
					}
					var columns = alasql.databases[dbid].tables[query.aliases[tbid].tableid].columns;					
					var xcolumns = alasql.databases[dbid].tables[query.aliases[tbid].tableid].xcolumns;
//console.log(xcolumns, col,123);
//					console.log(0);
					if(xcolumns && columns.length > 0) {
//						console.log(1);
						var tcol = xcolumns[col.columnid];
						var coldef = {
							columnid:col.as || col.columnid, 
							dbtypeid:tcol.dbtypeid, 
							dbsize:tcol.dbsize, 
							dbpecision:tcol.dbprecision,
							dbenum: tcol.dbenum
						};
//						console.log(2);
						query.columns.push(coldef);
						query.xcolumns[coldef.columnid]=coldef;
					} else {
						query.dirtyColumns = true;
					}
				} else {
					// This is a subquery? 
					// throw new Error('There is now such table \''+col.tableid+'\'');
				};

			}
		} else if(col instanceof yy.AggrValue) {
			if(!self.group) {
//				self.group=[new yy.Column({columnid:'q',as:'q'	})];
				self.group = [''];
			}
			if(!col.as) col.as = escapeq(col.toString());
			if (col.aggregatorid == 'SUM' || col.aggregatorid == 'MAX' ||  col.aggregatorid == 'MIN' ||
				col.aggregatorid == 'FIRST' || col.aggregatorid == 'LAST' ||  
				col.aggregatorid == 'AVG' || col.aggregatorid == 'ARRAY' || col.aggregatorid == 'REDUCE'
				) {
				ss.push("'"+escapeq(col.as)+'\':'+col.expression.toJavaScript("p",query.defaultTableid,query.defcols))	
			} else if (col.aggregatorid == 'COUNT') {
				ss.push("'"+escapeq(col.as)+"':1");
				// Nothing
			}
			query.selectColumns[col.aggregatorid+'('+escapeq(col.expression.toString())+')'] = true;

//			else if (col.aggregatorid == 'MAX') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			} else if (col.aggregatorid == 'MIN') {
//				ss.push((col.as || col.columnid)+':'+col.toJavaScript("p.",query.defaultTableid))
//			}
		} else {
			ss.push('\''+escapeq(col.as || col.columnid || col.toString())+'\':'+col.toJavaScript("p",query.defaultTableid,query.defcols));
//			ss.push('\''+escapeq(col.toString())+'\':'+col.toJavaScript("p",query.defaultTableid));
			//if(col instanceof yy.Expression) {
			query.selectColumns[escapeq(col.as || col.columnid || col.toString())] = true;
		}
	});
	s += ss.join(',')+'};'+sp;
	return s;
//console.log(42,753,query.xcolumns, query.selectColumns);
}
yy.Select.prototype.compileSelect2 = function(query) {

	var s = query.selectfns ;
	console.log(s);
	return new Function('p,params,alasql',s+'return r');
};


yy.Select.prototype.compileSelectGroup0 = function(query) {

	this.columns.forEach(function(col){
		if(col.findAggregator) col.findAggregator(query);
	});

	if(this.having) {
		if(this.having.findAggregator) this.having.findAggregator(query);
	}

};

yy.Select.prototype.compileSelectGroup1 = function(query) {
	var self = this;
	var s = 'var r = {};';

	self.columns.forEach(function(col,idx){
//		console.log(col);
		if(col instanceof yy.Column && col.columnid == '*') {
			s += 'for(var k in g){r[k]=g[k]};';
		} else {
			var colas = col.as;
			if(typeof colas == 'undefined') {
				if(col instanceof yy.Column) {
					colas = col.columnid;
				} else {
					colas = col.toString();
					for(var i=0;i<idx;i++) {
						if(colas == self.columns[i].as) {
							colas = self.columns[i].as+':'+idx;
							break;
						}
					}
					col.as = colas;
				}
			}
//			if(col.as) {
			s += 'r[\''+colas+'\']=';
			// } else {
			// 	s += 'r[\''+escapeq()+'\']=';
			// };
			// s += ';';
//			console.log(col);//,col.toJavaScript('g',''));
			if(col instanceof yy.Column) {
				s += 'g[\''+col.columnid+'\'];';
			} else {
				s += col.toJavaScript('g','')+';';				
			}
//			s += col.toJavaScript('g','')+';';
//console.log(colas,query.removeKeys);
			for(var i=0;i<query.removeKeys.length;i++) {
				// THis part should be intellectual
				if(query.removeKeys[i] == colas) {
					query.removeKeys.splice(i,1);
					break;
				}
			}
		};
	});
	// return new Function('g,params,alasql',s+'return r');
	return s;
}

yy.Select.prototype.compileSelectGroup2 = function(query) {
	var s = query.selectgfns;
//	console.log('selectg:',s);
	return new Function('g,params,alasql',s+'return r');
}


yy.Select.prototype.compileHaving = function(query) {
	if(this.having) {
		s = this.having.toJavaScript('g',-1);
		query.havingfns = s;
//		console.log(s);
		return new Function('g,params,alasql','return '+s);
	} else return function(){return true};
};


yy.Select.prototype.compileOrder = function (query) {
	if(this.order) {
//			console.log(990, this.order);
		if(this.order && this.order.length == 1 && this.order[0].expression 
			 && typeof this.order[0].expression == "function") {
//			console.log(991, this.order[0]);
			var func = this.order[0].expression;
//			console.log(994, func);
			return function(a,b){
				var ra = func(a),rb = func(b);
				if(ra>rb) return 1;
				if(ra==rb) return 0;
				return -1;
			}
		};

		var s = '';
		var sk = '';
		this.order.forEach(function(ord,idx){
			// console.log(ord instanceof yy.Expression);
			// console.log(ord.toJavaScript('a',''));
			// console.log(ord.expression instanceof yy.Column);
			
			// Date conversion
			var dg = ''; 
			if(ord.expression instanceof yy.Column) {
				var columnid = ord.expression.columnid; 
				if(query.xcolumns[columnid]) {
					var dbtypeid = query.xcolumns[columnid].dbtypeid;
					if( dbtypeid == 'DATE' || dbtypeid == 'DATETIME') dg = '.valueOf()';
					// TODO Add other types mapping
				} else {
					if(alasql.options.valueof) dg = '.valueOf()'; // TODO Check
				}
				// COLLATE NOCASE
				if(ord.nocase) dg += '.toUpperCase()';

				s += 'if(a[\''+columnid+"']"+dg+(ord.direction == 'ASC'?'>':'<')+'b[\''+columnid+"']"+dg+')return 1;';
				s += 'if(a[\''+columnid+"']"+dg+'==b[\''+columnid+"']"+dg+'){';

			} else {
				dg = '.valueOf()';
				// COLLATE NOCASE
				if(ord.nocase) dg += '.toUpperCase()';
				s += 'if('+ord.toJavaScript('a','')+dg+(ord.direction == 'ASC'?'>':'<')+ord.toJavaScript('b','')+dg+')return 1;';
				s += 'if('+ord.toJavaScript('a','')+dg+'=='+ord.toJavaScript('b','')+dg+'){';
			}			

//			if(columnid == '_') {
//				s += 'if(a'+dg+(ord.direction == 'ASC'?'>':'<')+'b'+dg+')return 1;';
//				s += 'if(a'+dg+'==b'+dg+'){';
//			} else {
			// TODO Add date comparision
				// s += 'if(a[\''+columnid+"']"+dg+(ord.direction == 'ASC'?'>':'<')+'b[\''+columnid+"']"+dg+')return 1;';
				// s += 'if(a[\''+columnid+"']"+dg+'==b[\''+columnid+"']"+dg+'){';
//			}
			sk += '}';
		});
		s += 'return 0;';
		s += sk+'return -1';
		query.orderfns = s;
//console.log(s);
		return new Function('a,b',s);
	};
};



/*
//
// ROLLUP(), CUBE(), GROUPING SETS() for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

/** 
 Calculate ROLLUP() combination
 */

var rollup = function (a,query) {
	var rr = [];
	var mask = 0;
	var glen = a.length;
	for(var g=0;g<glen+1;g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(mask&(1<<i)) ss.push(a[i]);
		}
		rr.push(ss);
		mask = (mask<<1)+1; 
	};
	return rr;
};

/**
 Calculate CUBE()
 */
var cube = function (a,query) {
	var rr = [];
	var glen = a.length;
	for(var g=0;g<(1<<glen);g++) {
		var ss = [];
		for(var i=0;i<glen;i++) {
			if(g&(1<<i)) //ss.push(a[i]);
				//ss = cartes(ss,decartes(a[i]));
				ss = ss.concat(decartes(a[i],query));
				//
		}
		rr.push(ss);
	}
	return rr;
}

/**
 GROUPING SETS()
 */
var groupingsets = function(a,query) {
	return a.reduce(function(acc,d){
		acc = acc.concat(decartes(d,query));
		return acc;
	}, []);
}

/**
 Cartesian production
 */
var cartes = function(a1,a2){
	var rrr =[];
	for(var i1=0;i1<a1.length;i1++) {
		for(var i2=0;i2<a2.length;i2++) {
			rrr.push(a1[i1].concat(a2[i2]));
		}
	};
	return rrr;
}

/**
 Prepare groups function
 */
function decartes(gv,query) {
//	console.log(gv);
	if(gv instanceof Array) {
		var res = [[]];
		for(var t=0; t<gv.length; t++) {
			if(gv[t] instanceof yy.Column) {
		 		res = res.map(function(r){return r.concat(gv[t].columnid+'\t'+gv[t].toJavaScript('p',query.sources[0].alias,query.defcols))}); 	
//		 		res = res.map(function(r){return r.concat(gv[t].columnid)}); 	
			} else if(gv[t] instanceof yy.FuncValue) {
		 		res = res.map(function(r){return r.concat(gv[t].toString())}); 	
		 		// to be defined
			} else if(gv[t] instanceof yy.GroupExpression) {
				if(gv[t].type == 'ROLLUP') res = cartes(res,rollup(gv[t].group,query));
				else if(gv[t].type == 'CUBE') res = cartes(res,cube(gv[t].group,query));
				else if(gv[t].type == 'GROUPING SETS') res = cartes(res,groupingsets(gv[t].group,query));
				else throw new Error('Unknown grouping function');
			} else if(gv[t] === '') {
				res = [['1\t1']];
			} else {
//				if(gv[t])
//				console.log('>'+gv[t]+'<',gv[t]=='',typeof gv[t]);
//				console.log(gv[t].toString());

		 		res = res.map(function(r){
		 			return r.concat(gv[t].toString()
		 				+'\t'
		 				+gv[t].toJavaScript('p',query.sources[0].alias,query.defcols)) 
		 		}); 	
//				res = res.concat(gv[t]);
			};

			// switch(gv[t].t) {
			// 	case 'plain': 
			// 		res = res.map(function(r){return r.concat(gv[t].p)}); 

			// 	break; 
			// 	case 'rollup': res = cartes(res,rollup(gv[t].p)); break; 
			// 	case 'cube': res = cartes(res,cube(gv[t].p)); break; 
			// 	case 'groupingsets': res = cartes(res,groupingsets(gv[t].p)); break; 
			// 	default: res = res.concat(gv[t]);
			// }
		};
		return res;
	} else if(gv instanceof yy.FuncValue) {
//		console.log(gv);
		return [gv.toString()];
	} else if(gv instanceof yy.Column) {
			return [gv.columnid+'\t'+gv.toJavaScript('p',query.sources[0].alias,query.defcols)]; // Is this ever happened?
		// } else if(gv instanceof yy.Expression) {
		// 	return [gv.columnid]; // Is this ever happened?
	} else {
		return [gv.toString()+'\t'+gv.toJavaScript('p',query.sources[0].alias,query.defcols)];
//			throw new Error('Single argument in the group without array');			
	};


		// switch(gv.t) {
		// 	case 'plain': return gv.p; break;
		// 	case 'rollup': return rollup(gv.p); break; 
		// 	case 'cube': return cube(gv.p); break; 
		// 	case 'groupingsets':  return groupingsets(gv.p); break; 
		// 	default: return [gv];//return decartes(gv.p);
		// }
		// return gv;
};




/*
//
// Select run-time part for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Select.prototype.compileDefCols = function(query, databaseid) {
//	console.log('defcols');
	var defcols = {};
	if(this.from) {
		this.from.forEach(function(fr){
			if(fr instanceof yy.Table) {
				var alias = fr.as || fr.tableid;
//				console.log(alasql.databases[fr.databaseid || databaseid]);
//				console.log(alasql.databases[fr.databaseid || databaseid].tables, fr.tableid);
//console.log(alasql.databases[fr.databaseid || databaseid].tables, fr.tableid);
//console.log(alasql.databases);
				var table = alasql.databases[fr.databaseid || databaseid].tables[fr.tableid];
//console.log(table);
				if(table.columns) {
					table.columns.forEach(function(col){
						if(defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if(fr instanceof yy.Select) {

			} else if(fr instanceof yy.ParamValue) {

			} else if(fr instanceof yy.FuncValue) {

			} else if(fr instanceof yy.FromData) {

			} else {
				throw new Error('Unknown type of FROM clause');
			};
		});
	};

	if(this.joins) {
		this.joins.forEach(function(jn){
//			console.log(jn);
			if(jn.table) {
				var alias = jn.table.tableid;
				if(jn.as) alias = jn.as;
				var alias = jn.as || jn.table.tableid;
				var table = alasql.databases[jn.table.databaseid || databaseid].tables[jn.table.tableid];
//				console.log(jn.table.tableid, jn.table.databaseid);
				if(table.columns) {
					table.columns.forEach(function(col){
						if(defcols[col.columnid]) {
							defcols[col.columnid] = '-'; // Ambigous
						} else {
							defcols[col.columnid] = alias;
						}
					});
				}
			} else if(jn.select) {

			} else if(jn.param) {

			} else if(jn.func) {

			} else {
				throw new Error('Unknown type of FROM clause');
			};
		});
	};
	// for(var k in defcols) {
	// 	if(defcols[k] == '-') defcols[k] = undefined;
	// }
//	console.log(defcols);
	return defcols;
}

/*
//
// UNION for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// SELECT UNION statement

yy.Union = function (params) { return yy.extend(this, params); }
yy.Union.prototype.toString = function () {
	return K('UNION');
};

yy.Union.prototype.compile = function (tableid) {
	return null;
};

/*
//
// Expressions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ExpressionStatement = function(params) { return yy.extend(this, params); };
yy.ExpressionStatement.prototype.toString = function() {
	return this.expression.toString();
};

yy.ExpressionStatement.prototype.execute = function (databaseid, params, cb) {
	if(this.expression) {
//		console.log(this.expression);
//		console.log(this.expression.toJavaScript('','', null));
		var expr =  new Function("params,alasql",'return '+this.expression.toJavaScript('','', null));
		var res = expr(params,alasql);
		if(cb) res = cb(res);
		return res;
	}
}

yy.Expression = function(params) { return yy.extend(this, params); };
yy.Expression.prototype.toString = function() {
	var s = this.expression.toString();
	if(this.order) s += ' '+this.order.toString();
	if(this.nocase) s += ' '+K('COLLATE')+' '+K('NOCASE');
	return s;
};
yy.Expression.prototype.findAggregator = function (query){
	if(this.expression.findAggregator) this.expression.findAggregator(query);
};

yy.Expression.prototype.toJavaScript = function(context, tableid, defcols) {
//	console.log('Expression',this);
	if(this.expression.reduced) return 'true';
	return this.expression.toJavaScript(context, tableid, defcols);
};
yy.Expression.prototype.compile = function(context, tableid, defcols){
//	console.log('Expression',this);
	if(this.reduced) return returnTrue();
	return new Function('p','return '+this.toJavaScript(context, tableid, defcols));
};




yy.Literal = function (params) { return yy.extend(this, params); }
yy.Literal.prototype.toString = function() {
	var s = this.value;
	if(this.value1) s = this.value1+'.'+s; 
//	else s = tableid+'.'+s;
	return L(s);
}


yy.Join = function (params) { return yy.extend(this, params); }
yy.Join.prototype.toString = function() {
	var s = NL()+ID();
	if(this.joinmode) s += K(this.joinmode)+' ';
	s += K('JOIN')+this.table.toString();
	return s;
}

//yy.Join.prototype.toJavaScript = function(context, tableid) {
//	return 'JOIN'+this.table.toString();
//}


yy.Table = function (params) { return yy.extend(this, params); }
yy.Table.prototype.toString = function() {
	var s = this.tableid;
//	if(this.joinmode)
	if(this.databaseid) s = this.databaseid+'.'+s;
	return L(s);
};


yy.View = function (params) { return yy.extend(this, params); }
yy.View.prototype.toString = function() {
	var s = this.viewid;
//	if(this.joinmode)
	if(this.databaseid) s = this.databaseid+'.'+s;
	return L(s);
};


yy.Op = function (params) { return yy.extend(this, params); }
yy.Op.prototype.toString = function() {
	if(this.op == 'IN' || this.op == 'NOT IN') {
		return this.left.toString()+" "+P(this.op)+" ("+this.right.toString()+")";
	}
	if(this.allsome) {
		return this.left.toString()+" "+P(this.op)+" "+this.allsome+' ('+this.right.toString()+')';
	}
	return this.left.toString()+" "+P(this.op)+" "+(this.allsome?this.allsome+' ':'')+this.right.toString();
};

yy.Op.prototype.findAggregator = function (query){
//	console.log(this.toString());
	if(this.left && this.left.findAggregator) this.left.findAggregator(query);
	// Do not go in > ALL
	if(this.right && this.right.findAggregator && (!this.allsome)) {
		this.right.findAggregator(query);
	}
};

yy.Op.prototype.toType = function(tableid) {
	if(['-','*','/','%','^'].indexOf(this.op) >-1) return 'number';
	if(this.op == '+') {
		if(this.left.toType(tableid) == 'string' || this.right.toType(tableid) == 'string') return 'string';
		if(this.left.toType(tableid) == 'number' || this.right.toType(tableid) == 'number') return 'number';
	};
	if(['AND','OR','NOT','=','==','===', '!=','!==','!===','>','>=','<','<=', 'IN', 'NOT IN', 'LIKE'].indexOf(this.op) >-1 ) return 'boolean';
	if(this.op == 'BETWEEN' || this.op == 'NOT BETWEEN' || this.op == 'IS NULL' || this.op == 'IS NOT NULL') return 'boolean';
	if(this.allsome) return 'boolean';
	if(!this.op) return this.left.toType();

	return 'unknown';
};

yy.Op.prototype.toJavaScript = function(context,tableid,defcols) {
//	console.log(this);
	var op = this.op;
	if(this.op == '=') op = '===';
	else if(this.op == '<>') op = '!=';
	else if(this.op == 'OR') op = '||';

	if(this.op == '->') {
//		console.log(this.right, typeof this.right);
		if(typeof this.right == "string") {
			return this.left.toJavaScript(context,tableid, defcols)+'["'+this.right+'"]';
		} else if(typeof this.right == "number") {
			return this.left.toJavaScript(context,tableid, defcols)+'['+this.right+']';
		} else if(this.right instanceof yy.FuncValue) {
			ss = [];
			if(!this.right.args || this.right.args.length == 0) {
			} else {
				var ss = this.right.args.map(function(arg){
					return arg.toJavaScript(context,tableid, defcols);
				});
			}
			return this.left.toJavaScript(context,tableid, defcols)+'[\''+this.right.funcid+'\']('+
				ss.join(',')+')'; 
		} else {
			return this.left.toJavaScript(context,tableid, defcols)+'['+this.right.toJavaScript(context,tableid, defcols)+']';
		}
	}

	if(this.op == 'IS') {
		return '((typeof '+this.left.toJavaScript(context,tableid, defcols)+"=='undefined') == "
			+ '(typeof '+this.right.toJavaScript(context,tableid, defcols)+"=='undefined'))";
	}


	if(this.op == '==') {
		return 'alasql.utils.deepEqual('+this.left.toJavaScript(context,tableid, defcols)+","+this.right.toJavaScript(context,tableid, defcols)+')';
	}
	if(this.op == '===') {
		return "(("+this.left.toJavaScript(context,tableid, defcols)+").valueOf()===("+this.right.toJavaScript(context,tableid, defcols)+'.valueOf()))';
	}

	if(this.op == '!===') {
		return "!(("+this.left.toJavaScript(context,tableid, defcols)+").valueOf()===("+this.right.toJavaScript(context,tableid, defcols)+'.valueOf()))';
	}


	if(this.op == '!==') {
		return '(!alasql.utils.deepEqual('+this.left.toJavaScript(context,tableid, defcols)+","+this.right.toJavaScript(context,tableid, defcols)+'))';
	}

	if(this.op == 'LIKE') {
		var s = "("+this.left.toJavaScript(context,tableid, defcols)+"+'')"+
		".match(new RegExp('^'+("+this.right.toJavaScript(context,tableid, defcols)+").replace(/\\\%/g,'.*')+'$','g'))"
//		console.log(s);
		return s;
	};

	if(this.op == 'BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '(('+this.right.left.toJavaScript(context,tableid, defcols)+'<='+this.left.toJavaScript(context,tableid, defcols)+')&&'+
			'('+this.left.toJavaScript(context,tableid, defcols)+'<='+this.right.right.toJavaScript(context,tableid, defcols)+'))';		
		} else {
			throw new Error('Wrong BETWEEM operator without AND part');
		}
	};

	if(this.op == 'NOT BETWEEN') {
		if(this.right instanceof yy.Op && this.right.op == 'AND') {
			return '!(('+this.right.left.toJavaScript(context,tableid, defcols)+'<='+this.left.toJavaScript(context,tableid, defcols)+')&&'+
			'('+this.left.toJavaScript(context,tableid, defcols)+'<='+this.right.right.toJavaScript(context,tableid, defcols)+'))';		
		} else {
			throw new Error('Wrong NOT BETWEEM operator without AND part');
		}
	};

	if(this.op == 'IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.query.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')>-1)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')>-1)';
//console.log(s);
			return s;
		} else {
			var s = '('+this.right.toJavaScript(context,tableid, defcols)+'.indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')>-1)';
			return s;
//		} else {
//			throw new Error('Wrong IN operator without SELECT part');
		}
	};


	if(this.op == 'NOT IN') {
		if(this.right instanceof yy.Select ) {
			var s = '(this.query.queriesdata['+this.queriesidx+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')<0)';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '(['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].indexOf(';
			s += this.left.toJavaScript(context,tableid, defcols)+')<0)';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}
	};

	if(this.allsome == 'ALL') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.query.queriesdata['+this.queriesidx+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].every(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

	if(this.allsome == 'SOME' || this.allsome == 'ANY') {
		if(this.right instanceof yy.Select ) {
			var s = 'this.query.queriesdata['+this.queriesidx+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else if(this.right instanceof Array ) {
			var s = '['+this.right.map(function(a){return a.toJavaScript(context,tableid, defcols)}).join(',')+'].some(function(b){return (';
			s += this.left.toJavaScript(context,tableid, defcols)+')'+op+'b})';
			return s;
		} else {
			throw new Error('Wrong NOT IN operator without SELECT part');
		}		
	};

// Special case for AND optimization (if reduced)
	if(this.op == 'AND') {
		if(this.left.reduced) {
			if(this.right.reduced) {
				return 'true';
			} else {
				return this.right.toJavaScript(context,tableid, defcols);
			}
		} else if(this.right.reduced) {
			return this.left.toJavaScript(context,tableid, defcols);
		}			

		// Otherwise process as regular operation (see below)
		op = '&&';

	}

	if(this.op == '^') {
		return 'Math.pow('+this.left.toJavaScript(context,tableid, defcols)
			+','+this.right.toJavaScript(context,tableid, defcols)+')';
	};


	// Change names
//	console.log(this);
	return '('+this.left.toJavaScript(context,tableid, defcols)+op+this.right.toJavaScript(context,tableid, defcols)+')';
};




yy.NumValue = function (params) { return yy.extend(this, params); }
yy.NumValue.prototype.toString = function() {
	return N(this.value.toString());
};

yy.NumValue.prototype.toType = function() {
	return 'number';
};

yy.NumValue.prototype.toJavaScript = function() {
	return ""+this.value;
}


yy.StringValue = function (params) { return yy.extend(this, params); }
yy.StringValue.prototype.toString = function() {
	return "'"+S(this.value.toString())+"'";
}

yy.StringValue.prototype.toType = function() {
	return 'string';
}

yy.StringValue.prototype.toJavaScript = function() {
//	console.log("'"+doubleqq(this.value)+"'");
//	return "'"+doubleqq(this.value)+"'";
	return "'"+escapeq(this.value)+"'";

}


yy.LogicValue = function (params) { return yy.extend(this, params); }
yy.LogicValue.prototype.toString = function() {
	return this.value?'TRUE':'FALSE';
}

yy.LogicValue.prototype.toType = function() {
	return 'boolean';
}

yy.LogicValue.prototype.toJavaScript = function() {
	return this.value?'true':'false';
}

yy.NullValue = function (params) { return yy.extend(this, params); }
yy.NullValue.prototype.toString = function() {
	return 'NULL';
}
yy.NullValue.prototype.toJavaScript = function() {
	return 'undefined';
}

yy.ParamValue = function (params) { return yy.extend(this, params); }
yy.ParamValue.prototype.toString = function() {
	return '$'+this.param;
}
yy.ParamValue.prototype.toJavaScript = function() {
	if(typeof this.param == "string") return "params[\'"+this.param+"\']";
	else return "params["+this.param+"]";
}



yy.UniOp = function (params) { return yy.extend(this, params); }
yy.UniOp.prototype.toString = function() {
	if(this.op == '-') return this.op+this.right.toString();
	if(this.op == 'NOT') return this.op+'('+this.right.toString()+')';
	else if(this.op == null) return '('+this.right.toString()+')';
};

yy.UniOp.prototype.findAggregator = function (query){
	if(this.right.findAggregator) this.right.findAggregator(query);
};

yy.UniOp.prototype.toType = function(tableid) {
	if(this.op == '-') return 'number';
	if(this.op == 'NOT') return 'boolean';
};

yy.UniOp.prototype.toJavaScript = function(context, tableid, defcols) {
	if(this.op == '-') return "-"+this.right.toJavaScript(context, tableid, defcols);
	if(this.op == 'NOT') return '!('+this.right.toJavaScript(context, tableid, defcols)+')';
	else if(this.op == null) return '('+this.right.toJavaScript(context, tableid, defcols)+')';
};



// yy.Star = function (params) { return yy.extend(this, params); }
// yy.Star.prototype.toString = function() {
// 	var s = this.fieldid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// 		if(this.databaseid) {
// 			s = this.databaseid+'.'+s;
// 		}
// 	}
// 	if(this.alias) s += ' AS '+this.alias;
// 	return s;
// }

yy.Column = function(params) { return yy.extend(this, params); }
yy.Column.prototype.toString = function() {
	var s;
	if(this.columnid == +this.columnid) {
		s = '['+this.columnid+']';
	} else {
		s = this.columnid;
	}
	if(this.tableid) {
		if(+this.columnid == this.columnid) {
			s = this.tableid+s;
		} else {
			s = this.tableid+'.'+s;
		}
		if(this.databaseid) {
			s = this.databaseid+'.'+s;
		}
	}
//	if(this.alias) s += ' AS '+this.alias;
	return s;
};

yy.Column.prototype.toJavaScript = function(context, tableid, defcols) {
//	var s = this.value;
// 	var s = this.columnid;
// 	if(this.tableid) {
// 		s = this.tableid+'.'+s;
// //		if(this.databaseid) {
// //			s = this.databaseid+'.'+s;
// //		}
// 	} else {
// 		s = tableid+'.'+s;
// 	}
//console.log('yy.Column',this, tableid);
//	console.log(392,this.columnid);
	var s = '';
	if(!this.tableid && tableid == '' && !defcols) {
		if(this.columnid != '_') {
			s = context+'[\''+this.columnid+'\']';
		} else {
			s = context;
		}
	} else {
		if(this.tableid) {
			if(this.columnid != '_') {
				s = context+'[\''+(this.tableid) + '\'][\''+this.columnid+'\']';			
			} else {
				s = context+'[\''+(this.tableid) + '\']';
			}
		} else if(defcols) {
			var tbid = defcols[this.columnid];
			if(tbid == '-') {
				throw new Error('Cannot resolve column "'+this.columnid+'" because it exists in two source tables');
			} else if(tbid) {
				if(this.columnid != '_') {
					s = context+'[\''+(tbid) + '\'][\''+this.columnid+'\']';
				} else {
					s = context+'[\''+(tbid) + '\']';
				};
			} else {
				if(this.columnid != '_') {
					s = context+'[\''+(this.tableid || tableid) + '\'][\''+this.columnid+'\']';
				} else {
					s = context+'[\''+(this.tableid || tableid) + '\']';
				};
			}
		} else if(tableid == -1) {
//			if(this.columnid != '') {
				s = context+'[\''+this.columnid+'\']';
//			} else {
//				s = context;				
//			}
		} else {
			if(this.columnid != '_') {
				s = context+'[\''+(this.tableid || tableid) + '\'][\''+this.columnid+'\']';
			} else {
				s = context+'[\''+(this.tableid || tableid) + '\']';
			}
		}
	}
//	console.log(context,s);
//	console.trace(new Error());
	return s;
}




yy.AggrValue = function(params){ return yy.extend(this, params); }
yy.AggrValue.prototype.toString = function() {
	var s = '';
	if(this.aggregatorid == 'REDUCE') s += L(this.funcid)+'(';
	else s += this.aggregatorid+'(';
	if(this.distinct) s+= K('DISTINCT')+' ';
	if(this.expression) s += this.expression.toString();
	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
	return s;
};
yy.AggrValue.prototype.findAggregator = function (query){
//	console.log('aggregator found',this.toString());

	var colas = this.toString();
/*	var found = false;
	for(var i=0;i<query.columns.length;i++) {
		// THis part should be intellectual
		if(query.columns[i].as == colas) {
			found = true;
			break;
		}
	}
*/	
//	if(!query.selectColumns[colas]) {
//	}
	query.selectGroup.push(this);
	var found = false;
	for(var i=0;i<query.removeKeys.length;i++){
		if(query.removeKeys[i]==colas) {
			found = true;
			break;
		}
	}
	if(!found) query.removeKeys.push(colas);
////	this.reduced = true;
	return;
};

yy.AggrValue.prototype.toType = function() {
	if(['SUM','COUNT','AVG','MIN', 'MAX','AGGR','VAR','STDDEV'].indexOf(this.aggregatorid)>-1) return 'number';
	if(['ARRAY'].indexOf(this.aggregatorid)>-1) return 'array';
	if(['FIRST','LAST' ].indexOf(this.aggregatorid)>-1) return this.expression.toType();
}
yy.AggrValue.prototype.toJavaScript = function(context, tableid, defcols) {
//	var s = 'alasql.functions.'+this.funcid+'(';
//	if(this.expression) s += this.expression.toJavaScript(context, tableid);
//	s += ')';
//	if(this.alias) s += ' AS '+this.alias;
//	return s;
//	var s = ''; 
//if(this.as) console.log(499,this.as);
	var colas = this.as;
	if(typeof colas == 'undefined') colas = this.toString();
	return 'g[\''+colas+'\']';
}


yy.OrderExpression = function(params){ return yy.extend(this, params); }
yy.OrderExpression.prototype.toString = function() {
	var s = this.expression.toString();
	if(this.order) s += ' '+this.order.toString();
	if(this.nocase) s += ' '+K('COLLATE')+' '+K('NOCASE');
	return s;
}

yy.GroupExpression = function(params){ return yy.extend(this, params); }
yy.GroupExpression.prototype.toString = function() {
	return this.type+'('+this.group.toString()+')';
}


yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}


// Alasql Linq library

yy.FromData = function(params) { return yy.extend(this, params); };
yy.FromData.prototype.toString = function() {
	if(this.data) return K('DATA')+'('+((Math.random()*10e15)|0)+')';
	else return '?';
};
yy.FromData.prototype.toJavaScript = function(){
//	console.log('yy.FromData.prototype.toJavaScript');
};

yy.Select.prototype.exec = function(params,cb) {
	
	if(this.preparams) params = this.preparams.concat(params);
//	console.log(15,this.preparams);

	var databaseid = alasql.useid;
	db = alasql.databases[databaseid];
	var sql = this.toString();
	var hh = hash(sql);
//	console.log(sql);

	var statement = this.compile(databaseid);
	if(!statement) return;
	statement.sql = sql;
	statement.dbversion = db.dbversion;
	
	// Secure sqlCache size
	if (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {
		db.resetSqlCache();
	}
	db.sqlCacheSize++;
	db.sqlCache[hh] = statement;
	var res = alasql.res = statement(params, cb);
	return res;
};

yy.Select.prototype.Select = function(){
	var self = this;
	var agrs = [];
	if(arguments.length > 1) {
		args = Array.prototype.slice.call(arguments);;
	} else if(arguments.length == 1) {
		if(arguments[0] instanceof Array) {
			args = arguments[0];
		} else {
			args = [arguments[0]];
		}
	} else {
		throw new Error('Wrong number of arguments of Select() function');
	}

	self.columns = [];

	args.forEach(function(arg){
		if(typeof arg == "string") {
			self.columns.push(new yy.Column({columnid: arg}));
		} else if(typeof arg == "function") {
			var pari = 0;
			if(self.preparams) {
				pari = self.preparams.length;
			} else {
				self.preparams = [];
			}
			self.preparams.push(arg);
			self.columns.push(new yy.Column({columnid: "*", func:arg, param:pari}));
		} else {
			// Unknown type
		}
	});

//	console.log(self instanceof yy.Select);
	return self;
};

yy.Select.prototype.From = function(tableid){
	var self = this;
	if(!self.from) self.from = [];
	if(tableid instanceof Array) {
		var pari = 0;
		if(self.preparams) {
			pari = self.preparams.length;
		} else {
			self.preparams = [];
		}
		self.preparams.push(tableid); 
		self.from.push(new yy.ParamValue({param:pari}));
	} else if(typeof tableid =="string") {
		self.from.push(new yy.Table({tableid:tableid}));
	} else {
		throw new Error('Unknown arguments in From() function')
	}
	return self;
}

yy.Select.prototype.OrderBy = function(){
	var self = this;
	var agrs = [];

	self.order = [];

	if(arguments.length == 0) {
//		self.order.push(new yy.OrderExpression({expression: new yy.Column({columnid:"_"}), direction:'ASC'}));		
		args = ["_"];
	} else if(arguments.length > 1) {
		args = Array.prototype.slice.call(arguments);;
	} else if(arguments.length == 1) {
		if(arguments[0] instanceof Array) {
			args = arguments[0];
		} else {
			args = [arguments[0]];
		}
	} else {
		throw new Error('Wrong number of arguments of Select() function');
	}

	if(args.length > 0) {
		args.forEach(function(arg){
			var expr = new yy.Column({columnid:arg});
			if(typeof arg == 'function'){
				expr = arg;
			}
			self.order.push(new yy.OrderExpression({expression: expr, direction:'ASC'}));
		});
	}
	return self;
}

yy.Select.prototype.Top = function(topnum){
	var self = this;
	self.top = new yy.NumValue({value:topnum});
	return self;
};

yy.Select.prototype.GroupBy = function(){
	var self = this;
	var agrs = [];

	if(arguments.length > 1) {
		args = Array.prototype.slice.call(arguments);;
	} else if(arguments.length == 1) {
		if(arguments[0] instanceof Array) {
			args = arguments[0];
		} else {
			args = [arguments[0]];
		}
	} else {
		throw new Error('Wrong number of arguments of Select() function');
	}

	self.group = [];

	args.forEach(function(arg){
		var expr = new yy.Column({columnid:arg});
		self.group.push(expr);
	});

	return self;
};

yy.Select.prototype.Where = function(expr){
	var self = this;
	if(typeof expr == 'function' ) {
		self.where = expr;
	}
	return self;
};



/*
//
// Functions for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.FuncValue = function(params){ return yy.extend(this, params); }
yy.FuncValue.prototype.toString = function() {
	var s = '';
    
    if(alasql.fn[this.funcid]) s += this.funcid;
    else if(alasql.aggr[this.funcid]) s += this.funcid;
    else if(alasql.stdlib[this.funcid.toUpperCase()] || alasql.stdfn[this.funcid.toUpperCase()]) s += this.funcid.toUpperCase();
    
    s += '(';
	if(this.args && this.args.length > 0) {
		s += this.args.map(function(arg){
			return arg.toString();
		}).join(',');
	};
	s += ')';
	if(this.as) s += ' AS '+this.as.toString();
//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

yy.FuncValue.prototype.findAggregator = function(query) {
	if(this.args && this.args.length > 0) {
		this.args.forEach(function(arg){ 
			if(arg.findAggregator) arg.findAggregator(query); 
		});
	}
}
yy.FuncValue.prototype.toJavaScript = function(context, tableid, defcols) {
	var s = '';
    var funcid = this.funcid;
	// IF this is standard compile functions
	if(alasql.fn[funcid]) {
	// This is user-defined run-time function
	// TODO arguments!!!
//		var s = '';
		if(this.newid) s+= 'new ';
		s += 'alasql.fn.'+this.funcid+'(';
//		if(this.args) s += this.args.toJavaScript(context, tableid);
		if(this.args && this.args.length > 0) {
			s += this.args.map(function(arg){
				return arg.toJavaScript(context, tableid, defcols);
			}).join(',');
		};
		s += ')';
	} else if(alasql.stdlib[funcid.toUpperCase()]) {
		if(this.args && this.args.length > 0) {
			s += alasql.stdlib[funcid.toUpperCase()].apply(this, this.args.map(function(arg) {return arg.toJavaScript(context, tableid)}));
		} else {
			s += alasql.stdlib[funcid.toUpperCase()]();
		}
	} else if(alasql.stdfn[funcid.toUpperCase()]) {
		if(this.newid) s+= 'new ';
		s += 'alasql.stdfn.'+this.funcid.toUpperCase()+'(';
//		if(this.args) s += this.args.toJavaScript(context, tableid);
		if(this.args && this.args.length > 0) {
			s += this.args.map(function(arg){
				return arg.toJavaScript(context, tableid, defcols);
			}).join(',');
		};
		s += ')';		
	} else {
		// Aggregator
	}
//console.log('userfn:',s,this);

//	if(this.alias) s += ' AS '+this.alias;
	return s;
}

// // Functions compiler
// nodes.FunctionValue.prototype.toJavaScript = function (context, tableid) {
// 	var s = '';
// 	s += fns[this.name.toUpperCase()].apply(null,this.arguments.map(function(arg){
// 		if(arg) return arg.toJavaScript(context, tableid);
// 		else return '';
// 	}));
// 	return s;
// };

// 
// SQL FUNCTIONS COMPILERS
// Based on SQLite functions

// IMPORTANT: These are compiled functions

//alasql.fn = {}; // Keep for compatibility
//alasql.userlib = alasql.fn; 

var stdlib = alasql.stdlib = {}
var stdfn = alasql.stdfn = {}

stdlib.ABS = function(a) {return 'Math.abs('+a+')'};
stdlib.CLONEDEEP = function(a) {return 'alasql.utils.cloneDeep('+a+')'};
stdlib.IIF = function(a,b,c) {
	if(arguments.length == 3) {
		return  '(('+a+')?('+b+'):('+c+'))';
	} else {
		throw new Error('Number of arguments of IFF is not equals to 3');
	};
};
stdlib.IFNULL = function(a,b) {return '('+a+'||'+b+')'};
stdlib.INSTR = function(s,p) {return '(('+s+').indexOf('+p+')+1)'};

stdlib.LEN = stdlib.LENGTH = function(s) {return '('+s+'+"").length';};
//stdlib.LENGTH = function(s) {return '('+s+').length'};

stdlib.LOWER = stdlib.LCASE = function(s) {return '('+s+').toLowerCase()';}
//stdlib.LCASE = function(s) {return '('+s+').toLowerCase()';}


// LTRIM
stdlib.MAX = function(){return 'Math.max('+arguments.join(',')+')'};
stdlib.MIN = function(){return 'Math.min('+arguments.join(',')+')'};
stdlib.MID = function(a,b,c){
	if(arguments.length == 2) return '('+a+').substr('+b+'-1)';
	else if(arguments.length == 3) return '('+a+').substr('+b+'-1,'+c+')';
};

stdlib.NULLIF = function(a,b){return '('+a+'=='+b+'?null:'+a+')'};

stdlib.RANDOM = function(r) {
	if(arguments.length == 0) {
		return 'Math.random()';
	} else {
		return '(Math.random()*('+r+')|0)';
	}
}
stdlib.ROUND = function(s,d) {
	if(arguments.length == 2) {
		return 'Math.round('+s+'*Math.pow(10,'+d+'))/Math.pow(10,'+d+')';
	} else {
		return 'Math.round('+s+')';
	}
}
stdlib.SQRT = function(s) {return 'Math.sqrt('+s+')'};

stdlib.UPPER = stdlib.UCASE = function(s) {return '('+s+').toUpperCase()';}
//stdlib.UCASE = function(s) {return '('+s+').toUpperCase()';}
//REPLACE
// RTRIM
// SUBSTR
// TRIM
//REPLACE
// RTRIM
// SUBSTR
// TRIM




// 
//
// SQL and JS DateTime functions
//
//



/*
//
// CASE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CaseValue = function(params) { return yy.extend(this, params); };
yy.CaseValue.prototype.toString = function() {
	var s = 'CASE ';
	if(this.expression) s += this.expression.toString();
	if(this.whens) {
		s += this.whens.map(function(w) { return ' WHEN '+
			w.when.toString() + ' THEN '+w.then.toString()}).join();
	}
	s += ' END';
	return s;
};

yy.CaseValue.prototype.findAggregator = function (query){
//	console.log(this.toString());
	if(this.expression && this.expression.findAggregator) this.expression.findAggregator(query);
	if(this.whens && this.whens.length > 0) {
		this.whens.forEach(function(w) { 
			if(w.when.findAggregator) w.when.findAggregator(query);
			if(w.then.findAggregator) w.then.findAggregator(query);
		});
	}
};

yy.CaseValue.prototype.toJavaScript = function(context, tableid, defcols) {

	var s = '(function('+context+',params,alasql){var r;';
	if(this.expression) {
//			this.expression.toJavaScript(context, tableid)
		s += 'v='+this.expression.toJavaScript(context, tableid, defcols)+';';
		s += (this.whens||[]).map(function(w) { return ' if(v=='+w.when.toJavaScript(context,tableid, defcols)
			+') {r='+w.then.toJavaScript(context,tableid, defcols)+'}'; }).join(' else ');
		if(this.elses) s += ' else {r='+this.elses.toJavaScript(context,tableid, defcols)+'}';
	} else {
		s += (this.whens||[]).map(function(w) { return ' if('+w.when.toJavaScript(context,tableid, defcols)
			+') {r='+w.then.toJavaScript(context,tableid, defcols)+'}'; }).join(' else ');
		if(this.elses) s += ' else {r='+this.elses.toJavaScript(context,tableid,defcols)+'}';
	}
	s += 'return r;})('+context+',params,alasql)';

	return s;
};

/*
//
// JSON for Alasql.js
// Date: 19.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Json = function (params) { return yy.extend(this, params); }
yy.Json.prototype.toString = function() {
	var s = '@';
	s += JSONtoString(this.value);
	s += '';
	return s;
};

var JSONtoString = alasql.utils.JSONtoString = function (obj) {
	var s = '';
	if(typeof obj == "string") s = '"'+obj+'"';
	else if(typeof obj == "number") s = obj;
	else if(typeof obj == "boolean") s = obj;
	else if(typeof obj == "object") {
		if(obj instanceof Array) {
			s += '['+obj.map(function(b){
				return JSONtoString(b);
			}).join(',')+']';
		} else if(!obj.toJavaScript || obj instanceof yy.Json) {
			// to prevent recursion
			s = '{';
			var ss = [];
			for(var k in obj) {
				var s1 = ''; 
				if(typeof k == "string") s1 += '"'+k+'"';
				else if(typeof k == "number") s1 += k;
				else if(typeof k == "boolean") s1 += k;
				else {
					throw new Error('THis is not ES6... no expressions on left side yet');
				}
				s1 += ':'+JSONtoString(obj[k]);
				ss.push(s1);
			};
			s += ss.join(',')+'}';
		} else if(obj.toString)	{
			s = obj.toString();
		} else {
			throw new Error('1Can not show JSON object '+JSON.stringify(obj));
		}
	} else {
		throw new Error('2Can not show JSON object '+JSON.stringify(obj));		
	}

	return s;
}



function JSONtoJavaScript(obj, context, tableid, defcols) {
	var s = '';
	if(typeof obj == "string") s = '"'+obj+'"';
	else if(typeof obj == "number") s = '('+obj+')';
	else if(typeof obj == "boolean") s = obj;
	else if(typeof obj == "object") {
		if(obj instanceof Array) {
			s += '['+obj.map(function(b){
				return JSONtoJavaScript(b, context, tableid, defcols);
			}).join(',')+']';
		} else if(!obj.toJavaScript || obj instanceof yy.Json) {
			// to prevent recursion
			s = '{';
			var ss = [];
			for(var k in obj) {
				var s1 = ''; 
				if(typeof k == "string") s1 += '"'+k+'"';
				else if(typeof k == "number") s1 += k;
				else if(typeof k == "boolean") s1 += k;
				else {
					throw new Error('THis is not ES6... no expressions on left side yet');
				}
				s1 += ':'+JSONtoJavaScript(obj[k], context, tableid, defcols);
				ss.push(s1);
			};
			s += ss.join(',')+'}';
		} else if(obj.toJavaScript)	{
			s = obj.toJavaScript(context, tableid, defcols);
		} else {
			throw new Error('1Can not parse JSON object '+JSON.stringify(obj));
		}
	} else {
		throw new Error('2Can not parse JSON object '+JSON.stringify(obj));		
	}

	return s;
}

yy.Json.prototype.toJavaScript = function(context, tableid, defcols) {
	// TODO reod
	return JSONtoJavaScript(this.value,context, tableid, defcols);
}




/*
//
// CAST and CONVERT functions
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Cast = function(params) { return yy.extend(this, params); };
yy.Cast.prototype.toString = function() {
	var s = 'CAST(';
	s += this.expression.toString();
	s += ' AS ';
	s += this.dbtypeid;
	if(typeof this.dbsize != 'undefined') {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+dbprecision;
		s += ')';
	}
	s += ')';
	return s;
};
yy.Cast.prototype.toJavaScript = function(context, tableid, defcols) {

	if(this.dbtypeid == 'INT') {
		return '(('+this.expression.toJavaScript(context, tableid, defcols)+')|0)';
	} if(this.dbtypeid == 'STRING') {
		return '(""+'+this.expression.toJavaScript(context, tableid, defcols)+')';
	} if(this.dbtypeid == 'NUMBER') {
		return '(+('+this.expression.toJavaScript(context, tableid, defcols)+'))';
	} if(this.dbtypeid == 'DATE') {
		if(alasql.options.datetimeformat == 'javascript') {
			return '(new Date('+this.expression.toJavaScript(context, tableid, defcols)+'))';
		} else if(alasql.options.datetimeformat == 'sql') {
			return this.expression.toJavaScript(context, tableid, defcols);
		}
	} if(this.dbtypeid == 'DATETIME') {
		if(alasql.options.datetimeformat == 'javascript') {
			return '(new Date('+this.expression.toJavaScript(context, tableid, defcols)+'))';
		} else if(alasql.options.datetimeformat == 'sql') {
			return this.expression.toJavaScript(context, tableid, defcols);
		}
	} else {

	};

	throw new Error('There is not such type conversion for '+this.toString());
};

/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ColumnDef = function (params) { return yy.extend(this, params); }
yy.ColumnDef.prototype.toString = function() {
	var s =  this.columnid;
	if(this.dbtypeid) s += ' '+this.dbtypeid;
	if(this.dbsize) {
		s += '('+this.dbsize;
		if(this.dbprecision) s += ','+this.dbprecision;
		s += ')';
	};
	if(this.primarykey) s += ' PRIMARY KEY';
	if(this.notnull) s += ' NOT NULL';
	return s;
}

yy.CreateTable = function (params) { return yy.extend(this, params); }
yy.CreateTable.prototype.toString = function() {
	var s = K('CREATE');
	if(this.temporary) s+=' '+K('TEMPORARY');
	s += ' '+K('TABLE');
	if(this.ifnotexists) s += ' '+K('IF')+' '+K('NOT')+' '+K('EXISTS');
	s += ' '+this.table.toString();
	if(this.as) s += ' '+K('AS')+' '+L(this.as);
	else { 
		var ss = this.columns.map(function(col){
			return col.toString();
		});
		s += ' ('+NL()+ID()+ss.join(','+NL()+ID())+')';
	}
	return s;
}

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.CreateTable.prototype.execute = function (databaseid, params, cb) {
//	var self = this;
	var db = alasql.databases[this.table.databaseid || databaseid];

	var tableid = this.table.tableid;
	if(!tableid) {
		throw new Error('Table name is not defined');
	}

//	var ifnotexists = this.ifnotexists;
	var columns = this.columns;
	// if(false) {
	// 	if(!columns) {
	// 		throw new Error('Columns are not defined');
	// 	}
	// }
	var constraints = this.constraints||[];
//	console.log(this);

	// IF NOT EXISTS
	if(this.ifnotexists && db.tables[tableid]) return 0;

	if(db.tables[tableid]) {
		throw new Error('Can not create table \''+tableid
			+'\', because it already exists in the database \''+db.databaseid+'\'');
	}

	var table = db.tables[tableid] = new alasql.Table(); // TODO Can use special object?

	var ss = [];
	if(this.columns) {
		this.columns.forEach(function(col) {
			var dbtypeid = col.dbtypeid;
			if(!alasql.fn[dbtypeid]) dbtypeid = dbtypeid.toUpperCase();
			var newcol = {
				columnid: col.columnid,
				dbtypeid: dbtypeid // TODO: Add types table
			};

			if(col.default) {
				ss.push('\''+col.columnid+'\':'+col.default.toJavaScript());
			}

			table.columns.push(newcol);
			table.xcolumns[newcol.columnid] = newcol;

			// Check for primary key
			if(col.primarykey) {
				var pk = table.pk = {};
				pk.columns = [col.columnid];
				pk.onrightfns = 'r[\''+col.columnid+'\']';
				pk.onrightfn = new Function("r",'return '+pk.onrightfns);
				pk.hh = hash(pk.onrightfns);
				table.indices[pk.hh] = {};
			};

		});
	};
	table.defaultfns = ss.join(',');


//	if(constraints) {
	constraints.forEach(function(con) {
		//console.log(con, con.columns);
		if(con.type == 'PRIMARY KEY') {
			if(table.pk) {
				throw new Error('Primary key already exists');
			}
			var pk = table.pk = {};
			pk.columns = con.columns;
			pk.onrightfns = pk.columns.map(function(columnid){
				return 'r[\''+columnid+'\']'
			}).join("+'`'+");
			pk.onrightfn = new Function("r",'return '+pk.onrightfns);
			pk.hh = hash(pk.onrightfns);
			table.indices[pk.hh] = {};					
		}
	});

//	console.log(100,db.engineid);
	if(db.engineid) {
//		console.log(101,db.engineid);
		return alasql.engines[db.engineid].createTable(this.table.databaseid || databaseid, tableid, this.ifnotexists, cb);
//		console.log('createtable',res1);
//		return res1; 
	}

//	}
//			if(table.pk) {
	table.insert = function(r) {
		if(this.pk) {
			var pk = this.pk;
			var addr = pk.onrightfn(r);
			if(typeof this.indices[pk.hh][addr] != 'undefined') {
				throw new Error('Cannot insert record, because it already exists in primary key');
			} else {
				table.data.push(r);
				this.indices[pk.hh][addr]=r;
			};
		} else {
			table.data.push(r);						
		}
	};

	table.delete = function(i) {
		if(this.pk) {
			var r = this.data[i];
			var pk = this.pk;
			var addr = pk.onrightfn(r);
			if(typeof this.indices[pk.hh][addr] == 'undefined') {
				throw new Error('Something wrong with index on table');
			} else {
				this.indices[pk.hh][addr]=undefined;
			};
		}
	};

	table.deleteall = function() {
		this.data.length = 0;
		if(this.pk) {
//						var r = this.data[i];
			this.indices[this.pk.hh] = {};
		}
	};

	table.update = function(assignfn, i, params) {
		if(this.pk) {
			var r = this.data[i];
			var pk = this.pk;
			var addr = pk.onrightfn(r,params);
			if(typeof this.indices[pk.hh][addr] == 'undefined') {
				throw new Error('Something wrong with index on table');
			} else {
				this.indices[pk.hh][addr]=undefined;
				assignfn(r,params,alasql);
				var newaddr = pk.onrightfn(r);
				if(typeof this.indices[pk.hh][newaddr] != 'undefined') {
					throw new Error('Record already exists');
				} else {
					this.indices[pk.hh][newaddr] = r;
				}
			} 

		} else {
			assignfn(this.data[i],params,alasql);
		};

	};
//	console.log(databaseid);
//	console.log(db.databaseid,db.tables);
//	console.log(table);
	if(cb) cb(1);

	return 1;
};




//
// Date functions
// 
// (c) 2014, Andrey Gershun
//

/*
alasql.fn.Date = Date;
alasql.fn.Number = Number;
alasql.fn.String = String;
alasql.fn.Boolean = Boolean;
*/

stdfn.EXTEND = alasql.utils.extend;

stdfn.OBJECT_ID = function(objid){
	return !!alasql.tables[objid];
};

stdfn.DATE = function (d) {
	return new Date(d);
};

stdfn.NOW = function(){
	var d = new Date();
	var s = d.getFullYear()+"."+("0"+(d.getMonth()+1)).substr(-2)+"."+("0"+d.getDate()).substr(-2);
	s += " "+("0"+d.getHours()).substr(-2)+":"+("0"+d.getMinutes()).substr(-2)+"."+("0"+d.getSeconds()).substr(-2);
	return s;
};

stdfn.GETDATE = function(){
	var d = new Date();
	var s = d.getFullYear()+"."+("0"+(d.getMonth()+1)).substr(-2)+"."+("0"+d.getDate()).substr(-2);
	return s;	
}


stdfn.SECOND = function(d){
	d = new Date(d);
	return d.getSeconds();
};


stdfn.MINUTE = function(d){
	d = new Date(d);
	return d.getMinutes();
};

stdfn.HOUR = function(d){
	d = new Date(d);
	return d.getHours();
};

stdfn.DAYOFWEEK = stdfn.WEEKDAY = function(d){
	d = new Date(d);
	return d.getDay();
};

stdfn.DAY = stdfn.DAYOFMONTH = function(d){
	d = new Date(d);
	return d.getDate();
};

stdfn.MONTH = function(d){
	d = new Date(d);
	return d.getMonth()+1;
};

stdfn.YEAR = function(d){
	d = new Date(d);
	return d.getFullYear();
};

/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropTable = function (params) { return yy.extend(this, params); }
yy.DropTable.prototype.toString = function() {
	var s = K('DROP')+' '+K('TABLE');
	if(this.ifexists) s += ' '+K('IF')+' '+K('EXISTS');
	s += ' '+this.table.toString();
	return s;
}


// DROP TABLE
yy.DropTable.prototype.execute = function (databaseid, params, cb) {
	var db = alasql.databases[this.table.databaseid || databaseid];
	var tableid = this.table.tableid;
//	console.log(db, this.table.databaseid );
	if(db.engineid) {
		return alasql.engines[db.engineid].dropTable(this.table.databaseid || databaseid,tableid, this.ifexists, cb);
	}
	if(!this.ifexists || this.ifexists && db.tables[tableid]) {
		if(!db.tables[tableid]) {
			if(!alasql.options.dropifnotexists) {
				throw new Error('Can not drop table \''+this.table.tableid+'\', because it does not exist in the database.');
			}
		} else {
			delete db.tables[tableid];
			return 1;
		}
	}
	return 0;
};


/*
//
// ALTER TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// ALTER TABLE table1 RENAME TO table2
yy.AlterTable = function (params) { return yy.extend(this, params); }
yy.AlterTable.prototype.toString = function() {
	var s = 'ALTER TABLE '+this.table.toString(); 
	if(this.renameto) s += ' RENAME TO '+this.renameto;
	return s;
}

yy.AlterTable.prototype.execute = function (databaseid, params, cb) {
	var db = alasql.databases[databaseid];
	db.dbversion = Date.now();

	if(this.renameto) {
		var oldtableid = this.table.tableid;
		var newtableid = this.renameto;
			var res = 1;
			if(db.tables[newtableid]) {
				throw new Error("Can not rename a table '"+oldtableid+"' to '"
					+newtableid+"', because the table with this name already exists");
			} else if(newtableid == oldtableid) {
				throw new Error("Can not rename a table '"+oldtableid+"' to itself");
			} else {
				db.tables[newtableid] = db.tables[oldtableid];
				delete db.tables[oldtableid];
				res = 1;
			};
			if(cb) cb(res)
			return res;
	} else if(this.addcolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.addcolumn.columnid;
		if(table.xcolumns[columnid]) {
			throw new Error('Cannot add column "'+columnid+'", because it already exists in the table "'+tableid+'"');
		}

		var col = {
			columnid:columnid,
			dbtypeid:this.dbtypeid,
			dbsize:this.dbsize,
			dbprecision:this.dbprecision,
			dbenum:this.dbenum,
			defaultfns: null // TODO defaultfns!!!
		};

		var defaultfn = function(){};

		table.columns.push(col);
		table.xcolumns[columnid] = col;

		for(var i=0, ilen=table.data.length; i<ilen; i++) {
//				console.log(table.data[i][columnid]);
			table.data[i][columnid] = defaultfn();
		}

		// TODO
		return 1;
	} else if(this.modifycolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.modifycolumn.columnid;

		if(!table.xcolumns[columnid]) {
			throw new Error('Cannot modify column "'+columnid+'", because it was not found in the table "'+tableid+'"');
		}

		var col = table.xcolumns[columnid];
		col.dbtypeid = this.dbtypeid;
		col.dbsize = this.dbsize;
		col.dbprecision = this.dbprecision;
		col.dbenum = this.dbenum;


		// TODO
		return 1;
	} else if(this.renamecolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;

		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.renamecolumn;
		var tocolumnid = this.to;

		var col;
		if(!table.xcolumns[columnid]) {
			throw new Error('Column "'+columnid+'" is not found in the table "'+tableid+'"');
		}
		if(table.xcolumns[tocolumnid]) {
			throw new Error('Column "'+tocolumnid+'" already exists in the table "'+tableid+'"');
		}

		if(columnid != tocolumnid) {
			for(var j=0; j<table.columns.length; j++) {
				if(table.columns[j].columnid == columnid) {
					table.columns[j].columnid = tocolumnid;
				}
			};

			table.xcolumns[tocolumnid]=table.xcolumns[columnid];
			delete table.xcolumns[columnid];

			for(var i=0, ilen=table.data.length; i<ilen; i++) {
//				console.log(table.data[i][columnid]);
				table.data[i][tocolumnid] = table.data[i][columnid];
				delete table.data[i][columnid];
			}
			return table.data.length;
		}
		else return 0;
	} else if(this.dropcolumn) {
		var db = alasql.databases[this.table.databaseid || databaseid];
		db.dbversion++;
		var tableid = this.table.tableid;
		var table = db.tables[tableid];
		var columnid = this.dropcolumn;

		var found = false;
		for(var j=0; j<table.columns.length; j++) {
			if(table.columns[j].columnid == columnid) {
				found = true;
				table.columns.splice(j,1);
				break;
			}
		};

		if(!found) {
			throw new Error('Cannot drop column "'+columnid+'", because it was not found in the table "'+tableid+'"');
		}

		delete table.xcolumns[columnid];

		for(var i=0, ilen=table.data.length; i<ilen; i++) {
			delete table.data[i][columnid];
		}
		return table.data.length;
	} else {
		throw Error('Unknown ALTER TABLE method');
	}

};



/*
//
// CREATE TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CreateIndex = function (params) { return yy.extend(this, params); }
yy.CreateTable.prototype.toString = function() {
	var s = 'CREATE';
	if(this.unique) s+=' UNIQUE';
	s += ' INDEX ' + this.indexid + " ON "+this.table.toString();
	s += "("+this.columns.toString()+")";
	return s;
}

// CREATE TABLE
yy.CreateIndex.prototype.execute = function (databaseid) {
//	var self = this;
	var db = alasql.databases[databaseid];
	var tableid = this.table.tableid;
	var table = db.tables[tableid];
	var indexid = this.indexid;

	if(this.unique) {
		var rightfns = this.columns.map(function(colid){return "r[\'"+colid+"\']"}).join("+'`'+");
		table.uniqdefs[indexid] = {
			rightfns: rightfns
		};
		var ux = table.uniqs[indexid] = {};
		if(table.data.length > 0) {
			for(var i=0, ilen=table.data.length; i<ilen;i++) {
				var addr = rightfns(table.data[i]);
				if(!ux[addr]) {
					ux[addr] = {num:0};
				};
				ux[addr].num++;
			}
		}
	} else {
		var rightfns = this.columns.map(function(colid){return "r[\'"+colid+"\']"}).join("+'`'+");
		var hh = hash(rightfns);
		table.inddefs[indexid] = {rightfns:rightfns, hh:hh};
		table.indices[hh] = {};

		var ix = table.indices[hh] = {};
		if(table.data.length > 0) {
			for(var i=0, ilen=table.data.length; i<ilen;i++) {
				var addr = rightfns(table.data[i]);
				if(!ix[addr]) {
					ix[addr] = [];
				};
				ix[addr].push(table.data[i]);
			}
		}
	};

};




/*
//
// DROP TABLE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.DropIndex = function (params) { return yy.extend(this, params); }
yy.DropIndex.prototype.toString = function() {
	return 'INDEX TABLE' + this.indexid;
}


// DROP TABLE
yy.DropIndex.prototype.compile = function (db) {
	var indexid = this.indexid;
	return function() {
		return 1;
	}
};


/*
//
// CREATE VIEW for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.CreateView = function (params) { return yy.extend(this, params); }
yy.CreateView.prototype.toString = function() {
	var s = 'CREATE VIEW';
	s += ' '+this.view.toString();
	if(this.columns) { 
		var ss = this.columns.map(function(col){
			return col.toString();
		});
		s += ' ('+ss.join(',')+')';
	}
	s += ' AS '+this.select.toString();
	return s;
};

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.CreateView.prototype.execute = function (databaseid) {
//	var self = this;
	var db = alasql.databases[this.view.databaseid || databaseid];
	var v = db.views[this.view.viewid] = new View();

//	console.log(databaseid);
//	console.log(db.databaseid,db.tables);
//	console.log(table);

	return 1;
};




/*
//
// CREATE VIEW for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.If = function (params) { return yy.extend(this, params); }
yy.If.prototype.toString = function() {
	var s = 'IF ';
	s += this.expression.toString();
	s += ' '+this.thenstat.toString();
	return s;
};

// CREATE TABLE
//yy.CreateTable.prototype.compile = returnUndefined;
yy.If.prototype.execute = function (databaseid,params,cb,scope) {
	var res = 1;
//	console.log(this.expression.toJavaScript());
	var fn = new Function('params,alasql','return '+this.expression.toJavaScript());
	var res = fn(params,alasql);
	if(res) res = this.thenstat.execute(databaseid,params,cb,scope);
//	else res = this.elsestat.execute(databaseid,params,cb,scope);
	return res;
};




/*
//
// INSERT for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Insert = function (params) { return yy.extend(this, params); }
yy.Insert.prototype.toString = function() {
	var s = 'INSERT INTO '+this.into.toString();
	if(this.columns) s += '('+this.columns.toString()+')';
	if(this.values) s += ' VALUES '+this.values.toString();
	if(this.select) s += ' '+this.select.toString();
	return s;
}

yy.Insert.prototype.compile = function (databaseid) {
	var self = this;
	databaseid = self.into.databaseid || databaseid
	var db = alasql.databases[databaseid];
//	console.log(self);
	var tableid = self.into.tableid;
	var table = db.tables[tableid];

	// Check, if this dirty flag is required
	var s = '';
	var sw = '';
//	var s = 'db.tables[\''+tableid+'\'].dirty=true;';
	var s3 = 'var a,aa=[];';
	var s33;


// INSERT INTO table VALUES
	if(this.values) {

//		console.log(1);
		self.values.forEach(function(values) {
			var ss = [];

//			s += 'db.tables[\''+tableid+'\'].data.push({';

//			s += '';
			if(self.columns) {
				self.columns.forEach(function(col, idx){
//console.log(db.tables, tableid, table);
		//			ss.push(col.columnid +':'+ self.values[idx].value.toString());
		//			console.log(rec[f.name.value]);
		//			if(rec[f.name.value] == "NULL") rec[f.name.value] = undefined;

		//			if(table.xflds[f.name.value].dbtypeid == "INT") rec[f.name.value] = +rec[f.name.value]|0;
		//			else if(table.xflds[f.name.value].dbtypeid == "FLOAT") rec[f.name.value] = +rec[f.name.value];
					var q = "'"+col.columnid +'\':';
					if(table.xcolumns && table.xcolumns[col.columnid]) { 
						if(["INT","FLOAT","NUMBER","MONEY"].indexOf(table.xcolumns[col.columnid].dbtypeid) >=0) {
							q += "+"+values[idx].toJavaScript();
						} else if (alasql.fn[table.xcolumns[col.columnid].dbtypeid]) {
							q += "(new "+table.xcolumns[col.columnid].dbtypeid+"(";
							q += values[idx].toJavaScript();
							q += "))";
						} else {
							q += values[idx].toJavaScript();
						};
					} else { 
						q += values[idx].toJavaScript();
					}
					ss.push(q);

				});
			} else {
//				var table = db.tables[tableid];
//	console.log('table1', db, self);
//console.log(111, table.columns);
//console.log(74,table);
				if((values instanceof Array) && table.columns && table.columns.length > 0) {
					table.columns.forEach(function(col, idx){

						var q = '\''+col.columnid +'\':';
//						var val = values[idx].toJavaScript();

						if(["INT","FLOAT","NUMBER","MONEY"].indexOf(col.dbtypeid) >=0) {
							q += "+"+values[idx].toJavaScript();
						} else if (alasql.fn[col.dbtypeid]) {
							q += "(new "+col.dbtypeid+"(";
							q += values[idx].toJavaScript();
							q += "))";
						} else { 
							q += values[idx].toJavaScript();
						}

						 // if(table.xcolumns && table.xcolumns[col.columnid] && 
						 //  (table.xcolumns[col.columnid].dbtypeid == "DATE" ||
							// table.xcolumns[col.columnid].dbtypeid == "DATETIME"
						 //  )) {
						 // 	val = "(new Date("+val+"))";
						 // }
						// 		|| table.xcolumns[col.columnid].dbtypeid == "FLOAT"
						// 		|| table.xcolumns[col.columnid].dbtypeid == "NUMBER"
						// 		|| table.xcolumns[col.columnid].dbtypeid == "MONEY"
						// 	)) q += '+';
					//	console.log(self.values[idx].toString());
			//console.log(self);
//						q += val;

						// if(table.xcolumns && table.xcolumns[col.columnid] && table.xcolumns[col.columnid].dbtypeid == "INT") q += '|0';
						ss.push(q);

			//			console.log(fld);
						// TODO: type checking and conversions
			//			rec[fld.fldid] = eval(self.insertExpression[idx].toJavaScript('',''));
			//			console.log(rec[fld.fldid]);
			//			if(rec[fld.fldid] == "NULL") rec[fld.fldid] = undefined;

			//			if(table.xflds[fld.fldid].dbtypeid == "INT") rec[fld.fldid] = +rec[fld.fldid]|0;
			//			else if(table.xflds[fld.fldid].dbtypeid == "FLOAT" || table.xflds[fld.fldid].dbtypeid == "MONEY" ) 
			//				rec[fld.fldid] = +rec[fld.fldid];
					});
				} else {
//					console.log(222,values);
//					sw = 'var w='+JSONtoJavaScript(values)+';for(var k in w){r[k]=w[k]};';
					sw = JSONtoJavaScript(values);
				}
			}
//console.log(ss);

			if(db.tables[tableid].defaultfns) ss.unshift(db.tables[tableid].defaultfns);
			if(sw) {
				s += 'a='+sw+';';
			} else {
				s += 'a={'+ss.join(',')+'};';
			}
//			s += 'db.tables[\''+tableid+'\'].insert(r);';
	        if(db.tables[tableid].insert) {
				s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].insert(a);';
	        } else {
				s += 'aa.push(a);';
			}
		});

		s33 = s3+s;

        if(db.tables[tableid].insert) {
//			s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].insert(r);';
        } else {
            s += 'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].data='+	
            'alasql.databases[\''+databaseid+'\'].tables[\''+tableid+'\'].data.concat(aa);';
        }

		s += 'return '+self.values.length;

//console.log(s);
		var insertfn = new Function('db, params, alasql',s3+s);
	
// INSERT INTO table SELECT

	} else if(this.select) {
		selectfn = this.select.compile(databaseid);
	    if(db.engineid && alasql.engines[db.engineid].intoTable) {
			var statement = function(params, cb) {
				var aa = selectfn(params);
				var res = alasql.engines[db.engineid].intoTable(db.databaseid,tableid,aa,null, cb);
				return res;
			};
			return statement;
	    } else {
			var insertfn = function(db, params, alasql) {
				var res = selectfn(params);
				db.tables[tableid].data = db.tables[tableid].data.concat(res);
				return res.length;
			}
		}


	} else if(this.default) {
		var insertfns = 'db.tables[\''+tableid+'\'].data.push({'+table.defaultfns+'});return 1;';
        var insertfn = new Function('db,params,alasql',insertfns); 
    } else {
    	throw new Error('Wrong INSERT parameters');
    }

//    console.log(1,s);
//    	console.log(s33);

    if(db.engineid && alasql.engines[db.engineid].intoTable) {
		var statement = function(params, cb) {
			var aa = new Function("db,params",s33+'return aa;')(db,params);
//			console.log(aa);
			var res = alasql.engines[db.engineid].intoTable(db.databaseid,tableid,aa, null, cb);
//			if(cb) cb(res);
			return res;
		};

    } else {

		var statement = function(params, cb) {
			//console.log(databaseid);
			var db = alasql.databases[databaseid];

			if(alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].loadTableData(databaseid,tableid);
			}
			
			var res = insertfn(db,params,alasql);

			if(alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].saveTableData(databaseid,tableid);
			}
	//		var res = insertfn(db, params);
			if(cb) cb(res);
			return res;
		};
	};

	return statement;
};

yy.Insert.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
//	throw new Error('Insert statement is should be compiled')
}





/*
//
// DELETE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Delete = function (params) { return yy.extend(this, params); }
yy.Delete.prototype.toString = function() {
	var s = 'DELETE FROM '+this.table.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}

yy.Delete.prototype.compile = function (databaseid) {
//  console.log(11,this);
	databaseid = this.table.databaseid || databaseid;
	var tableid = this.table.tableid;
	var statement;
			var db = alasql.databases[databaseid];

	if(this.where) {
//		try {
//		console.log(this, 22, this.where.toJavaScript('r',''));
//	} catch(err){console.log(444,err)};
		var wherefn = new Function('r,params','return ('+this.where.toJavaScript('r','')+')');
//		console.log(wherefn);
		statement = function (params, cb) {
			if(db.engineid && alasql.engines[db.engineid].deleteFromTable) {
				return alasql.engines[db.engineid].deleteFromTable(databaseid, tableid, wherefn, params, cb);
			}

			if(alasql.options.autocommit && db.engineid && db.engineid == 'LOCALSTORAGE') {
				alasql.engines[db.engineid].loadTableData(databaseid,tableid);
			}

			var table = db.tables[tableid];
//			table.dirty = true;
			var orignum = table.data.length;

			var newtable = [];			
			for(var i=0, ilen=table.data.length;i<ilen;i++) {
				if(wherefn(table.data[i],params)) {
					// Check for transaction - if it is not possible then return all back
					if(table.delete) {
						table.delete(i);
					} else {
						// SImply do not push
					}
				} else newtable.push(table.data[i]);
			}
//			table.data = table.data.filter(function(r){return !;});
			table.data = newtable;
			var res = orignum - table.data.length;
			if(alasql.options.autocommit && db.engineid && db.engineid == 'LOCALSTORAGE') {
				alasql.engines[db.engineid].saveTableData(databaseid,tableid);
			}

//			console.log('deletefn',table.data.length);
			if(cb) cb(res);
			return res;
		}
	} else {
		statement = function (params, cb) {
			if(alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].loadTableData(databaseid,tableid);
			}

			var table = db.tables[tableid];
			table.dirty = true;
			var orignum = db.tables[tableid].data.length;

			table.deleteall();

			if(alasql.options.autocommit && db.engineid) {
				alasql.engines[db.engineid].saveTableData(databaseid,tableid);
			}

			if(cb) cb(orignum);
			return orignum;
		};
	};

	return statement;

};

yy.Delete.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
}


/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Update = function (params) { return yy.extend(this, params); }
yy.Update.prototype.toString = function() {
	var s = 'UPDATE '+this.table.toString();
	if(this.columns) s += ' SET '+this.columns.toString();
	if(this.where) s += ' WHERE '+this.where.toString();
	return s;
}


yy.SetColumn = function (params) { return yy.extend(this, params); }
yy.SetColumn.prototype.toString = function() {
	return this.columnid.toString() + '='+this.expression.toString();
}

yy.Update.prototype.compile = function (databaseid) {
//	console.log(this);
	databaseid = this.table.databaseid || databaseid;
	var tableid = this.table.tableid;
	
	if(this.where) {
		var wherefn = new Function('r,params,alasql','return '+this.where.toJavaScript('r',''));
	};

	// Construct update function
	var s = '';
	this.columns.forEach(function(col){
		s += 'r[\''+col.columnid+'\']='+col.expression.toJavaScript('r','')+';'; 
	});
	var assignfn = new Function('r,params,alasql',s);

	var statement = function(params, cb) {
		var db = alasql.databases[databaseid];


//		console.log(db.engineid);
//		console.log(db.engineid && alasql.engines[db.engineid].updateTable);
		if(db.engineid && alasql.engines[db.engineid].updateTable) {
//			console.log('updateTable');
			return alasql.engines[db.engineid].updateTable(databaseid, tableid, assignfn, wherefn, params, cb);
		}

		if(alasql.options.autocommit && db.engineid) {
			alasql.engines[db.engineid].loadTableData(databaseid,tableid);
		}

		var table = db.tables[tableid];
		if(!table) {
			throw new Error("Table '"+tableid+"' not exists")
		}
//		table.dirty = true;
		var numrows = 0;
		for(var i=0, ilen=table.data.length; i<ilen; i++) {
			if(!wherefn || wherefn(table.data[i], params,alasql) ) {
				if(table.update) {
					table.update(assignfn, i, params);
				} else {
					assignfn(table.data[i], params,alasql);
				}
				numrows++;
			}
		};

		if(alasql.options.autocommit && db.engineid) {
			alasql.engines[db.engineid].saveTableData(databaseid,tableid);
		}

		if(cb) cb(numrows);
		return numrows;
	};
	return statement;
};

yy.Update.prototype.execute = function (databaseid, params, cb) {
	return this.compile(databaseid)(params,cb);
}





/*
//
// UPDATE for Alasql.js
// Date: 03.11.2014
// Modified: 16.11.2014
// (c) 2014, Andrey Gershun
//
*/

// CREATE DATABASE databaseid
yy.CreateDatabase = function (params) { return yy.extend(this, params); };
yy.CreateDatabase.prototype.toString = function() {
	var s = K('CREATE'); 
	if(this.engineid) s+=' '+L(this.engineid);
	s += ' '+K('DATABASE');
	if(this.ifnotexists) s += ' '+K('IF')+' '+K('NOT')+' '+K('EXISTS');
	s += ' '+L(this.databaseid);
	if(this.args && this.args.length > 0) { 
		s += '('+this.args.map(function(arg){ return arg.toString()}).join(', ')+')';
	}
	if(this.as) s += ' '+K('AS')+' '+L(this.as);
	return s;
}
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.CreateDatabase.prototype.execute = function (databaseid, params, cb) {
	// console.log(alasql.useid, databaseid, this.databaseid);
	// console.trace();
	var args;
	if(this.args && this.args.length > 0) {
		args = this.args.map(function(arg){
			return new Function('params','return '+arg.toJavaScript())(params);
		});
	};
	if(this.engineid) {
		var res = alasql.engines[this.engineid].createDatabase(this.databaseid, this.args, this.ifnotexists, this.as, cb);
		return res;
	} else {
		var dbid = this.databaseid;
		if(alasql.databases[dbid]) {
			throw new Error("Database '"+dbid+"' already exists")
		};
		var a = new alasql.Database(dbid);
		var res = 1;
		if(cb) return cb(res);
		return res;
	}
};

// CREATE DATABASE databaseid
yy.AttachDatabase = function (params) { return yy.extend(this, params); };
yy.AttachDatabase.prototype.toString = function() {
	var s = K('ATTACH');
	if(this.engineid) s += ' '+L(this.engineid);
	s += ' '+K('DATABASE')+' '+L(this.databaseid);
	// TODO add params
	if(args) {
		s += '(';
			if(args.length>0) {
				s += args.map(function(arg){ return arg.toJavaScript(); }).join(', ');
			}
		s += ')';
	}
	if(this.as) s+= ' '+K('AS')+' '+L(this.as);
	return s;
}
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.AttachDatabase.prototype.execute = function (databaseid, params, cb) {
	// console.log(alasql.useid, databaseid, this.databaseid);
	// console.trace();
	if(!alasql.engines[this.engineid]) {
		throw new Error('Engine "'+this.engineid+'" is not defined.');
	};
	var res = alasql.engines[this.engineid].attachDatabase(this.databaseid, this.as, this.args, cb);
	return res;
};


// CREATE DATABASE databaseid
yy.DetachDatabase = function (params) { return yy.extend(this, params); };
yy.DetachDatabase.prototype.toString = function() {
	var s = K('DETACH');
	s += ' '+K('DATABASE')+' '+L(this.databaseid);
	return s;
}
//yy.CreateDatabase.prototype.compile = returnUndefined;
yy.DetachDatabase.prototype.execute = function (databaseid, params, cb) {
	// console.log(alasql.useid, databaseid, this.databaseid);
	// console.trace();
	if(!alasql.databases[this.databaseid].engineid) {
		throw new Error('Cannot detach database "'+this.engineid+'", because it was not attached.');
	};
	var res;
	
	var dbid = this.databaseid;

	if(dbid == alasql.DEFAULTDATABASEID) {
		throw new Error("Drop of default database is prohibited");			
	}
//	console.log(dbid);
	if(!alasql.databases[dbid]) {
		if(!this.ifexists) {
			throw new Error("Database '"+dbid+"' does not exist");	
		} else {
			res = 0;
		}
	} else {
		delete alasql.databases[dbid];
		if(dbid == alasql.useid) {
			alasql.use();		
		}
		res = 1;
	}
	if(cb) cb(res);
	return res;
//	var res = alasql.engines[this.engineid].attachDatabase(this.databaseid, this.as, cb);
//	return res;
};

// USE DATABSE databaseid
// USE databaseid
yy.UseDatabase = function (params) { return yy.extend(this, params); };
yy.UseDatabase.prototype.toString = function() {
	return K('USE') +' '+K('DATABASE')+' '+L(this.databaseid);
}
//yy.UseDatabase.prototype.compile = returnUndefined;
yy.UseDatabase.prototype.execute = function (databaseid, params, cb) {
	var dbid = this.databaseid;
	if(!alasql.databases[dbid]) {
		throw new Error("Database '"+dbid+"' does not exist")
	};
	alasql.use(dbid);
	var res = 1;
	if(cb) cb(res);
	return res;
};

// DROP DATABASE databaseid
yy.DropDatabase = function (params) { return yy.extend(this, params); }
yy.DropDatabase.prototype.toString = function() {
	var s = K('DROP');
	if(this.ifexists) s += ' '+K('IF')+' '+K('EXISTS');
	s += ' '+K('DATABASE')+' '+L(this.databaseid);
	return s;
}
//yy.DropDatabase.prototype.compile = returnUndefined;
yy.DropDatabase.prototype.execute = function (databaseid, params, cb) {
	if(this.engineid) {

//		console.log(this,this.databaseid, this.ifexists);
		return alasql.engines[this.engineid].dropDatabase(this.databaseid, this.ifexists, cb);
	}
	var res;
	
	var dbid = this.databaseid;

	if(dbid == alasql.DEFAULTDATABASEID) {
		throw new Error("Drop of default database is prohibited");			
	}
//	console.log(dbid);
	if(!alasql.databases[dbid]) {
		if(!this.ifexists) {
			throw new Error("Database '"+dbid+"' does not exist");	
		} else {
			res = 0;
		}
	} else {
		if(alasql.databases[dbid].engineid) {
			throw new Error("Cannot drop database '"+dbid+"', because it is attached. Detach it.");	
		}

		delete alasql.databases[dbid];
		if(dbid == alasql.useid) {
			alasql.use();		
		}
		res = 1;
	}
	if(cb) cb(res);
	return res;
};







/*
//
// SHOW for Alasql.js
// Date: 19.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.ShowDatabases = function (params) { return yy.extend(this, params); }
yy.ShowDatabases.prototype.toString = function() {
	var s = K('SHOW')+' '+K('DATABASES');
	if(this.like) s += 'LIKE '+this.like.toString();
	return s;
}
yy.ShowDatabases.prototype.execute = function (databaseid, params, cb) {
	if(this.engineid) {
		return alasql.engines[this.engineid].showDatabases(this.like, cb);
	} else {
		var self = this;
		var res = [];
		for(dbid in alasql.databases) {
			res.push({databaseid: dbid});
		};
		if(self.like && res && res.length > 0) {
			res = res.filter(function(d){
				return d.databaseid.match(new RegExp((self.like.value).replace(/\%/g,'.*'),'g'));
			});
		}
		if(cb) cb(res);
		return res;
	};

};


yy.ShowTables = function (params) { return yy.extend(this, params); }
yy.ShowTables.prototype.toString = function() {
	var s = K('SHOW')+' '+K('TABLES');
	if(this.databaseid) s += ' FROM '+this.databaseid;
	if(this.like) s += ' '+K('LIKE')+' '+this.like.toString();
	return s;
}
yy.ShowTables.prototype.execute = function (databaseid, params, cb) {
	var db = alasql.databases[this.databaseid || databaseid];

	var self = this;
	var res = [];
	for(tableid in db.tables) {
		res.push({tableid: tableid});
	};
	if(self.like && res && res.length > 0) {
		res = res.filter(function(d){
			return d.tableid.match(new RegExp((self.like.value).replace(/\%/g,'.*'),'g'));
		});
	};
	if(cb) cb(res);
	return res;
};

yy.ShowColumns = function (params) { return yy.extend(this, params); }
yy.ShowColumns.prototype.toString = function() {
	var s = K('SHOW')+' '+K('COLUMNS');
	if(this.table.tableid) s += ' '+K('FROM')+' '+this.table.tableid;
	if(this.databaseid) s += ' '+K('FROM')+' '+this.databaseid;
	return s;
};

yy.ShowColumns.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	if(table && table.columns) {
		var res = table.columns.map(function(col){
			return {columnid: col.columnid, dbtypeid: col.dbtypeid, dbsize: col.dbsize};
		});
		return res;
	} else {
		return [];
	}
};

yy.ShowIndex = function (params) { return yy.extend(this, params); }
yy.ShowIndex.prototype.toString = function() {
	var s = K('SHOW')+' '+K('INDEX');
	if(this.table.tableid) s += ' '+K('FROM')+' '+this.table.tableid;
	if(this.databaseid) s += ' '+K('FROM')+' '+this.databaseid;
	return s;
}
yy.ShowIndex.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	var res = [];
	if(table && table.indices) {
		for(var ind in table.indices) {
			res.push({hh:ind, len:Object.keys(table.indices[ind]).length});
		}
	}
	return res;
};

yy.ShowCreateTable = function (params) { return yy.extend(this, params); }
yy.ShowCreateTable.prototype.toString = function() {
	var s = K('SHOW')+' '+K('CREATE')+' '+K('TABLE')+' '+L(this.table.tableid);
	if(this.databaseid) s += ' '+K('FROM')+' '+L(this.databaseid);
	return s;
}
yy.ShowCreateTable.prototype.execute = function (databaseid) {
	var db = alasql.databases[this.databaseid || databaseid];
	var table = db.tables[this.table.tableid];
	var self = this;
	if(table) {
		var s = K('CREATE')+' '+K('TABLE')+' '+L(this.table.tableid)+' (';
		var ss = [];
		if(table.columns) {
			table.columns.forEach(function(col){
				var a = L(col.columnid)+' '+K(col.dbtypeid);
				if(col.dbsize) a += '('+N(col.dbsize)+')';
				if(col.primarykey) a += ' '+K('PRIMARY')+' '+K('KEY');
				// TODO extend
				ss.push(a); 
			});
			s += ss.join(', ');
		};
		s += ')';
		return s;
	} else {
		throw new Error('There is no such table "'+this.table.tableid+'"');
	}
};


/*
//
// SET for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/

yy.SetVariable = function (params) { return yy.extend(this, params); }
yy.SetVariable.prototype.toString = function() {
	var s = K('SET')+' ';
	s += K(this.variable)+' '+(this.value?'ON':'OFF');
	return s;
}

yy.SetVariable.prototype.execute = function (databaseid,cb) {
	var val = this.value;
	if(val == 'ON') val = true;
	else if(val == 'OFF') val = false;

	alasql.options[this.variable] = val;
	// if(typeof this.autocommit != 'undefined') {
	// 	alasql.options.autocommit = this.autocommit;
	// }
	var res = 1;
	if(cb) res=cb(res);
	return res;
};



// Console functions
/*
alasql.con = {
	results:{}
};

alasql.con.open = function(el) {
	// For browser only
	if (typeof exports === 'object') return;

	// Find parent element
	el = el || document.getElementById('alasql-con') || document.getElementsByTagName('body');
	if(!el) {throw new Error('Cannot fid element for console.')}

	var conel = document.createElement('div');
	conel.style.width = "1000px";
	conel.style.height = "320px";

	alasql.con.conel = conel;

	var lenta = document.createElement('div');
	lenta.style.width = "1000px";
	lenta.style.height = "200px";
	lenta.style.overflow = "scroll";
	alasql.con.lenta = lenta;

	var inpel = document.createElement('div');
	inpel.style.width = "1000px";
	inpel.style.height = "100px";
	inpel.style.contentEditable = true;
	inpel.innerHTML = 'command ';
	alasql.con.inpel = inpel;

	conel.appendChild(lenta);
	conel.appendChild(inpel);
	el.appendChild(conel);
};

alasql.con.clear = function() {
	// For browser only
	if (typeof exports === 'object') return;

	alasql.con.conel.innerHTML = '';
};

alasql.con.close = function() {
	// For browser only
	if (typeof exports === 'object') return;

	alasql.con.conel.removeChild(alasql.con.lenta);
	alasql.con.conel.removeChild(alasql.con.inel);
	alasql.con.conel.parentElement.removeChild(conel);
};

alasql.con.log = function() {
		// For browser only
	if (typeof exports === 'object') {
		console.log.bind(console).apply(this, arguments);
	} else {
		var s = '<div>';
		s += Array.prototype.slice.call(arguments, 0).map(function(arg){
			return arg.toString();
		}).join(' ');
		s += '</div>';
		alasql.con.conel.innerHTML += s;
	};

};
*/
alasql.test = function(name, times, fn) {
	if(arguments.length == 0) {
		alasql.log(alasql.con.results);
		return;
	} else if(arguments.length == 1) {
		var tm = Date.now();
		fn();
		alasql.con.log(Date.now()-tm);
		return;
	} 

	if(arguments.length == 2) {
		fn = times;
		times = 1;
	}

	var tm = Date.now();
	for(var i=0;i<times;i++) fn();
	alasql.con.results[name] = Date.now()-tm;
};

// Console
// alasql.log = function(sql, params) {
// 	var res;
// 	if(typeof sql == "string") {
// 		res = alasql(sql, params);
// 	} else {
// 		res = sql;
// 	};
// 	if(res instanceof Array) {
// 		if(console.table) {
// 			console.table(res);		
// 		} else {
// 			console.log(res);
// 		}
// 	} else {
// 		console.log(res);				
// 	}
// };

// Console
alasql.log = function(sql, params) {
	var olduseid = alasql.useid;
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	}

	var res;
	if(typeof sql == "string") {
		res = alasql(sql, params);
	} else {
		res = sql;
	};

	// For Node and console.output
	if(target == 'console' || typeof exports == 'object') {
		if(typeof sql == 'string' && alasql.options.logprompt) console.log(olduseid+'>',sql);

		if(res instanceof Array) {
			if(console.table) {
				// For Chrome and other consoles
				console.table(res);		
			} else {
				// Add print procedure
				console.log(JSONtoString(res));
			}
		} else {
			console.log(JSONtoString(res));				
		}

	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}

		}

		var s = '';

		if(typeof sql == 'string' && alasql.options.logprompt) {
//			s += '<p>'+olduseid+'&gt;&nbsp;'+alasql.pretty(sql)+'</p>';
			s += '<pre><code>'+alasql.pretty(sql)+'</code></pre>';
		}

		if(res instanceof Array) {
			if(res.length == 0) {
				s += '<p>[ ]</p>'
			} else if(typeof res[0] != 'object' || res[0] instanceof Array) {
				for(var i=0,ilen=res.length;i<ilen;i++) {
					s += '<p>'+loghtml(res[i])+'</p>';
				}
			} else {
				s += loghtml(res);
			}
		} else {
			s += loghtml(res);
		}
		el.innerHTML += s;
	}
};

alasql.clear = function() {
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	};

	if(target == 'console' || typeof exports == 'object') {
		if(console.clear) {
			console.clear();
		} else {
			// Something todo in Node
		}
	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML = '';		
	}
}

alasql.write = function(s) {
//	console.log('write',s);
	var target = alasql.options.logtarget;
	// For node other
	if(typeof exports == 'object') {
		target = 'console';
	};

	if(target == 'console' || typeof exports == 'object') {
		if(console.log) {
			console.log(s);
		} else {
			// Something todo in Node
		}
	} else {
		var el;
		if(target == 'output') {
			el = document.getElementsByTagName('output')[0];
		} else {
			if(typeof target == 'string') {
				el = document.getElementById(target);
			} else {
				// in case of DOM
				el = target;
			}
		}
		el.innerHTML += s;		
	}
}

function loghtml(res) {
//	console.log(res); 
	var s  = '';
	if(typeof res == 'undefined') {
		s += 'undefined';
	} else if(res instanceof Array) {
		s += '<style>';
		s += 'table {border:1px black solid; border-collapse: collapse; border-spacing: 0px;}';
		s += 'td,th {border:1px black solid; padding-left:5px; padding-right:5px}';
		s += 'th {background-color: #EEE}';
		s += '</style>';
		s += '<table>';
		var cols = [];			
		for(colid in res[0]) {
			cols.push(colid);
		}
		s += '<tr><th>#';
		cols.forEach(function(colid){
			s += '<th>'+colid;
		});
		for(var i=0,ilen=res.length;i<ilen;i++) {
			s += '<tr><th>'+(i+1);
			cols.forEach(function(colid){
				s += '<td> ';
				if(+res[i][colid] == +res[i][colid]) {
					s += '<div style="text-align:right">';
					if(typeof res[i][colid] == 'undefined') s += 'NULL';
					else s += res[i][colid];
					s += '</div>';
				} else {
					if(typeof res[i][colid] == 'undefined') {
						s += 'NULL';
					} else if (typeof res[i][colid] == 'string') {
						s += res[i][colid];
					} else s += JSONtoString(res[i][colid]);
//					s += res[i][colid];
				};
			});
		}

		s += '</table>';
	} else {
		s += '<p>'+JSONtoString(res)+'</p>';
	}
		// if () {}

		// 		if(typeof res == 'object') {
		// 			s += '<p>'+JSON.stringify(res)+'</p>';
		// 		} else {
		// 		}
	return s;
};



function scrollTo(element, to, duration) {
    if (duration <= 0) return;
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;

    setTimeout(function() {
        if (element.scrollTop==to) return;
        element.scrollTop = element.scrollTop + perTick;
        scrollTo(element, to, duration - 10);
    }, 10);
}

alasql.prompt = function(el, useidel, firstsql) {
	if(typeof exports == 'object') {
		throw new Error('The functionality of prompt is not realized for Node.js');
	};
	var prompti = 0;
	if(typeof el == 'string') el = document.getElementById(el);
	if(typeof useidel == 'string') useidel = document.getElementById(useidel);
	useidel.textContent = alasql.useid;

	if(firstsql) {
		alasql.prompthistory.push(firstsql);
		prompti = alasql.prompthistory.length;
		try {
			var tm = Date.now();
			alasql.log(firstsql);
			alasql.write('<p style="color:blue">'+(Date.now()-tm)+' ms</p>');
		} catch (err) {
			alasql.write('<p>'+olduseid+'&gt;&nbsp;<b>'+sql+'</b></p>');
			alasql.write('<p style="color:red">'+err+'<p>');
		}
	};

	var y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
	scrollTo(document.getElementsByTagName('body')[0],y,500);

	el.onkeydown = function(event) {
		if(event.which == 13) {
			var sql = el.value;
			var olduseid = alasql.useid;
			el.value = '';
			alasql.prompthistory.push(sql);
			prompti = alasql.prompthistory.length;
			try {
				var tm = Date.now();
				alasql.log(sql);
				alasql.write('<p style="color:blue">'+(Date.now()-tm)+' ms</p>');
			} catch (err) {
				alasql.write('<p>'+olduseid+'&gt;&nbsp;'+alasql.pretty(sql, false)+'</p>');
				alasql.write('<p style="color:red">'+err+'<p>');
			}
			el.focus();
//			console.log(el.getBoundingClientRect().top);
			useidel.textContent = alasql.useid;
			var y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;
			scrollTo(document.getElementsByTagName('body')[0],y,500);
		} else if(event.which == 38) {
			prompti--; if(prompti<0) prompti = 0;
			if(alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}

		} else if(event.which == 40) {
			prompti++; 
			if(prompti>=alasql.prompthistory.length) {
				prompti = alasql.prompthistory.length;
				el.value = '';
			} else if(alasql.prompthistory[prompti]) {
				el.value = alasql.prompthistory[prompti];
				event.preventDefault();
			}
		}

	}
}





/*
//
// Commit for Alasql.js
// Date: 01.12.2014
// (c) 2014, Andrey Gershun
//
*/
yy.Begin = function (params) { return yy.extend(this, params); }
yy.Begin.prototype.toString = function() {
	return K('BEGIN');
}

yy.Begin.prototype.execute = function (databaseid,params, cb) {
	var res = 1;
	if(alasql.databases[alasql.useid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].begin(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if(cb) cb(res);
	return res;
};

yy.Commit = function (params) { return yy.extend(this, params); }
yy.Commit.prototype.toString = function() {
	return K('COMMIT');
}

yy.Commit.prototype.execute = function (databaseid,params, cb) {
	var res = 1;
	if(alasql.databases[alasql.useid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].commit(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if(cb) cb(res);
	return res;
};

yy.Rollback = function (params) { return yy.extend(this, params); }
yy.Rollback.prototype.toString = function() {
	return K('ROLLBACK');
}

yy.Rollback.prototype.execute = function (databaseid,params,cb) {
	var res = 1;
	if(alasql.databases[alasql.useid].engineid) {
		return alasql.engines[alasql.databases[alasql.useid].engineid].rollback(databaseid, cb);
	} else {
		// alasql commit!!!
	}
	if(cb) cb(res);
	return res;
};


//
// into functions
//
// (c) 2014 Andrey Gershun
//

alasql.into.SQL = function(filename, opts, data, columns, cb) {
	var res;
	if(typeof filename == 'object') {
		opts = filename;
		filename = "";
	}
	var opt = {};
	alasql.utils.extend(opt, opts);
	if(typeof opt.tableid == 'undefined') {
		throw new Error('Table for INSERT TO is not defined.');
	};

	var s = '';
	if(columns.length == 0) {
		if(typeof data[0] == "object") {
			columns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});
		} else {
			// What should I do?
			// columns = [{columnid:"_"}];
		}
	}

	for(var i=0,ilen=data.length;i<ilen;i++) {
		s += 'INSERT INTO '+opts.tableid +'(';
		s += columns.map(function(col){return col.columnid}).join(",");
		s += ') VALUES (';
		s += columns.map(function(col){
			var val = data[i][col.columnid];
			if(col.typeid) {
				if(col.typeid == 'STRING' || col.typeid == 'VARCHAR' ||  
					col.typeid == 'NVARCHAR' || col.typeid == 'CHAR' || col.typeid == 'NCHAR') {
					val = "'"+escapeqq(val)+"'";
				}
			} else {
				if(typeof val == 'string') {
					val = "'"+escapeqq(val)+"'";					
				}
			}
			return val;
		});		
		s += ');\n';
	}
//	if(filename === '') {
//		res = s;
//	} else {
//		res = data.length;
	res = alasql.utils.saveFile(filename,s);
	if(cb) res = cb(res);
	return res;
};

alasql.into.HTML = function(selector, opts, data, columns, cb) {
	var res = 1;
	if(typeof exports == 'object') {
		var opt = {};
		alasql.utils.extend(opt, opts);

		var sel = document.querySelector(selector);
		if(!sel) {
			throw new Error('Selected HTML element is not found');
		};	

		if(columns.length == 0) {
			if(typeof data[0] == "object") {
				columns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});
			} else {
				// What should I do?
				// columns = [{columnid:"_"}];
			}
		}

		var tbe = document.createElement('table');
		var thead = document.createElement('thead');
		tbe.appendChild(thead);
		if(opt.headers) {
			var tre = document.createElement('tr');
			for(var i=0;i<columns.length;i++){
				var the = document.createElement('th');
				the.textContent = columns[i].columnid;
				tre.appendChild(the);
			}
			thead.appendChild(tre);
		}

		var tbody = document.createElement('tbody');
		tbe.appendChild(tbody);
		for(var j=0;j<data.length;j++){
			var tre = document.createElement('tr');
			for(var i=0;i<columns.length;i++){
				var the = document.createElement('td');
				the.textContent = data[j][columns[i].columnid];
				tre.appendChild(the);
			}
			tbody.appendChild(tre);
		};
		alasql.utils.domEmptyChildren(sel);
	//	console.log(tbe,columns);
		sel.appendChild(tbe);
	}
	if(cb) res = cb(res);
	return res;
};

alasql.into.JSON = function(filename, opts, data, columns, cb) {
	var res = 1;
	var s = JSON.stringify(data);
	alasql.utils.saveFile(filename,s);
	if(cb) res = cb(res);
	return res;
};

alasql.into.TXT = function(filename, opts, data, columns, cb) {
	// If columns is empty
	if(columns.length == 0 && data.length > 0) {
		columns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});
	}
	if(typeof filename == 'object') {
		opts = filename;
		filename = null;
	}

	var res = data.length;
	var s = '';
	if(data.length > 0) {
		var key = columns[0].columnid;
		s += data.map(function(d){
			return d[key];
		}).join('\n');
	}
//	if(filename) {
		alasql.utils.saveFile(filename,s);
//	} else {
//		if(typeof exports == 'object') {
//			process.stdout.write(s);
//		} else {
//		console.log(s);
//		};
//	}
	if(cb) res = cb(res);
	return res;
};

alasql.into.TAB = alasql.into.TSV = function(filename, opts, data, columns, cb) {
	var opt = {};
	alasql.utils.extend(opt, opts);
	opt.separator = '\t';
	return alasql.into.CSV(filename, opt, data, columns, cb);
}

alasql.into.CSV = function(filename, opts, data, columns, cb) {
	if(columns.length == 0 && data.length > 0) {
		columns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});
	}
	if(typeof filename == 'object') {
		opts = filename;
		filename = null;
	}

	var opt = {};
	opt.separator = ',';
	opt.quote = '"';
	alasql.utils.extend(opt, opts);
	var res = data.length;
	var s = '';
	if(opt.headers) {
		s += columns.map(function(col){
			return col.columnid;
		}).join(opt.separator)+'\n';
	}

	data.forEach(function(d, idx){
		s += columns.map(function(col){
			var s = d[col.columnid];
			s = (s+"").replace(new RegExp('\\'+opt.quote,"g"),'""');
			if((s+"").indexOf(opt.separator) > -1 || (s+"").indexOf(opt.quote) > -1) s = opt.quote + s + opt.quote; 
			return s;
		}).join(opt.separator)+'\n';	
	});
	if(filename) {
		alasql.utils.saveFile(filename,s);
	} else {
		console.log(s);
	}
	if(cb) res = cb(res);
	return res;
};

alasql.into.XLSX = function(filename, opts, data, columns, cb) {
	if(columns.length == 0 && data.length > 0) {
		columns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});
	}

	if(typeof exports == 'object') {
		var XLSX = require('xlsx');
	} else {
		var XLSX = window.XLSX;
	};

	var opt = {sheetid:'Sheet1',headers:true};
	alasql.utils.extend(opt, opts);

	var res = data.length;
	var cells = {};
	var wb = {SheetNames:[], Sheets:{}};
	wb.SheetNames.push(opt.sheetid);
	wb.Sheets[opt.sheetid] = cells;

	wb.Sheets[opt.sheetid]['!ref'] = 'A1:'+alasql.utils.xlsnc(columns.length)+(data.length+2);
	var i = 1;

	if(opt.headers) {
		columns.forEach(function(col, idx){
			cells[alasql.utils.xlsnc(idx)+""+i] = {v:col.columnid};
		});
		i++;
	}

	for(var j=0;j<data.length;j++) {
		columns.forEach(function(col, idx){
			cells[alasql.utils.xlsnc(idx)+""+i] = {v:data[j][col.columnid]};
		});		
		i++;
	}

//	console.log(wb);

	if(typeof exports == 'object') {
		XLSX.writeFile(wb, filename);
	} else {
		//console.log(wb);
		var wopts = { bookType:'xlsx', bookSST:false, type:'binary' };
		var wbout = XLSX.write(wb,wopts);

		function s2ab(s) {
		  var buf = new ArrayBuffer(s.length);
		  var view = new Uint8Array(buf);
		  for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
		  return buf;
		}
		/* the saveAs call downloads a file on the local machine */
//		saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), '"'+filename+'"')
//		saveAs(new Blob([s2ab(wbout)],{type:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}), filename)
//		saveAs(new Blob([s2ab(wbout)],{type:"application/vnd.ms-excel"}), '"'+filename+'"');
		saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), filename);
	}


	// data.forEach(function(d){
	// 	s += columns.map(function(col){
	// 		return d[col.columnid];
	// 	}).join(opts.separator)+'\n';	
	// });
	// alasql.utils.saveFile(filename,s);
	if(cb) res = cb(res);
	return res;
};


/*
//
// FROM functions Alasql.js
// Date: 11.12.2014
// (c) 2014, Andrey Gershun
//
*/

alasql.from.HTML = function(selector, opts, cb, idx, query) {
	var opt = {};
	alasql.utils.extend(opt, opts);

	var sel = document.querySelector(selector);
	if(!sel && sel.tagName != "TABLE") {
		throw new Error('Selected HTML element is not TABLE');
	};	

	var res = [];
	var headers = opt.headers;

	if(headers && !(headers instanceof Array)) {
		headers = [];
		var ths = sel.querySelector("thead tr").childNodes;
		for(var i=0;i<ths.length;i++){
			if(!(ths.item(i).style.display == "none" && opt.skipdisplaynone)) {
				headers.push(ths.item(i).textContent);
			} else {
				headers.push(undefined);
			}
		}
	}
//	console.log(headers);

	var trs = sel.querySelectorAll("tbody tr");

	for(var j=0;j<trs.length;j++) {
		var tds = trs.item(j).childNodes;
		var r = {};
		for(var i=0;i<tds.length;i++){
			if(!(tds.item(i).style.display == "none" && opt.skipdisplaynone)) {
				if(headers) {
					r[headers[i]] = tds.item(i).textContent;
				} else {
					r[i] = tds.item(i).textContent;
	//				console.log(r);
				}
			}
		}
		res.push(r);
	}
//console.log(res);
	if(cb) res = cb(res, idx, query);
	return res;
}


alasql.from.RANGE = function(start, finish, cb, idx, query) {
	var res = [];
	for(i=start;i<=finish;i++) res.push(i);
	if(cb) res = cb(res, idx, query);
	return res;
}

// Read data from any file
alasql.from.FILE = function(filename, opts, cb, idx, query) {
	if(typeof filename == 'string') {
		fname = filename;
	} else if(filename instanceof Event) {
		fname = filename.target.files[0].name;
	} else {
		throw new Error("Wrong usage of FILE() function");
	}
	var parts = fname.split('.');
//	console.log("parts",parts,parts[parts.length-1]);
	var ext = parts[parts.length-1].toUpperCase();
//	console.log("ext",ext);
	if(alasql.from[ext]) {
//		console.log(ext);
		return alasql.from[ext](filename, opts, cb, idx, query);
	} else {
		throw new Error('Cannot recognize file type for loading');
	}
};


// Read JSON file

alasql.from.JSON = function(filename, opts, cb, idx, query) {
	var res;
	//console.log('cb',cb);
	alasql.utils.loadFile(filename,!!cb,function(data){
		res = JSON.parse(data);	
		if(cb) res = cb(res, idx, query);
	});
	return res;
};

alasql.from.TXT = function(filename, opts, cb, idx, query) {
	var res;
	alasql.utils.loadFile(filename,!!cb,function(data){
		res = data.split(/\r?\n/);
		for(var i=0, ilen=res.length; i<ilen;i++) {
			if(res[i] == +res[i]) res[i] = +res[i];
			res[i] = [res[i]];
		}
		if(cb) res = cb(res, idx, query);
	});
	return res;
};

alasql.from.TAB = alasql.from.TSV = function(filename, opts, cb, idx, query) {
	if(!opts) opts = {};
	opts.separator = '\t';
	return alasql.from.CSV(filename, opts, cb, idx, query);
};

alasql.from.CSV = function(filename, opts, cb, idx, query) {
	var opt = {
		separator: ',',
		quote: '"'
	};
	alasql.utils.extend(opt, opts);
	var res;
	alasql.utils.loadFile(filename,!!cb,function(text){

		var delimiterCode = opt.separator.charCodeAt(0);
		var quoteCode = opt.quote.charCodeAt(0);

      	var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === quoteCode) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === quoteCode) {
	              if (text.charCodeAt(i + 1) !== quoteCode) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.substring(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.substring(j, I - k);
	        }
	        return text.substring(j);
	      }

	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }

	        if(opt.headers) {
	        	if(n == 0) {
					if(typeof opt.headers == 'boolean') {
		        		hs = a;
					} else if(opt.headers instanceof Array) {
						hs = opt.headers;
		        		var r = {};
		        		hs.forEach(function(h,idx){
		        			r[h] = a[idx];
							if(r[h] == +r[h]) r[h] = +r[h];
		        		});
						rows.push(r);
					}

	        	} else {
	        		var r = {};
	        		hs.forEach(function(h,idx){
	        			r[h] = a[idx];
						if(r[h] == +r[h]) r[h] = +r[h];
	        		});
	        		rows.push(r);
	        	}
	        	n++;
	        } else {
	    	    rows.push(a);
	    	}
	      }

	      res = rows;

		if(opt.headers) {
			if(query && query.sources && query.sources[idx]) {
				var columns = query.sources[idx].columns = [];
				hs.forEach(function(h){
					columns.push({columnid:h});
				});
			};
		};

/*
if(false) {
		res = data.split(/\r?\n/);
		if(opt.headers) {
			if(query && query.sources && query.sources[idx]) {
				var hh = [];
				if(typeof opt.headers == 'boolean') {
					hh = res.shift().split(opt.separator);
				} else if(opt.headers instanceof Array) {
					hh = opt.headers;
				}
				var columns = query.sources[idx].columns = [];
				hh.forEach(function(h){
					columns.push({columnid:h});
				});
				for(var i=0, ilen=res.length; i<ilen;i++) {
					var a = res[i].split(opt.separator);
					var b = {};
					hh.forEach(function(h,j){
						b[h] = a[j];
					});
					res[i] = b;
				}
//				console.log(res[0]);
			}	
		} else {
			for(var i=0, ilen=res.length; i<ilen;i++) {
				res[i] = res[i].split(opt.separator);
			}
		}

};
*/
		if(cb) res = cb(res, idx, query);
	});
	return res;
};


alasql.from.XLS = function(filename, opts, cb, idx, query) {
	if(typeof exports === 'object') {
		var X = require('xlsjs');
	} else {
		var X = window.XLS;
		if(!X) {
			throw new Error('XLS library is not attached');
		}
	}
	return XLSXLSX(X,filename, opts, cb, idx, query);
};

alasql.from.XLSX = function(filename, opts, cb, idx, query) {
	if(typeof exports === 'object') {
		var X = require('xlsx');
	} else {
		var X = window.XLSX;
		if(!X) {
			throw new Error('XLSX library is not attached');
		}
	}
	return XLSXLSX(X,filename, opts, cb, idx, query);
};

function XLSXLSX(X,filename, opts, cb, idx, query) {
	var opt = {};
	if(!opts) opts = {};
	alasql.utils.extend(opt, opts);
	var res;

	alasql.utils.loadBinaryFile(filename,!!cb,function(data){

//	function processData(data) {
		var workbook = X.read(data,{type:'binary'});
//		console.log(workbook);
		var sheetid;
		if(typeof opt.sheetid == 'undefined') {
			sheetid = workbook.SheetNames[0];
		} else {
			sheetid = opt.sheetid;
		};
		var range;
		if(typeof opt.range == 'undefined') {
			range = workbook.Sheets[sheetid]['!ref'];
		} else {
			range = opt.range;
			if(workbook.Sheets[sheetid][range]) range = workbook.Sheets[sheetid][range];
		};
		var rg = range.split(':');
		var col0 = rg[0].match(/[A-Z]+/)[0];
		var row0 = rg[0].match(/[0-9]+/)[0];
		var col1 = rg[1].match(/[A-Z]+/)[0];
		var row1 = rg[1].match(/[0-9]+/)[0];
//		console.log(114,rg,col0,col1,row0,row1);

		var hh = {};
		for(var j=alasql.utils.xlscn(col0);j<=alasql.utils.xlscn(col1);j++){
			var col = alasql.utils.xlsnc(j);
			if(opt.headers) {
				if(workbook.Sheets[sheetid][col+""+row0]) {
					hh[col] = workbook.Sheets[sheetid][col+""+row0].v;
				} else {
					hh[col] = col;
				}
			} else {
				hh[col] = col;
			}
		}
		var res = [];
		if(opt.headers) row0++;
		for(var i=row0;i<=row1;i++) {
			var row = {};
			for(var j=alasql.utils.xlscn(col0);j<=alasql.utils.xlscn(col1);j++){
				var col = alasql.utils.xlsnc(j);
				if(workbook.Sheets[sheetid][col+""+i]) {
					row[hh[col]] = workbook.Sheets[sheetid][col+""+i].v;
				}
			}
			res.push(row);
		}

		if(cb) res = cb(res, idx, query);
	}, function(err){
		throw err;
	});

	return res;
};



/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Help = function (params) { return yy.extend(this, params); }
yy.Help.prototype.toString = function() {
	var s = K('HELP');
	if(this.subject) s += ' '+L(this.subject);
	return s;
}

// Help string
helpdocs = [
	{command:'ALTER TABLE table RENAME TO table'},
	{command:'ALTER TABLE table ADD COLUMN column coldef'},
	{command:'ALTER TABLE table MODIFY COLUMN column coldef'},
	{command:'ALTER TABLE table RENAME COLUMN column TO column'},
	{command:'ALTER TABLE table DROP column'},
	{command:'ATTACH engine DATABASE database'},
	{command:'ASSERT value'},
	{command:'BEGIN [TRANSACTION]'},
	{command:'COMMIT [TRANSACTION]'},
	{command:'CREATE [engine] DATABASE [IF NOT EXISTS] database'},
	{command:'CREATE TABLE [IF NOT EXISTS] table (column definitions)'},
	{command:'DELETE FROM table [WHERE expression]'},
	{command:'DETACH DATABASE database'},
	{command:'DROP [engine] DATABASE [IF EXISTS] database'},
	{command:'DROP TABLE [IF EXISTS] table'},
	{command:'INSERT INTO table VALUES value,...'},
	{command:'INSERT INTO table DEFAULT VALUES'},
	{command:'INSERT INTO table SELECT select'},
	{command:'HELP [subject]'},
	{command:'ROLLBACK [TRANSACTION]'},
	{command:'SELECT [modificator] columns [INTO table] [FROM table,...] [[mode] JOIN [ON] [USING]] [WHERE ] [GROUP BY] [HAVING] [ORDER BY] '},
	{command:'SET option value'},
	{command:'SHOW [engine] DATABASES'},
	{command:'SHOW TABLES'},
	{command:'SHOW CREATE TABLE table'},
	{command:'UPDATE table SET column1 = expression1, ... [WHERE expression]'},
	{command:'USE [DATABASE] database'},
	{command:'expression'},
	{command:'See also <a href="http://github/agershun/alasq">http://github/agershun/alasq</a> for more information'}
];

// execute
yy.Help.prototype.execute = function (databaseid, params, cb) {
	var ss = [];
	if(!this.subject) {
		ss = helpdocs;
	} else {
		ss.push('See also <a href="http://github/agershun/alasq">http://github/agershun/alasq</a> for more information');
	}
	if(cb) ss = cb(ss);
	return ss;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Print = function (params) { return yy.extend(this, params); }
yy.Print.prototype.toString = function() {
	var s = K('PRINT');
	if(this.statement) s += ' '+this.statement.toString();
	return s;
}

/**
 Print result of select statement or expression
*/
yy.Print.prototype.execute = function (databaseid,params,cb) {
//	console.log(this.url);
	var res, s;

	if(this.statement) {
		s = this.statement.execute(databaseid,params);
	} else {
		s = '';
	}
	s = JSONtoString(s);

	console.log(s);

	if(cb) res = cb(res);
	return res;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Source = function (params) { return yy.extend(this, params); }
yy.Source.prototype.toString = function() {
	var s = K('SOURCE');
	if(this.url) s += ' '+S('\''+this.url+'\'');
	return s;
}

// SOURCE FILE
yy.Source.prototype.execute = function (databaseid,params,cb) {
//	console.log(this.url);
	var res;
	loadFile(this.url, !!cb, function(data){
//		console.log(data);
//		res = 1;
		res = alasql(data);
		if(cb) res = cb(res);
		return res;
	}, function(err){
		throw err;
	});
	return res;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Require = function (params) { return yy.extend(this, params); }
yy.Require.prototype.toString = function() {
	var s = K('REQUIRE');
	if(this.paths && this.paths.length > 0) {
		s += this.paths.map(function(path){
			return path.toString()
		}).join(',');
	}
	return s;
}

// SOURCE FILE
yy.Require.prototype.execute = function (databaseid,params,cb) {
//	console.log(this.url);
	var res = 0;
	var ss = '';
	if(this.paths.length > 0) {
		if(typeof importScripts == 'function') {

		} else if(typeof exports == 'objects') {
			this.paths.forEach(function(path){
				require(path);
			});
		} else {

		}
		// this.paths.forEach(function(path){
		// 	loadFile(path, !!cb, function(data){
		// 		ss += ';'+data;
		// 		res++;
		// 		if(res < this.paths.length) return;
		// 		console.log('REQUIRE:',ss);
		// 		if(cb) res = cb(res);
		// 	}, function(err){
		// 		throw err;
		// 	});
		// });
	}
	return res;
};


/*
//
// HELP for Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

yy.Assert = function (params) { return yy.extend(this, params); }
yy.Source.prototype.toString = function() {
	var s = K('ASSERT');
	if(this.value) s += ' '+JSON.stringify(this.value);
	return s;
}

// SOURCE FILE
yy.Assert.prototype.execute = function (databaseid) {
//	console.log(alasql.res, this.value);
	if(!deepEqual(alasql.res,this.value)) {
//		if(this.message) {
//			throw this.
//		} else {
			throw new Error((this.message||'Assert wrong')+': '+JSON.stringify(alasql.res)+' == '+JSON.stringify(this.value));
//		}
	}
	return 1;
};


//
// 91websql.js
// WebSQL database support
// (c) 2014, Andrey Gershun
//

var WEBSQL = alasql.engines.WEBSQL = function (){};

WEBSQL.createDatabase = function(wdbid, args, dbid, cb){
	var res = 1;
	var wdb = openDatabase(wdbid, args[0], args[1], args[2]);
	if(this.dbid) {
		var db = alasql.createDatabase(this.dbid);
		db.engineid = 'WEBSQL';
		db.wdbid = wdbid;
		sb.wdb = db;
	}
	if(!wdb) {
		throw new Error('Cannot create WebSQL database "'+databaseid+'"')
	}
	if(cb) cb(res);
	return res;
};

WEBSQL.dropDatabase = function(databaseid){
	throw new Error('This is impossible to drop WebSQL database.');
};

WEBSQL.attachDatabase = function(databaseid, dbid, cb){
	var res = 1;
	if(alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "'+dbid+'" because it already exists');
	};
	alasqlopenDatabase(databaseid, args[0], args[1], args[2]);
	return res;
}




//
// 91websql.js
// 
//
//

var IDB = alasql.engines.INDEXEDDB = function (){};

IDB.showDatabases = function(like,cb) {
	// console.log('showDatabases',arguments);
	var request = indexedDB.webkitGetDatabaseNames();
	request.onsuccess = function(event) {
		var dblist = event.target.result;
		var res = [];
		if(like) {
			var relike = new RegExp((like.value).replace(/\%/g,'.*'),'g');
		}
		for(var i=0;i<dblist.length;i++) {
			if(!like || dblist[i].match(relike)) {
				res.push({databaseid: dblist[i]});
			}
		};
		cb(res);
	};
};

IDB.createDatabase = function(ixdbid, args, ifnotexists, dbid, cb){
	var request1 = indexedDB.webkitGetDatabaseNames();
	request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(dblist.contains(ixdbid)){
			if(ifnotexists) {
				cb(0);
				return;
			} else {		
				throw new Error('IndexedDB: Cannot create new database "'+ixdbid+'" because it already exists');
			}
		};

		var request2 = window.indexedDB.open(ixdbid,1);
		request2.onsuccess = function(event) {
			event.target.result.close();
			cb(1);
		};
	};
	// }
};

IDB.dropDatabase = function(ixdbid, ifexists, cb){
	var request1 = indexedDB.webkitGetDatabaseNames();
	request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(!dblist.contains(ixdbid)){
			if(ifexists) {
				cb(0);
				return;
			} else {
				throw new Error('IndexedDB: Cannot drop new database "'+ixdbid+'" because it does not exist');
			}
		};
		var request2 = indexedDB.deleteDatabase(ixdbid);
		request2.onsuccess = function(event) {
//			console.log('dropped');
			if(cb) cb(1);
		}
	};
};

IDB.attachDatabase = function(ixdbid, dbid, args, cb) {
	var request1 = indexedDB.webkitGetDatabaseNames();
		request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(!dblist.contains(ixdbid)){
			throw new Error('IndexedDB: Cannot attach database "'+ixdbid+'" because it does not exist');
		};
		var request2 = indexedDB.open(ixdbid);
		request2.onsuccess = function(event) {
			var ixdb = event.target.result;
			var db = new alasql.Database(dbid || ixdbid);
			db.engineid = "INDEXEDDB";
			db.ixdbid = ixdbid;
			db.tables = [];
		  	var tblist = ixdb.objectStoreNames;
			for(var i=0;i<tblist.length;i++){
				db.tables[tblist[i]] = {};
			};

		// if(!alasql.options.autocommit) {
		// if(db.tables){
		// 	for(var tbid in db.tables) {
		// 		db.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
		// 	}
		// 	}
		// }
			event.target.result.close();		
			cb(1);
		};
	};
};


IDB.createTable = function(databaseid, tableid, ifnotexists, cb) {
//	console.log(arguments);
	var ixdbid = alasql.databases[databaseid].ixdbid;
//	console.log(ixdbid);
	var request1 = indexedDB.webkitGetDatabaseNames();
		request1.onsuccess = function(event) {
		var dblist = event.target.result;
		if(!dblist.contains(ixdbid)){
			throw new Error('IndexedDB: Cannot create table in database "'+ixdbid+'" because it does not exist');
		};
		var request2 = indexedDB.open(ixdbid);
		request2.onversionchange = function(event) {
//			console.log('onversionchange');
			event.target.result.close();
		};
		request2.onsuccess = function(event) {
			var version = event.target.result.version;
			event.target.result.close();

			var request3 = indexedDB.open(ixdbid, version+1);
			request3.onupgradeneeded = function(event) {
				var ixdb = event.target.result;
//				console.log(ixdb);
				var store = ixdb.createObjectStore(tableid, {autoIncrement:true});
//				console.log(store);
			};
			request3.onsuccess = function(event) {
//				console.log('opened');
				event.target.result.close();
				cb(1);
			};
			request3.onerror = function(event){
				throw event;
//				console.log('error');
			}
			request3.onblocked = function(event){
				throw new Error('Cannot create table "'+tableid+'" because database "'+databaseid+'"  is blocked');
//				console.log('blocked');
			}				
		};
	};
};

IDB.dropTable = function (databaseid, tableid, ifexists, cb) {
	var ixdbid = alasql.databases[databaseid].ixdbid;

	var request1 = indexedDB.webkitGetDatabaseNames();
		request1.onsuccess = function(event) {
		var dblist = event.target.result;
	
		if(!dblist.contains(ixdbid)){
			throw new Error('IndexedDB: Cannot drop table in database "'+ixdbid+'" because it does not exist');
		};
		var request2 = indexedDB.open(ixdbid);
		request2.onversionchange = function(event) {
			event.target.result.close();
		};
		request2.onsuccess = function(event) {
			var version = event.target.result.version;
			event.target.result.close();

			var request3 = indexedDB.open(ixdbid, version+1);
			request3.onupgradeneeded = function(event) {
				var ixdb = event.target.result;
				if(ixdb.objectStoreNames.contains(tableid)) {
					ixdb.deleteObjectStore(tableid);
					delete alasql.databases[databaseid].tables[tableid];
				} else {
					if(!ifexists) {
						throw new Error('IndexedDB: Cannot drop table "'+tableid+'" because it is not exist');
					}
				}
//				var store = ixdb.createObjectStore(tableid);
				// console.log('deleted');
			};
			request3.onsuccess = function(event) {
				// console.log('opened');
				event.target.result.close();
				cb(1);
			};
			request3.onerror = function(event){
				throw event;
//				console.log('error');
			}
			request3.onblocked = function(event){
				throw new Error('Cannot drop table "'+tableid+'" because database "'+databaseid+'" is blocked');
//				console.log('blocked');
			}				
		};
	};
}

// IDB.intoTable = function(databaseid, tableid, value, cb) {
// //	console.log('intoTable',databaseid, tableid, value, cb);
// 	var ixdbid = alasql.databases[databaseid].ixdbid;
// 	var request1 = indexedDB.open(ixdbid);
// 	request1.onsuccess = function(event) {
// 		var ixdb = event.target.result;
// 		var tx = ixdb.transaction([tableid],"readwrite");
// 		var tb = tx.objectStore(tableid);
// 		// console.log(tb.keyPath);
// 		// console.log(tb.indexNames);
// 		// console.log(tb.autoIncrement);
// 		for(var i=0, ilen = value.length;i<ilen;i++) {
// 			tb.add(value[i]);
// 		};
// 		tx.oncomplete = function() {
// 			ixdb.close();
// //			console.log('indexeddb',203,ilen);
// 			cb(ilen);
// 		}
// 	};

// 	// var tb = LS.get(lsdbid+'.'+tableid);
// 	// if(!tb) tb = [];
// 	// tb = tb.concat(value);
// 	// LS.set(lsdbid+'.'+tableid, tb);
// //	console.log(lsdbid+'.'+tableid, tb);
// //	console.log(localStorage[lsdbid+'.'+tableid]);
// 	// if(cb) cb(res);
// 	// return res;
// };

IDB.intoTable = function(databaseid, tableid, value, columns, cb) {
	// console.log(arguments);
	// console.trace();
//	console.log('intoTable',databaseid, tableid, value, cb);
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request1 = indexedDB.open(ixdbid);
	request1.onsuccess = function(event) {
		var ixdb = event.target.result;
		var tx = ixdb.transaction([tableid],"readwrite");
		var tb = tx.objectStore(tableid);
		// console.log(tb.keyPath);
		// console.log(tb.indexNames);
		// console.log(tb.autoIncrement);
		for(var i=0, ilen = value.length;i<ilen;i++) {
			tb.add(value[i]);
		};
		tx.oncomplete = function() {
			ixdb.close();
//			console.log('indexeddb',203,ilen);
			cb(ilen);
		}
	};

	// var tb = LS.get(lsdbid+'.'+tableid);
	// if(!tb) tb = [];
	// tb = tb.concat(value);
	// LS.set(lsdbid+'.'+tableid, tb);
//	console.log(lsdbid+'.'+tableid, tb);
//	console.log(localStorage[lsdbid+'.'+tableid]);
	// if(cb) cb(res);
	// return res;
};


IDB.fromTable = function(databaseid, tableid, cb, idx, query){
	// console.log(arguments);
	// console.trace();
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request = window.indexedDB.open(ixdbid);
	request.onsuccess = function(event) {
	  	var res = [];
	  	var ixdb = event.target.result;
//	  	console.log(444,ixdb, tableid, ixdbid);
	  	var tx = ixdb.transaction([tableid]);
	  	var store = tx.objectStore(tableid);
	  	var cur = store.openCursor();
//	  	console.log(cur);
	  	cur.onblocked = function(event) {
//	  		console.log('blocked');
	  	}
	  	cur.onerror = function(event) {
//	  		console.log('error');
	  	}
	  	cur.onsuccess = function(event) {
//	  		console.log('success');
		  	var cursor = event.target.result;
//		  		console.log(222,event);
//		  		console.log(333,cursor);
		  	if(cursor) {
		  		res.push(cursor.value);
		  		cursor.continue();
		  	} else {
//		  		console.log(555, res,idx,query);
		  		ixdb.close();
		  		cb(res, idx, query);
		  	}
	  	}
	}		
}

IDB.deleteFromTable = function(databaseid, tableid, wherefn,params, cb){
	// console.log(arguments);
	// console.trace();
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request = window.indexedDB.open(ixdbid);
	request.onsuccess = function(event) {
	  	var res = [];
	  	var ixdb = event.target.result;
//	  	console.log(444,ixdb, tableid, ixdbid);
	  	var tx = ixdb.transaction([tableid], 'readwrite');
	  	var store = tx.objectStore(tableid);
	  	var cur = store.openCursor();
	  	var num = 0;
//	  	console.log(cur);
	  	cur.onblocked = function(event) {
//	  		console.log('blocked');
	  	}
	  	cur.onerror = function(event) {
//	  		console.log('error');
	  	}
	  	cur.onsuccess = function(event) {
//	  		console.log('success');
		  	var cursor = event.target.result;
//		  		console.log(222,event);
//		  		console.log(333,cursor);
		  	if(cursor) {
		  		if((!wherefn) || wherefn(cursor.value,params)) {
//		  		console.log(cursor);
		  			cursor.delete();
		  			num++;
		  		}
		  		cursor.continue();
		  	} else {
//		  		console.log(555, res,idx,query);
		  		ixdb.close();
		  		cb(num);
		  	}
	  	}
	}		
}

IDB.updateTable = function(databaseid, tableid, assignfn, wherefn, params, cb){
	// console.log(arguments);
	// console.trace();
	var ixdbid = alasql.databases[databaseid].ixdbid;
	var request = window.indexedDB.open(ixdbid);
	request.onsuccess = function(event) {
	  	var res = [];
	  	var ixdb = event.target.result;
//	  	console.log(444,ixdb, tableid, ixdbid);
	  	var tx = ixdb.transaction([tableid], 'readwrite');
	  	var store = tx.objectStore(tableid);
	  	var cur = store.openCursor();
	  	var num = 0;
//	  	console.log(cur);
	  	cur.onblocked = function(event) {
//	  		console.log('blocked');
	  	}
	  	cur.onerror = function(event) {
//	  		console.log('error');
	  	}
	  	cur.onsuccess = function(event) {
//	  		console.log('success');
		  	var cursor = event.target.result;
//		  		console.log(222,event);
//		  		console.log(333,cursor);
		  	if(cursor) {
		  		if((!wherefn) || wherefn(cursor.value,params)) {
		  		//console.log(cursor);
		  			var r = cursor.value;
					assignfn(r,params);
				//	console.log('update 363',r);
		  			cursor.update(r);
		  			num++;
		  		}
		  		cursor.continue();
		  	} else {
//		  		console.log(555, res,idx,query);
		  		ixdb.close();
		  		cb(num);
		  	}
	  	}
	}		
}



//
// 91localstorage.js
// localStorage and DOM-Storage engine
// Date: 09.12.2014
// (c) Andrey Gershun
//

var LS = alasql.engines.LOCALSTORAGE = function (){};

LS.get = function(key) {
	var s = localStorage.getItem(key);
	if(typeof s == "undefined") return;
	var v = undefined;
	try {
		v = JSON.parse(s); 
	} catch(err) {
		throw new Error('Cannot parse JSON '+s);
	}
	return v;
};

LS.set = function(key, value){
	if(typeof value == 'undefined') localStorage.removeItem(key);
	else localStorage.setItem(key,JSON.stringify(value)); 
}

LS.createDatabase = function(lsdbid, args, ifnotexists, dbid, cb){
	var res = 1;
	var ls = LS.get('alasql');
	if(!(ifnotexists && ls && ls.databases && ls.databases[lsdbid])) {
		if(!ls) ls = {databases:{}};
		if(ls.databases && ls.databases[lsdbid]) {
			throw new Error('localStorage: Cannot create new database "'+lsdbid+'" because it already exists');
		}
		ls.databases[lsdbid] = true;
		LS.set('alasql',ls);
		LS.set(lsdbid,{databaseid:lsdbid, tables:{}});
	} else {
		res = 0;
	}
	if(cb) cb(res);
	return res;
};

LS.dropDatabase = function(lsdbid, ifexists, cb){
	var res = 1;
	var ls = LS.get('alasql');
	if(!(ifexists && ls && ls.databases && !ls.databases[lsdbid])) {
		if(!ls) {
			if(!ifexists) {
				throw new Error('There are no alasql databases in localStorage');
			} else {
				return 0;
			}
		};
//		console.log(999,ls.databases,ls.databases[lsdbid], lsdbid);	
		if(ls.databases && !ls.databases[lsdbid]) {
			throw new Error('localStorage: Cannot drop database "'+lsdbid+'" because there is no such database');
		}
		delete ls.databases[lsdbid];
		LS.set('alasql',ls);
		
		var db = LS.get(lsdbid);
		for(var tableid in db.tables) {
//			console.log('remove',lsdbid,tableid);
			localStorage.removeItem(lsdbid+'.'+tableid);
		}

		localStorage.removeItem(lsdbid);
	} else {
		res = 0;
	}
	if(cb) cb(res);
	return res;
};


LS.attachDatabase = function(lsdbid, dbid, args, cb){
	var res = 1;
	if(alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "'+dbid+'" because it already exists');
	};
	var db = new alasql.Database(dbid || lsdbid);
	db.engineid = "LOCALSTORAGE";
	db.lsdbid = lsdbid;
	db.tables = LS.get(lsdbid).tables;
	// IF AUTOCOMMIT IS OFF then copy data to memory
	if(!alasql.options.autocommit) {
		if(db.tables){
			for(var tbid in db.tables) {
				db.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
			}
		}
	}
	if(cb) res = cb(res);
	return res;
};

LS.showDatabases = function(like, cb) {
	var res = [];
	var ls = LS.get('alasql');
	if(like) {
		var relike = new RegExp(like.value.replace(/\%/g,'.*'),'g');
	}
	if(ls && ls.databases) {
		for(dbid in ls.databases) {
			res.push({databaseid: dbid});
		};
		if(like && res && res.length > 0) {
			res = res.filter(function(d){
				return d.databaseid.match(relike);
			});
		}		
	};
	if(cb) cb(res);
	return res;
};

LS.createTable = function(databaseid, tableid, ifnotexists, cb) {
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var tb = LS.get(lsdbid+'.'+tableid);
	var res = 1;

	if(tb && !ifnotexists) {
		throw new Error('Table "'+tableid+'" alsready exists in localStorage database "'+lsdbid+'"');
	};
	var lsdb = LS.get(lsdbid);
	var table = alasql.databases[databaseid].tables[tableid];
	lsdb.tables[tableid] = {columns:table.columns};

	LS.set(lsdbid, lsdb);
	LS.set(lsdbid+'.'+tableid, []);

	if(cb) cb(res);
	return res;
}

LS.dropTable = function (databaseid, tableid, ifexists, cb) {
	var res = 1;
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var lsdb = LS.get(lsdbid);
	if(!ifexists && !lsdb.tables[tableid]) {
		throw new Error('Cannot drop table "'+tableid+'" in localStorage, because it does not exist');
	};
	delete lsdb.tables[tableid];
	LS.set(lsdbid, lsdb);
	localStorage.removeItem(lsdbid+'.'+tableid);
	if(cb) cb(res);
	return res;
}

LS.fromTable = function(databaseid, tableid, cb, idx, query) {
//	console.log(998, databaseid, tableid, cb);
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var res = LS.get(lsdbid+'.'+tableid);
	if(cb) res = cb(res, idx, query);
	return res;
};

LS.intoTable = function(databaseid, tableid, value, columns, cb) {
//	console.log('intoTable',databaseid, tableid, value, cb);
	var lsdbid = alasql.databases[databaseid].lsdbid;
	var res = value.length;
	var tb = LS.get(lsdbid+'.'+tableid);
	if(!tb) tb = [];
	tb = tb.concat(value);
	LS.set(lsdbid+'.'+tableid, tb);
//	console.log(lsdbid+'.'+tableid, tb);
//	console.log(localStorage[lsdbid+'.'+tableid]);
//console.log(165,res);
	if(cb) cb(res);
//console.log(167,res);
	return res;
};

LS.loadTableData = function(databaseid, tableid){
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	db.tables[tableid].data = LS.get(lsdbid+'.'+tableid);
}

LS.saveTableData = function(databaseid, tableid){
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	LS.set(lsdbid+'.'+tableid,db.tables[tableid].data);
	db.tables[tableid].data = null;
}

LS.commit = function(databaseid, cb) {
//	console.log('COMMIT');
	var db = alasql.databases[databaseid];
	var lsdbid = alasql.databases[databaseid].lsdbid;
	lsdb = {databaseid:lsdbid, tables:{}};
	if(db.tables) {
		for(var tbid in db.tables) {
			lsdb.tables[tbid] = {columns: db.tables[tbid].columns};
			LS.set(lsdbid+'.'+tbid, db.tables[tbid].data);
		};
	}
	LS.set(lsdbid,lsdb);
	return 1;
};

LS.begin = LS.commit;

LS.rollback = function(databaseid, cb) {
	var db = alasql.databases[databaseid];
	db.dbversion++;
//	console.log(db.dbversion)
	var lsdbid = alasql.databases[databaseid].lsdbid;
	lsdb = LS.get(lsdbid);
//	if(!alasql.options.autocommit) {
		if(lsdb.tables){
			for(var tbid in lsdb.tables) {
				var tb = new alasql.Table({columns: db.tables[tbid].columns});
				extend(tb,lsdb.tables[tbid]);
				lsdb.tables[tbid] = tb;
				if(!alasql.options.autocommit) {
					lsdb.tables[tbid].data = LS.get(db.lsdbid+'.'+tbid);
				}
				lsdb.tables[tbid].indexColumns();

				// index columns
				// convert types
			}
		}
//	}
	delete alasql.databases[databaseid];
	alasql.databases[databaseid] = new alasql.Database(databaseid);
	extend(alasql.databases[databaseid], lsdb);
	alasql.databases[databaseid].engineid = 'LOCALSTORAGE';
//console.log(999, alasql.databases[databaseid]);
}




//
// 91websql.js
// WebSQL database support
// (c) 2014, Andrey Gershun
//

var SQLITE = alasql.engines.SQLITE = function (){};

SQLITE.createDatabase = function(wdbid, args, ifnotexists, dbid, cb){
	throw new Error('Connot create SQLITE database in memory. Attach it.');
};

SQLITE.dropDatabase = function(databaseid){
	throw new Error('This is impossible to drop SQLite database. Detach it.');
};

SQLITE.attachDatabase = function(sqldbid, dbid, args, cb){
	var res = 1;
	if(alasql.databases[dbid]) {
		throw new Error('Unable to attach database as "'+dbid+'" because it already exists');
	};

	if(args[0] && args[0] instanceof yy.StringValue) {
		alasql.utils.loadBinaryFile(args[0].value,true,function(data){
			var db = new alasql.Database(dbid || sqldbid);
			db.engineid = "SQLITE";
			db.sqldbid = sqldbid;
			var sqldb = db.sqldb = new SQL.Database(data);
			db.tables = [];
			var tables = sqldb.exec("SELECT * FROM sqlite_master WHERE type='table'")[0].values;

		   	tables.forEach(function(tbl){
		   		db.tables[tbl[1]] = {};
		   		var columns = db.tables[tbl[1]].columns = [];
		   		var ast = alasql.parse(tbl[4]);
//		   		console.log(ast);
		   		var coldefs = ast.statements[0].columns;
		   		if(coldefs && coldefs.length>0) {
		   			coldefs.forEach(function(cd){
			   			columns.push(cd);
		   			});
		   		}

		   	});
//		   	console.log(35,db.tables);

		   	cb(1);
		}, function(err){
			throw new Error('Cannot open SQLite database file "'+args[0].value+'"');
		})
		return res;
	} else {
		throw new Error('Cannot attach SQLite database without a file');
	};

	return res;
}

SQLITE.fromTable = function(databaseid, tableid, cb, idx, query){
	var data = alasql.databases[databaseid].sqldb.exec("SELECT * FROM "+tableid);
	var columns = query.sources[idx].columns = [];
	if(data[0].columns.length > 0) {
		data[0].columns.forEach(function(columnid) {
			columns.push({columnid:columnid});
		});
	};

	var res = [];
	if(data[0].values.length > 0) {
		data[0].values.forEach(function(d){
			var r = {};
			columns.forEach(function(col,idx){
				r[col.columnid] = d[idx];
			});
			res.push(r);
		});
	}
	if(cb) cb(res, idx, query);
};

SQLITE.intoTable = function(databaseid, tableid, value, columns, cb) {
	var sqldb = alasql.databases[databaseid].sqldb;
	for(var i=0, ilen = value.length;i<ilen;i++) {
		var s = "INSERT INTO "+tableid+" (";
		var d = value[i];
		var keys = Object.keys(d);
		s += keys.join(",");
		s += ") VALUES (";
		s += keys.map(function(k){
			v = d[k];
			if(typeof v == 'string') v = "'"+v+"'";
			return v;
		}).join(",");
		s += ")";
		sqldb.exec(s);
	};
	var res = ilen;
	if(cb) cb(res);
	return res;
};




if((typeof exports != 'object') && (typeof importScripts != 'function')) {


/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 2014-11-29
 *
 * By Eli Grey, http://eligrey.com
 * License: X11/MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
	"use strict";
	// IE <10 is explicitly unsupported
	if (typeof navigator !== "undefined" &&
	    /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = "download" in save_link
		, click = function(node) {
			var event = doc.createEvent("MouseEvents");
			event.initMouseEvent(
				"click", true, false, view, 0, 0, 0, 0, 0
				, false, false, false, false, 0, null
			);
			node.dispatchEvent(event);
		}
		, webkit_req_fs = view.webkitRequestFileSystem
		, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		, fs_min_size = 0
		// See https://code.google.com/p/chromium/issues/detail?id=375297#c7 and
		// https://github.com/eligrey/FileSaver.js/commit/485930a#commitcomment-8768047
		// for the reasoning behind the timeout and revocation flow
		, arbitrary_revoke_timeout = 500 // in ms
		, revoke = function(file) {
			var revoker = function() {
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			};
			if (view.chrome) {
				revoker();
			} else {
				setTimeout(revoker, arbitrary_revoke_timeout);
			}
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, FileSaver = function(blob, name) {
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, blob_changed = false
				, object_url
				, target_view
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					// don't create more object URLs than needed
					if (blob_changed || !object_url) {
						object_url = get_URL().createObjectURL(blob);
					}
					if (target_view) {
						target_view.location.href = object_url;
					} else {
						var new_tab = view.open(object_url, "_blank");
						if (new_tab == undefined && typeof safari !== "undefined") {
							//Apple do not allow window.open, see http://bit.ly/1kZffRI
							view.location.href = object_url
						}
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
					revoke(object_url);
				}
				, abortable = function(func) {
					return function() {
						if (filesaver.readyState !== filesaver.DONE) {
							return func.apply(this, arguments);
						}
					};
				}
				, create_if_not_found = {create: true, exclusive: false}
				, slice
			;
			filesaver.readyState = filesaver.INIT;
			if (!name) {
				name = "download";
			}
			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				save_link.href = object_url;
				save_link.download = name;
				click(save_link);
				filesaver.readyState = filesaver.DONE;
				dispatch_all();
				revoke(object_url);
				return;
			}
			// Object and web filesystem URLs have a problem saving in Google Chrome when
			// viewed in a tab, so I force save with application/octet-stream
			// http://code.google.com/p/chromium/issues/detail?id=91158
			// Update: Google errantly closed 91158, I submitted it again:
			// https://code.google.com/p/chromium/issues/detail?id=389642
			if (view.chrome && type && type !== force_saveable_type) {
				slice = blob.slice || blob.webkitSlice;
				blob = slice.call(blob, 0, blob.size, force_saveable_type);
				blob_changed = true;
			}
			// Since I can't be sure that the guessed media type will trigger a download
			// in WebKit, I append .download to the filename.
			// https://bugs.webkit.org/show_bug.cgi?id=65440
			if (webkit_req_fs && name !== "download") {
				name += ".download";
			}
			if (type === force_saveable_type || webkit_req_fs) {
				target_view = view;
			}
			if (!req_fs) {
				fs_error();
				return;
			}
			fs_min_size += blob.size;
			req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
				fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
					var save = function() {
						dir.getFile(name, create_if_not_found, abortable(function(file) {
							file.createWriter(abortable(function(writer) {
								writer.onwriteend = function(event) {
									target_view.location.href = file.toURL();
									filesaver.readyState = filesaver.DONE;
									dispatch(filesaver, "writeend", event);
									revoke(file);
								};
								writer.onerror = function() {
									var error = writer.error;
									if (error.code !== error.ABORT_ERR) {
										fs_error();
									}
								};
								"writestart progress write abort".split(" ").forEach(function(event) {
									writer["on" + event] = filesaver["on" + event];
								});
								writer.write(blob);
								filesaver.abort = function() {
									writer.abort();
									filesaver.readyState = filesaver.DONE;
								};
								filesaver.readyState = filesaver.WRITING;
							}), fs_error);
						}), fs_error);
					};
					dir.getFile(name, {create: false}, abortable(function(file) {
						// delete file if it already exists
						file.remove();
						save();
					}), abortable(function(ex) {
						if (ex.code === ex.NOT_FOUND_ERR) {
							save();
						} else {
							fs_error();
						}
					}));
				}), fs_error);
			}), fs_error);
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name) {
			return new FileSaver(blob, name);
		}
	;
	FS_proto.abort = function() {
		var filesaver = this;
		filesaver.readyState = filesaver.DONE;
		dispatch(filesaver, "abort");
	};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module !== null) {
  module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
  define([], function() {
    return saveAs;
  });
}


/*
//
// Last part of Alasql.js
// Date: 03.11.2014
// (c) 2014, Andrey Gershun
//
*/

// This is a final part of Alasql

// FileSaveAs
	alasql.utils.saveAs = saveAs;

};

// Create default database
new Database("alasql");

// Set default database
alasql.use("alasql");

return alasql;
}));


if (typeof importScripts === 'function') {
	// console.log(99);
	self.onmessage = function(event) {	
		// console.log(2);
		alasql(event.data.sql,event.data.params, function(data){
			// console.log(3);
			postMessage(data);
		}); 
	}	
}


//# sourceMappingURL=alasql.js.map