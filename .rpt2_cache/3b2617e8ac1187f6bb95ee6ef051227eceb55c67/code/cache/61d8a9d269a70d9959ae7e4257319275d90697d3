{"code":"import options from './17options';\r\nvar yy = {};\r\nvar mem = {};\r\nexport default (alasql = function (sql, params, cb, scope) {\r\n    params = params || [];\r\n    if (typeof importScripts !== 'function' && mem.webworker) {\r\n        var id = mem.lastid++;\r\n        mem.buffer[id] = cb;\r\n        mem.webworker.postMessage({ id: id, sql: sql, params: params });\r\n        return;\r\n    }\r\n    if (arguments.length === 0) {\r\n        // Without arguments - Fluent interface\r\n        return new yy.Select({\r\n            columns: [new yy.Column({ columnid: '*' })],\r\n            from: [new yy.ParamValue({ param: 0 })]\r\n        });\r\n    }\r\n    else if (arguments.length === 1) {\r\n        // Access promise notation without using `.promise(...)`\r\n        if (sql.constructor === Array) {\r\n            return alasql.promise(sql);\r\n        }\r\n    }\r\n    // Avoid setting params if not needed even with callback\r\n    if (typeof params === 'function') {\r\n        scope = cb;\r\n        cb = params;\r\n        params = [];\r\n    }\r\n    if (typeof params !== 'object') {\r\n        params = [params];\r\n    }\r\n    // Standard interface\r\n    // alasql('#sql');\r\n    if (typeof sql === 'string' && sql[0] === '#' && typeof document === 'object') {\r\n        sql = document.querySelector(sql).textContent;\r\n    }\r\n    else if (typeof sql === 'object' && sql instanceof HTMLElement) {\r\n        sql = sql.textContent;\r\n    }\r\n    else if (typeof sql === 'function') {\r\n        // to run multiline functions\r\n        sql = sql.toString();\r\n        sql = (/\\/\\*([\\S\\s]+)\\*\\//m.exec(sql) || [\r\n            '',\r\n            'Function given as SQL. Plese Provide SQL string or have a /* ... */ syle comment with SQL in the function.',\r\n        ])[1];\r\n    }\r\n    // Run SQL\r\n    return alasql.exec(sql, params, cb, scope);\r\n});\r\n/**\r\n    Current version of alasql\r\n    @constant {string}\r\n*/\r\nalasql.version = 'PACKAGE_VERSION_NUMBER';\r\n/**\r\n    Debug flag\r\n    @type {boolean}\r\n*/\r\nalasql.debug = undefined; // Initial debug variable\r\noptions(alasql);\r\n/*only-for-browser/*\r\nvar require = function(){return null}; // as alasqlparser.js is generated, we can not \"remove\" referenses to\r\nvar __dirname = '';\r\n//*/\r\n"}
