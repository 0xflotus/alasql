{"code":"var hash = function (x) { return x; };\r\nexport default function options(alasql) {\r\n    // Initial parameters\r\n    var alasqlparser = require('./alasqlparser.js');\r\n    alasql.parser = alasqlparser.parser;\r\n    /**\r\n    Jison parser\r\n    */\r\n    //alasql.parser = alasqlparser;\r\n    /*/* This is not working :-/ * /\r\n    alasql.parser.parseError = function(str, hash) {\r\n        throw new Error('Have you used a reserved keyword without `escaping` it?\\n' + str);\r\n    };/*\r\n\n    /**\r\n    Jison parser\r\n    @param {string} sql SQL statement\r\n    @return {object} AST (Abstract Syntax Tree)\r\n\n    @todo Create class AST\r\n    @todo Add other parsers\r\n\n    @example\r\n    alasql.parse = function(sql) {\r\n        // My own parser here\r\n    }\r\n */\r\n    alasql.parse = function (sql) {\r\n        return alasqlparser.parse(alasql.utils.uncomment(sql));\r\n    };\r\n    /**\r\n    List of engines of external databases\r\n    @type {object}\r\n    @todo Create collection type\r\n */\r\n    alasql.engines = {};\r\n    /**\r\n    List of databases\r\n    @type {object}\r\n */\r\n    alasql.databases = {};\r\n    /**\r\n    Number of databases\r\n    @type {number}\r\n*/\r\n    alasql.databasenum = 0;\r\n    /**\r\n    Alasql options object\r\n */\r\n    alasql.options = {};\r\n    alasql.options.errorlog = false; // Log or throw error\r\n    alasql.options.valueof = false; // Use valueof in orderfn\r\n    alasql.options.dropifnotexists = false; // DROP database in any case\r\n    alasql.options.datetimeformat = 'sql'; // How to handle DATE and DATETIME types\r\n    // Another value is 'javascript'\r\n    alasql.options.casesensitive = true; // Table and column names are case sensitive and converted to lower-case\r\n    alasql.options.logtarget = 'output'; // target for log. Values: 'console', 'output', 'id' of html tag\r\n    alasql.options.logprompt = true; // Print SQL at log\r\n    alasql.options.progress = false; // Callback for async queries progress\r\n    // Default modifier\r\n    // values: RECORDSET, VALUE, ROW, COLUMN, MATRIX, TEXTSTRING, INDEX\r\n    alasql.options.modifier = undefined;\r\n    // How many rows to lookup to define columns\r\n    alasql.options.columnlookup = 10;\r\n    // Create vertex if not found\r\n    alasql.options.autovertex = true;\r\n    // Use dbo as current database (for partial T-SQL comaptibility)\r\n    alasql.options.usedbo = true;\r\n    // AUTOCOMMIT ON | OFF\r\n    alasql.options.autocommit = true;\r\n    // Use cache\r\n    alasql.options.cache = true;\r\n    // Compatibility flags\r\n    alasql.options.tsql = true;\r\n    alasql.options.mysql = true;\r\n    alasql.options.postgres = true;\r\n    alasql.options.oracle = true;\r\n    alasql.options.sqlite = true;\r\n    alasql.options.orientdb = true;\r\n    // for SET NOCOUNT OFF\r\n    alasql.options.nocount = false;\r\n    // Check for NaN and convert it to undefined\r\n    alasql.options.nan = false;\r\n    alasql.options.joinstar = 'overwrite'; // Option for SELECT * FROM a,b\r\n    //alasql.options.worker = false;\r\n    // Variables\r\n    alasql.vars = {};\r\n    alasql.declares = {};\r\n    alasql.prompthistory = [];\r\n    alasql.plugins = {}; // If plugin already loaded\r\n    alasql.from = {}; // FROM functions\r\n    alasql.into = {}; // INTO functions\r\n    alasql.fn = {};\r\n    alasql.aggr = {};\r\n    alasql.busy = 0;\r\n    // Cache\r\n    alasql.MAXSQLCACHESIZE = 10000;\r\n    alasql.DEFAULTDATABASEID = 'alasql';\r\n    /* WebWorker */\r\n    alasql.lastid = 0;\r\n    alasql.buffer = {};\r\n    /**\r\n  Select current database\r\n  @param {string} databaseid Selected database identificator\r\n */\r\n    alasql.use = function (databaseid) {\r\n        if (!databaseid) {\r\n            databaseid = alasql.DEFAULTDATABASEID;\r\n        }\r\n        if (alasql.useid === databaseid) {\r\n            return;\r\n        }\r\n        alasql.useid = databaseid;\r\n        var db = alasql.databases[alasql.useid];\r\n        alasql.tables = db.tables;\r\n        //\talasql.fn = db.fn;\r\n        db.resetSqlCache();\r\n        if (alasql.options.usedbo) {\r\n            alasql.databases.dbo = db; // Operator???\r\n        }\r\n    };\r\n    alasql.autoval = function (tablename, colname, getNext, databaseid) {\r\n        var db = databaseid ? alasql.databases[databaseid] : alasql.databases[alasql.useid];\r\n        if (!db.tables[tablename]) {\r\n            throw new Error('Tablename not found: ' + tablename);\r\n        }\r\n        if (!db.tables[tablename].identities[colname]) {\r\n            throw new Error('Colname not found: ' + colname);\r\n        }\r\n        if (getNext) {\r\n            return db.tables[tablename].identities[colname].value || null;\r\n        }\r\n        return (db.tables[tablename].identities[colname].value -\r\n            db.tables[tablename].identities[colname].step || null);\r\n    };\r\n    /**\r\n Run single SQL statement on current database\r\n */\r\n    alasql.exec = function (sql, params, cb, scope) {\r\n        // Avoid setting params if not needed even with callback\r\n        if (typeof params === 'function') {\r\n            scope = cb;\r\n            cb = params;\r\n            params = {};\r\n        }\r\n        delete alasql.error;\r\n        params = params || {};\r\n        if (alasql.options.errorlog) {\r\n            try {\r\n                return alasql.dexec(alasql.useid, sql, params, cb, scope);\r\n            }\r\n            catch (err) {\r\n                alasql.error = err;\r\n                if (cb) {\r\n                    cb(null, alasql.error);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return alasql.dexec(alasql.useid, sql, params, cb, scope);\r\n        }\r\n    };\r\n    /**\r\n Run SQL statement on specific database\r\n */\r\n    alasql.dexec = function (databaseid, sql, params, cb, scope) {\r\n        var db = alasql.databases[databaseid];\r\n        //\tif(db.databaseid != databaseid) console.trace('got!');\r\n        //\tconsole.log(3,db.databaseid,databaseid);\r\n        var hh;\r\n        // Create hash\r\n        if (alasql.options.cache) {\r\n            hh = hash(sql);\r\n            var statement = db.sqlCache[hh];\r\n            // If database structure was not changed since last time return cache\r\n            if (statement && db.dbversion === statement.dbversion) {\r\n                return statement(params, cb);\r\n            }\r\n        }\r\n        // Create AST\r\n        var ast = alasql.parse(sql);\r\n        if (!ast.statements) {\r\n            return;\r\n        }\r\n        if (0 === ast.statements.length) {\r\n            return 0;\r\n        }\r\n        else if (1 === ast.statements.length) {\r\n            if (ast.statements[0].compile) {\r\n                // Compile and Execute\r\n                var statement = ast.statements[0].compile(databaseid, params);\r\n                if (!statement) {\r\n                    return;\r\n                }\r\n                statement.sql = sql;\r\n                statement.dbversion = db.dbversion;\r\n                if (alasql.options.cache) {\r\n                    // Secure sqlCache size\r\n                    if (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {\r\n                        db.resetSqlCache();\r\n                    }\r\n                    db.sqlCacheSize++;\r\n                    db.sqlCache[hh] = statement;\r\n                }\r\n                var res = (alasql.res = statement(params, cb, scope));\r\n                return res;\r\n            }\r\n            else {\r\n                //\t\t\tconsole.log(ast.statements[0]);\r\n                alasql.precompile(ast.statements[0], alasql.useid, params);\r\n                var res = (alasql.res = ast.statements[0].execute(databaseid, params, cb, scope));\r\n                return res;\r\n            }\r\n        }\r\n        else {\r\n            // Multiple statements\r\n            if (cb) {\r\n                alasql.adrun(databaseid, ast, params, cb, scope);\r\n            }\r\n            else {\r\n                return alasql.drun(databaseid, ast, params, cb, scope);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n  Run multiple statements and return array of results sync\r\n */\r\n    alasql.drun = function (databaseid, ast, params, cb, scope) {\r\n        var useid = alasql.useid;\r\n        if (useid !== databaseid) {\r\n            alasql.use(databaseid);\r\n        }\r\n        var res = [];\r\n        for (var i = 0, ilen = ast.statements.length; i < ilen; i++) {\r\n            if (ast.statements[i]) {\r\n                if (ast.statements[i].compile) {\r\n                    var statement = ast.statements[i].compile(alasql.useid);\r\n                    res.push((alasql.res = statement(params, null, scope)));\r\n                }\r\n                else {\r\n                    alasql.precompile(ast.statements[i], alasql.useid, params);\r\n                    res.push((alasql.res = ast.statements[i].execute(alasql.useid, params)));\r\n                }\r\n            }\r\n        }\r\n        if (useid !== databaseid) {\r\n            alasql.use(useid);\r\n        }\r\n        if (cb) {\r\n            cb(res);\r\n        }\r\n        alasql.res = res;\r\n        return res;\r\n    };\r\n    /**\r\n  Run multiple statements and return array of results async\r\n */\r\n    alasql.adrun = function (databaseid, ast, params, cb, scope) {\r\n        var idx = 0;\r\n        var noqueries = ast.statements.length;\r\n        if (alasql.options.progress !== false) {\r\n            alasql.options.progress(noqueries, idx++);\r\n        }\r\n        //\talasql.busy++;\r\n        var useid = alasql.useid;\r\n        if (useid !== databaseid) {\r\n            alasql.use(databaseid);\r\n        }\r\n        var res = [];\r\n        function adrunone(data) {\r\n            if (data !== undefined) {\r\n                res.push(data);\r\n            }\r\n            var astatement = ast.statements.shift();\r\n            if (!astatement) {\r\n                if (useid !== databaseid) {\r\n                    alasql.use(useid);\r\n                }\r\n                cb(res);\r\n                //\t\t\talasql.busy--;\r\n                //\t\t\tif(alasql.busy<0) alasql.busy = 0;\r\n            }\r\n            else {\r\n                if (astatement.compile) {\r\n                    var statement = astatement.compile(alasql.useid);\r\n                    statement(params, adrunone, scope);\r\n                    if (alasql.options.progress !== false) {\r\n                        alasql.options.progress(noqueries, idx++);\r\n                    }\r\n                }\r\n                else {\r\n                    alasql.precompile(ast.statements[0], alasql.useid, params);\r\n                    astatement.execute(alasql.useid, params, adrunone);\r\n                    if (alasql.options.progress !== false) {\r\n                        alasql.options.progress(noqueries, idx++);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        adrunone(); /** @todo Check, why data is empty here */\r\n    };\r\n    /**\r\n Compile statement to JavaScript function\r\n @param {string} sql SQL statement\r\n @param {string} databaseid Database identificator\r\n @return {functions} Compiled statement functions\r\n*/\r\n    alasql.compile = function (sql, databaseid) {\r\n        databaseid = databaseid || alasql.useid;\r\n        var ast = alasql.parse(sql); // Create AST\r\n        if (1 === ast.statements.length) {\r\n            var statement = ast.statements[0].compile(databaseid);\r\n            statement.promise = function (params) {\r\n                return (new Promise(function (resolve, reject) {\r\n                    statement(params, function (data, err) {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        else {\r\n                            resolve(data);\r\n                        }\r\n                    });\r\n                }));\r\n            };\r\n            return statement;\r\n            /*/*\r\n        if(kind == 'value') {\r\n            return function(params,cb) {\r\n                var res = statementfn(params);\r\n                var key = Object.keys(res[0])[0];\r\n                if(cb) cb(res[0][key]);\r\n                return res[0][key];\r\n            };\r\n        } else  if(kind == 'single') {\r\n            return function(params,cb) {\r\n                var res = statementfn(params);\r\n                if(cb) cb(res[0]);\r\n                return res[0];\r\n            }\r\n        } else  if(kind == 'row') {\r\n            return function(params,cb) {\r\n                var res = statementfn(params,cb);\r\n                var a = [];\r\n                for(var key in res[0]) {\r\n                    a.push(res[0][key]);\r\n                };\r\n                if(cb) cb(a);\r\n                return a;\r\n            }\r\n        } else  if(kind == 'column') {\r\n            return function(params,cb) {\r\n                var res = statementfn(params,cb);\r\n                var ar = [];\r\n                var key = Object.keys(res)[0];\r\n                for(var i=0, ilen=res.length; i<ilen; i++){\r\n                    ar.push(res[i][key]);\r\n                }\r\n                if(cb) cb(ar);\r\n                return ar;\r\n            }\r\n        } else if(kind == 'array') {\r\n            return function(params,cb) {\r\n                var res = statementfn(params,cb);\r\n                res = flatArray(res);\r\n                if(cb) cb(res);\r\n                return res;\r\n            };\r\n        } else if(kind == 'matrix') {\r\n            return function(params,cb) {\r\n                var res = statementfn(params,cb);\r\n                res = arrayOfArrays(res);\r\n                if(cb) cb(res);\r\n                return res;\r\n            };\r\n        } else if(kind == 'collection') {\r\n            return statementfn;\r\n        } else {\r\n            return statementfn;\r\n        }\r\n*/\r\n        }\r\n        else {\r\n            throw new Error('Cannot compile, because number of statements in SQL is not equal to 1');\r\n        }\r\n    };\r\n    /*/*\r\n// // Default methods to exec SQL statements\r\n// alasql.run = alasql.exec = function (sql, params, cb) {\r\n// \treturn this.currentDatabase.exec(sql, params, cb);\r\n// };\r\n\n// Promised version of exec\r\n// alasql.aexec = function (sql, params) {\r\n// \tvar self = this;\r\n// \treturn new Promise(function(resolve, reject){\r\n// \t\tself.exec(sql,params,resolve);\r\n// \t});\r\n// };\r\n*/\r\n    /*/*\r\n// MSSQL-Like aliases\r\nalasql.query = function (sql, params, cb) {\r\n    var res = this.exec(sql, params);\r\n    if(cb) cb(res);\r\n    return res;\r\n};\r\n\nalasql.queryArray = function (sql, params, cb) {\r\n    var res = flatArray(this.exec(sql, params));\r\n    if(cb) cb(res);\r\n    return res;\r\n};\r\n\nalasql.querySingle = function (sql, params, cb) {\r\n    var res = this.exec(sql, params)[0];\r\n    if(cb) cb(res);\r\n    return res;\r\n};\r\n\nalasql.queryRow = function (sql, params, cb) {\r\n    var res = this.querySingle(sql, params);\r\n    var a = [];\r\n    for(var key in res) {\r\n        a.push(res[key]);\r\n    };\r\n    if(cb) cb(a);\r\n    return a;\r\n};\r\n\nalasql.queryValue = function (sql, params, cb) {\r\n    var res = this.exec(sql, params)[0];\r\n    var val = res[Object.keys(res)[0]];\r\n    if(cb) cb(val);\r\n    return val;\r\n    // TODO Refactor to query.columns\r\n};\r\n\nalasql.queryArrayOfArrays = function (sql, params, cb) {\r\n    var res = this.exec(sql, params);\r\n    var keys = Object.keys(res[0]);\r\n    var klen = keys.length;\r\n    var aa = [];\r\n    for(var i=0, ilen=res.length;i<ilen;i++) {\r\n        var r = res[i];\r\n        var a = [];\r\n        for(var k=0; k<klen;k++){\r\n            a.push(r[keys[k]]);\r\n        }\r\n        aa.push(a);\r\n    }\r\n\n    if(cb) cb(aa);\r\n    return aa;\r\n};\r\n*/\r\n    /*/*alasql.queryColumn = function (sql, params, cb) {\r\n    var res = this.exec(sql, params);\r\n    var keys = Object.keys(res[0]);\r\n    var klen = keys.length;\r\n    var aa = [];\r\n    for(var i=0, ilen=res.length;i<ilen;i++) {\r\n        var r = res[i];\r\n        var a = [];\r\n        for(var k=0; k<klen;k++){\r\n            a.push(r[keys[k]]);\r\n        }\r\n        aa.push(a);\r\n    }\r\n\n    if(cb) cb(aa);\r\n    return aa;\r\n};\r\n*/\r\n    /*/*\r\nalasql.value = alasql.queryValue;\r\nalasql.single = alasql.querySingle;\r\nalasql.row = alasql.queryRow;\r\nalasql.column = alasql.queryArray;\r\nalasql.array = alasql.queryArray;\r\nalasql.matrix = alasql.queryArrayOfArrays;\r\n*/\r\n}\r\n"}
